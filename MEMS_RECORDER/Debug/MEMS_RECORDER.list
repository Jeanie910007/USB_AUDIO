
MEMS_RECORDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb74  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800fd44  0800fd44  0001fd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff84  0800ff84  000206b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff84  0800ff84  0001ff84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff8c  0800ff8c  000206b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff8c  0800ff8c  0001ff8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff90  0800ff90  0001ff90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006b4  20000000  0800ff94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b930  200006b4  08010648  000206b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bfe4  08010648  0002bfe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024dff  00000000  00000000  000206e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000045c8  00000000  00000000  000454e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001700  00000000  00000000  00049ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001508  00000000  00000000  0004b1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027c82  00000000  00000000  0004c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018cb8  00000000  00000000  0007433a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df869  00000000  00000000  0008cff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0016c85b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069d0  00000000  00000000  0016c958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200006b4 	.word	0x200006b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fd2c 	.word	0x0800fd2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200006b8 	.word	0x200006b8
 800020c:	0800fd2c 	.word	0x0800fd2c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2f>:
 8000628:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800062c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000630:	bf24      	itt	cs
 8000632:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000636:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800063a:	d90d      	bls.n	8000658 <__aeabi_d2f+0x30>
 800063c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000640:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000644:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000648:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800064c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000650:	bf08      	it	eq
 8000652:	f020 0001 	biceq.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800065c:	d121      	bne.n	80006a2 <__aeabi_d2f+0x7a>
 800065e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000662:	bfbc      	itt	lt
 8000664:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000668:	4770      	bxlt	lr
 800066a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000672:	f1c2 0218 	rsb	r2, r2, #24
 8000676:	f1c2 0c20 	rsb	ip, r2, #32
 800067a:	fa10 f30c 	lsls.w	r3, r0, ip
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	bf18      	it	ne
 8000684:	f040 0001 	orrne.w	r0, r0, #1
 8000688:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800068c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000690:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000694:	ea40 000c 	orr.w	r0, r0, ip
 8000698:	fa23 f302 	lsr.w	r3, r3, r2
 800069c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a0:	e7cc      	b.n	800063c <__aeabi_d2f+0x14>
 80006a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006a6:	d107      	bne.n	80006b8 <__aeabi_d2f+0x90>
 80006a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006ac:	bf1e      	ittt	ne
 80006ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006b6:	4770      	bxne	lr
 80006b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop

080006c8 <__aeabi_uldivmod>:
 80006c8:	b953      	cbnz	r3, 80006e0 <__aeabi_uldivmod+0x18>
 80006ca:	b94a      	cbnz	r2, 80006e0 <__aeabi_uldivmod+0x18>
 80006cc:	2900      	cmp	r1, #0
 80006ce:	bf08      	it	eq
 80006d0:	2800      	cmpeq	r0, #0
 80006d2:	bf1c      	itt	ne
 80006d4:	f04f 31ff 	movne.w	r1, #4294967295
 80006d8:	f04f 30ff 	movne.w	r0, #4294967295
 80006dc:	f000 b972 	b.w	80009c4 <__aeabi_idiv0>
 80006e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e8:	f000 f806 	bl	80006f8 <__udivmoddi4>
 80006ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f4:	b004      	add	sp, #16
 80006f6:	4770      	bx	lr

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9e08      	ldr	r6, [sp, #32]
 80006fe:	4604      	mov	r4, r0
 8000700:	4688      	mov	r8, r1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d14b      	bne.n	800079e <__udivmoddi4+0xa6>
 8000706:	428a      	cmp	r2, r1
 8000708:	4615      	mov	r5, r2
 800070a:	d967      	bls.n	80007dc <__udivmoddi4+0xe4>
 800070c:	fab2 f282 	clz	r2, r2
 8000710:	b14a      	cbz	r2, 8000726 <__udivmoddi4+0x2e>
 8000712:	f1c2 0720 	rsb	r7, r2, #32
 8000716:	fa01 f302 	lsl.w	r3, r1, r2
 800071a:	fa20 f707 	lsr.w	r7, r0, r7
 800071e:	4095      	lsls	r5, r2
 8000720:	ea47 0803 	orr.w	r8, r7, r3
 8000724:	4094      	lsls	r4, r2
 8000726:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800072a:	0c23      	lsrs	r3, r4, #16
 800072c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000730:	fa1f fc85 	uxth.w	ip, r5
 8000734:	fb0e 8817 	mls	r8, lr, r7, r8
 8000738:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800073c:	fb07 f10c 	mul.w	r1, r7, ip
 8000740:	4299      	cmp	r1, r3
 8000742:	d909      	bls.n	8000758 <__udivmoddi4+0x60>
 8000744:	18eb      	adds	r3, r5, r3
 8000746:	f107 30ff 	add.w	r0, r7, #4294967295
 800074a:	f080 811b 	bcs.w	8000984 <__udivmoddi4+0x28c>
 800074e:	4299      	cmp	r1, r3
 8000750:	f240 8118 	bls.w	8000984 <__udivmoddi4+0x28c>
 8000754:	3f02      	subs	r7, #2
 8000756:	442b      	add	r3, r5
 8000758:	1a5b      	subs	r3, r3, r1
 800075a:	b2a4      	uxth	r4, r4
 800075c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000760:	fb0e 3310 	mls	r3, lr, r0, r3
 8000764:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000768:	fb00 fc0c 	mul.w	ip, r0, ip
 800076c:	45a4      	cmp	ip, r4
 800076e:	d909      	bls.n	8000784 <__udivmoddi4+0x8c>
 8000770:	192c      	adds	r4, r5, r4
 8000772:	f100 33ff 	add.w	r3, r0, #4294967295
 8000776:	f080 8107 	bcs.w	8000988 <__udivmoddi4+0x290>
 800077a:	45a4      	cmp	ip, r4
 800077c:	f240 8104 	bls.w	8000988 <__udivmoddi4+0x290>
 8000780:	3802      	subs	r0, #2
 8000782:	442c      	add	r4, r5
 8000784:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000788:	eba4 040c 	sub.w	r4, r4, ip
 800078c:	2700      	movs	r7, #0
 800078e:	b11e      	cbz	r6, 8000798 <__udivmoddi4+0xa0>
 8000790:	40d4      	lsrs	r4, r2
 8000792:	2300      	movs	r3, #0
 8000794:	e9c6 4300 	strd	r4, r3, [r6]
 8000798:	4639      	mov	r1, r7
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d909      	bls.n	80007b6 <__udivmoddi4+0xbe>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	f000 80eb 	beq.w	800097e <__udivmoddi4+0x286>
 80007a8:	2700      	movs	r7, #0
 80007aa:	e9c6 0100 	strd	r0, r1, [r6]
 80007ae:	4638      	mov	r0, r7
 80007b0:	4639      	mov	r1, r7
 80007b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b6:	fab3 f783 	clz	r7, r3
 80007ba:	2f00      	cmp	r7, #0
 80007bc:	d147      	bne.n	800084e <__udivmoddi4+0x156>
 80007be:	428b      	cmp	r3, r1
 80007c0:	d302      	bcc.n	80007c8 <__udivmoddi4+0xd0>
 80007c2:	4282      	cmp	r2, r0
 80007c4:	f200 80fa 	bhi.w	80009bc <__udivmoddi4+0x2c4>
 80007c8:	1a84      	subs	r4, r0, r2
 80007ca:	eb61 0303 	sbc.w	r3, r1, r3
 80007ce:	2001      	movs	r0, #1
 80007d0:	4698      	mov	r8, r3
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	d0e0      	beq.n	8000798 <__udivmoddi4+0xa0>
 80007d6:	e9c6 4800 	strd	r4, r8, [r6]
 80007da:	e7dd      	b.n	8000798 <__udivmoddi4+0xa0>
 80007dc:	b902      	cbnz	r2, 80007e0 <__udivmoddi4+0xe8>
 80007de:	deff      	udf	#255	; 0xff
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f040 808f 	bne.w	8000908 <__udivmoddi4+0x210>
 80007ea:	1b49      	subs	r1, r1, r5
 80007ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007f0:	fa1f f885 	uxth.w	r8, r5
 80007f4:	2701      	movs	r7, #1
 80007f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000800:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000804:	fb08 f10c 	mul.w	r1, r8, ip
 8000808:	4299      	cmp	r1, r3
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0x124>
 800080c:	18eb      	adds	r3, r5, r3
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x122>
 8000814:	4299      	cmp	r1, r3
 8000816:	f200 80cd 	bhi.w	80009b4 <__udivmoddi4+0x2bc>
 800081a:	4684      	mov	ip, r0
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1410 	mls	r4, lr, r0, r1
 8000828:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x14c>
 8000834:	192c      	adds	r4, r5, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x14a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80b6 	bhi.w	80009ae <__udivmoddi4+0x2b6>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e79f      	b.n	800078e <__udivmoddi4+0x96>
 800084e:	f1c7 0c20 	rsb	ip, r7, #32
 8000852:	40bb      	lsls	r3, r7
 8000854:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000858:	ea4e 0e03 	orr.w	lr, lr, r3
 800085c:	fa01 f407 	lsl.w	r4, r1, r7
 8000860:	fa20 f50c 	lsr.w	r5, r0, ip
 8000864:	fa21 f30c 	lsr.w	r3, r1, ip
 8000868:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800086c:	4325      	orrs	r5, r4
 800086e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000872:	0c2c      	lsrs	r4, r5, #16
 8000874:	fb08 3319 	mls	r3, r8, r9, r3
 8000878:	fa1f fa8e 	uxth.w	sl, lr
 800087c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000880:	fb09 f40a 	mul.w	r4, r9, sl
 8000884:	429c      	cmp	r4, r3
 8000886:	fa02 f207 	lsl.w	r2, r2, r7
 800088a:	fa00 f107 	lsl.w	r1, r0, r7
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b0>
 8000890:	eb1e 0303 	adds.w	r3, lr, r3
 8000894:	f109 30ff 	add.w	r0, r9, #4294967295
 8000898:	f080 8087 	bcs.w	80009aa <__udivmoddi4+0x2b2>
 800089c:	429c      	cmp	r4, r3
 800089e:	f240 8084 	bls.w	80009aa <__udivmoddi4+0x2b2>
 80008a2:	f1a9 0902 	sub.w	r9, r9, #2
 80008a6:	4473      	add	r3, lr
 80008a8:	1b1b      	subs	r3, r3, r4
 80008aa:	b2ad      	uxth	r5, r5
 80008ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b0:	fb08 3310 	mls	r3, r8, r0, r3
 80008b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008bc:	45a2      	cmp	sl, r4
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1da>
 80008c0:	eb1e 0404 	adds.w	r4, lr, r4
 80008c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008c8:	d26b      	bcs.n	80009a2 <__udivmoddi4+0x2aa>
 80008ca:	45a2      	cmp	sl, r4
 80008cc:	d969      	bls.n	80009a2 <__udivmoddi4+0x2aa>
 80008ce:	3802      	subs	r0, #2
 80008d0:	4474      	add	r4, lr
 80008d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008d6:	fba0 8902 	umull	r8, r9, r0, r2
 80008da:	eba4 040a 	sub.w	r4, r4, sl
 80008de:	454c      	cmp	r4, r9
 80008e0:	46c2      	mov	sl, r8
 80008e2:	464b      	mov	r3, r9
 80008e4:	d354      	bcc.n	8000990 <__udivmoddi4+0x298>
 80008e6:	d051      	beq.n	800098c <__udivmoddi4+0x294>
 80008e8:	2e00      	cmp	r6, #0
 80008ea:	d069      	beq.n	80009c0 <__udivmoddi4+0x2c8>
 80008ec:	ebb1 050a 	subs.w	r5, r1, sl
 80008f0:	eb64 0403 	sbc.w	r4, r4, r3
 80008f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008f8:	40fd      	lsrs	r5, r7
 80008fa:	40fc      	lsrs	r4, r7
 80008fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000900:	e9c6 5400 	strd	r5, r4, [r6]
 8000904:	2700      	movs	r7, #0
 8000906:	e747      	b.n	8000798 <__udivmoddi4+0xa0>
 8000908:	f1c2 0320 	rsb	r3, r2, #32
 800090c:	fa20 f703 	lsr.w	r7, r0, r3
 8000910:	4095      	lsls	r5, r2
 8000912:	fa01 f002 	lsl.w	r0, r1, r2
 8000916:	fa21 f303 	lsr.w	r3, r1, r3
 800091a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800091e:	4338      	orrs	r0, r7
 8000920:	0c01      	lsrs	r1, r0, #16
 8000922:	fbb3 f7fe 	udiv	r7, r3, lr
 8000926:	fa1f f885 	uxth.w	r8, r5
 800092a:	fb0e 3317 	mls	r3, lr, r7, r3
 800092e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000932:	fb07 f308 	mul.w	r3, r7, r8
 8000936:	428b      	cmp	r3, r1
 8000938:	fa04 f402 	lsl.w	r4, r4, r2
 800093c:	d907      	bls.n	800094e <__udivmoddi4+0x256>
 800093e:	1869      	adds	r1, r5, r1
 8000940:	f107 3cff 	add.w	ip, r7, #4294967295
 8000944:	d22f      	bcs.n	80009a6 <__udivmoddi4+0x2ae>
 8000946:	428b      	cmp	r3, r1
 8000948:	d92d      	bls.n	80009a6 <__udivmoddi4+0x2ae>
 800094a:	3f02      	subs	r7, #2
 800094c:	4429      	add	r1, r5
 800094e:	1acb      	subs	r3, r1, r3
 8000950:	b281      	uxth	r1, r0
 8000952:	fbb3 f0fe 	udiv	r0, r3, lr
 8000956:	fb0e 3310 	mls	r3, lr, r0, r3
 800095a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800095e:	fb00 f308 	mul.w	r3, r0, r8
 8000962:	428b      	cmp	r3, r1
 8000964:	d907      	bls.n	8000976 <__udivmoddi4+0x27e>
 8000966:	1869      	adds	r1, r5, r1
 8000968:	f100 3cff 	add.w	ip, r0, #4294967295
 800096c:	d217      	bcs.n	800099e <__udivmoddi4+0x2a6>
 800096e:	428b      	cmp	r3, r1
 8000970:	d915      	bls.n	800099e <__udivmoddi4+0x2a6>
 8000972:	3802      	subs	r0, #2
 8000974:	4429      	add	r1, r5
 8000976:	1ac9      	subs	r1, r1, r3
 8000978:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800097c:	e73b      	b.n	80007f6 <__udivmoddi4+0xfe>
 800097e:	4637      	mov	r7, r6
 8000980:	4630      	mov	r0, r6
 8000982:	e709      	b.n	8000798 <__udivmoddi4+0xa0>
 8000984:	4607      	mov	r7, r0
 8000986:	e6e7      	b.n	8000758 <__udivmoddi4+0x60>
 8000988:	4618      	mov	r0, r3
 800098a:	e6fb      	b.n	8000784 <__udivmoddi4+0x8c>
 800098c:	4541      	cmp	r1, r8
 800098e:	d2ab      	bcs.n	80008e8 <__udivmoddi4+0x1f0>
 8000990:	ebb8 0a02 	subs.w	sl, r8, r2
 8000994:	eb69 020e 	sbc.w	r2, r9, lr
 8000998:	3801      	subs	r0, #1
 800099a:	4613      	mov	r3, r2
 800099c:	e7a4      	b.n	80008e8 <__udivmoddi4+0x1f0>
 800099e:	4660      	mov	r0, ip
 80009a0:	e7e9      	b.n	8000976 <__udivmoddi4+0x27e>
 80009a2:	4618      	mov	r0, r3
 80009a4:	e795      	b.n	80008d2 <__udivmoddi4+0x1da>
 80009a6:	4667      	mov	r7, ip
 80009a8:	e7d1      	b.n	800094e <__udivmoddi4+0x256>
 80009aa:	4681      	mov	r9, r0
 80009ac:	e77c      	b.n	80008a8 <__udivmoddi4+0x1b0>
 80009ae:	3802      	subs	r0, #2
 80009b0:	442c      	add	r4, r5
 80009b2:	e747      	b.n	8000844 <__udivmoddi4+0x14c>
 80009b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009b8:	442b      	add	r3, r5
 80009ba:	e72f      	b.n	800081c <__udivmoddi4+0x124>
 80009bc:	4638      	mov	r0, r7
 80009be:	e708      	b.n	80007d2 <__udivmoddi4+0xda>
 80009c0:	4637      	mov	r7, r6
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0xa0>

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <CCA02M1_AUDIO_IN_Init>:
*       - 2 if PDM is used
* @param  AudioInit Init structure
* @retval BSP status
*/
__weak int32_t CCA02M1_AUDIO_IN_Init(uint32_t Instance, CCA02M1_AUDIO_Init_t* AudioInit)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b098      	sub	sp, #96	; 0x60
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  int32_t ret =  BSP_ERROR_NONE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d903      	bls.n	80009e4 <CCA02M1_AUDIO_IN_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;  
 80009dc:	f06f 0301 	mvn.w	r3, #1
 80009e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80009e2:	e13d      	b.n	8000c60 <CCA02M1_AUDIO_IN_Init+0x298>
  }
  else
  {
    /* Store the audio record context */
    AudioInCtx[Instance].Device          = AudioInit->Device;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	49a0      	ldr	r1, [pc, #640]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2064      	movs	r0, #100	; 0x64
 80009ee:	fb00 f303 	mul.w	r3, r0, r3
 80009f2:	440b      	add	r3, r1
 80009f4:	3304      	adds	r3, #4
 80009f6:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;  
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68da      	ldr	r2, [r3, #12]
 80009fc:	499b      	ldr	r1, [pc, #620]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2064      	movs	r0, #100	; 0x64
 8000a02:	fb00 f303 	mul.w	r3, r0, r3
 8000a06:	440b      	add	r3, r1
 8000a08:	3310      	adds	r3, #16
 8000a0a:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].SampleRate      = AudioInit->SampleRate; 
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	4996      	ldr	r1, [pc, #600]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2064      	movs	r0, #100	; 0x64
 8000a16:	fb00 f303 	mul.w	r3, r0, r3
 8000a1a:	440b      	add	r3, r1
 8000a1c:	3308      	adds	r3, #8
 8000a1e:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	689a      	ldr	r2, [r3, #8]
 8000a24:	4991      	ldr	r1, [pc, #580]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2064      	movs	r0, #100	; 0x64
 8000a2a:	fb00 f303 	mul.w	r3, r0, r3
 8000a2e:	440b      	add	r3, r1
 8000a30:	330c      	adds	r3, #12
 8000a32:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].Volume          = AudioInit->Volume;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	691a      	ldr	r2, [r3, #16]
 8000a38:	498c      	ldr	r1, [pc, #560]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2064      	movs	r0, #100	; 0x64
 8000a3e:	fb00 f303 	mul.w	r3, r0, r3
 8000a42:	440b      	add	r3, r1
 8000a44:	3320      	adds	r3, #32
 8000a46:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 8000a48:	4a88      	ldr	r2, [pc, #544]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2164      	movs	r1, #100	; 0x64
 8000a4e:	fb01 f303 	mul.w	r3, r1, r3
 8000a52:	4413      	add	r3, r2
 8000a54:	3324      	adds	r3, #36	; 0x24
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
    
    if(Instance == 0U)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f040 80f0 	bne.w	8000c42 <CCA02M1_AUDIO_IN_Init+0x27a>
#ifdef USE_STM32L4XX_NUCLEO
      ret =  BSP_ERROR_WRONG_PARAM;
#else
      uint32_t PDM_Clock_Freq;     
      
      switch (AudioInit->SampleRate)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000a6a:	d012      	beq.n	8000a92 <CCA02M1_AUDIO_IN_Init+0xca>
 8000a6c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000a70:	d803      	bhi.n	8000a7a <CCA02M1_AUDIO_IN_Init+0xb2>
 8000a72:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000a76:	d008      	beq.n	8000a8a <CCA02M1_AUDIO_IN_Init+0xc2>
 8000a78:	e017      	b.n	8000aaa <CCA02M1_AUDIO_IN_Init+0xe2>
 8000a7a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000a7e:	d00c      	beq.n	8000a9a <CCA02M1_AUDIO_IN_Init+0xd2>
 8000a80:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d00c      	beq.n	8000aa2 <CCA02M1_AUDIO_IN_Init+0xda>
 8000a88:	e00f      	b.n	8000aaa <CCA02M1_AUDIO_IN_Init+0xe2>
      {
      case AUDIO_FREQUENCY_8K:
        PDM_Clock_Freq = 1280;
 8000a8a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000a8e:	65bb      	str	r3, [r7, #88]	; 0x58
        break;
 8000a90:	e012      	b.n	8000ab8 <CCA02M1_AUDIO_IN_Init+0xf0>
        
      case AUDIO_FREQUENCY_16K:
        PDM_Clock_Freq = PDM_FREQ_16K;
 8000a92:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000a96:	65bb      	str	r3, [r7, #88]	; 0x58
        break;
 8000a98:	e00e      	b.n	8000ab8 <CCA02M1_AUDIO_IN_Init+0xf0>
        
      case AUDIO_FREQUENCY_32K:
        PDM_Clock_Freq = 2048;
 8000a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a9e:	65bb      	str	r3, [r7, #88]	; 0x58
        break;
 8000aa0:	e00a      	b.n	8000ab8 <CCA02M1_AUDIO_IN_Init+0xf0>
        
      case AUDIO_FREQUENCY_48K:
        PDM_Clock_Freq = 3072;
 8000aa2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aa6:	65bb      	str	r3, [r7, #88]	; 0x58
        break;
 8000aa8:	e006      	b.n	8000ab8 <CCA02M1_AUDIO_IN_Init+0xf0>
        
      default:
        PDM_Clock_Freq = 1280;
 8000aaa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000aae:	65bb      	str	r3, [r7, #88]	; 0x58
        ret =  BSP_ERROR_WRONG_PARAM;
 8000ab0:	f06f 0301 	mvn.w	r3, #1
 8000ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
        break;
 8000ab6:	bf00      	nop
      }
      
      AudioInCtx[Instance].DecimationFactor = (PDM_Clock_Freq * 1000U)/AudioInit->SampleRate;
 8000ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000abe:	fb02 f203 	mul.w	r2, r2, r3
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000aca:	4968      	ldr	r1, [pc, #416]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2064      	movs	r0, #100	; 0x64
 8000ad0:	fb00 f303 	mul.w	r3, r0, r3
 8000ad4:	440b      	add	r3, r1
 8000ad6:	3360      	adds	r3, #96	; 0x60
 8000ad8:	601a      	str	r2, [r3, #0]
      AudioInCtx[Instance].Size = (PDM_Clock_Freq/8U) * 2U * N_MS_PER_INTERRUPT;
 8000ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000adc:	08db      	lsrs	r3, r3, #3
 8000ade:	005a      	lsls	r2, r3, #1
 8000ae0:	4962      	ldr	r1, [pc, #392]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2064      	movs	r0, #100	; 0x64
 8000ae6:	fb00 f303 	mul.w	r3, r0, r3
 8000aea:	440b      	add	r3, r1
 8000aec:	331c      	adds	r3, #28
 8000aee:	601a      	str	r2, [r3, #0]
      /* Enable SAI to generate clock used by audio driver */
      __HAL_SAI_ENABLE(&hAudioInSai);
      
#else             
      MX_I2S_IN_Config i2s_config;
      if(AudioInCtx[0].ChannelsNbr == 1U)
 8000af0:	4b5e      	ldr	r3, [pc, #376]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000af2:	691b      	ldr	r3, [r3, #16]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d102      	bne.n	8000afe <CCA02M1_AUDIO_IN_Init+0x136>
      {
        i2s_config.DataFormat   = I2S_DATAFORMAT_16B;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e001      	b.n	8000b02 <CCA02M1_AUDIO_IN_Init+0x13a>
      }
      else
      {
        i2s_config.DataFormat   = I2S_DATAFORMAT_32B;
 8000afe:	2305      	movs	r3, #5
 8000b00:	617b      	str	r3, [r7, #20]
      }
      
      i2s_config.AudioFreq = ((PDM_Clock_Freq * 1000U) / 32U);
 8000b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b08:	fb02 f303 	mul.w	r3, r2, r3
 8000b0c:	095b      	lsrs	r3, r3, #5
 8000b0e:	61fb      	str	r3, [r7, #28]
      i2s_config.CPOL         = I2S_CPOL_HIGH;
 8000b10:	2308      	movs	r3, #8
 8000b12:	623b      	str	r3, [r7, #32]
      i2s_config.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
      i2s_config.Mode         = I2S_MODE_MASTER_RX;
 8000b18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b1c:	60fb      	str	r3, [r7, #12]
      i2s_config.Standard     = I2S_STANDARD_MSB;
 8000b1e:	2310      	movs	r3, #16
 8000b20:	613b      	str	r3, [r7, #16]
#ifdef USE_STM32F4XX_NUCLEO
      i2s_config.FullDuplexMode   = I2S_FULLDUPLEXMODE_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
      i2s_config.ClockSource  = I2S_CLOCK_PLL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
#else
      i2s_config.ClockSource  = I2S_CLOCK_SYSCLK;
#endif
      
      if (AudioInCtx[0].ChannelsNbr>1U)
 8000b2a:	4b50      	ldr	r3, [pc, #320]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d90a      	bls.n	8000b48 <CCA02M1_AUDIO_IN_Init+0x180>
      {
        PDM_Clock_Freq *=2U;
 8000b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	65bb      	str	r3, [r7, #88]	; 0x58
        if (AUDIO_IN_Timer_Init() != HAL_OK)
 8000b38:	f000 ffb4 	bl	8001aa4 <AUDIO_IN_Timer_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <CCA02M1_AUDIO_IN_Init+0x180>
        {
          ret =  BSP_ERROR_PERIPH_FAILURE;
 8000b42:	f06f 0303 	mvn.w	r3, #3
 8000b46:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
      }
      
      /* PLL clock is set depending by the AudioFreq */ 
      if(MX_I2S_IN_ClockConfig(&hAudioInI2s, PDM_Clock_Freq) != HAL_OK)
 8000b48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000b4a:	4849      	ldr	r0, [pc, #292]	; (8000c70 <CCA02M1_AUDIO_IN_Init+0x2a8>)
 8000b4c:	f000 f898 	bl	8000c80 <MX_I2S_IN_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <CCA02M1_AUDIO_IN_Init+0x194>
      {
        ret =  BSP_ERROR_CLOCK_FAILURE;
 8000b56:	f06f 0308 	mvn.w	r3, #8
 8000b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      
      /* I2S Peripheral configuration */
      hAudioInI2s.Instance          = AUDIO_IN_I2S_INSTANCE;
 8000b5c:	4b44      	ldr	r3, [pc, #272]	; (8000c70 <CCA02M1_AUDIO_IN_Init+0x2a8>)
 8000b5e:	4a45      	ldr	r2, [pc, #276]	; (8000c74 <CCA02M1_AUDIO_IN_Init+0x2ac>)
 8000b60:	601a      	str	r2, [r3, #0]
      __HAL_I2S_DISABLE(&hAudioInI2s);
 8000b62:	4b43      	ldr	r3, [pc, #268]	; (8000c70 <CCA02M1_AUDIO_IN_Init+0x2a8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	69da      	ldr	r2, [r3, #28]
 8000b68:	4b41      	ldr	r3, [pc, #260]	; (8000c70 <CCA02M1_AUDIO_IN_Init+0x2a8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b70:	61da      	str	r2, [r3, #28]
      I2S_MspInit(&hAudioInI2s);
 8000b72:	483f      	ldr	r0, [pc, #252]	; (8000c70 <CCA02M1_AUDIO_IN_Init+0x2a8>)
 8000b74:	f000 fed8 	bl	8001928 <I2S_MspInit>
      
      if (MX_I2S_IN_Init(&hAudioInI2s, &i2s_config)!= HAL_OK)
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	483c      	ldr	r0, [pc, #240]	; (8000c70 <CCA02M1_AUDIO_IN_Init+0x2a8>)
 8000b80:	f000 f938 	bl	8000df4 <MX_I2S_IN_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d002      	beq.n	8000b90 <CCA02M1_AUDIO_IN_Init+0x1c8>
      {
        ret =  BSP_ERROR_PERIPH_FAILURE;
 8000b8a:	f06f 0303 	mvn.w	r3, #3
 8000b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      if (HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8000b90:	4837      	ldr	r0, [pc, #220]	; (8000c70 <CCA02M1_AUDIO_IN_Init+0x2a8>)
 8000b92:	f001 ff65 	bl	8002a60 <HAL_I2S_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <CCA02M1_AUDIO_IN_Init+0x1da>
      {
        ret =  BSP_ERROR_PERIPH_FAILURE;
 8000b9c:	f06f 0303 	mvn.w	r3, #3
 8000ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      
      if (AudioInCtx[0].ChannelsNbr>2U)
 8000ba2:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d93b      	bls.n	8000c22 <CCA02M1_AUDIO_IN_Init+0x25a>
      {
        /* Set the SPI parameters */
        hAudioInSPI.Instance               = AUDIO_IN_SPI_INSTANCE;
 8000baa:	4b33      	ldr	r3, [pc, #204]	; (8000c78 <CCA02M1_AUDIO_IN_Init+0x2b0>)
 8000bac:	4a33      	ldr	r2, [pc, #204]	; (8000c7c <CCA02M1_AUDIO_IN_Init+0x2b4>)
 8000bae:	601a      	str	r2, [r3, #0]
        
        __HAL_SPI_DISABLE(&hAudioInSPI);
 8000bb0:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <CCA02M1_AUDIO_IN_Init+0x2b0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <CCA02M1_AUDIO_IN_Init+0x2b0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bbe:	601a      	str	r2, [r3, #0]
        SPI_MspInit(&hAudioInSPI);
 8000bc0:	482d      	ldr	r0, [pc, #180]	; (8000c78 <CCA02M1_AUDIO_IN_Init+0x2b0>)
 8000bc2:	f000 ff03 	bl	80019cc <SPI_MspInit>
        
        MX_SPI_Config spi_config;
        spi_config.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	647b      	str	r3, [r7, #68]	; 0x44
        spi_config.Direction         = SPI_DIRECTION_2LINES_RXONLY;
 8000bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
        spi_config.CLKPhase          = SPI_PHASE_2EDGE;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        spi_config.CLKPolarity       = SPI_POLARITY_HIGH;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
        spi_config.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	653b      	str	r3, [r7, #80]	; 0x50
        spi_config.CRCPolynomial     = 7;
 8000bdc:	2307      	movs	r3, #7
 8000bde:	657b      	str	r3, [r7, #84]	; 0x54
        spi_config.DataSize          = SPI_DATASIZE_16BIT;
 8000be0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
        spi_config.FirstBit          = SPI_FIRSTBIT_MSB;
 8000be6:	2300      	movs	r3, #0
 8000be8:	64bb      	str	r3, [r7, #72]	; 0x48
        spi_config.NSS               = SPI_NSS_SOFT;
 8000bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bee:	643b      	str	r3, [r7, #64]	; 0x40
        spi_config.TIMode            = SPI_TIMODE_DISABLED;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
        spi_config.Mode              = SPI_MODE_SLAVE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        
        if (MX_SPI_Init(&hAudioInSPI, &spi_config)!= HAL_OK)
 8000bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481e      	ldr	r0, [pc, #120]	; (8000c78 <CCA02M1_AUDIO_IN_Init+0x2b0>)
 8000c00:	f000 f87e 	bl	8000d00 <MX_SPI_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <CCA02M1_AUDIO_IN_Init+0x248>
        {
          ret =  BSP_ERROR_PERIPH_FAILURE;
 8000c0a:	f06f 0303 	mvn.w	r3, #3
 8000c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        if (HAL_SPI_Init(&hAudioInSPI) != HAL_OK)
 8000c10:	4819      	ldr	r0, [pc, #100]	; (8000c78 <CCA02M1_AUDIO_IN_Init+0x2b0>)
 8000c12:	f004 ff49 	bl	8005aa8 <HAL_SPI_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d002      	beq.n	8000c22 <CCA02M1_AUDIO_IN_Init+0x25a>
        {
          ret =  BSP_ERROR_PERIPH_FAILURE;
 8000c1c:	f06f 0303 	mvn.w	r3, #3
 8000c20:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        
      }
#endif
      if (CCA02M1_AUDIO_IN_PDMToPCM_Init(Instance, AudioInCtx[0].SampleRate, AudioInCtx[0].ChannelsNbr, AudioInCtx[0].ChannelsNbr)!= BSP_ERROR_NONE)
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000c24:	6899      	ldr	r1, [r3, #8]
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000c28:	691a      	ldr	r2, [r3, #16]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 f974 	bl	8000f1c <CCA02M1_AUDIO_IN_PDMToPCM_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d009      	beq.n	8000c4e <CCA02M1_AUDIO_IN_Init+0x286>
      {
        ret =  BSP_ERROR_NO_INIT;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c40:	e005      	b.n	8000c4e <CCA02M1_AUDIO_IN_Init+0x286>
      }
#endif
    }
    else if(Instance == 1U)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d102      	bne.n	8000c4e <CCA02M1_AUDIO_IN_Init+0x286>
          }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1U) */
        }
      }
#else
      ret =  BSP_ERROR_WRONG_PARAM;
 8000c48:	f06f 0301 	mvn.w	r3, #1
 8000c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    {      
      
    }
    
    /* Update BSP AUDIO IN state */     
    AudioInCtx[Instance].State = AUDIO_IN_STATE_STOP; 
 8000c4e:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2164      	movs	r1, #100	; 0x64
 8000c54:	fb01 f303 	mul.w	r3, r1, r3
 8000c58:	4413      	add	r3, r2
 8000c5a:	3324      	adds	r3, #36	; 0x24
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	601a      	str	r2, [r3, #0]
    /* Return BSP status */ 
  }
  return ret;
 8000c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3760      	adds	r7, #96	; 0x60
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200006d4 	.word	0x200006d4
 8000c70:	20001a7c 	.word	0x20001a7c
 8000c74:	40003800 	.word	0x40003800
 8000c78:	20000978 	.word	0x20000978
 8000c7c:	40013000 	.word	0x40013000

08000c80 <MX_I2S_IN_ClockConfig>:
* @note   This API is called by CCA02M1_AUDIO_IN_Init() 
*         Being __weak it can be overwritten by the application     
* @retval HAL_OK if no problem during execution, HAL_ERROR otherwise
*/
__weak HAL_StatusTypeDef MX_I2S_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t PDM_rate)
{ 
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b09a      	sub	sp, #104	; 0x68
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  UNUSED(hi2s);
  
  HAL_StatusTypeDef ret = HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  /*I2S PLL Configuration*/
  RCC_PeriphCLKInitTypeDef rccclkinit;
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit); 
 8000c90:	f107 0308 	add.w	r3, r7, #8
 8000c94:	4618      	mov	r0, r3
 8000c96:	f004 f825 	bl	8004ce4 <HAL_RCCEx_GetPeriphCLKConfig>
  
#if defined(STM32F446xx)
  rccclkinit.PLLI2S.PLLI2SQ = 2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
  rccclkinit.PLLI2SDivQ = 1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
#endif
  if ((PDM_rate % 1280U) == 0U)
 8000ca2:	6839      	ldr	r1, [r7, #0]
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_I2S_IN_ClockConfig+0x7c>)
 8000ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8000caa:	0a9a      	lsrs	r2, r3, #10
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	1aca      	subs	r2, r1, r3
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d106      	bne.n	8000cc8 <MX_I2S_IN_ClockConfig+0x48>
  {
#if defined(STM32F411xE) || defined (STM32F446xx)    
    rccclkinit.PLLI2S.PLLI2SM = 10;
 8000cba:	230a      	movs	r3, #10
 8000cbc:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 96;
 8000cbe:	2360      	movs	r3, #96	; 0x60
 8000cc0:	613b      	str	r3, [r7, #16]
#else
    rccclkinit.PLLI2S.PLLI2SN = 192;
#endif
    rccclkinit.PLLI2S.PLLI2SR = 5;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	e006      	b.n	8000cd6 <MX_I2S_IN_ClockConfig+0x56>
  }
  else
  {
#if defined(STM32F411xE) || defined (STM32F446xx)
    
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	60fb      	str	r3, [r7, #12]
#endif
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000ccc:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000cd0:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	61fb      	str	r3, [r7, #28]
  }   
  
#if defined(STM32F446xx)
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	60bb      	str	r3, [r7, #8]
#else
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
#endif
  
  if(HAL_RCCEx_PeriphCLKConfig(&rccclkinit) != HAL_OK)
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 fcd6 	bl	8004690 <HAL_RCCEx_PeriphCLKConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <MX_I2S_IN_ClockConfig+0x70>
  {
    ret = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  return ret;
 8000cf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3768      	adds	r7, #104	; 0x68
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	cccccccd 	.word	0xcccccccd

08000d00 <MX_SPI_Init>:


__weak HAL_StatusTypeDef MX_SPI_Init(SPI_HandleTypeDef* hspi, MX_SPI_Config *MXConfig)
{  
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef ret = HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73fb      	strb	r3, [r7, #15]
  
  hspi->Init.BaudRatePrescaler = MXConfig->BaudRatePrescaler; 
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	699a      	ldr	r2, [r3, #24]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	61da      	str	r2, [r3, #28]
  hspi->Init.Direction         = MXConfig->Direction;         
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
  hspi->Init.CLKPhase          = MXConfig->CLKPhase;          
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	691a      	ldr	r2, [r3, #16]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	615a      	str	r2, [r3, #20]
  hspi->Init.CLKPolarity       = MXConfig->CLKPolarity;       
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	611a      	str	r2, [r3, #16]
  hspi->Init.CRCCalculation    = MXConfig->CRCCalculation;    
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial     = MXConfig->CRCPolynomial;     
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.DataSize          = MXConfig->DataSize;          
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60da      	str	r2, [r3, #12]
  hspi->Init.FirstBit          = MXConfig->FirstBit;         
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	69da      	ldr	r2, [r3, #28]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	621a      	str	r2, [r3, #32]
  hspi->Init.NSS               = MXConfig->NSS;               
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	695a      	ldr	r2, [r3, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	619a      	str	r2, [r3, #24]
  hspi->Init.TIMode            = MXConfig->TIMode;            
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	6a1a      	ldr	r2, [r3, #32]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.Mode              = MXConfig->Mode; 
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	605a      	str	r2, [r3, #4]
  
  /* Configure the DMA handler for Transmission process */
  hdma_rx.Instance                 = AUDIO_IN_SPI_RX_DMA_STREAM;
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_SPI_Init+0xec>)
 8000d68:	4a21      	ldr	r2, [pc, #132]	; (8000df0 <MX_SPI_Init+0xf0>)
 8000d6a:	601a      	str	r2, [r3, #0]
  hdma_rx.Init.Channel             = AUDIO_IN_SPI_RX_DMA_CHANNEL;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <MX_SPI_Init+0xec>)
 8000d6e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d72:	605a      	str	r2, [r3, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000d74:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <MX_SPI_Init+0xec>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <MX_SPI_Init+0xec>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_SPI_Init+0xec>)
 8000d82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d86:	611a      	str	r2, [r3, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_SPI_Init+0xec>)
 8000d8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d8e:	615a      	str	r2, [r3, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <MX_SPI_Init+0xec>)
 8000d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d96:	619a      	str	r2, [r3, #24]
  hdma_rx.Init.Mode                = DMA_CIRCULAR;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_SPI_Init+0xec>)
 8000d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d9e:	61da      	str	r2, [r3, #28]
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_SPI_Init+0xec>)
 8000da2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000da6:	621a      	str	r2, [r3, #32]
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MX_SPI_Init+0xec>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_SPI_Init+0xec>)
 8000db0:	2203      	movs	r2, #3
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 8000db4:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <MX_SPI_Init+0xec>)
 8000db6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_SPI_Init+0xec>)
 8000dbe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000dc2:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Configure the DMA Stream */ 
  if (HAL_DMA_Init(&hdma_rx) != HAL_OK)
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <MX_SPI_Init+0xec>)
 8000dc6:	f001 f8ed 	bl	8001fa4 <HAL_DMA_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_SPI_Init+0xd4>
  {
    ret = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Associate the initialized DMA handle to the the SPI handle */
  __HAL_LINKDMA(hspi, hdmarx, hdma_rx);      
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <MX_SPI_Init+0xec>)
 8000dd8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <MX_SPI_Init+0xec>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6393      	str	r3, [r2, #56]	; 0x38
  
  return ret;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20001610 	.word	0x20001610
 8000df0:	40026440 	.word	0x40026440

08000df4 <MX_I2S_IN_Init>:


__weak HAL_StatusTypeDef MX_I2S_IN_Init(I2S_HandleTypeDef* hi2s, MX_I2S_IN_Config *MXConfig)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sRx;
  HAL_StatusTypeDef ret = HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	73fb      	strb	r3, [r7, #15]
  
  hi2s->Init.DataFormat = MXConfig->DataFormat;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60da      	str	r2, [r3, #12]
  hi2s->Init.AudioFreq = MXConfig->AudioFreq;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	615a      	str	r2, [r3, #20]
  hi2s->Init.ClockSource = MXConfig->ClockSource;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	699a      	ldr	r2, [r3, #24]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	61da      	str	r2, [r3, #28]
  hi2s->Init.CPOL = MXConfig->CPOL;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	695a      	ldr	r2, [r3, #20]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	619a      	str	r2, [r3, #24]
  hi2s->Init.MCLKOutput = MXConfig->MCLKOutput;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	611a      	str	r2, [r3, #16]
  hi2s->Init.Mode = MXConfig->Mode;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	605a      	str	r2, [r3, #4]
  hi2s->Init.Standard = MXConfig->Standard;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	609a      	str	r2, [r3, #8]
#ifdef USE_STM32F4XX_NUCLEO
  hi2s->Init.FullDuplexMode = MXConfig->FullDuplexMode;  
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	69da      	ldr	r2, [r3, #28]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	621a      	str	r2, [r3, #32]
#endif
  
  /* Enable the DMA clock */
  AUDIO_IN_I2S_DMAx_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <MX_I2S_IN_Init+0x118>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a30      	ldr	r2, [pc, #192]	; (8000f0c <MX_I2S_IN_Init+0x118>)
 8000e4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <MX_I2S_IN_Init+0x118>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == AUDIO_IN_I2S_INSTANCE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a2b      	ldr	r2, [pc, #172]	; (8000f10 <MX_I2S_IN_Init+0x11c>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d142      	bne.n	8000eee <MX_I2S_IN_Init+0xfa>
  {
    /* Configure the hdma_i2sRx handle parameters */
    hdma_i2sRx.Init.Channel             = AUDIO_IN_I2S_DMAx_CHANNEL;
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000e74:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 8000e7a:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e80:	611a      	str	r2, [r3, #16]
    hdma_i2sRx.Init.PeriphDataAlignment = AUDIO_IN_I2S_DMAx_PERIPH_DATA_SIZE;
 8000e82:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e88:	615a      	str	r2, [r3, #20]
    hdma_i2sRx.Init.MemDataAlignment    = AUDIO_IN_I2S_DMAx_MEM_DATA_SIZE;
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000e8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e90:	619a      	str	r2, [r3, #24]
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
 8000e92:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e98:	61da      	str	r2, [r3, #28]
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000e9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ea0:	621a      	str	r2, [r3, #32]
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000eaa:	2203      	movs	r2, #3
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_i2sRx.Instance = AUDIO_IN_I2S_DMAx_STREAM;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000ebc:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <MX_I2S_IN_Init+0x124>)
 8000ebe:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000ec4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ec6:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    if (HAL_DMA_DeInit(&hdma_i2sRx) != HAL_OK)
 8000ecc:	4811      	ldr	r0, [pc, #68]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000ece:	f001 f917 	bl	8002100 <HAL_DMA_DeInit>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2S_IN_Init+0xe8>
    {
      ret = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
    }
    
    /* Configure the DMA Stream */
    if (HAL_DMA_Init(&hdma_i2sRx) != HAL_OK)
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_I2S_IN_Init+0x120>)
 8000ede:	f001 f861 	bl	8001fa4 <HAL_DMA_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d004      	beq.n	8000ef2 <MX_I2S_IN_Init+0xfe>
    {
      ret = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e001      	b.n	8000ef2 <MX_I2S_IN_Init+0xfe>
    }
  }
  else
  {
    ret = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_I2S_DMAx_IRQ, CCA02M1_AUDIO_IN_IT_PRIORITY, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2106      	movs	r1, #6
 8000ef6:	200e      	movs	r0, #14
 8000ef8:	f001 f81d 	bl	8001f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_I2S_DMAx_IRQ); 
 8000efc:	200e      	movs	r0, #14
 8000efe:	f001 f836 	bl	8001f6e <HAL_NVIC_EnableIRQ>
  
  return ret;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40003800 	.word	0x40003800
 8000f14:	20001670 	.word	0x20001670
 8000f18:	40026058 	.word	0x40026058

08000f1c <CCA02M1_AUDIO_IN_PDMToPCM_Init>:
* @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
* @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
* @retval BSP status
*/
__weak int32_t CCA02M1_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	603b      	str	r3, [r7, #0]
  int32_t ret =  BSP_ERROR_NONE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  
  if(Instance != 0U)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x20>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8000f34:	f06f 0301 	mvn.w	r3, #1
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	e13b      	b.n	80011b4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x298>
    uint32_t index;    
    static int16_t aState_ARM[4][DECIMATOR_STATE_LENGTH];
    static int16_t aCoeffs[] = { -1406, 1634, -1943, 2386, -3080, 4325, -7223, 21690, 21690, -7223, 4325, -3080, 2386, -1943, 1634, -1406, };
    
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	4b9f      	ldr	r3, [pc, #636]	; (80011c0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a4>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4a9e      	ldr	r2, [pc, #632]	; (80011c0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a4>)
 8000f46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4c:	4b9c      	ldr	r3, [pc, #624]	; (80011c0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a4>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	697b      	ldr	r3, [r7, #20]
    
    for(index = 0; index < ChnlNbrIn; index++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	e125      	b.n	80011aa <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x28e>
    {
      volatile uint32_t error = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 8000f62:	4a98      	ldr	r2, [pc, #608]	; (80011c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	214c      	movs	r1, #76	; 0x4c
 8000f68:	fb01 f303 	mul.w	r3, r1, r3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	2200      	movs	r2, #0
 8000f70:	801a      	strh	r2, [r3, #0]
      if (ChnlNbrIn == 1)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d109      	bne.n	8000f8c <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x70>
      {
        PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_BE;
 8000f78:	4a92      	ldr	r2, [pc, #584]	; (80011c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	214c      	movs	r1, #76	; 0x4c
 8000f7e:	fb01 f303 	mul.w	r3, r1, r3
 8000f82:	4413      	add	r3, r2
 8000f84:	3302      	adds	r3, #2
 8000f86:	2201      	movs	r2, #1
 8000f88:	801a      	strh	r2, [r3, #0]
 8000f8a:	e008      	b.n	8000f9e <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x82>
      }
      else
      {
        PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8000f8c:	4a8d      	ldr	r2, [pc, #564]	; (80011c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	214c      	movs	r1, #76	; 0x4c
 8000f92:	fb01 f303 	mul.w	r3, r1, r3
 8000f96:	4413      	add	r3, r2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	801a      	strh	r2, [r3, #0]
      }
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8000f9e:	4a89      	ldr	r2, [pc, #548]	; (80011c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	214c      	movs	r1, #76	; 0x4c
 8000fa4:	fb01 f303 	mul.w	r3, r1, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	3304      	adds	r3, #4
 8000fac:	4a86      	ldr	r2, [pc, #536]	; (80011c8 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2ac>)
 8000fae:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = (uint16_t)ChnlNbrOut;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b298      	uxth	r0, r3
 8000fb4:	4a83      	ldr	r2, [pc, #524]	; (80011c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	214c      	movs	r1, #76	; 0x4c
 8000fba:	fb01 f303 	mul.w	r3, r1, r3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	330a      	adds	r3, #10
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = (uint16_t)ChnlNbrIn;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	b298      	uxth	r0, r3
 8000fca:	4a7e      	ldr	r2, [pc, #504]	; (80011c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	214c      	movs	r1, #76	; 0x4c
 8000fd0:	fb01 f303 	mul.w	r3, r1, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	4602      	mov	r2, r0
 8000fda:	801a      	strh	r2, [r3, #0]
      
      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = (uint16_t) ((AudioFreq/1000U) * N_MS_PER_INTERRUPT);
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4a7b      	ldr	r2, [pc, #492]	; (80011cc <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b0>)
 8000fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe4:	099b      	lsrs	r3, r3, #6
 8000fe6:	b298      	uxth	r0, r3
 8000fe8:	4979      	ldr	r1, [pc, #484]	; (80011d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 8000ffc:	4974      	ldr	r1, [pc, #464]	; (80011d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	440b      	add	r3, r1
 800100a:	3304      	adds	r3, #4
 800100c:	2218      	movs	r2, #24
 800100e:	801a      	strh	r2, [r3, #0]
      
      switch (AudioInCtx[0].DecimationFactor)
 8001010:	4b70      	ldr	r3, [pc, #448]	; (80011d4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b8>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	2b30      	cmp	r3, #48	; 0x30
 8001016:	d032      	beq.n	800107e <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x162>
 8001018:	2b30      	cmp	r3, #48	; 0x30
 800101a:	d806      	bhi.n	800102a <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x10e>
 800101c:	2b18      	cmp	r3, #24
 800101e:	d01a      	beq.n	8001056 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x13a>
 8001020:	2b20      	cmp	r3, #32
 8001022:	d022      	beq.n	800106a <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x14e>
 8001024:	2b10      	cmp	r3, #16
 8001026:	d00c      	beq.n	8001042 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x126>
 8001028:	e08f      	b.n	800114a <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x22e>
 800102a:	2b50      	cmp	r3, #80	; 0x50
 800102c:	d03b      	beq.n	80010a6 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x18a>
 800102e:	2b50      	cmp	r3, #80	; 0x50
 8001030:	d802      	bhi.n	8001038 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x11c>
 8001032:	2b40      	cmp	r3, #64	; 0x40
 8001034:	d02d      	beq.n	8001092 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x176>
 8001036:	e088      	b.n	800114a <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x22e>
 8001038:	2b80      	cmp	r3, #128	; 0x80
 800103a:	d03e      	beq.n	80010ba <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x19e>
 800103c:	2ba0      	cmp	r3, #160	; 0xa0
 800103e:	d046      	beq.n	80010ce <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x1b2>
 8001040:	e083      	b.n	800114a <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x22e>
      {
      case 16:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_16;
 8001042:	4963      	ldr	r1, [pc, #396]	; (80011d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	440b      	add	r3, r1
 8001050:	2205      	movs	r2, #5
 8001052:	801a      	strh	r2, [r3, #0]
        break;
 8001054:	e07d      	b.n	8001152 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      case 24:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_24;
 8001056:	495e      	ldr	r1, [pc, #376]	; (80011d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4613      	mov	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4413      	add	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	440b      	add	r3, r1
 8001064:	2206      	movs	r2, #6
 8001066:	801a      	strh	r2, [r3, #0]
        break;
 8001068:	e073      	b.n	8001152 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      case 32:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_32;
 800106a:	4959      	ldr	r1, [pc, #356]	; (80011d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4613      	mov	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	440b      	add	r3, r1
 8001078:	2207      	movs	r2, #7
 800107a:	801a      	strh	r2, [r3, #0]
        break;
 800107c:	e069      	b.n	8001152 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      case 48:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_48;
 800107e:	4954      	ldr	r1, [pc, #336]	; (80011d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	440b      	add	r3, r1
 800108c:	2201      	movs	r2, #1
 800108e:	801a      	strh	r2, [r3, #0]
        break;
 8001090:	e05f      	b.n	8001152 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      case 64:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8001092:	494f      	ldr	r1, [pc, #316]	; (80011d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	440b      	add	r3, r1
 80010a0:	2202      	movs	r2, #2
 80010a2:	801a      	strh	r2, [r3, #0]
        break;
 80010a4:	e055      	b.n	8001152 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      case 80:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_80;
 80010a6:	494a      	ldr	r1, [pc, #296]	; (80011d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	440b      	add	r3, r1
 80010b4:	2203      	movs	r2, #3
 80010b6:	801a      	strh	r2, [r3, #0]
        break;
 80010b8:	e04b      	b.n	8001152 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      case 128:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_128;
 80010ba:	4945      	ldr	r1, [pc, #276]	; (80011d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	440b      	add	r3, r1
 80010c8:	2204      	movs	r2, #4
 80010ca:	801a      	strh	r2, [r3, #0]
        break;
 80010cc:	e041      	b.n	8001152 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      case 160:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_80;
 80010ce:	4940      	ldr	r1, [pc, #256]	; (80011d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	440b      	add	r3, r1
 80010dc:	2203      	movs	r2, #3
 80010de:	801a      	strh	r2, [r3, #0]
        PDM_FilterConfig[index].output_samples_number *= 2U;        
 80010e0:	493b      	ldr	r1, [pc, #236]	; (80011d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	440b      	add	r3, r1
 80010ee:	3302      	adds	r3, #2
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	b298      	uxth	r0, r3
 80010f6:	4936      	ldr	r1, [pc, #216]	; (80011d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	440b      	add	r3, r1
 8001104:	3302      	adds	r3, #2
 8001106:	4602      	mov	r2, r0
 8001108:	801a      	strh	r2, [r3, #0]
        PDM_FilterHandler[index].out_ptr_channels = 1;
 800110a:	4a2e      	ldr	r2, [pc, #184]	; (80011c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	214c      	movs	r1, #76	; 0x4c
 8001110:	fb01 f303 	mul.w	r3, r1, r3
 8001114:	4413      	add	r3, r2
 8001116:	330a      	adds	r3, #10
 8001118:	2201      	movs	r2, #1
 800111a:	801a      	strh	r2, [r3, #0]
        (void)arm_fir_decimate_init_q15  (&ARM_Decimator_State[index], DECIMATOR_NUM_TAPS, DECIMATOR_FACTOR,
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4a2c      	ldr	r2, [pc, #176]	; (80011d8 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2bc>)
 8001128:	1898      	adds	r0, r3, r2
                                          aCoeffs, aState_ARM[index], DECIMATOR_BLOCK_SIZE);
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4613      	mov	r3, r2
 800112e:	015b      	lsls	r3, r3, #5
 8001130:	1a9b      	subs	r3, r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4a29      	ldr	r2, [pc, #164]	; (80011dc <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2c0>)
 8001136:	4413      	add	r3, r2
        (void)arm_fir_decimate_init_q15  (&ARM_Decimator_State[index], DECIMATOR_NUM_TAPS, DECIMATOR_FACTOR,
 8001138:	2210      	movs	r2, #16
 800113a:	9201      	str	r2, [sp, #4]
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2c4>)
 8001140:	2202      	movs	r2, #2
 8001142:	2110      	movs	r1, #16
 8001144:	f009 ff7f 	bl	800b046 <arm_fir_decimate_init_q15>
         break;
 8001148:	e003      	b.n	8001152 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      default:
        ret =  BSP_ERROR_WRONG_PARAM;
 800114a:	f06f 0301 	mvn.w	r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
        break;
 8001150:	bf00      	nop
      }
      
      error = PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	224c      	movs	r2, #76	; 0x4c
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 800115c:	4413      	add	r3, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f00c ffb0 	bl	800e0c4 <PDM_Filter_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	613b      	str	r3, [r7, #16]
      if (error!=0U)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d002      	beq.n	8001174 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x258>
      {
        ret =  BSP_ERROR_NO_INIT;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	61fb      	str	r3, [r7, #28]
      }
      
      error = PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	224c      	movs	r2, #76	; 0x4c
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	4a11      	ldr	r2, [pc, #68]	; (80011c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 800117e:	1898      	adds	r0, r3, r2
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 800118c:	4413      	add	r3, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f00d f822 	bl	800e1d8 <PDM_Filter_setConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	613b      	str	r3, [r7, #16]
      if (error!=0U)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x288>
      {
        ret =  BSP_ERROR_NO_INIT;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	61fb      	str	r3, [r7, #28]
    for(index = 0; index < ChnlNbrIn; index++)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	3301      	adds	r3, #1
 80011a8:	61bb      	str	r3, [r7, #24]
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	f4ff aed5 	bcc.w	8000f5e <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x42>
      }
    }
    
#endif
  } 
  return ret;
 80011b4:	69fb      	ldr	r3, [r7, #28]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	20000830 	.word	0x20000830
 80011c8:	7e809d48 	.word	0x7e809d48
 80011cc:	10624dd3 	.word	0x10624dd3
 80011d0:	20000960 	.word	0x20000960
 80011d4:	200006d4 	.word	0x200006d4
 80011d8:	20000800 	.word	0x20000800
 80011dc:	200016d0 	.word	0x200016d0
 80011e0:	20000480 	.word	0x20000480

080011e4 <CCA02M1_AUDIO_IN_PDMToPCM>:
* @param  PDMBuf    Pointer to PDM buffer data
* @param  PCMBuf    Pointer to PCM buffer data
* @retval BSP status
*/
__weak int32_t CCA02M1_AUDIO_IN_PDMToPCM(uint32_t Instance, uint16_t *PDMBuf, uint16_t *PCMBuf)
{  
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	; 0x50
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  int32_t ret =  BSP_ERROR_NONE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  
  if(Instance != 0U)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <CCA02M1_AUDIO_IN_PDMToPCM+0x1e>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80011fa:	f06f 0301 	mvn.w	r3, #1
 80011fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001200:	e069      	b.n	80012d6 <CCA02M1_AUDIO_IN_PDMToPCM+0xf2>
#ifdef USE_STM32L4XX_NUCLEO    
    ret =  BSP_ERROR_WRONG_PARAM;
#else
    uint32_t index;
    
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8001202:	2300      	movs	r3, #0
 8001204:	64bb      	str	r3, [r7, #72]	; 0x48
 8001206:	e05b      	b.n	80012c0 <CCA02M1_AUDIO_IN_PDMToPCM+0xdc>
    {
      if (AudioInCtx[Instance].SampleRate == 8000U)
 8001208:	4a35      	ldr	r2, [pc, #212]	; (80012e0 <CCA02M1_AUDIO_IN_PDMToPCM+0xfc>)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2164      	movs	r1, #100	; 0x64
 800120e:	fb01 f303 	mul.w	r3, r1, r3
 8001212:	4413      	add	r3, r2
 8001214:	3308      	adds	r3, #8
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800121c:	d13d      	bne.n	800129a <CCA02M1_AUDIO_IN_PDMToPCM+0xb6>
      {
        uint16_t Decimate_Out[8*N_MS_PER_INTERRUPT];
        uint32_t ii;
        uint16_t PDM_Filter_Out[16*N_MS_PER_INTERRUPT];
        
        (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], PDM_Filter_Out, &PDM_FilterHandler[index]);
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001222:	18d0      	adds	r0, r2, r3
 8001224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001226:	224c      	movs	r2, #76	; 0x4c
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	4a2d      	ldr	r2, [pc, #180]	; (80012e4 <CCA02M1_AUDIO_IN_PDMToPCM+0x100>)
 800122e:	441a      	add	r2, r3
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	f00d f8c1 	bl	800e3bc <PDM_Filter>
        (void)arm_fir_decimate_q15 (&ARM_Decimator_State[index], (q15_t *)&(PDM_Filter_Out), (q15_t*)&(Decimate_Out), DECIMATOR_BLOCK_SIZE);
 800123a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4a28      	ldr	r2, [pc, #160]	; (80012e8 <CCA02M1_AUDIO_IN_PDMToPCM+0x104>)
 8001246:	1898      	adds	r0, r3, r2
 8001248:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800124c:	f107 0114 	add.w	r1, r7, #20
 8001250:	2310      	movs	r3, #16
 8001252:	f009 ff2d 	bl	800b0b0 <arm_fir_decimate_q15>
        for (ii=0; ii<8U*N_MS_PER_INTERRUPT; ii++)
 8001256:	2300      	movs	r3, #0
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
 800125a:	e01a      	b.n	8001292 <CCA02M1_AUDIO_IN_PDMToPCM+0xae>
        {
          PCMBuf[(ii * AudioInCtx[Instance].ChannelsNbr) + index] = Decimate_Out[ii];
 800125c:	4a20      	ldr	r2, [pc, #128]	; (80012e0 <CCA02M1_AUDIO_IN_PDMToPCM+0xfc>)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2164      	movs	r1, #100	; 0x64
 8001262:	fb01 f303 	mul.w	r3, r1, r3
 8001266:	4413      	add	r3, r2
 8001268:	3310      	adds	r3, #16
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800126e:	fb02 f203 	mul.w	r2, r2, r3
 8001272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001274:	4413      	add	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	441a      	add	r2, r3
 800127c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001284:	440b      	add	r3, r1
 8001286:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800128a:	8013      	strh	r3, [r2, #0]
        for (ii=0; ii<8U*N_MS_PER_INTERRUPT; ii++)
 800128c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800128e:	3301      	adds	r3, #1
 8001290:	647b      	str	r3, [r7, #68]	; 0x44
 8001292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001294:	2b07      	cmp	r3, #7
 8001296:	d9e1      	bls.n	800125c <CCA02M1_AUDIO_IN_PDMToPCM+0x78>
 8001298:	e00f      	b.n	80012ba <CCA02M1_AUDIO_IN_PDMToPCM+0xd6>
        }
      }
      else
      {
        (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800129e:	18d0      	adds	r0, r2, r3
 80012a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	18d1      	adds	r1, r2, r3
 80012a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012aa:	224c      	movs	r2, #76	; 0x4c
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <CCA02M1_AUDIO_IN_PDMToPCM+0x100>)
 80012b2:	4413      	add	r3, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	f00d f881 	bl	800e3bc <PDM_Filter>
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 80012ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012bc:	3301      	adds	r3, #1
 80012be:	64bb      	str	r3, [r7, #72]	; 0x48
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <CCA02M1_AUDIO_IN_PDMToPCM+0xfc>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2164      	movs	r1, #100	; 0x64
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	3310      	adds	r3, #16
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d398      	bcc.n	8001208 <CCA02M1_AUDIO_IN_PDMToPCM+0x24>
      }
    }
    
#endif
  }  
  return ret;
 80012d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3750      	adds	r7, #80	; 0x50
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200006d4 	.word	0x200006d4
 80012e4:	20000830 	.word	0x20000830
 80012e8:	20000800 	.word	0x20000800

080012ec <CCA02M1_AUDIO_IN_Record>:
* @param  pbuf     Main buffer pointer for the recorded data storing  
* @param  NbrOfBytes     Size of the record buffer. Parameter not used when Instance is 0
* @retval BSP status
*/
int32_t CCA02M1_AUDIO_IN_Record(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  
  if(Instance >= (AUDIO_IN_INSTANCES_NBR - 1U) )
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d903      	bls.n	800130a <CCA02M1_AUDIO_IN_Record+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001302:	f06f 0301 	mvn.w	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e05e      	b.n	80013c8 <CCA02M1_AUDIO_IN_Record+0xdc>
  }
  else 
  {
    AudioInCtx[Instance].pBuff = (uint16_t*)pBuf;
 800130a:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <CCA02M1_AUDIO_IN_Record+0xe8>)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2164      	movs	r1, #100	; 0x64
 8001310:	fb01 f303 	mul.w	r3, r1, r3
 8001314:	4413      	add	r3, r2
 8001316:	3314      	adds	r3, #20
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	601a      	str	r2, [r3, #0]
    
    if(Instance == 0U)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d14f      	bne.n	80013c2 <CCA02M1_AUDIO_IN_Record+0xd6>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }  
      
#else
      
      if(AudioInCtx[Instance].ChannelsNbr > 2U)
 8001322:	4a2c      	ldr	r2, [pc, #176]	; (80013d4 <CCA02M1_AUDIO_IN_Record+0xe8>)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2164      	movs	r1, #100	; 0x64
 8001328:	fb01 f303 	mul.w	r3, r1, r3
 800132c:	4413      	add	r3, r2
 800132e:	3310      	adds	r3, #16
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d913      	bls.n	800135e <CCA02M1_AUDIO_IN_Record+0x72>
      {
        if(HAL_SPI_Receive_DMA(&hAudioInSPI, (uint8_t *)SPI_InternalBuffer, (uint16_t)AudioInCtx[Instance].Size) != HAL_OK)
 8001336:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <CCA02M1_AUDIO_IN_Record+0xe8>)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2164      	movs	r1, #100	; 0x64
 800133c:	fb01 f303 	mul.w	r3, r1, r3
 8001340:	4413      	add	r3, r2
 8001342:	331c      	adds	r3, #28
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	4923      	ldr	r1, [pc, #140]	; (80013d8 <CCA02M1_AUDIO_IN_Record+0xec>)
 800134c:	4823      	ldr	r0, [pc, #140]	; (80013dc <CCA02M1_AUDIO_IN_Record+0xf0>)
 800134e:	f004 fc19 	bl	8005b84 <HAL_SPI_Receive_DMA>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <CCA02M1_AUDIO_IN_Record+0x72>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8001358:	f06f 0303 	mvn.w	r3, #3
 800135c:	617b      	str	r3, [r7, #20]
        }
      }
      
      if(AudioInCtx[Instance].ChannelsNbr != 1U)
 800135e:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <CCA02M1_AUDIO_IN_Record+0xe8>)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2164      	movs	r1, #100	; 0x64
 8001364:	fb01 f303 	mul.w	r3, r1, r3
 8001368:	4413      	add	r3, r2
 800136a:	3310      	adds	r3, #16
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d007      	beq.n	8001382 <CCA02M1_AUDIO_IN_Record+0x96>
      {
        if(AUDIO_IN_Timer_Start() != HAL_OK)
 8001372:	f000 fc4b 	bl	8001c0c <AUDIO_IN_Timer_Start>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <CCA02M1_AUDIO_IN_Record+0x96>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800137c:	f06f 0303 	mvn.w	r3, #3
 8001380:	617b      	str	r3, [r7, #20]
        }
      }
      
      if(HAL_I2S_Receive_DMA(&hAudioInI2s, I2S_InternalBuffer, (uint16_t)AudioInCtx[Instance].Size/2U) != HAL_OK)
 8001382:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <CCA02M1_AUDIO_IN_Record+0xe8>)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2164      	movs	r1, #100	; 0x64
 8001388:	fb01 f303 	mul.w	r3, r1, r3
 800138c:	4413      	add	r3, r2
 800138e:	331c      	adds	r3, #28
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	b29b      	uxth	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	4911      	ldr	r1, [pc, #68]	; (80013e0 <CCA02M1_AUDIO_IN_Record+0xf4>)
 800139c:	4811      	ldr	r0, [pc, #68]	; (80013e4 <CCA02M1_AUDIO_IN_Record+0xf8>)
 800139e:	f001 fc61 	bl	8002c64 <HAL_I2S_Receive_DMA>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <CCA02M1_AUDIO_IN_Record+0xc2>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80013a8:	f06f 0303 	mvn.w	r3, #3
 80013ac:	617b      	str	r3, [r7, #20]
      }
      
#endif
      
      /* Update BSP AUDIO IN state */     
      AudioInCtx[Instance].State = AUDIO_IN_STATE_RECORDING;
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <CCA02M1_AUDIO_IN_Record+0xe8>)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2164      	movs	r1, #100	; 0x64
 80013b4:	fb01 f303 	mul.w	r3, r1, r3
 80013b8:	4413      	add	r3, r2
 80013ba:	3324      	adds	r3, #36	; 0x24
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e002      	b.n	80013c8 <CCA02M1_AUDIO_IN_Record+0xdc>
      }
      /* Update BSP AUDIO IN state */     
      AudioInCtx[Instance].State = AUDIO_IN_STATE_RECORDING;
      
#else
      ret = BSP_ERROR_WRONG_PARAM;
 80013c2:	f06f 0301 	mvn.w	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
#endif
    }
  }
  /* Return BSP status */
  return ret;
 80013c8:	697b      	ldr	r3, [r7, #20]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200006d4 	.word	0x200006d4
 80013d8:	20001010 	.word	0x20001010
 80013dc:	20000978 	.word	0x20000978
 80013e0:	20000a10 	.word	0x20000a10
 80013e4:	20001a7c 	.word	0x20001a7c

080013e8 <CCA02M1_AUDIO_IN_SetVolume>:
* @param  Instance  AUDIO IN Instance. It can be 0 when I2S / SPI is used or 1 if DFSDM is used
* @param  Volume    Volume level to be returnd
* @retval BSP status
*/
int32_t CCA02M1_AUDIO_IN_SetVolume(uint32_t Instance, uint32_t Volume)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d903      	bls.n	8001404 <CCA02M1_AUDIO_IN_SetVolume+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013fc:	f06f 0301 	mvn.w	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	e04b      	b.n	800149c <CCA02M1_AUDIO_IN_SetVolume+0xb4>
  }
  else if (Instance == 0U)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d13f      	bne.n	800148a <CCA02M1_AUDIO_IN_SetVolume+0xa2>
      22,22,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,25,25,25,
      25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,
      27,27,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,
      29,29,29,29,30,30,30,30,30,30,30,31  
    };
    for (index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	e030      	b.n	8001472 <CCA02M1_AUDIO_IN_SetVolume+0x8a>
    {
      if (PDM_FilterConfig[index].mic_gain != VolumeGain[Volume])
 8001410:	4925      	ldr	r1, [pc, #148]	; (80014a8 <CCA02M1_AUDIO_IN_SetVolume+0xc0>)
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	440b      	add	r3, r1
 800141e:	3304      	adds	r3, #4
 8001420:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001424:	4921      	ldr	r1, [pc, #132]	; (80014ac <CCA02M1_AUDIO_IN_SetVolume+0xc4>)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800142c:	429a      	cmp	r2, r3
 800142e:	d01d      	beq.n	800146c <CCA02M1_AUDIO_IN_SetVolume+0x84>
      {
        PDM_FilterConfig[index].mic_gain = VolumeGain[Volume];
 8001430:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <CCA02M1_AUDIO_IN_SetVolume+0xc4>)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8001438:	491b      	ldr	r1, [pc, #108]	; (80014a8 <CCA02M1_AUDIO_IN_SetVolume+0xc0>)
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	440b      	add	r3, r1
 8001446:	3304      	adds	r3, #4
 8001448:	4602      	mov	r2, r0
 800144a:	801a      	strh	r2, [r3, #0]
        (void)PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	224c      	movs	r2, #76	; 0x4c
 8001450:	fb02 f303 	mul.w	r3, r2, r3
 8001454:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <CCA02M1_AUDIO_IN_SetVolume+0xc8>)
 8001456:	1898      	adds	r0, r3, r2
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <CCA02M1_AUDIO_IN_SetVolume+0xc0>)
 8001464:	4413      	add	r3, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f00c feb6 	bl	800e1d8 <PDM_Filter_setConfig>
    for (index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3301      	adds	r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4a10      	ldr	r2, [pc, #64]	; (80014b4 <CCA02M1_AUDIO_IN_SetVolume+0xcc>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2164      	movs	r1, #100	; 0x64
 8001478:	fb01 f303 	mul.w	r3, r1, r3
 800147c:	4413      	add	r3, r2
 800147e:	3310      	adds	r3, #16
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	429a      	cmp	r2, r3
 8001486:	d3c3      	bcc.n	8001410 <CCA02M1_AUDIO_IN_SetVolume+0x28>
 8001488:	e008      	b.n	800149c <CCA02M1_AUDIO_IN_SetVolume+0xb4>
#endif
  }
  else
  {
    /* Update AudioIn Context */
    AudioInCtx[Instance].Volume = Volume;
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <CCA02M1_AUDIO_IN_SetVolume+0xcc>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2164      	movs	r1, #100	; 0x64
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	4413      	add	r3, r2
 8001496:	3320      	adds	r3, #32
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	601a      	str	r2, [r3, #0]
  }
  /* Return BSP status */
  return ret;  
 800149c:	68fb      	ldr	r3, [r7, #12]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000960 	.word	0x20000960
 80014ac:	200004a0 	.word	0x200004a0
 80014b0:	20000830 	.word	0x20000830
 80014b4:	200006d4 	.word	0x200006d4

080014b8 <HAL_I2S_RxCpltCallback>:
written into the buffer that the user indicates when calling the CCA02M1_AUDIO_IN_Start(...) function.
* @param hi2s: I2S handle
* @retval None
*/
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);
  uint32_t index;
  
  switch(AudioInCtx[0].ChannelsNbr){
 80014c0:	4b8c      	ldr	r3, [pc, #560]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d023      	beq.n	8001510 <HAL_I2S_RxCpltCallback+0x58>
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d073      	beq.n	80015b4 <HAL_I2S_RxCpltCallback+0xfc>
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d000      	beq.n	80014d2 <HAL_I2S_RxCpltCallback+0x1a>
      break;
    }
  default:
    {
      
      break;
 80014d0:	e109      	b.n	80016e6 <HAL_I2S_RxCpltCallback+0x22e>
      uint16_t * DataTempI2S = &I2S_InternalBuffer[AudioInCtx[0].Size/4U] ;
 80014d2:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4a87      	ldr	r2, [pc, #540]	; (80016f8 <HAL_I2S_RxCpltCallback+0x240>)
 80014dc:	4413      	add	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
      for(index = 0; index < (AudioInCtx[0].Size/4U); index++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
 80014e4:	e00d      	b.n	8001502 <HAL_I2S_RxCpltCallback+0x4a>
        AudioInCtx[0].pBuff[index] = (DataTempI2S[index]);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	441a      	add	r2, r3
 80014ee:	4b81      	ldr	r3, [pc, #516]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 80014f0:	6959      	ldr	r1, [r3, #20]
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	440b      	add	r3, r1
 80014f8:	8812      	ldrh	r2, [r2, #0]
 80014fa:	801a      	strh	r2, [r3, #0]
      for(index = 0; index < (AudioInCtx[0].Size/4U); index++)
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	3301      	adds	r3, #1
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
 8001502:	4b7c      	ldr	r3, [pc, #496]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150a:	429a      	cmp	r2, r3
 800150c:	d3eb      	bcc.n	80014e6 <HAL_I2S_RxCpltCallback+0x2e>
      break;
 800150e:	e0ea      	b.n	80016e6 <HAL_I2S_RxCpltCallback+0x22e>
      uint16_t * DataTempI2S = &(I2S_InternalBuffer[AudioInCtx[0].Size/2U]);
 8001510:	4b78      	ldr	r3, [pc, #480]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	085b      	lsrs	r3, r3, #1
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4a77      	ldr	r2, [pc, #476]	; (80016f8 <HAL_I2S_RxCpltCallback+0x240>)
 800151a:	4413      	add	r3, r2
 800151c:	617b      	str	r3, [r7, #20]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) {
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
 8001522:	e040      	b.n	80015a6 <HAL_I2S_RxCpltCallback+0xee>
        a = ((uint8_t *)(DataTempI2S))[(index*2U)];
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	74fb      	strb	r3, [r7, #19]
        b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	3301      	adds	r3, #1
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	74bb      	strb	r3, [r7, #18]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] | (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 800153e:	7cfb      	ldrb	r3, [r7, #19]
 8001540:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001544:	4a6d      	ldr	r2, [pc, #436]	; (80016fc <HAL_I2S_RxCpltCallback+0x244>)
 8001546:	5cd3      	ldrb	r3, [r2, r3]
 8001548:	b25a      	sxtb	r2, r3
 800154a:	7cbb      	ldrb	r3, [r7, #18]
 800154c:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001550:	496a      	ldr	r1, [pc, #424]	; (80016fc <HAL_I2S_RxCpltCallback+0x244>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	b25b      	sxtb	r3, r3
 8001558:	4313      	orrs	r3, r2
 800155a:	b259      	sxtb	r1, r3
 800155c:	4b65      	ldr	r3, [pc, #404]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	b2ca      	uxtb	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] | (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 800156a:	7cfb      	ldrb	r3, [r7, #19]
 800156c:	085b      	lsrs	r3, r3, #1
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001574:	4a61      	ldr	r2, [pc, #388]	; (80016fc <HAL_I2S_RxCpltCallback+0x244>)
 8001576:	5cd3      	ldrb	r3, [r2, r3]
 8001578:	b25a      	sxtb	r2, r3
 800157a:	7cbb      	ldrb	r3, [r7, #18]
 800157c:	085b      	lsrs	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001584:	495d      	ldr	r1, [pc, #372]	; (80016fc <HAL_I2S_RxCpltCallback+0x244>)
 8001586:	5ccb      	ldrb	r3, [r1, r3]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	b25b      	sxtb	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b259      	sxtb	r1, r3
 8001590:	4b58      	ldr	r3, [pc, #352]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001592:	695a      	ldr	r2, [r3, #20]
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	3301      	adds	r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	b2ca      	uxtb	r2, r1
 800159e:	701a      	strb	r2, [r3, #0]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) {
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	3301      	adds	r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
 80015a6:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	085b      	lsrs	r3, r3, #1
 80015ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d3b8      	bcc.n	8001524 <HAL_I2S_RxCpltCallback+0x6c>
      break;
 80015b2:	e098      	b.n	80016e6 <HAL_I2S_RxCpltCallback+0x22e>
      uint16_t * DataTempI2S = &(I2S_InternalBuffer[AudioInCtx[0].Size/2U]);
 80015b4:	4b4f      	ldr	r3, [pc, #316]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	085b      	lsrs	r3, r3, #1
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4a4e      	ldr	r2, [pc, #312]	; (80016f8 <HAL_I2S_RxCpltCallback+0x240>)
 80015be:	4413      	add	r3, r2
 80015c0:	623b      	str	r3, [r7, #32]
      uint16_t * DataTempSPI = &(SPI_InternalBuffer[AudioInCtx[0].Size/2U]);
 80015c2:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	085b      	lsrs	r3, r3, #1
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4a4d      	ldr	r2, [pc, #308]	; (8001700 <HAL_I2S_RxCpltCallback+0x248>)
 80015cc:	4413      	add	r3, r2
 80015ce:	61fb      	str	r3, [r7, #28]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
 80015d4:	e07f      	b.n	80016d6 <HAL_I2S_RxCpltCallback+0x21e>
        a = ((uint8_t *)(DataTempI2S))[(index*2U)];
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	6a3a      	ldr	r2, [r7, #32]
 80015dc:	4413      	add	r3, r2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	76fb      	strb	r3, [r7, #27]
        b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	3301      	adds	r3, #1
 80015e8:	6a3a      	ldr	r2, [r7, #32]
 80015ea:	4413      	add	r3, r2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	76bb      	strb	r3, [r7, #26]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80015f0:	7efb      	ldrb	r3, [r7, #27]
 80015f2:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80015f6:	4a41      	ldr	r2, [pc, #260]	; (80016fc <HAL_I2S_RxCpltCallback+0x244>)
 80015f8:	5cd3      	ldrb	r3, [r2, r3]
 80015fa:	b25a      	sxtb	r2, r3
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 80015fc:	7ebb      	ldrb	r3, [r7, #26]
 80015fe:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001602:	493e      	ldr	r1, [pc, #248]	; (80016fc <HAL_I2S_RxCpltCallback+0x244>)
 8001604:	5ccb      	ldrb	r3, [r1, r3]
 8001606:	011b      	lsls	r3, r3, #4
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001608:	b25b      	sxtb	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	b259      	sxtb	r1, r3
 800160e:	4b39      	ldr	r3, [pc, #228]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	b2ca      	uxtb	r2, r1
 800161a:	701a      	strb	r2, [r3, #0]
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 800161c:	7efb      	ldrb	r3, [r7, #27]
 800161e:	085b      	lsrs	r3, r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001626:	4a35      	ldr	r2, [pc, #212]	; (80016fc <HAL_I2S_RxCpltCallback+0x244>)
 8001628:	5cd3      	ldrb	r3, [r2, r3]
 800162a:	b25a      	sxtb	r2, r3
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 800162c:	7ebb      	ldrb	r3, [r7, #26]
 800162e:	085b      	lsrs	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001636:	4931      	ldr	r1, [pc, #196]	; (80016fc <HAL_I2S_RxCpltCallback+0x244>)
 8001638:	5ccb      	ldrb	r3, [r1, r3]
 800163a:	011b      	lsls	r3, r3, #4
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 800163c:	b25b      	sxtb	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b259      	sxtb	r1, r3
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	3301      	adds	r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	b2ca      	uxtb	r2, r1
 8001650:	701a      	strb	r2, [r3, #0]
            a = ((uint8_t *)(DataTempSPI))[(index*2U)];
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	76fb      	strb	r3, [r7, #27]
            b = ((uint8_t *)(DataTempSPI))[(index*2U)+1U];
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	3301      	adds	r3, #1
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	4413      	add	r3, r2
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	76bb      	strb	r3, [r7, #26]
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800166c:	7efb      	ldrb	r3, [r7, #27]
 800166e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001672:	4a22      	ldr	r2, [pc, #136]	; (80016fc <HAL_I2S_RxCpltCallback+0x244>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	b25a      	sxtb	r2, r3
              (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8001678:	7ebb      	ldrb	r3, [r7, #26]
 800167a:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800167e:	491f      	ldr	r1, [pc, #124]	; (80016fc <HAL_I2S_RxCpltCallback+0x244>)
 8001680:	5ccb      	ldrb	r3, [r1, r3]
 8001682:	011b      	lsls	r3, r3, #4
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001684:	b25b      	sxtb	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b259      	sxtb	r1, r3
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	b2ca      	uxtb	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 800169a:	7efb      	ldrb	r3, [r7, #27]
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80016a4:	4a15      	ldr	r2, [pc, #84]	; (80016fc <HAL_I2S_RxCpltCallback+0x244>)
 80016a6:	5cd3      	ldrb	r3, [r2, r3]
 80016a8:	b25a      	sxtb	r2, r3
                (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 80016aa:	7ebb      	ldrb	r3, [r7, #26]
 80016ac:	085b      	lsrs	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80016b4:	4911      	ldr	r1, [pc, #68]	; (80016fc <HAL_I2S_RxCpltCallback+0x244>)
 80016b6:	5ccb      	ldrb	r3, [r1, r3]
 80016b8:	011b      	lsls	r3, r3, #4
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b259      	sxtb	r1, r3
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	3303      	adds	r3, #3
 80016ca:	4413      	add	r3, r2
 80016cc:	b2ca      	uxtb	r2, r1
 80016ce:	701a      	strb	r2, [r3, #0]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) {
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	3301      	adds	r3, #1
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <HAL_I2S_RxCpltCallback+0x23c>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	085b      	lsrs	r3, r3, #1
 80016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016de:	429a      	cmp	r2, r3
 80016e0:	f4ff af79 	bcc.w	80015d6 <HAL_I2S_RxCpltCallback+0x11e>
      break;
 80016e4:	bf00      	nop
    }
    
  }
  
  CCA02M1_AUDIO_IN_TransferComplete_CallBack(0);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f00a f8c1 	bl	800b86e <CCA02M1_AUDIO_IN_TransferComplete_CallBack>
}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200006d4 	.word	0x200006d4
 80016f8:	20000a10 	.word	0x20000a10
 80016fc:	20000400 	.word	0x20000400
 8001700:	20001010 	.word	0x20001010

08001704 <HAL_I2S_RxHalfCpltCallback>:
written into the buffer that the user indicates when calling the CCA02M1_AUDIO_IN_Start(...) function.
* @param hi2s: I2S handle
* @retval None
*/
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);
  uint32_t index;
  switch(AudioInCtx[0].ChannelsNbr){
 800170c:	4b82      	ldr	r3, [pc, #520]	; (8001918 <HAL_I2S_RxHalfCpltCallback+0x214>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d01e      	beq.n	8001752 <HAL_I2S_RxHalfCpltCallback+0x4e>
 8001714:	2b04      	cmp	r3, #4
 8001716:	d069      	beq.n	80017ec <HAL_I2S_RxHalfCpltCallback+0xe8>
 8001718:	2b01      	cmp	r3, #1
 800171a:	d000      	beq.n	800171e <HAL_I2S_RxHalfCpltCallback+0x1a>
      }
      break;   
    }
  default:
    {      
      break;
 800171c:	e0f5      	b.n	800190a <HAL_I2S_RxHalfCpltCallback+0x206>
      uint16_t * DataTempI2S = I2S_InternalBuffer;
 800171e:	4b7f      	ldr	r3, [pc, #508]	; (800191c <HAL_I2S_RxHalfCpltCallback+0x218>)
 8001720:	60fb      	str	r3, [r7, #12]
      for(index = 0; index < (AudioInCtx[0].Size/4U); index++)
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
 8001726:	e00d      	b.n	8001744 <HAL_I2S_RxHalfCpltCallback+0x40>
        AudioInCtx[0].pBuff[index] = (DataTempI2S[index]);
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	441a      	add	r2, r3
 8001730:	4b79      	ldr	r3, [pc, #484]	; (8001918 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001732:	6959      	ldr	r1, [r3, #20]
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	440b      	add	r3, r1
 800173a:	8812      	ldrh	r2, [r2, #0]
 800173c:	801a      	strh	r2, [r3, #0]
      for(index = 0; index < (AudioInCtx[0].Size/4U); index++)
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	3301      	adds	r3, #1
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
 8001744:	4b74      	ldr	r3, [pc, #464]	; (8001918 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174c:	429a      	cmp	r2, r3
 800174e:	d3eb      	bcc.n	8001728 <HAL_I2S_RxHalfCpltCallback+0x24>
      break;
 8001750:	e0db      	b.n	800190a <HAL_I2S_RxHalfCpltCallback+0x206>
      uint16_t * DataTempI2S = I2S_InternalBuffer;
 8001752:	4b72      	ldr	r3, [pc, #456]	; (800191c <HAL_I2S_RxHalfCpltCallback+0x218>)
 8001754:	617b      	str	r3, [r7, #20]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) {
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
 800175a:	e040      	b.n	80017de <HAL_I2S_RxHalfCpltCallback+0xda>
        a = ((uint8_t *)(DataTempI2S))[(index*2U)];
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	74fb      	strb	r3, [r7, #19]
        b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	3301      	adds	r3, #1
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	74bb      	strb	r3, [r7, #18]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001776:	7cfb      	ldrb	r3, [r7, #19]
 8001778:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800177c:	4a68      	ldr	r2, [pc, #416]	; (8001920 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	b25a      	sxtb	r2, r3
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8001782:	7cbb      	ldrb	r3, [r7, #18]
 8001784:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001788:	4965      	ldr	r1, [pc, #404]	; (8001920 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 800178a:	5ccb      	ldrb	r3, [r1, r3]
 800178c:	011b      	lsls	r3, r3, #4
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800178e:	b25b      	sxtb	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	b259      	sxtb	r1, r3
 8001794:	4b60      	ldr	r3, [pc, #384]	; (8001918 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	b2ca      	uxtb	r2, r1
 80017a0:	701a      	strb	r2, [r3, #0]
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80017a2:	7cfb      	ldrb	r3, [r7, #19]
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80017ac:	4a5c      	ldr	r2, [pc, #368]	; (8001920 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	b25a      	sxtb	r2, r3
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 80017b2:	7cbb      	ldrb	r3, [r7, #18]
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80017bc:	4958      	ldr	r1, [pc, #352]	; (8001920 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 80017be:	5ccb      	ldrb	r3, [r1, r3]
 80017c0:	011b      	lsls	r3, r3, #4
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80017c2:	b25b      	sxtb	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b259      	sxtb	r1, r3
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_I2S_RxHalfCpltCallback+0x214>)
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	3301      	adds	r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	b2ca      	uxtb	r2, r1
 80017d6:	701a      	strb	r2, [r3, #0]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) {
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	3301      	adds	r3, #1
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
 80017de:	4b4e      	ldr	r3, [pc, #312]	; (8001918 <HAL_I2S_RxHalfCpltCallback+0x214>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	085b      	lsrs	r3, r3, #1
 80017e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d3b8      	bcc.n	800175c <HAL_I2S_RxHalfCpltCallback+0x58>
      break;
 80017ea:	e08e      	b.n	800190a <HAL_I2S_RxHalfCpltCallback+0x206>
      uint16_t * DataTempI2S = I2S_InternalBuffer;
 80017ec:	4b4b      	ldr	r3, [pc, #300]	; (800191c <HAL_I2S_RxHalfCpltCallback+0x218>)
 80017ee:	623b      	str	r3, [r7, #32]
      uint16_t * DataTempSPI = SPI_InternalBuffer;
 80017f0:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <HAL_I2S_RxHalfCpltCallback+0x220>)
 80017f2:	61fb      	str	r3, [r7, #28]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) 
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
 80017f8:	e07f      	b.n	80018fa <HAL_I2S_RxHalfCpltCallback+0x1f6>
        a = ((uint8_t *)(DataTempI2S))[(index*2U)];
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	6a3a      	ldr	r2, [r7, #32]
 8001800:	4413      	add	r3, r2
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	76fb      	strb	r3, [r7, #27]
        b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	3301      	adds	r3, #1
 800180c:	6a3a      	ldr	r2, [r7, #32]
 800180e:	4413      	add	r3, r2
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	76bb      	strb	r3, [r7, #26]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001814:	7efb      	ldrb	r3, [r7, #27]
 8001816:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800181a:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 800181c:	5cd3      	ldrb	r3, [r2, r3]
 800181e:	b25a      	sxtb	r2, r3
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8001820:	7ebb      	ldrb	r3, [r7, #26]
 8001822:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001826:	493e      	ldr	r1, [pc, #248]	; (8001920 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 8001828:	5ccb      	ldrb	r3, [r1, r3]
 800182a:	011b      	lsls	r3, r3, #4
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800182c:	b25b      	sxtb	r3, r3
 800182e:	4313      	orrs	r3, r2
 8001830:	b259      	sxtb	r1, r3
 8001832:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	b2ca      	uxtb	r2, r1
 800183e:	701a      	strb	r2, [r3, #0]
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8001840:	7efb      	ldrb	r3, [r7, #27]
 8001842:	085b      	lsrs	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800184a:	4a35      	ldr	r2, [pc, #212]	; (8001920 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 800184c:	5cd3      	ldrb	r3, [r2, r3]
 800184e:	b25a      	sxtb	r2, r3
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8001850:	7ebb      	ldrb	r3, [r7, #26]
 8001852:	085b      	lsrs	r3, r3, #1
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800185a:	4931      	ldr	r1, [pc, #196]	; (8001920 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 800185c:	5ccb      	ldrb	r3, [r1, r3]
 800185e:	011b      	lsls	r3, r3, #4
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8001860:	b25b      	sxtb	r3, r3
 8001862:	4313      	orrs	r3, r2
 8001864:	b259      	sxtb	r1, r3
 8001866:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	3301      	adds	r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	b2ca      	uxtb	r2, r1
 8001874:	701a      	strb	r2, [r3, #0]
            a = ((uint8_t *)(DataTempSPI))[(index*2U)];
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	4413      	add	r3, r2
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	76fb      	strb	r3, [r7, #27]
            b = ((uint8_t *)(DataTempSPI))[(index*2U)+1U];
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	3301      	adds	r3, #1
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	4413      	add	r3, r2
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	76bb      	strb	r3, [r7, #26]
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001890:	7efb      	ldrb	r3, [r7, #27]
 8001892:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001896:	4a22      	ldr	r2, [pc, #136]	; (8001920 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 8001898:	5cd3      	ldrb	r3, [r2, r3]
 800189a:	b25a      	sxtb	r2, r3
              (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 800189c:	7ebb      	ldrb	r3, [r7, #26]
 800189e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80018a2:	491f      	ldr	r1, [pc, #124]	; (8001920 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 80018a4:	5ccb      	ldrb	r3, [r1, r3]
 80018a6:	011b      	lsls	r3, r3, #4
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	4313      	orrs	r3, r2
 80018ac:	b259      	sxtb	r1, r3
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_I2S_RxHalfCpltCallback+0x214>)
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	b2ca      	uxtb	r2, r1
 80018bc:	701a      	strb	r2, [r3, #0]
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80018be:	7efb      	ldrb	r3, [r7, #27]
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80018c8:	4a15      	ldr	r2, [pc, #84]	; (8001920 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 80018ca:	5cd3      	ldrb	r3, [r2, r3]
 80018cc:	b25a      	sxtb	r2, r3
                (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 80018ce:	7ebb      	ldrb	r3, [r7, #26]
 80018d0:	085b      	lsrs	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80018d8:	4911      	ldr	r1, [pc, #68]	; (8001920 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	011b      	lsls	r3, r3, #4
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b259      	sxtb	r1, r3
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_I2S_RxHalfCpltCallback+0x214>)
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	3303      	adds	r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	b2ca      	uxtb	r2, r1
 80018f2:	701a      	strb	r2, [r3, #0]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) 
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	3301      	adds	r3, #1
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_I2S_RxHalfCpltCallback+0x214>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001902:	429a      	cmp	r2, r3
 8001904:	f4ff af79 	bcc.w	80017fa <HAL_I2S_RxHalfCpltCallback+0xf6>
      break;   
 8001908:	bf00      	nop
    }
    
  }
  
  CCA02M1_AUDIO_IN_HalfTransfer_CallBack(0);
 800190a:	2000      	movs	r0, #0
 800190c:	f009 ffa5 	bl	800b85a <CCA02M1_AUDIO_IN_HalfTransfer_CallBack>
}
 8001910:	bf00      	nop
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200006d4 	.word	0x200006d4
 800191c:	20000a10 	.word	0x20000a10
 8001920:	20000400 	.word	0x20000400
 8001924:	20001010 	.word	0x20001010

08001928 <I2S_MspInit>:
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
}

#else
static void I2S_MspInit(I2S_HandleTypeDef *hi2s)
{	
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the I2S2 peripheral clock */
  AUDIO_IN_I2S_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <I2S_MspInit+0x9c>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <I2S_MspInit+0x9c>)
 800193a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193e:	6413      	str	r3, [r2, #64]	; 0x40
 8001940:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <I2S_MspInit+0x9c>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	693b      	ldr	r3, [r7, #16]
  
  /* Enable I2S GPIO clocks */
  AUDIO_IN_I2S_SCK_GPIO_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <I2S_MspInit+0x9c>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <I2S_MspInit+0x9c>)
 8001956:	f043 0302 	orr.w	r3, r3, #2
 800195a:	6313      	str	r3, [r2, #48]	; 0x30
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <I2S_MspInit+0x9c>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
  AUDIO_IN_I2S_MOSI_GPIO_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <I2S_MspInit+0x9c>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <I2S_MspInit+0x9c>)
 8001972:	f043 0302 	orr.w	r3, r3, #2
 8001976:	6313      	str	r3, [r2, #48]	; 0x30
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <I2S_MspInit+0x9c>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
  
  /* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001988:	2301      	movs	r3, #1
 800198a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800198c:	2302      	movs	r3, #2
 800198e:	623b      	str	r3, [r7, #32]
  
  
  GPIO_InitStruct.Pin       = AUDIO_IN_I2S_SCK_PIN;
 8001990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = AUDIO_IN_I2S_SCK_AF;
 8001996:	2305      	movs	r3, #5
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_IN_I2S_SCK_GPIO_PORT, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4809      	ldr	r0, [pc, #36]	; (80019c8 <I2S_MspInit+0xa0>)
 80019a2:	f000 fecb 	bl	800273c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin       = AUDIO_IN_I2S_MOSI_PIN ;
 80019a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = AUDIO_IN_I2S_MOSI_AF;
 80019ac:	2305      	movs	r3, #5
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_IN_I2S_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	4804      	ldr	r0, [pc, #16]	; (80019c8 <I2S_MspInit+0xa0>)
 80019b8:	f000 fec0 	bl	800273c <HAL_GPIO_Init>
  
} 
 80019bc:	bf00      	nop
 80019be:	3728      	adds	r7, #40	; 0x28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020400 	.word	0x40020400

080019cc <SPI_MspInit>:

static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{  
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	; 0x30
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable GPIO TX/RX clock */
  AUDIO_IN_SPI_SCK_GPIO_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <SPI_MspInit+0xd0>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	4a2f      	ldr	r2, [pc, #188]	; (8001a9c <SPI_MspInit+0xd0>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6313      	str	r3, [r2, #48]	; 0x30
 80019e4:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <SPI_MspInit+0xd0>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	69bb      	ldr	r3, [r7, #24]
  AUDIO_IN_SPI_MISO_GPIO_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <SPI_MspInit+0xd0>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a28      	ldr	r2, [pc, #160]	; (8001a9c <SPI_MspInit+0xd0>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001a00:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <SPI_MspInit+0xd0>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	697b      	ldr	r3, [r7, #20]
  AUDIO_IN_SPI_MOSI_GPIO_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <SPI_MspInit+0xd0>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <SPI_MspInit+0xd0>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <SPI_MspInit+0xd0>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	693b      	ldr	r3, [r7, #16]
  /* Enable SPI3 clock */
  AUDIO_IN_SPI_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <SPI_MspInit+0xd0>)
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <SPI_MspInit+0xd0>)
 8001a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a36:	6453      	str	r3, [r2, #68]	; 0x44
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <SPI_MspInit+0xd0>)
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
  /* Enable DMA1 clock */
  AUDIO_IN_SPI_DMAx_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <SPI_MspInit+0xd0>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <SPI_MspInit+0xd0>)
 8001a4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a52:	6313      	str	r3, [r2, #48]	; 0x30
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <SPI_MspInit+0xd0>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
  
  /*##-2- Configure peripheral GPIO ##########################################*/
  /* SPI SCK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = AUDIO_IN_SPI_SCK_PIN;
 8001a60:	2320      	movs	r3, #32
 8001a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = AUDIO_IN_SPI_SCK_AF;
 8001a70:	2305      	movs	r3, #5
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  HAL_GPIO_Init(AUDIO_IN_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <SPI_MspInit+0xd4>)
 8001a7c:	f000 fe5e 	bl	800273c <HAL_GPIO_Init>
  
  /* SPI MOSI GPIO pin configuration  */
  GPIO_InitStruct.Pin = AUDIO_IN_SPI_MOSI_PIN;
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = AUDIO_IN_SPI_MOSI_AF;
 8001a84:	2305      	movs	r3, #5
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <SPI_MspInit+0xd4>)
 8001a90:	f000 fe54 	bl	800273c <HAL_GPIO_Init>
  
  
}
 8001a94:	bf00      	nop
 8001a96:	3730      	adds	r7, #48	; 0x30
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000

08001aa4 <AUDIO_IN_Timer_Init>:
* @brief Audio Timer Init
* @param None
* @retval None
*/
static HAL_StatusTypeDef AUDIO_IN_Timer_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret =  HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  static TIM_IC_InitTypeDef       sICConfig;
  static TIM_OC_InitTypeDef       sOCConfig; 
  GPIO_InitTypeDef   GPIO_InitStruct;
  
  /* Enable AUDIO_TIMER clock*/
  AUDIO_IN_TIMER_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <AUDIO_IN_Timer_Init+0x14c>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	4a4d      	ldr	r2, [pc, #308]	; (8001bf0 <AUDIO_IN_Timer_Init+0x14c>)
 8001aba:	f043 0302 	orr.w	r3, r3, #2
 8001abe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <AUDIO_IN_Timer_Init+0x14c>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
  AUDIO_IN_TIMER_CHOUT_GPIO_PORT_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <AUDIO_IN_Timer_Init+0x14c>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	4a46      	ldr	r2, [pc, #280]	; (8001bf0 <AUDIO_IN_Timer_Init+0x14c>)
 8001ad6:	f043 0302 	orr.w	r3, r3, #2
 8001ada:	6313      	str	r3, [r2, #48]	; 0x30
 8001adc:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <AUDIO_IN_Timer_Init+0x14c>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
  AUDIO_IN_TIMER_CHIN_GPIO_PORT_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	4b40      	ldr	r3, [pc, #256]	; (8001bf0 <AUDIO_IN_Timer_Init+0x14c>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	4a3f      	ldr	r2, [pc, #252]	; (8001bf0 <AUDIO_IN_Timer_Init+0x14c>)
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	6313      	str	r3, [r2, #48]	; 0x30
 8001af8:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <AUDIO_IN_Timer_Init+0x14c>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
  
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	61fb      	str	r3, [r7, #28]
  
  GPIO_InitStruct.Alternate = AUDIO_IN_TIMER_CHIN_AF;
 8001b10:	2302      	movs	r3, #2
 8001b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pin = AUDIO_IN_TIMER_CHIN_PIN;
 8001b14:	2310      	movs	r3, #16
 8001b16:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHIN_GPIO_PORT, &GPIO_InitStruct);
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4835      	ldr	r0, [pc, #212]	; (8001bf4 <AUDIO_IN_Timer_Init+0x150>)
 8001b20:	f000 fe0c 	bl	800273c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = AUDIO_IN_TIMER_CHOUT_AF;
 8001b24:	2302      	movs	r3, #2
 8001b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pin = AUDIO_IN_TIMER_CHOUT_PIN;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHOUT_GPIO_PORT, &GPIO_InitStruct);
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	4619      	mov	r1, r3
 8001b32:	4830      	ldr	r0, [pc, #192]	; (8001bf4 <AUDIO_IN_Timer_Init+0x150>)
 8001b34:	f000 fe02 	bl	800273c <HAL_GPIO_Init>
  
  TimDividerHandle.Instance = AUDIO_IN_TIMER;
 8001b38:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <AUDIO_IN_Timer_Init+0x154>)
 8001b3a:	4a30      	ldr	r2, [pc, #192]	; (8001bfc <AUDIO_IN_Timer_Init+0x158>)
 8001b3c:	601a      	str	r2, [r3, #0]
  
  /* Configure the Input: channel_1 */
  sICConfig.ICPolarity  = TIM_ICPOLARITY_RISING;
 8001b3e:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <AUDIO_IN_Timer_Init+0x15c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
  sICConfig.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b44:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <AUDIO_IN_Timer_Init+0x15c>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	605a      	str	r2, [r3, #4]
  sICConfig.ICPrescaler = TIM_ICPSC_DIV1;
 8001b4a:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <AUDIO_IN_Timer_Init+0x15c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  sICConfig.ICFilter = 0;
 8001b50:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <AUDIO_IN_Timer_Init+0x15c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  if(HAL_TIM_IC_ConfigChannel(&TimDividerHandle, &sICConfig, TIM_CHANNEL_1) != HAL_OK)
 8001b56:	2200      	movs	r2, #0
 8001b58:	4929      	ldr	r1, [pc, #164]	; (8001c00 <AUDIO_IN_Timer_Init+0x15c>)
 8001b5a:	4827      	ldr	r0, [pc, #156]	; (8001bf8 <AUDIO_IN_Timer_Init+0x154>)
 8001b5c:	f004 fc85 	bl	800646a <HAL_TIM_IC_ConfigChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <AUDIO_IN_Timer_Init+0xc8>
  {
    ret =  HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  /* Configure TIM1 in Gated Slave mode for the external trigger (Filtered Timer
  Input 1) */
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <AUDIO_IN_Timer_Init+0x160>)
 8001b6e:	2250      	movs	r2, #80	; 0x50
 8001b70:	605a      	str	r2, [r3, #4]
  sSlaveConfig.SlaveMode    = TIM_SLAVEMODE_EXTERNAL1;
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <AUDIO_IN_Timer_Init+0x160>)
 8001b74:	2207      	movs	r2, #7
 8001b76:	601a      	str	r2, [r3, #0]
  if( HAL_TIM_SlaveConfigSynchronization(&TimDividerHandle, &sSlaveConfig) != HAL_OK)
 8001b78:	4922      	ldr	r1, [pc, #136]	; (8001c04 <AUDIO_IN_Timer_Init+0x160>)
 8001b7a:	481f      	ldr	r0, [pc, #124]	; (8001bf8 <AUDIO_IN_Timer_Init+0x154>)
 8001b7c:	f004 fdd8 	bl	8006730 <HAL_TIM_SlaveConfigSynchro>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <AUDIO_IN_Timer_Init+0xe8>
  {
    ret =  HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  /* Initialize TIM3 peripheral in PWM mode*/
  TimDividerHandle.Init.Period            = 1;
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <AUDIO_IN_Timer_Init+0x154>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	60da      	str	r2, [r3, #12]
  TimDividerHandle.Init.Prescaler         = 0;
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <AUDIO_IN_Timer_Init+0x154>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
  TimDividerHandle.Init.ClockDivision     = 0;
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <AUDIO_IN_Timer_Init+0x154>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  TimDividerHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <AUDIO_IN_Timer_Init+0x154>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  TimDividerHandle.Init.RepetitionCounter = 0;
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <AUDIO_IN_Timer_Init+0x154>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
  if(HAL_TIM_PWM_Init(&TimDividerHandle) != HAL_OK)
 8001baa:	4813      	ldr	r0, [pc, #76]	; (8001bf8 <AUDIO_IN_Timer_Init+0x154>)
 8001bac:	f004 fc06 	bl	80063bc <HAL_TIM_PWM_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <AUDIO_IN_Timer_Init+0x118>
  {
    ret =  HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  /* Configure the PWM_channel_1  */
  sOCConfig.OCMode     = TIM_OCMODE_PWM1;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <AUDIO_IN_Timer_Init+0x164>)
 8001bbe:	2260      	movs	r2, #96	; 0x60
 8001bc0:	601a      	str	r2, [r3, #0]
  sOCConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <AUDIO_IN_Timer_Init+0x164>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  sOCConfig.Pulse = 1;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <AUDIO_IN_Timer_Init+0x164>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	605a      	str	r2, [r3, #4]
  if(HAL_TIM_PWM_ConfigChannel(&TimDividerHandle, &sOCConfig, TIM_CHANNEL_2) != HAL_OK)
 8001bce:	2204      	movs	r2, #4
 8001bd0:	490d      	ldr	r1, [pc, #52]	; (8001c08 <AUDIO_IN_Timer_Init+0x164>)
 8001bd2:	4809      	ldr	r0, [pc, #36]	; (8001bf8 <AUDIO_IN_Timer_Init+0x154>)
 8001bd4:	f004 fce6 	bl	80065a4 <HAL_TIM_PWM_ConfigChannel>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <AUDIO_IN_Timer_Init+0x140>
  {
    ret =  HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8001be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	200009d0 	.word	0x200009d0
 8001bfc:	40000400 	.word	0x40000400
 8001c00:	200017c8 	.word	0x200017c8
 8001c04:	200017d8 	.word	0x200017d8
 8001c08:	200017ec 	.word	0x200017ec

08001c0c <AUDIO_IN_Timer_Start>:
* @brief Audio Timer Start
* @param None
* @retval None
*/
static HAL_StatusTypeDef AUDIO_IN_Timer_Start(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
  
  HAL_StatusTypeDef ret =  HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	71fb      	strb	r3, [r7, #7]
  if(HAL_TIM_IC_Start(&TimDividerHandle, TIM_CHANNEL_1) != HAL_OK)
 8001c16:	2100      	movs	r1, #0
 8001c18:	480a      	ldr	r0, [pc, #40]	; (8001c44 <AUDIO_IN_Timer_Start+0x38>)
 8001c1a:	f004 fc04 	bl	8006426 <HAL_TIM_IC_Start>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <AUDIO_IN_Timer_Start+0x1c>
  {
    ret =  HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	71fb      	strb	r3, [r7, #7]
  }
  /* Start the Output Compare */
  if(HAL_TIM_OC_Start(&TimDividerHandle, TIM_CHANNEL_2) != HAL_OK)
 8001c28:	2104      	movs	r1, #4
 8001c2a:	4806      	ldr	r0, [pc, #24]	; (8001c44 <AUDIO_IN_Timer_Start+0x38>)
 8001c2c:	f004 fb88 	bl	8006340 <HAL_TIM_OC_Start>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <AUDIO_IN_Timer_Start+0x2e>
  {
    ret =  HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200009d0 	.word	0x200009d0

08001c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <HAL_Init+0x40>)
 8001c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_Init+0x40>)
 8001c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <HAL_Init+0x40>)
 8001c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c70:	2003      	movs	r0, #3
 8001c72:	f000 f955 	bl	8001f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c76:	200f      	movs	r0, #15
 8001c78:	f000 f810 	bl	8001c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c7c:	f000 f806 	bl	8001c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023c00 	.word	0x40023c00

08001c8c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_InitTick+0x54>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_InitTick+0x58>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 f965 	bl	8001f8a <HAL_SYSTICK_Config>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00e      	b.n	8001ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b0f      	cmp	r3, #15
 8001cce:	d80a      	bhi.n	8001ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f000 f92d 	bl	8001f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cdc:	4a06      	ldr	r2, [pc, #24]	; (8001cf8 <HAL_InitTick+0x5c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200005f0 	.word	0x200005f0
 8001cf4:	200005a8 	.word	0x200005a8
 8001cf8:	200005a4 	.word	0x200005a4

08001cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	200005a8 	.word	0x200005a8
 8001d20:	20001ac4 	.word	0x20001ac4

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20001ac4 	.word	0x20001ac4

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff ffee 	bl	8001d24 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d005      	beq.n	8001d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_Delay+0x40>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d62:	bf00      	nop
 8001d64:	f7ff ffde 	bl	8001d24 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <HAL_Delay+0x28>
  {
  }
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200005a8 	.word	0x200005a8

08001d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db2:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	60d3      	str	r3, [r2, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0307 	and.w	r3, r3, #7
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	db0b      	blt.n	8001e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4907      	ldr	r1, [pc, #28]	; (8001e1c <__NVIC_EnableIRQ+0x38>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2001      	movs	r0, #1
 8001e06:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000e100 	.word	0xe000e100

08001e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	db0a      	blt.n	8001e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	490c      	ldr	r1, [pc, #48]	; (8001e6c <__NVIC_SetPriority+0x4c>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	440b      	add	r3, r1
 8001e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e48:	e00a      	b.n	8001e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <__NVIC_SetPriority+0x50>)
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3b04      	subs	r3, #4
 8001e58:	0112      	lsls	r2, r2, #4
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	761a      	strb	r2, [r3, #24]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f1c3 0307 	rsb	r3, r3, #7
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	bf28      	it	cs
 8001e92:	2304      	movcs	r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d902      	bls.n	8001ea4 <NVIC_EncodePriority+0x30>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3b03      	subs	r3, #3
 8001ea2:	e000      	b.n	8001ea6 <NVIC_EncodePriority+0x32>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43d9      	mvns	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	4313      	orrs	r3, r2
         );
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eec:	d301      	bcc.n	8001ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00f      	b.n	8001f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <SysTick_Config+0x40>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efa:	210f      	movs	r1, #15
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	f7ff ff8e 	bl	8001e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <SysTick_Config+0x40>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <SysTick_Config+0x40>)
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff29 	bl	8001d80 <__NVIC_SetPriorityGrouping>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f48:	f7ff ff3e 	bl	8001dc8 <__NVIC_GetPriorityGrouping>
 8001f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	6978      	ldr	r0, [r7, #20]
 8001f54:	f7ff ff8e 	bl	8001e74 <NVIC_EncodePriority>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff5d 	bl	8001e20 <__NVIC_SetPriority>
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff31 	bl	8001de4 <__NVIC_EnableIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffa2 	bl	8001edc <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff feb8 	bl	8001d24 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e099      	b.n	80020f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe0:	e00f      	b.n	8002002 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe2:	f7ff fe9f 	bl	8001d24 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d908      	bls.n	8002002 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e078      	b.n	80020f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1e8      	bne.n	8001fe2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4b38      	ldr	r3, [pc, #224]	; (80020fc <HAL_DMA_Init+0x158>)
 800201c:	4013      	ands	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002046:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	2b04      	cmp	r3, #4
 800205a:	d107      	bne.n	800206c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	4313      	orrs	r3, r2
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f023 0307 	bic.w	r3, r3, #7
 8002082:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4313      	orrs	r3, r2
 800208c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2b04      	cmp	r3, #4
 8002094:	d117      	bne.n	80020c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4313      	orrs	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00e      	beq.n	80020c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 facd 	bl	8002648 <DMA_CheckFifoParam>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2240      	movs	r2, #64	; 0x40
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020c2:	2301      	movs	r3, #1
 80020c4:	e016      	b.n	80020f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fa84 	bl	80025dc <DMA_CalcBaseAndBitshift>
 80020d4:	4603      	mov	r3, r0
 80020d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	223f      	movs	r2, #63	; 0x3f
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	f010803f 	.word	0xf010803f

08002100 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e050      	b.n	80021b4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d101      	bne.n	8002122 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800211e:	2302      	movs	r3, #2
 8002120:	e048      	b.n	80021b4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0201 	bic.w	r2, r2, #1
 8002130:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2200      	movs	r2, #0
 8002140:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2221      	movs	r2, #33	; 0x21
 8002160:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fa3a 	bl	80025dc <DMA_CalcBaseAndBitshift>
 8002168:	4603      	mov	r3, r0
 800216a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	223f      	movs	r2, #63	; 0x3f
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_DMA_Start_IT+0x26>
 80021de:	2302      	movs	r3, #2
 80021e0:	e040      	b.n	8002264 <HAL_DMA_Start_IT+0xa8>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d12f      	bne.n	8002256 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2202      	movs	r2, #2
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f9b8 	bl	8002580 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	223f      	movs	r2, #63	; 0x3f
 8002216:	409a      	lsls	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0216 	orr.w	r2, r2, #22
 800222a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0208 	orr.w	r2, r2, #8
 8002242:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e005      	b.n	8002262 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800225e:	2302      	movs	r3, #2
 8002260:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002262:	7dfb      	ldrb	r3, [r7, #23]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002278:	4b92      	ldr	r3, [pc, #584]	; (80024c4 <HAL_DMA_IRQHandler+0x258>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a92      	ldr	r2, [pc, #584]	; (80024c8 <HAL_DMA_IRQHandler+0x25c>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	0a9b      	lsrs	r3, r3, #10
 8002284:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002296:	2208      	movs	r2, #8
 8002298:	409a      	lsls	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d01a      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d013      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0204 	bic.w	r2, r2, #4
 80022be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	2208      	movs	r2, #8
 80022c6:	409a      	lsls	r2, r3
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	f043 0201 	orr.w	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	2201      	movs	r2, #1
 80022de:	409a      	lsls	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d012      	beq.n	800230e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00b      	beq.n	800230e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	2201      	movs	r2, #1
 80022fc:	409a      	lsls	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	f043 0202 	orr.w	r2, r3, #2
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	2204      	movs	r2, #4
 8002314:	409a      	lsls	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d012      	beq.n	8002344 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00b      	beq.n	8002344 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	2204      	movs	r2, #4
 8002332:	409a      	lsls	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233c:	f043 0204 	orr.w	r2, r3, #4
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	2210      	movs	r2, #16
 800234a:	409a      	lsls	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d043      	beq.n	80023dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d03c      	beq.n	80023dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	2210      	movs	r2, #16
 8002368:	409a      	lsls	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d018      	beq.n	80023ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d108      	bne.n	800239c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d024      	beq.n	80023dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	4798      	blx	r3
 800239a:	e01f      	b.n	80023dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01b      	beq.n	80023dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	4798      	blx	r3
 80023ac:	e016      	b.n	80023dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0208 	bic.w	r2, r2, #8
 80023ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	2220      	movs	r2, #32
 80023e2:	409a      	lsls	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 808e 	beq.w	800250a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8086 	beq.w	800250a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002402:	2220      	movs	r2, #32
 8002404:	409a      	lsls	r2, r3
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b05      	cmp	r3, #5
 8002414:	d136      	bne.n	8002484 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0216 	bic.w	r2, r2, #22
 8002424:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002434:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d103      	bne.n	8002446 <HAL_DMA_IRQHandler+0x1da>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0208 	bic.w	r2, r2, #8
 8002454:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	223f      	movs	r2, #63	; 0x3f
 800245c:	409a      	lsls	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002476:	2b00      	cmp	r3, #0
 8002478:	d07d      	beq.n	8002576 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
        }
        return;
 8002482:	e078      	b.n	8002576 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d01c      	beq.n	80024cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d108      	bne.n	80024b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d030      	beq.n	800250a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
 80024b0:	e02b      	b.n	800250a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d027      	beq.n	800250a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
 80024c2:	e022      	b.n	800250a <HAL_DMA_IRQHandler+0x29e>
 80024c4:	200005f0 	.word	0x200005f0
 80024c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10f      	bne.n	80024fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0210 	bic.w	r2, r2, #16
 80024e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	2b00      	cmp	r3, #0
 8002510:	d032      	beq.n	8002578 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d022      	beq.n	8002564 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2205      	movs	r2, #5
 8002522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0201 	bic.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	3301      	adds	r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	429a      	cmp	r2, r3
 8002540:	d307      	bcc.n	8002552 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f2      	bne.n	8002536 <HAL_DMA_IRQHandler+0x2ca>
 8002550:	e000      	b.n	8002554 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002552:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4798      	blx	r3
 8002574:	e000      	b.n	8002578 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002576:	bf00      	nop
    }
  }
}
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop

08002580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800259c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b40      	cmp	r3, #64	; 0x40
 80025ac:	d108      	bne.n	80025c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025be:	e007      	b.n	80025d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	60da      	str	r2, [r3, #12]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	3b10      	subs	r3, #16
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <DMA_CalcBaseAndBitshift+0x64>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025f6:	4a13      	ldr	r2, [pc, #76]	; (8002644 <DMA_CalcBaseAndBitshift+0x68>)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d909      	bls.n	800261e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002612:	f023 0303 	bic.w	r3, r3, #3
 8002616:	1d1a      	adds	r2, r3, #4
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	659a      	str	r2, [r3, #88]	; 0x58
 800261c:	e007      	b.n	800262e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002626:	f023 0303 	bic.w	r3, r3, #3
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	aaaaaaab 	.word	0xaaaaaaab
 8002644:	0800fe24 	.word	0x0800fe24

08002648 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11f      	bne.n	80026a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d855      	bhi.n	8002714 <DMA_CheckFifoParam+0xcc>
 8002668:	a201      	add	r2, pc, #4	; (adr r2, 8002670 <DMA_CheckFifoParam+0x28>)
 800266a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266e:	bf00      	nop
 8002670:	08002681 	.word	0x08002681
 8002674:	08002693 	.word	0x08002693
 8002678:	08002681 	.word	0x08002681
 800267c:	08002715 	.word	0x08002715
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d045      	beq.n	8002718 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002690:	e042      	b.n	8002718 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800269a:	d13f      	bne.n	800271c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a0:	e03c      	b.n	800271c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026aa:	d121      	bne.n	80026f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d836      	bhi.n	8002720 <DMA_CheckFifoParam+0xd8>
 80026b2:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <DMA_CheckFifoParam+0x70>)
 80026b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b8:	080026c9 	.word	0x080026c9
 80026bc:	080026cf 	.word	0x080026cf
 80026c0:	080026c9 	.word	0x080026c9
 80026c4:	080026e1 	.word	0x080026e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      break;
 80026cc:	e02f      	b.n	800272e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d024      	beq.n	8002724 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026de:	e021      	b.n	8002724 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026e8:	d11e      	bne.n	8002728 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026ee:	e01b      	b.n	8002728 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d902      	bls.n	80026fc <DMA_CheckFifoParam+0xb4>
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d003      	beq.n	8002702 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026fa:	e018      	b.n	800272e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002700:	e015      	b.n	800272e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00e      	beq.n	800272c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
      break;
 8002712:	e00b      	b.n	800272c <DMA_CheckFifoParam+0xe4>
      break;
 8002714:	bf00      	nop
 8002716:	e00a      	b.n	800272e <DMA_CheckFifoParam+0xe6>
      break;
 8002718:	bf00      	nop
 800271a:	e008      	b.n	800272e <DMA_CheckFifoParam+0xe6>
      break;
 800271c:	bf00      	nop
 800271e:	e006      	b.n	800272e <DMA_CheckFifoParam+0xe6>
      break;
 8002720:	bf00      	nop
 8002722:	e004      	b.n	800272e <DMA_CheckFifoParam+0xe6>
      break;
 8002724:	bf00      	nop
 8002726:	e002      	b.n	800272e <DMA_CheckFifoParam+0xe6>
      break;   
 8002728:	bf00      	nop
 800272a:	e000      	b.n	800272e <DMA_CheckFifoParam+0xe6>
      break;
 800272c:	bf00      	nop
    }
  } 
  
  return status; 
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	e165      	b.n	8002a24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002758:	2201      	movs	r2, #1
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	429a      	cmp	r2, r3
 8002772:	f040 8154 	bne.w	8002a1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d00b      	beq.n	8002796 <HAL_GPIO_Init+0x5a>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d007      	beq.n	8002796 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800278a:	2b11      	cmp	r3, #17
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b12      	cmp	r3, #18
 8002794:	d130      	bne.n	80027f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	2203      	movs	r2, #3
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027cc:	2201      	movs	r2, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 0201 	and.w	r2, r3, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0xfc>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b12      	cmp	r3, #18
 8002836:	d123      	bne.n	8002880 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	08da      	lsrs	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3208      	adds	r2, #8
 8002840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	220f      	movs	r2, #15
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	08da      	lsrs	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3208      	adds	r2, #8
 800287a:	69b9      	ldr	r1, [r7, #24]
 800287c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	2203      	movs	r2, #3
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0203 	and.w	r2, r3, #3
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80ae 	beq.w	8002a1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b5c      	ldr	r3, [pc, #368]	; (8002a38 <HAL_GPIO_Init+0x2fc>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	4a5b      	ldr	r2, [pc, #364]	; (8002a38 <HAL_GPIO_Init+0x2fc>)
 80028cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d0:	6453      	str	r3, [r2, #68]	; 0x44
 80028d2:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <HAL_GPIO_Init+0x2fc>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028de:	4a57      	ldr	r2, [pc, #348]	; (8002a3c <HAL_GPIO_Init+0x300>)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3302      	adds	r3, #2
 80028e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	220f      	movs	r2, #15
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a4e      	ldr	r2, [pc, #312]	; (8002a40 <HAL_GPIO_Init+0x304>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d025      	beq.n	8002956 <HAL_GPIO_Init+0x21a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4d      	ldr	r2, [pc, #308]	; (8002a44 <HAL_GPIO_Init+0x308>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01f      	beq.n	8002952 <HAL_GPIO_Init+0x216>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4c      	ldr	r2, [pc, #304]	; (8002a48 <HAL_GPIO_Init+0x30c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d019      	beq.n	800294e <HAL_GPIO_Init+0x212>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a4b      	ldr	r2, [pc, #300]	; (8002a4c <HAL_GPIO_Init+0x310>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_GPIO_Init+0x20e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4a      	ldr	r2, [pc, #296]	; (8002a50 <HAL_GPIO_Init+0x314>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00d      	beq.n	8002946 <HAL_GPIO_Init+0x20a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a49      	ldr	r2, [pc, #292]	; (8002a54 <HAL_GPIO_Init+0x318>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d007      	beq.n	8002942 <HAL_GPIO_Init+0x206>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a48      	ldr	r2, [pc, #288]	; (8002a58 <HAL_GPIO_Init+0x31c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_GPIO_Init+0x202>
 800293a:	2306      	movs	r3, #6
 800293c:	e00c      	b.n	8002958 <HAL_GPIO_Init+0x21c>
 800293e:	2307      	movs	r3, #7
 8002940:	e00a      	b.n	8002958 <HAL_GPIO_Init+0x21c>
 8002942:	2305      	movs	r3, #5
 8002944:	e008      	b.n	8002958 <HAL_GPIO_Init+0x21c>
 8002946:	2304      	movs	r3, #4
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x21c>
 800294a:	2303      	movs	r3, #3
 800294c:	e004      	b.n	8002958 <HAL_GPIO_Init+0x21c>
 800294e:	2302      	movs	r3, #2
 8002950:	e002      	b.n	8002958 <HAL_GPIO_Init+0x21c>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_GPIO_Init+0x21c>
 8002956:	2300      	movs	r3, #0
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	f002 0203 	and.w	r2, r2, #3
 800295e:	0092      	lsls	r2, r2, #2
 8002960:	4093      	lsls	r3, r2
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002968:	4934      	ldr	r1, [pc, #208]	; (8002a3c <HAL_GPIO_Init+0x300>)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002976:	4b39      	ldr	r3, [pc, #228]	; (8002a5c <HAL_GPIO_Init+0x320>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800299a:	4a30      	ldr	r2, [pc, #192]	; (8002a5c <HAL_GPIO_Init+0x320>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <HAL_GPIO_Init+0x320>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c4:	4a25      	ldr	r2, [pc, #148]	; (8002a5c <HAL_GPIO_Init+0x320>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_GPIO_Init+0x320>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ee:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <HAL_GPIO_Init+0x320>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f4:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <HAL_GPIO_Init+0x320>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a18:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <HAL_GPIO_Init+0x320>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	f67f ae96 	bls.w	8002758 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3724      	adds	r7, #36	; 0x24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40013800 	.word	0x40013800
 8002a40:	40020000 	.word	0x40020000
 8002a44:	40020400 	.word	0x40020400
 8002a48:	40020800 	.word	0x40020800
 8002a4c:	40020c00 	.word	0x40020c00
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40021400 	.word	0x40021400
 8002a58:	40021800 	.word	0x40021800
 8002a5c:	40013c00 	.word	0x40013c00

08002a60 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0e1      	b.n	8002c36 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a6d      	ldr	r2, [pc, #436]	; (8002c40 <HAL_I2S_Init+0x1e0>)
 8002a8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f8df 	bl	8002c50 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2202      	movs	r2, #2
 8002a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002aa8:	f023 030f 	bic.w	r3, r3, #15
 8002aac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d06f      	beq.n	8002b9e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d102      	bne.n	8002acc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002ac6:	2310      	movs	r3, #16
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	e001      	b.n	8002ad0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002acc:	2320      	movs	r3, #32
 8002ace:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d802      	bhi.n	8002ade <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a58      	ldr	r2, [pc, #352]	; (8002c44 <HAL_I2S_Init+0x1e4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d004      	beq.n	8002af2 <HAL_I2S_Init+0x92>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a56      	ldr	r2, [pc, #344]	; (8002c48 <HAL_I2S_Init+0x1e8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d104      	bne.n	8002afc <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8002af2:	2001      	movs	r0, #1
 8002af4:	f002 f9bc 	bl	8004e70 <HAL_RCCEx_GetPeriphCLKFreq>
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	e003      	b.n	8002b04 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8002afc:	2002      	movs	r0, #2
 8002afe:	f002 f9b7 	bl	8004e70 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b02:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0c:	d125      	bne.n	8002b5a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d010      	beq.n	8002b38 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	461a      	mov	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b32:	3305      	adds	r3, #5
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	e01f      	b.n	8002b78 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	3305      	adds	r3, #5
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	e00e      	b.n	8002b78 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	3305      	adds	r3, #5
 8002b76:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4a34      	ldr	r2, [pc, #208]	; (8002c4c <HAL_I2S_Init+0x1ec>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	08db      	lsrs	r3, r3, #3
 8002b82:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	085b      	lsrs	r3, r3, #1
 8002b94:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	e003      	b.n	8002ba6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d902      	bls.n	8002bb2 <HAL_I2S_Init+0x152>
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2bff      	cmp	r3, #255	; 0xff
 8002bb0:	d907      	bls.n	8002bc2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f043 0210 	orr.w	r2, r3, #16
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e039      	b.n	8002c36 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	ea42 0103 	orr.w	r1, r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002be0:	f023 030f 	bic.w	r3, r3, #15
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6851      	ldr	r1, [r2, #4]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6892      	ldr	r2, [r2, #8]
 8002bec:	4311      	orrs	r1, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68d2      	ldr	r2, [r2, #12]
 8002bf2:	4311      	orrs	r1, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6992      	ldr	r2, [r2, #24]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c04:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b30      	cmp	r3, #48	; 0x30
 8002c0c:	d003      	beq.n	8002c16 <HAL_I2S_Init+0x1b6>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2bb0      	cmp	r3, #176	; 0xb0
 8002c14:	d107      	bne.n	8002c26 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c24:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	08002f69 	.word	0x08002f69
 8002c44:	40003800 	.word	0x40003800
 8002c48:	40003c00 	.word	0x40003c00
 8002c4c:	cccccccd 	.word	0xcccccccd

08002c50 <HAL_I2S_MspInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_MspInit(I2S_HandleTypeDef *hi2s)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_MspInit could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_I2S_Receive_DMA+0x1a>
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0a1      	b.n	8002dc6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2S_Receive_DMA+0x2e>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e099      	b.n	8002dc6 <HAL_I2S_Receive_DMA+0x162>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d005      	beq.n	8002cb2 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e089      	b.n	8002dc6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d002      	beq.n	8002cde <HAL_I2S_Receive_DMA+0x7a>
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	865a      	strh	r2, [r3, #50]	; 0x32
 8002cf2:	e005      	b.n	8002d00 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	88fa      	ldrh	r2, [r7, #6]
 8002cf8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	88fa      	ldrh	r2, [r7, #6]
 8002cfe:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d04:	4a32      	ldr	r2, [pc, #200]	; (8002dd0 <HAL_I2S_Receive_DMA+0x16c>)
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0c:	4a31      	ldr	r2, [pc, #196]	; (8002dd4 <HAL_I2S_Receive_DMA+0x170>)
 8002d0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	4a30      	ldr	r2, [pc, #192]	; (8002dd8 <HAL_I2S_Receive_DMA+0x174>)
 8002d16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d26:	d10a      	bne.n	8002d3e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	4619      	mov	r1, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002d54:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002d56:	f7ff fa31 	bl	80021bc <HAL_DMA_Start_IT>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00f      	beq.n	8002d80 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d64:	f043 0208 	orr.w	r2, r3, #8
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e022      	b.n	8002dc6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d107      	bne.n	8002d9e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d9c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	08002e47 	.word	0x08002e47
 8002dd4:	08002e05 	.word	0x08002e05
 8002dd8:	08002e63 	.word	0x08002e63

08002ddc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10e      	bne.n	8002e38 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7fe fb3d 	bl	80014b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7fe fc55 	bl	8001704 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0203 	bic.w	r2, r2, #3
 8002e7e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	f043 0208 	orr.w	r2, r3, #8
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f7ff ffa5 	bl	8002df0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	881a      	ldrh	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	1c9a      	adds	r2, r3, #2
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10e      	bne.n	8002f02 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ef2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff ff6d 	bl	8002ddc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	b292      	uxth	r2, r2
 8002f1e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	1c9a      	adds	r2, r3, #2
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10e      	bne.n	8002f60 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f50:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe faac 	bl	80014b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d13a      	bne.n	8002ffa <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d109      	bne.n	8002fa2 <I2S_IRQHandler+0x3a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d102      	bne.n	8002fa2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ffb4 	bl	8002f0a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b40      	cmp	r3, #64	; 0x40
 8002faa:	d126      	bne.n	8002ffa <I2S_IRQHandler+0x92>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d11f      	bne.n	8002ffa <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fc8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fec:	f043 0202 	orr.w	r2, r3, #2
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff fefb 	bl	8002df0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b03      	cmp	r3, #3
 8003004:	d136      	bne.n	8003074 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b02      	cmp	r3, #2
 800300e:	d109      	bne.n	8003024 <I2S_IRQHandler+0xbc>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	2b80      	cmp	r3, #128	; 0x80
 800301c:	d102      	bne.n	8003024 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff ff45 	bl	8002eae <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b08      	cmp	r3, #8
 800302c:	d122      	bne.n	8003074 <I2S_IRQHandler+0x10c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b20      	cmp	r3, #32
 800303a:	d11b      	bne.n	8003074 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800304a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	f043 0204 	orr.w	r2, r3, #4
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff febe 	bl	8002df0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003074:	bf00      	nop
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800307c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307e:	b08f      	sub	sp, #60	; 0x3c
 8003080:	af0a      	add	r7, sp, #40	; 0x28
 8003082:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e116      	b.n	80032bc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d106      	bne.n	80030ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f008 ff91 	bl	800bfd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2203      	movs	r2, #3
 80030b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f004 fdd6 	bl	8007c7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	687e      	ldr	r6, [r7, #4]
 80030da:	466d      	mov	r5, sp
 80030dc:	f106 0410 	add.w	r4, r6, #16
 80030e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80030f0:	1d33      	adds	r3, r6, #4
 80030f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030f4:	6838      	ldr	r0, [r7, #0]
 80030f6:	f004 fcad 	bl	8007a54 <USB_CoreInit>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0d7      	b.n	80032bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f004 fdc4 	bl	8007ca0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	e04a      	b.n	80031b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	333d      	adds	r3, #61	; 0x3d
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	333c      	adds	r3, #60	; 0x3c
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	b298      	uxth	r0, r3
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3342      	adds	r3, #66	; 0x42
 800315a:	4602      	mov	r2, r0
 800315c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	333f      	adds	r3, #63	; 0x3f
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3344      	adds	r3, #68	; 0x44
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3348      	adds	r3, #72	; 0x48
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	3350      	adds	r3, #80	; 0x50
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	3301      	adds	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d3af      	bcc.n	800311e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]
 80031c2:	e044      	b.n	800324e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	3301      	adds	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	d3b5      	bcc.n	80031c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	687e      	ldr	r6, [r7, #4]
 8003260:	466d      	mov	r5, sp
 8003262:	f106 0410 	add.w	r4, r6, #16
 8003266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800326c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003272:	e885 0003 	stmia.w	r5, {r0, r1}
 8003276:	1d33      	adds	r3, r6, #4
 8003278:	cb0e      	ldmia	r3, {r1, r2, r3}
 800327a:	6838      	ldr	r0, [r7, #0]
 800327c:	f004 fd3a 	bl	8007cf4 <USB_DevInit>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2202      	movs	r2, #2
 800328a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e014      	b.n	80032bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d102      	bne.n	80032b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f001 f8a6 	bl	80043fc <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f005 fd6c 	bl	8008d92 <USB_DevDisconnect>

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_PCD_Start+0x1c>
 80032dc:	2302      	movs	r3, #2
 80032de:	e020      	b.n	8003322 <HAL_PCD_Start+0x5e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d109      	bne.n	8003304 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d005      	beq.n	8003304 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f005 fd2a 	bl	8008d62 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f004 fca2 	bl	8007c5c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800332a:	b590      	push	{r4, r7, lr}
 800332c:	b08d      	sub	sp, #52	; 0x34
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f005 fdd1 	bl	8008ee8 <USB_GetMode>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	f040 83ca 	bne.w	8003ae2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f005 fd35 	bl	8008dc2 <USB_ReadInterrupts>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 83c0 	beq.w	8003ae0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f005 fd2c 	bl	8008dc2 <USB_ReadInterrupts>
 800336a:	4603      	mov	r3, r0
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b02      	cmp	r3, #2
 8003372:	d107      	bne.n	8003384 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f002 0202 	and.w	r2, r2, #2
 8003382:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f005 fd1a 	bl	8008dc2 <USB_ReadInterrupts>
 800338e:	4603      	mov	r3, r0
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b10      	cmp	r3, #16
 8003396:	d161      	bne.n	800345c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0210 	bic.w	r2, r2, #16
 80033a6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f003 020f 	and.w	r2, r3, #15
 80033b4:	4613      	mov	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4413      	add	r3, r2
 80033c4:	3304      	adds	r3, #4
 80033c6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	0c5b      	lsrs	r3, r3, #17
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d124      	bne.n	800341e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d035      	beq.n	800344c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	6a38      	ldr	r0, [r7, #32]
 80033f4:	f005 fb92 	bl	8008b1c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003404:	441a      	add	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003416:	441a      	add	r2, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	619a      	str	r2, [r3, #24]
 800341c:	e016      	b.n	800344c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	0c5b      	lsrs	r3, r3, #17
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	2b06      	cmp	r3, #6
 8003428:	d110      	bne.n	800344c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003430:	2208      	movs	r2, #8
 8003432:	4619      	mov	r1, r3
 8003434:	6a38      	ldr	r0, [r7, #32]
 8003436:	f005 fb71 	bl	8008b1c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003446:	441a      	add	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0210 	orr.w	r2, r2, #16
 800345a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f005 fcae 	bl	8008dc2 <USB_ReadInterrupts>
 8003466:	4603      	mov	r3, r0
 8003468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800346c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003470:	d16e      	bne.n	8003550 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f005 fcb4 	bl	8008de8 <USB_ReadDevAllOutEpInterrupt>
 8003480:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003482:	e062      	b.n	800354a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d057      	beq.n	800353e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f005 fcd9 	bl	8008e50 <USB_ReadDevOutEPInterrupt>
 800349e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b6:	461a      	mov	r2, r3
 80034b8:	2301      	movs	r3, #1
 80034ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fdf2 	bl	80040a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00c      	beq.n	80034e8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034da:	461a      	mov	r2, r3
 80034dc:	2308      	movs	r3, #8
 80034de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 feec 	bl	80042c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fe:	461a      	mov	r2, r3
 8003500:	2310      	movs	r3, #16
 8003502:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351a:	461a      	mov	r2, r3
 800351c:	2320      	movs	r3, #32
 800351e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003536:	461a      	mov	r2, r3
 8003538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800353c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	3301      	adds	r3, #1
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	085b      	lsrs	r3, r3, #1
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	2b00      	cmp	r3, #0
 800354e:	d199      	bne.n	8003484 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f005 fc34 	bl	8008dc2 <USB_ReadInterrupts>
 800355a:	4603      	mov	r3, r0
 800355c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003560:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003564:	f040 80c0 	bne.w	80036e8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f005 fc55 	bl	8008e1c <USB_ReadDevAllInEpInterrupt>
 8003572:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003578:	e0b2      	b.n	80036e0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80a7 	beq.w	80036d4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f005 fc7b 	bl	8008e8c <USB_ReadDevInEPInterrupt>
 8003596:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d057      	beq.n	8003652 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	2201      	movs	r2, #1
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69f9      	ldr	r1, [r7, #28]
 80035be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035c2:	4013      	ands	r3, r2
 80035c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d2:	461a      	mov	r2, r3
 80035d4:	2301      	movs	r3, #1
 80035d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d132      	bne.n	8003646 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3348      	adds	r3, #72	; 0x48
 80035f0:	6819      	ldr	r1, [r3, #0]
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4403      	add	r3, r0
 8003600:	3344      	adds	r3, #68	; 0x44
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4419      	add	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4403      	add	r3, r0
 8003614:	3348      	adds	r3, #72	; 0x48
 8003616:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	d113      	bne.n	8003646 <HAL_PCD_IRQHandler+0x31c>
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	3350      	adds	r3, #80	; 0x50
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d108      	bne.n	8003646 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800363e:	461a      	mov	r2, r3
 8003640:	2101      	movs	r1, #1
 8003642:	f005 fc83 	bl	8008f4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	b2db      	uxtb	r3, r3
 800364a:	4619      	mov	r1, r3
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f008 fd38 	bl	800c0c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003668:	461a      	mov	r2, r3
 800366a:	2308      	movs	r3, #8
 800366c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003684:	461a      	mov	r2, r3
 8003686:	2310      	movs	r3, #16
 8003688:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a0:	461a      	mov	r2, r3
 80036a2:	2340      	movs	r3, #64	; 0x40
 80036a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036bc:	461a      	mov	r2, r3
 80036be:	2302      	movs	r3, #2
 80036c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fc5d 	bl	8003f8e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	3301      	adds	r3, #1
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	085b      	lsrs	r3, r3, #1
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f47f af49 	bne.w	800357a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f005 fb68 	bl	8008dc2 <USB_ReadInterrupts>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036fc:	d122      	bne.n	8003744 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003718:	2b01      	cmp	r3, #1
 800371a:	d108      	bne.n	800372e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003724:	2100      	movs	r1, #0
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fe8c 	bl	8004444 <HAL_PCDEx_LPM_Callback>
 800372c:	e002      	b.n	8003734 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f008 fd25 	bl	800c17e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f005 fb3a 	bl	8008dc2 <USB_ReadInterrupts>
 800374e:	4603      	mov	r3, r0
 8003750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003758:	d112      	bne.n	8003780 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d102      	bne.n	8003770 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f008 fcf9 	bl	800c162 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800377e:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f005 fb1c 	bl	8008dc2 <USB_ReadInterrupts>
 800378a:	4603      	mov	r3, r0
 800378c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003794:	d121      	bne.n	80037da <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80037a4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d111      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	f003 020f 	and.w	r2, r3, #15
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80037ca:	2101      	movs	r1, #1
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fe39 	bl	8004444 <HAL_PCDEx_LPM_Callback>
 80037d2:	e002      	b.n	80037da <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f008 fcc4 	bl	800c162 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f005 faef 	bl	8008dc2 <USB_ReadInterrupts>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ee:	f040 80c7 	bne.w	8003980 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2110      	movs	r1, #16
 800380c:	4618      	mov	r0, r3
 800380e:	f004 fbcf 	bl	8007fb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003812:	2300      	movs	r3, #0
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003816:	e056      	b.n	80038c6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003824:	461a      	mov	r2, r3
 8003826:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800382a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800383c:	0151      	lsls	r1, r2, #5
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	440a      	add	r2, r1
 8003842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800384a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800385c:	0151      	lsls	r1, r2, #5
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	440a      	add	r2, r1
 8003862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003866:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800386a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003878:	461a      	mov	r2, r3
 800387a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800387e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003890:	0151      	lsls	r1, r2, #5
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	440a      	add	r2, r1
 8003896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800389a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800389e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b0:	0151      	lsls	r1, r2, #5
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	440a      	add	r2, r1
 80038b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038be:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	3301      	adds	r3, #1
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d3a3      	bcc.n	8003818 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038de:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d016      	beq.n	800391a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fc:	f043 030b 	orr.w	r3, r3, #11
 8003900:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003912:	f043 030b 	orr.w	r3, r3, #11
 8003916:	6453      	str	r3, [r2, #68]	; 0x44
 8003918:	e015      	b.n	8003946 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800392c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003930:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003940:	f043 030b 	orr.w	r3, r3, #11
 8003944:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003954:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003958:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800396a:	461a      	mov	r2, r3
 800396c:	f005 faee 	bl	8008f4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800397e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f005 fa1c 	bl	8008dc2 <USB_ReadInterrupts>
 800398a:	4603      	mov	r3, r0
 800398c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003994:	d124      	bne.n	80039e0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f005 fab2 	bl	8008f04 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f004 fb64 	bl	8008072 <USB_GetDevSpeed>
 80039aa:	4603      	mov	r3, r0
 80039ac:	461a      	mov	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681c      	ldr	r4, [r3, #0]
 80039b6:	f000 fe37 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 80039ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	4620      	mov	r0, r4
 80039c6:	f004 f8a7 	bl	8007b18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f008 fba1 	bl	800c112 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f005 f9ec 	bl	8008dc2 <USB_ReadInterrupts>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d10a      	bne.n	8003a0a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f008 fb7e 	bl	800c0f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f002 0208 	and.w	r2, r2, #8
 8003a08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f005 f9d7 	bl	8008dc2 <USB_ReadInterrupts>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1e:	d10f      	bne.n	8003a40 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f008 fbc7 	bl	800c1be <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f005 f9bc 	bl	8008dc2 <USB_ReadInterrupts>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a54:	d10f      	bne.n	8003a76 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	4619      	mov	r1, r3
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f008 fb9a 	bl	800c19a <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f005 f9a1 	bl	8008dc2 <USB_ReadInterrupts>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8a:	d10a      	bne.n	8003aa2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f008 fba8 	bl	800c1e2 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695a      	ldr	r2, [r3, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f005 f98b 	bl	8008dc2 <USB_ReadInterrupts>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d115      	bne.n	8003ae2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f008 fb98 	bl	800c1fe <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
 8003ade:	e000      	b.n	8003ae2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003ae0:	bf00      	nop
    }
  }
}
 8003ae2:	3734      	adds	r7, #52	; 0x34
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd90      	pop	{r4, r7, pc}

08003ae8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_PCD_SetAddress+0x1a>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e013      	b.n	8003b2a <HAL_PCD_SetAddress+0x42>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f005 f8fb 	bl	8008d16 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	4608      	mov	r0, r1
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4603      	mov	r3, r0
 8003b42:	70fb      	strb	r3, [r7, #3]
 8003b44:	460b      	mov	r3, r1
 8003b46:	803b      	strh	r3, [r7, #0]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	da0f      	bge.n	8003b78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	f003 020f 	and.w	r2, r3, #15
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	3338      	adds	r3, #56	; 0x38
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	705a      	strb	r2, [r3, #1]
 8003b76:	e00f      	b.n	8003b98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	f003 020f 	and.w	r2, r3, #15
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3304      	adds	r3, #4
 8003b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ba4:	883a      	ldrh	r2, [r7, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	78ba      	ldrb	r2, [r7, #2]
 8003bae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	785b      	ldrb	r3, [r3, #1]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d004      	beq.n	8003bc2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bc2:	78bb      	ldrb	r3, [r7, #2]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d102      	bne.n	8003bce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_PCD_EP_Open+0xaa>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e00e      	b.n	8003bfa <HAL_PCD_EP_Open+0xc8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68f9      	ldr	r1, [r7, #12]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f004 fa66 	bl	80080bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003bf8:	7afb      	ldrb	r3, [r7, #11]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	da0f      	bge.n	8003c36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	f003 020f 	and.w	r2, r3, #15
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	3338      	adds	r3, #56	; 0x38
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	705a      	strb	r2, [r3, #1]
 8003c34:	e00f      	b.n	8003c56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 020f 	and.w	r2, r3, #15
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_PCD_EP_Close+0x6e>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e00e      	b.n	8003c8e <HAL_PCD_EP_Close+0x8c>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68f9      	ldr	r1, [r7, #12]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f004 faa4 	bl	80081cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ca6:	7afb      	ldrb	r3, [r7, #11]
 8003ca8:	f003 020f 	and.w	r2, r3, #15
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd8:	7afb      	ldrb	r3, [r7, #11]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d102      	bne.n	8003cf2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cf2:	7afb      	ldrb	r3, [r7, #11]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	6979      	ldr	r1, [r7, #20]
 8003d0a:	f004 fd7f 	bl	800880c <USB_EP0StartXfer>
 8003d0e:	e008      	b.n	8003d22 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6979      	ldr	r1, [r7, #20]
 8003d1e:	f004 fb31 	bl	8008384 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d3c:	7afb      	ldrb	r3, [r7, #11]
 8003d3e:	f003 020f 	and.w	r2, r3, #15
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	3338      	adds	r3, #56	; 0x38
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	3304      	adds	r3, #4
 8003d52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2200      	movs	r2, #0
 8003d64:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d6c:	7afb      	ldrb	r3, [r7, #11]
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d102      	bne.n	8003d86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d86:	7afb      	ldrb	r3, [r7, #11]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d109      	bne.n	8003da4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6979      	ldr	r1, [r7, #20]
 8003d9e:	f004 fd35 	bl	800880c <USB_EP0StartXfer>
 8003da2:	e008      	b.n	8003db6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	6979      	ldr	r1, [r7, #20]
 8003db2:	f004 fae7 	bl	8008384 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	f003 020f 	and.w	r2, r3, #15
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d901      	bls.n	8003dde <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e050      	b.n	8003e80 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	da0f      	bge.n	8003e06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	f003 020f 	and.w	r2, r3, #15
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	1a9b      	subs	r3, r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	3338      	adds	r3, #56	; 0x38
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	705a      	strb	r2, [r3, #1]
 8003e04:	e00d      	b.n	8003e22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4413      	add	r3, r2
 8003e18:	3304      	adds	r3, #4
 8003e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_PCD_EP_SetStall+0x82>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e01e      	b.n	8003e80 <HAL_PCD_EP_SetStall+0xc0>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68f9      	ldr	r1, [r7, #12]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f004 fe8c 	bl	8008b6e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e56:	78fb      	ldrb	r3, [r7, #3]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	b2d9      	uxtb	r1, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e70:	461a      	mov	r2, r3
 8003e72:	f005 f86b 	bl	8008f4c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	f003 020f 	and.w	r2, r3, #15
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d901      	bls.n	8003ea6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e042      	b.n	8003f2c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	da0f      	bge.n	8003ece <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	f003 020f 	and.w	r2, r3, #15
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	3338      	adds	r3, #56	; 0x38
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	705a      	strb	r2, [r3, #1]
 8003ecc:	e00f      	b.n	8003eee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	f003 020f 	and.w	r2, r3, #15
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_PCD_EP_ClrStall+0x86>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e00e      	b.n	8003f2c <HAL_PCD_EP_ClrStall+0xa4>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68f9      	ldr	r1, [r7, #12]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f004 fe94 	bl	8008c4a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_PCD_EP_Flush+0x1a>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e01b      	b.n	8003f86 <HAL_PCD_EP_Flush+0x52>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8003f56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	da09      	bge.n	8003f72 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	f004 f820 	bl	8007fb0 <USB_FlushTxFifo>
 8003f70:	e004      	b.n	8003f7c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f004 f840 	bl	8007ffc <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b08a      	sub	sp, #40	; 0x28
 8003f92:	af02      	add	r7, sp, #8
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	3338      	adds	r3, #56	; 0x38
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d901      	bls.n	8003fc6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e06c      	b.n	80040a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d902      	bls.n	8003fe2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	3303      	adds	r3, #3
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fea:	e02b      	b.n	8004044 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d902      	bls.n	8004008 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	3303      	adds	r3, #3
 800400c:	089b      	lsrs	r3, r3, #2
 800400e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68d9      	ldr	r1, [r3, #12]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	b2da      	uxtb	r2, r3
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004020:	b2db      	uxtb	r3, r3
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	4603      	mov	r3, r0
 8004026:	6978      	ldr	r0, [r7, #20]
 8004028:	f004 fd43 	bl	8008ab2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	441a      	add	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	699a      	ldr	r2, [r3, #24]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	441a      	add	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	b29b      	uxth	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	429a      	cmp	r2, r3
 8004058:	d809      	bhi.n	800406e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004062:	429a      	cmp	r2, r3
 8004064:	d203      	bcs.n	800406e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1be      	bne.n	8003fec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	695a      	ldr	r2, [r3, #20]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	429a      	cmp	r2, r3
 8004078:	d811      	bhi.n	800409e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	2201      	movs	r2, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	43db      	mvns	r3, r3
 8004094:	6939      	ldr	r1, [r7, #16]
 8004096:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800409a:	4013      	ands	r3, r2
 800409c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	333c      	adds	r3, #60	; 0x3c
 80040c0:	3304      	adds	r3, #4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	f040 80a0 	bne.w	8004220 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d015      	beq.n	8004116 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a72      	ldr	r2, [pc, #456]	; (80042b8 <PCD_EP_OutXfrComplete_int+0x210>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	f240 80dd 	bls.w	80042ae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 80d7 	beq.w	80042ae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410c:	461a      	mov	r2, r3
 800410e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004112:	6093      	str	r3, [r2, #8]
 8004114:	e0cb      	b.n	80042ae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412c:	461a      	mov	r2, r3
 800412e:	2320      	movs	r3, #32
 8004130:	6093      	str	r3, [r2, #8]
 8004132:	e0bc      	b.n	80042ae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800413a:	2b00      	cmp	r3, #0
 800413c:	f040 80b7 	bne.w	80042ae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a5d      	ldr	r2, [pc, #372]	; (80042b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d90f      	bls.n	8004168 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	461a      	mov	r2, r3
 8004160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004164:	6093      	str	r3, [r2, #8]
 8004166:	e0a2      	b.n	80042ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800417a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	0159      	lsls	r1, r3, #5
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	440b      	add	r3, r1
 8004184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800418e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4403      	add	r3, r0
 800419e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80041a2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	4613      	mov	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041b6:	6819      	ldr	r1, [r3, #0]
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4403      	add	r3, r0
 80041c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4419      	add	r1, r3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4403      	add	r3, r0
 80041dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041e0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d114      	bne.n	8004212 <PCD_EP_OutXfrComplete_int+0x16a>
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d108      	bne.n	8004212 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800420a:	461a      	mov	r2, r3
 800420c:	2101      	movs	r1, #1
 800420e:	f004 fe9d 	bl	8008f4c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f007 ff37 	bl	800c08c <HAL_PCD_DataOutStageCallback>
 800421e:	e046      	b.n	80042ae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4a26      	ldr	r2, [pc, #152]	; (80042bc <PCD_EP_OutXfrComplete_int+0x214>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d124      	bne.n	8004272 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423e:	461a      	mov	r2, r3
 8004240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004244:	6093      	str	r3, [r2, #8]
 8004246:	e032      	b.n	80042ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d008      	beq.n	8004264 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425e:	461a      	mov	r2, r3
 8004260:	2320      	movs	r3, #32
 8004262:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	4619      	mov	r1, r3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f007 ff0e 	bl	800c08c <HAL_PCD_DataOutStageCallback>
 8004270:	e01d      	b.n	80042ae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d114      	bne.n	80042a2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d108      	bne.n	80042a2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800429a:	461a      	mov	r2, r3
 800429c:	2100      	movs	r1, #0
 800429e:	f004 fe55 	bl	8008f4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	4619      	mov	r1, r3
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f007 feef 	bl	800c08c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	4f54300a 	.word	0x4f54300a
 80042bc:	4f54310a 	.word	0x4f54310a

080042c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	333c      	adds	r3, #60	; 0x3c
 80042d8:	3304      	adds	r3, #4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4a15      	ldr	r2, [pc, #84]	; (8004348 <PCD_EP_OutSetupPacket_int+0x88>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d90e      	bls.n	8004314 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d009      	beq.n	8004314 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430c:	461a      	mov	r2, r3
 800430e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004312:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f007 fea7 	bl	800c068 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <PCD_EP_OutSetupPacket_int+0x88>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d90c      	bls.n	800433c <PCD_EP_OutSetupPacket_int+0x7c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d108      	bne.n	800433c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004334:	461a      	mov	r2, r3
 8004336:	2101      	movs	r1, #1
 8004338:	f004 fe08 	bl	8008f4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	4f54300a 	.word	0x4f54300a

0800434c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	70fb      	strb	r3, [r7, #3]
 8004358:	4613      	mov	r3, r2
 800435a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d107      	bne.n	800437a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800436a:	883b      	ldrh	r3, [r7, #0]
 800436c:	0419      	lsls	r1, r3, #16
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	430a      	orrs	r2, r1
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
 8004378:	e028      	b.n	80043cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	0c1b      	lsrs	r3, r3, #16
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	4413      	add	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004388:	2300      	movs	r3, #0
 800438a:	73fb      	strb	r3, [r7, #15]
 800438c:	e00d      	b.n	80043aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	3340      	adds	r3, #64	; 0x40
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	4413      	add	r3, r2
 80043a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	3301      	adds	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
 80043aa:	7bfa      	ldrb	r2, [r7, #15]
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d3ec      	bcc.n	800438e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043b4:	883b      	ldrh	r3, [r7, #0]
 80043b6:	0418      	lsls	r0, r3, #16
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6819      	ldr	r1, [r3, #0]
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	3b01      	subs	r3, #1
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	4302      	orrs	r2, r0
 80043c4:	3340      	adds	r3, #64	; 0x40
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	887a      	ldrh	r2, [r7, #2]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442e:	f043 0303 	orr.w	r3, r3, #3
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0cc      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004470:	4b68      	ldr	r3, [pc, #416]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d90c      	bls.n	8004498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447e:	4b65      	ldr	r3, [pc, #404]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004486:	4b63      	ldr	r3, [pc, #396]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d001      	beq.n	8004498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0b8      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d020      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b0:	4b59      	ldr	r3, [pc, #356]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a58      	ldr	r2, [pc, #352]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c8:	4b53      	ldr	r3, [pc, #332]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a52      	ldr	r2, [pc, #328]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d4:	4b50      	ldr	r3, [pc, #320]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	494d      	ldr	r1, [pc, #308]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d044      	beq.n	800457c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d107      	bne.n	800450a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fa:	4b47      	ldr	r3, [pc, #284]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d119      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e07f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d003      	beq.n	800451a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004516:	2b03      	cmp	r3, #3
 8004518:	d107      	bne.n	800452a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451a:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e06f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452a:	4b3b      	ldr	r3, [pc, #236]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e067      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800453a:	4b37      	ldr	r3, [pc, #220]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f023 0203 	bic.w	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4934      	ldr	r1, [pc, #208]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	4313      	orrs	r3, r2
 800454a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800454c:	f7fd fbea 	bl	8001d24 <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	e00a      	b.n	800456a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004554:	f7fd fbe6 	bl	8001d24 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e04f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	4b2b      	ldr	r3, [pc, #172]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 020c 	and.w	r2, r3, #12
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	429a      	cmp	r2, r3
 800457a:	d1eb      	bne.n	8004554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800457c:	4b25      	ldr	r3, [pc, #148]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d20c      	bcs.n	80045a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b22      	ldr	r3, [pc, #136]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e032      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b0:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4916      	ldr	r1, [pc, #88]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ce:	4b12      	ldr	r3, [pc, #72]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	490e      	ldr	r1, [pc, #56]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045e2:	f000 fe63 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 80045e6:	4601      	mov	r1, r0
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	4a0a      	ldr	r2, [pc, #40]	; (800461c <HAL_RCC_ClockConfig+0x1c0>)
 80045f4:	5cd3      	ldrb	r3, [r2, r3]
 80045f6:	fa21 f303 	lsr.w	r3, r1, r3
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045fe:	4b09      	ldr	r3, [pc, #36]	; (8004624 <HAL_RCC_ClockConfig+0x1c8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7fd fb4a 	bl	8001c9c <HAL_InitTick>

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40023c00 	.word	0x40023c00
 8004618:	40023800 	.word	0x40023800
 800461c:	0800fe2c 	.word	0x0800fe2c
 8004620:	200005f0 	.word	0x200005f0
 8004624:	200005a4 	.word	0x200005a4

08004628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800462c:	4b03      	ldr	r3, [pc, #12]	; (800463c <HAL_RCC_GetHCLKFreq+0x14>)
 800462e:	681b      	ldr	r3, [r3, #0]
}
 8004630:	4618      	mov	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	200005f0 	.word	0x200005f0

08004640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004644:	f7ff fff0 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004648:	4601      	mov	r1, r0
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0a9b      	lsrs	r3, r3, #10
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4a03      	ldr	r2, [pc, #12]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004656:	5cd3      	ldrb	r3, [r2, r3]
 8004658:	fa21 f303 	lsr.w	r3, r1, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	0800fe3c 	.word	0x0800fe3c

08004668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800466c:	f7ff ffdc 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004670:	4601      	mov	r1, r0
 8004672:	4b05      	ldr	r3, [pc, #20]	; (8004688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	0b5b      	lsrs	r3, r3, #13
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	4a03      	ldr	r2, [pc, #12]	; (800468c <HAL_RCC_GetPCLK2Freq+0x24>)
 800467e:	5cd3      	ldrb	r3, [r2, r3]
 8004680:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004684:	4618      	mov	r0, r3
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40023800 	.word	0x40023800
 800468c:	0800fe3c 	.word	0x0800fe3c

08004690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08c      	sub	sp, #48	; 0x30
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d010      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80046c8:	4b6f      	ldr	r3, [pc, #444]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ce:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	496c      	ldr	r1, [pc, #432]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80046e6:	2301      	movs	r3, #1
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d010      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80046f6:	4b64      	ldr	r3, [pc, #400]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046fc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004704:	4960      	ldr	r1, [pc, #384]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004714:	2301      	movs	r3, #1
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d017      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004724:	4b58      	ldr	r3, [pc, #352]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800472a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	4955      	ldr	r1, [pc, #340]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004742:	d101      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004744:	2301      	movs	r3, #1
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004750:	2301      	movs	r3, #1
 8004752:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d017      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004760:	4b49      	ldr	r3, [pc, #292]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004766:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476e:	4946      	ldr	r1, [pc, #280]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800477e:	d101      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004780:	2301      	movs	r3, #1
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800478c:	2301      	movs	r3, #1
 800478e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 808a 	beq.w	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	4b39      	ldr	r3, [pc, #228]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	4a38      	ldr	r2, [pc, #224]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ac:	6413      	str	r3, [r2, #64]	; 0x40
 80047ae:	4b36      	ldr	r3, [pc, #216]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	60bb      	str	r3, [r7, #8]
 80047b8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047ba:	4b34      	ldr	r3, [pc, #208]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a33      	ldr	r2, [pc, #204]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047c6:	f7fd faad 	bl	8001d24 <HAL_GetTick>
 80047ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047cc:	e008      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047ce:	f7fd faa9 	bl	8001d24 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e278      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047e0:	4b2a      	ldr	r3, [pc, #168]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ec:	4b26      	ldr	r3, [pc, #152]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d02f      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004804:	6a3a      	ldr	r2, [r7, #32]
 8004806:	429a      	cmp	r2, r3
 8004808:	d028      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800480a:	4b1f      	ldr	r3, [pc, #124]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004812:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004814:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800481a:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004820:	4a19      	ldr	r2, [pc, #100]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004826:	4b18      	ldr	r3, [pc, #96]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b01      	cmp	r3, #1
 8004830:	d114      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004832:	f7fd fa77 	bl	8001d24 <HAL_GetTick>
 8004836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004838:	e00a      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800483a:	f7fd fa73 	bl	8001d24 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	f241 3288 	movw	r2, #5000	; 0x1388
 8004848:	4293      	cmp	r3, r2
 800484a:	d901      	bls.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e240      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ee      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004868:	d114      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800486a:	4b07      	ldr	r3, [pc, #28]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800487a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487e:	4902      	ldr	r1, [pc, #8]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004880:	4313      	orrs	r3, r2
 8004882:	608b      	str	r3, [r1, #8]
 8004884:	e00c      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004886:	bf00      	nop
 8004888:	40023800 	.word	0x40023800
 800488c:	40007000 	.word	0x40007000
 8004890:	42470e40 	.word	0x42470e40
 8004894:	4b4a      	ldr	r3, [pc, #296]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4a49      	ldr	r2, [pc, #292]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800489a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800489e:	6093      	str	r3, [r2, #8]
 80048a0:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80048a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ac:	4944      	ldr	r1, [pc, #272]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80048c4:	4b3f      	ldr	r3, [pc, #252]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80048c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80048d4:	4b3a      	ldr	r3, [pc, #232]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80048d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e2:	4937      	ldr	r1, [pc, #220]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048f6:	4b32      	ldr	r3, [pc, #200]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80048f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004904:	492e      	ldr	r1, [pc, #184]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d011      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004918:	4b29      	ldr	r3, [pc, #164]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800491a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800491e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	4926      	ldr	r1, [pc, #152]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004936:	d101      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004938:	2301      	movs	r3, #1
 800493a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004948:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800494a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800494e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	491a      	ldr	r1, [pc, #104]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004966:	2b00      	cmp	r3, #0
 8004968:	d011      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800496a:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800496c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004970:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004978:	4911      	ldr	r1, [pc, #68]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004988:	d101      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800498a:	2301      	movs	r3, #1
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d005      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800499c:	f040 80ff 	bne.w	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049a6:	f7fd f9bd 	bl	8001d24 <HAL_GetTick>
 80049aa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049ac:	e00e      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049ae:	f7fd f9b9 	bl	8001d24 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d907      	bls.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e188      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80049c0:	40023800 	.word	0x40023800
 80049c4:	424711e0 	.word	0x424711e0
 80049c8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049cc:	4b7e      	ldr	r3, [pc, #504]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1ea      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d009      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d028      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d124      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004a00:	4b71      	ldr	r3, [pc, #452]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a06:	0c1b      	lsrs	r3, r3, #16
 8004a08:	f003 0303 	and.w	r3, r3, #3
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a12:	4b6d      	ldr	r3, [pc, #436]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a18:	0e1b      	lsrs	r3, r3, #24
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	019b      	lsls	r3, r3, #6
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	085b      	lsrs	r3, r3, #1
 8004a30:	3b01      	subs	r3, #1
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	431a      	orrs	r2, r3
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	061b      	lsls	r3, r3, #24
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	071b      	lsls	r3, r3, #28
 8004a42:	4961      	ldr	r1, [pc, #388]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d004      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5e:	d00a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d035      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a74:	d130      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004a76:	4b54      	ldr	r3, [pc, #336]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	3301      	adds	r3, #1
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a88:	4b4f      	ldr	r3, [pc, #316]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a8e:	0f1b      	lsrs	r3, r3, #28
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	019b      	lsls	r3, r3, #6
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	041b      	lsls	r3, r3, #16
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	061b      	lsls	r3, r3, #24
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	071b      	lsls	r3, r3, #28
 8004ab8:	4943      	ldr	r1, [pc, #268]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ac0:	4b41      	ldr	r3, [pc, #260]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac6:	f023 021f 	bic.w	r2, r3, #31
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	493d      	ldr	r1, [pc, #244]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d029      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aec:	d124      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004aee:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af4:	0c1b      	lsrs	r3, r3, #16
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	3301      	adds	r3, #1
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b00:	4b31      	ldr	r3, [pc, #196]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b06:	0f1b      	lsrs	r3, r3, #28
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	019b      	lsls	r3, r3, #6
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	085b      	lsrs	r3, r3, #1
 8004b20:	3b01      	subs	r3, #1
 8004b22:	041b      	lsls	r3, r3, #16
 8004b24:	431a      	orrs	r2, r3
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	071b      	lsls	r3, r3, #28
 8004b30:	4925      	ldr	r1, [pc, #148]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d016      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	019b      	lsls	r3, r3, #6
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	3b01      	subs	r3, #1
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	061b      	lsls	r3, r3, #24
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	071b      	lsls	r3, r3, #28
 8004b6a:	4917      	ldr	r1, [pc, #92]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b72:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004b74:	2201      	movs	r2, #1
 8004b76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b78:	f7fd f8d4 	bl	8001d24 <HAL_GetTick>
 8004b7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b80:	f7fd f8d0 	bl	8001d24 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e09f      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	f040 8095 	bne.w	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bac:	f7fd f8ba 	bl	8001d24 <HAL_GetTick>
 8004bb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bb2:	e00f      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004bb4:	f7fd f8b6 	bl	8001d24 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d908      	bls.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e085      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004bc6:	bf00      	nop
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	42470068 	.word	0x42470068
 8004bd0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bd4:	4b41      	ldr	r3, [pc, #260]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be0:	d0e8      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d009      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d02b      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d127      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004c0a:	4b34      	ldr	r3, [pc, #208]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	3301      	adds	r3, #1
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699a      	ldr	r2, [r3, #24]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	019b      	lsls	r3, r3, #6
 8004c26:	431a      	orrs	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	4928      	ldr	r1, [pc, #160]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c40:	4b26      	ldr	r3, [pc, #152]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	4922      	ldr	r1, [pc, #136]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01d      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c6e:	d118      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c70:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	0e1b      	lsrs	r3, r3, #24
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	019b      	lsls	r3, r3, #6
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	3b01      	subs	r3, #1
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	431a      	orrs	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	061b      	lsls	r3, r3, #24
 8004c9a:	4910      	ldr	r1, [pc, #64]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ca2:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ca8:	f7fd f83c 	bl	8001d24 <HAL_GetTick>
 8004cac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004cb0:	f7fd f838 	bl	8001d24 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e007      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cc2:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cce:	d1ef      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3730      	adds	r7, #48	; 0x30
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	42470070 	.word	0x42470070

08004ce4 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1 | RCC_PERIPHCLK_I2S_APB2 |\
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004cf2:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_FMPI2C1  |\
                                        RCC_PERIPHCLK_CLK48     | RCC_PERIPHCLK_SDIO     |\
                                        RCC_PERIPHCLK_SPDIFRX;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI2SCFGR_PLLI2SM_Pos);
 8004cf4:	4b5d      	ldr	r3, [pc, #372]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8004d02:	4b5a      	ldr	r3, [pc, #360]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d08:	099b      	lsrs	r3, r3, #6
 8004d0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004d12:	4b56      	ldr	r3, [pc, #344]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	3301      	adds	r3, #1
 8004d20:	005a      	lsls	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d26:	4b51      	ldr	r3, [pc, #324]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d2c:	0e1b      	lsrs	r3, r3, #24
 8004d2e:	f003 020f 	and.w	r2, r3, #15
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d36:	4b4d      	ldr	r3, [pc, #308]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d3c:	0f1b      	lsrs	r3, r3, #28
 8004d3e:	f003 0207 	and.w	r2, r3, #7
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	615a      	str	r2, [r3, #20]
  /* Get the PLLSAI Clock configuration --------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIM = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM) >> RCC_PLLSAICFGR_PLLSAIM_Pos);
 8004d46:	4b49      	ldr	r3, [pc, #292]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8004d54:	4b45      	ldr	r3, [pc, #276]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	099b      	lsrs	r3, r3, #6
 8004d5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004d64:	4b41      	ldr	r3, [pc, #260]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	0c1b      	lsrs	r3, r3, #16
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	3301      	adds	r3, #1
 8004d72:	005a      	lsls	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d78:	4b3c      	ldr	r3, [pc, #240]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	0e1b      	lsrs	r3, r3, #24
 8004d80:	f003 020f 	and.w	r2, r3, #15
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24
  /* Get the PLLSAI/PLLI2S division factors ----------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLLI2SDIVQ_Pos);
 8004d88:	4b38      	ldr	r3, [pc, #224]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d8e:	f003 021f 	and.w	r2, r3, #31
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLLSAIDIVQ_Pos);
 8004d96:	4b35      	ldr	r3, [pc, #212]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d9c:	0a1b      	lsrs	r3, r3, #8
 8004d9e:	f003 021f 	and.w	r2, r3, #31
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8004da6:	4b31      	ldr	r3, [pc, #196]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dac:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the SAI2 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8004db4:	4b2d      	ldr	r3, [pc, #180]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dba:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2S APB1 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004dc2:	4b2a      	ldr	r3, [pc, #168]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get the I2S APB2 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004dd0:	4b26      	ldr	r3, [pc, #152]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dd6:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8004dde:	4b23      	ldr	r3, [pc, #140]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004de6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8004de8:	4b20      	ldr	r3, [pc, #128]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the CEC clock configuration -----------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8004df8:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfe:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the FMPI2C1 clock configuration -------------------------------------*/
  PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
 8004e06:	4b19      	ldr	r3, [pc, #100]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e0c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the CLK48 clock configuration ----------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8004e14:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e1a:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the SDIO clock configuration ----------------------------------------*/
  PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
 8004e22:	4b12      	ldr	r3, [pc, #72]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e28:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the SPDIFRX clock configuration -------------------------------------*/
  PeriphClkInit->SpdifClockSelection = __HAL_RCC_GET_SPDIFRX_SOURCE();
 8004e30:	4b0e      	ldr	r3, [pc, #56]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e36:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d104      	bne.n	8004e56 <HAL_RCCEx_GetPeriphCLKConfig+0x172>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8004e54:	e003      	b.n	8004e5e <HAL_RCCEx_GetPeriphCLKConfig+0x17a>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004e5e:	bf00      	nop
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800

08004e70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	; 0x24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	2b07      	cmp	r3, #7
 8004e96:	f200 81fa 	bhi.w	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 8004e9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08005069 	.word	0x08005069
 8004ea4:	08005185 	.word	0x08005185
 8004ea8:	0800528f 	.word	0x0800528f
 8004eac:	08004ec1 	.word	0x08004ec1
 8004eb0:	0800528f 	.word	0x0800528f
 8004eb4:	0800528f 	.word	0x0800528f
 8004eb8:	0800528f 	.word	0x0800528f
 8004ebc:	08004ec1 	.word	0x08004ec1
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8004ec0:	4bac      	ldr	r3, [pc, #688]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec6:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8004ece:	613b      	str	r3, [r7, #16]
      switch (saiclocksource)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ed6:	f000 80b7 	beq.w	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8004eda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ede:	d809      	bhi.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 8004ee0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee4:	d04c      	beq.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004ee6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eea:	f000 8083 	beq.w	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00b      	beq.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          }
          break;
        }
      default :
        {
          break;
 8004ef2:	e0b8      	b.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
      switch (saiclocksource)
 8004ef4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ef8:	d07c      	beq.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8004efa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004efe:	f000 80a6 	beq.w	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8004f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f06:	d03b      	beq.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          break;
 8004f08:	e0ad      	b.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004f0a:	4b9a      	ldr	r3, [pc, #616]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d109      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8004f16:	4b97      	ldr	r3, [pc, #604]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f20:	4a95      	ldr	r2, [pc, #596]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8004f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f26:	61bb      	str	r3, [r7, #24]
 8004f28:	e008      	b.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8004f2a:	4b92      	ldr	r3, [pc, #584]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f34:	4a91      	ldr	r2, [pc, #580]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8004f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3a:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8004f3c:	4b8d      	ldr	r3, [pc, #564]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	0e1b      	lsrs	r3, r3, #24
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8004f4a:	4b8a      	ldr	r3, [pc, #552]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f50:	099b      	lsrs	r3, r3, #6
 8004f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	fb02 f203 	mul.w	r2, r2, r3
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8004f64:	4b83      	ldr	r3, [pc, #524]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f6a:	0a1b      	lsrs	r3, r3, #8
 8004f6c:	f003 031f 	and.w	r3, r3, #31
 8004f70:	3301      	adds	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8004f74:	69fa      	ldr	r2, [r7, #28]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7c:	61fb      	str	r3, [r7, #28]
          break;
 8004f7e:	e072      	b.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004f80:	4b7c      	ldr	r3, [pc, #496]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004f8c:	4b79      	ldr	r3, [pc, #484]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f96:	4a78      	ldr	r2, [pc, #480]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8004f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8004fa0:	4b74      	ldr	r3, [pc, #464]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004faa:	4a74      	ldr	r2, [pc, #464]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8004fb2:	4b70      	ldr	r3, [pc, #448]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb8:	0e1b      	lsrs	r3, r3, #24
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8004fc0:	4b6c      	ldr	r3, [pc, #432]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc6:	099b      	lsrs	r3, r3, #6
 8004fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	fb02 f203 	mul.w	r2, r2, r3
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd8:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8004fda:	4b66      	ldr	r3, [pc, #408]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe0:	f003 031f 	and.w	r3, r3, #31
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff0:	61fb      	str	r3, [r7, #28]
          break;
 8004ff2:	e038      	b.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004ff4:	4b5f      	ldr	r3, [pc, #380]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d108      	bne.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005000:	4b5c      	ldr	r3, [pc, #368]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005008:	4a5b      	ldr	r2, [pc, #364]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800500a:	fbb2 f3f3 	udiv	r3, r2, r3
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	e007      	b.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005012:	4b58      	ldr	r3, [pc, #352]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800501a:	4a58      	ldr	r2, [pc, #352]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 800501c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005020:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8005022:	4b54      	ldr	r3, [pc, #336]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	0f1b      	lsrs	r3, r3, #28
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800502e:	4b51      	ldr	r3, [pc, #324]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	099b      	lsrs	r3, r3, #6
 8005034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	fb02 f203 	mul.w	r2, r2, r3
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	61fb      	str	r3, [r7, #28]
          break;
 8005046:	e00e      	b.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005048:	4b4d      	ldr	r3, [pc, #308]	; (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800504a:	61fb      	str	r3, [r7, #28]
          break;
 800504c:	e00b      	b.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800504e:	4b49      	ldr	r3, [pc, #292]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d102      	bne.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
            frequency = (uint32_t)(HSI_VALUE);
 800505a:	4b47      	ldr	r3, [pc, #284]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800505c:	61fb      	str	r3, [r7, #28]
          break;
 800505e:	e001      	b.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            frequency = (uint32_t)(HSE_VALUE);
 8005060:	4b46      	ldr	r3, [pc, #280]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005062:	61fb      	str	r3, [r7, #28]
          break;
 8005064:	bf00      	nop
        }
      }
      break;
 8005066:	e112      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005068:	4b42      	ldr	r3, [pc, #264]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800506a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800506e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005072:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800507a:	d00c      	beq.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 800507c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005080:	d802      	bhi.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005086:	e070      	b.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005088:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800508c:	d035      	beq.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800508e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005092:	d05d      	beq.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005094:	e069      	b.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005096:	4b3a      	ldr	r3, [pc, #232]	; (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8005098:	61fb      	str	r3, [r7, #28]
          break;
 800509a:	e069      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800509c:	4b35      	ldr	r3, [pc, #212]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050a8:	d109      	bne.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80050aa:	4b32      	ldr	r3, [pc, #200]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80050ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b4:	4a31      	ldr	r2, [pc, #196]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80050b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ba:	61bb      	str	r3, [r7, #24]
 80050bc:	e008      	b.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80050be:	4b2d      	ldr	r3, [pc, #180]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80050c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050c8:	4a2b      	ldr	r2, [pc, #172]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80050ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ce:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80050d0:	4b28      	ldr	r3, [pc, #160]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80050d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d6:	099b      	lsrs	r3, r3, #6
 80050d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80050e4:	4b23      	ldr	r3, [pc, #140]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80050e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ea:	0f1b      	lsrs	r3, r3, #28
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f6:	61fb      	str	r3, [r7, #28]
          break;
 80050f8:	e03a      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050fa:	4b1e      	ldr	r3, [pc, #120]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005106:	d108      	bne.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005108:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005110:	4a1a      	ldr	r2, [pc, #104]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005112:	fbb2 f3f3 	udiv	r3, r2, r3
 8005116:	61bb      	str	r3, [r7, #24]
 8005118:	e007      	b.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800511a:	4b16      	ldr	r3, [pc, #88]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005122:	4a15      	ldr	r2, [pc, #84]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005124:	fbb2 f3f3 	udiv	r3, r2, r3
 8005128:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800512a:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	099b      	lsrs	r3, r3, #6
 8005130:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	fb02 f303 	mul.w	r3, r2, r3
 800513a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800513c:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	0f1b      	lsrs	r3, r3, #28
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	61fb      	str	r3, [r7, #28]
          break;
 800514e:	e00f      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005150:	4b08      	ldr	r3, [pc, #32]	; (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800515c:	d102      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
          {
            frequency = HSE_VALUE;
 800515e:	4b07      	ldr	r3, [pc, #28]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005160:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005162:	e005      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
            frequency = HSI_VALUE;
 8005164:	4b04      	ldr	r3, [pc, #16]	; (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005166:	61fb      	str	r3, [r7, #28]
          break;
 8005168:	e002      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
          break;
 800516e:	bf00      	nop
        }
      }
      break;
 8005170:	e08d      	b.n	800528e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 8005172:	bf00      	nop
 8005174:	40023800 	.word	0x40023800
 8005178:	00f42400 	.word	0x00f42400
 800517c:	007a1200 	.word	0x007a1200
 8005180:	00bb8000 	.word	0x00bb8000
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005184:	4b45      	ldr	r3, [pc, #276]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8005186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800518a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800518e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005196:	d00c      	beq.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005198:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800519c:	d802      	bhi.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 80051a2:	e070      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 80051a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051a8:	d035      	beq.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 80051aa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80051ae:	d05d      	beq.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80051b0:	e069      	b.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80051b2:	4b3b      	ldr	r3, [pc, #236]	; (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x430>)
 80051b4:	61fb      	str	r3, [r7, #28]
          break;
 80051b6:	e069      	b.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80051b8:	4b38      	ldr	r3, [pc, #224]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051c4:	d109      	bne.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80051c6:	4b35      	ldr	r3, [pc, #212]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80051c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051d0:	4a34      	ldr	r2, [pc, #208]	; (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 80051d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	e008      	b.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80051da:	4b30      	ldr	r3, [pc, #192]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80051dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e4:	4a30      	ldr	r2, [pc, #192]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80051ec:	4b2b      	ldr	r3, [pc, #172]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80051ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f2:	099b      	lsrs	r3, r3, #6
 80051f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	fb02 f303 	mul.w	r3, r2, r3
 80051fe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005200:	4b26      	ldr	r3, [pc, #152]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8005202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005206:	0f1b      	lsrs	r3, r3, #28
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005212:	61fb      	str	r3, [r7, #28]
          break;
 8005214:	e03a      	b.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005216:	4b21      	ldr	r3, [pc, #132]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800521e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005222:	d108      	bne.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005224:	4b1d      	ldr	r3, [pc, #116]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800522c:	4a1d      	ldr	r2, [pc, #116]	; (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 800522e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	e007      	b.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005236:	4b19      	ldr	r3, [pc, #100]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800523e:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005246:	4b15      	ldr	r3, [pc, #84]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	099b      	lsrs	r3, r3, #6
 800524c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	fb02 f303 	mul.w	r3, r2, r3
 8005256:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005258:	4b10      	ldr	r3, [pc, #64]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	0f1b      	lsrs	r3, r3, #28
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	fbb2 f3f3 	udiv	r3, r2, r3
 8005268:	61fb      	str	r3, [r7, #28]
          break;
 800526a:	e00f      	b.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005278:	d102      	bne.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          {
            frequency = HSE_VALUE;
 800527a:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 800527c:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800527e:	e005      	b.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            frequency = HSI_VALUE;
 8005280:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8005282:	61fb      	str	r3, [r7, #28]
          break;
 8005284:	e002      	b.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
          break;
 800528a:	bf00      	nop
        }
      }
      break;
 800528c:	bf00      	nop
    }
  }
  return frequency;
 800528e:	69fb      	ldr	r3, [r7, #28]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3724      	adds	r7, #36	; 0x24
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	40023800 	.word	0x40023800
 80052a0:	00bb8000 	.word	0x00bb8000
 80052a4:	007a1200 	.word	0x007a1200
 80052a8:	00f42400 	.word	0x00f42400

080052ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052c6:	4bc6      	ldr	r3, [pc, #792]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x334>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 030c 	and.w	r3, r3, #12
 80052ce:	2b0c      	cmp	r3, #12
 80052d0:	f200 817e 	bhi.w	80055d0 <HAL_RCC_GetSysClockFreq+0x324>
 80052d4:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <HAL_RCC_GetSysClockFreq+0x30>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	08005311 	.word	0x08005311
 80052e0:	080055d1 	.word	0x080055d1
 80052e4:	080055d1 	.word	0x080055d1
 80052e8:	080055d1 	.word	0x080055d1
 80052ec:	08005317 	.word	0x08005317
 80052f0:	080055d1 	.word	0x080055d1
 80052f4:	080055d1 	.word	0x080055d1
 80052f8:	080055d1 	.word	0x080055d1
 80052fc:	0800531d 	.word	0x0800531d
 8005300:	080055d1 	.word	0x080055d1
 8005304:	080055d1 	.word	0x080055d1
 8005308:	080055d1 	.word	0x080055d1
 800530c:	08005479 	.word	0x08005479
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005310:	4bb4      	ldr	r3, [pc, #720]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x338>)
 8005312:	613b      	str	r3, [r7, #16]
       break;
 8005314:	e15f      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005316:	4bb4      	ldr	r3, [pc, #720]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8005318:	613b      	str	r3, [r7, #16]
      break;
 800531a:	e15c      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800531c:	4bb0      	ldr	r3, [pc, #704]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x334>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005324:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005326:	4bae      	ldr	r3, [pc, #696]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d04a      	beq.n	80053c8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005332:	4bab      	ldr	r3, [pc, #684]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	099b      	lsrs	r3, r3, #6
 8005338:	f04f 0400 	mov.w	r4, #0
 800533c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	ea03 0501 	and.w	r5, r3, r1
 8005348:	ea04 0602 	and.w	r6, r4, r2
 800534c:	4629      	mov	r1, r5
 800534e:	4632      	mov	r2, r6
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	f04f 0400 	mov.w	r4, #0
 8005358:	0154      	lsls	r4, r2, #5
 800535a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800535e:	014b      	lsls	r3, r1, #5
 8005360:	4619      	mov	r1, r3
 8005362:	4622      	mov	r2, r4
 8005364:	1b49      	subs	r1, r1, r5
 8005366:	eb62 0206 	sbc.w	r2, r2, r6
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	f04f 0400 	mov.w	r4, #0
 8005372:	0194      	lsls	r4, r2, #6
 8005374:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005378:	018b      	lsls	r3, r1, #6
 800537a:	1a5b      	subs	r3, r3, r1
 800537c:	eb64 0402 	sbc.w	r4, r4, r2
 8005380:	f04f 0100 	mov.w	r1, #0
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	00e2      	lsls	r2, r4, #3
 800538a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800538e:	00d9      	lsls	r1, r3, #3
 8005390:	460b      	mov	r3, r1
 8005392:	4614      	mov	r4, r2
 8005394:	195b      	adds	r3, r3, r5
 8005396:	eb44 0406 	adc.w	r4, r4, r6
 800539a:	f04f 0100 	mov.w	r1, #0
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	0262      	lsls	r2, r4, #9
 80053a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80053a8:	0259      	lsls	r1, r3, #9
 80053aa:	460b      	mov	r3, r1
 80053ac:	4614      	mov	r4, r2
 80053ae:	4618      	mov	r0, r3
 80053b0:	4621      	mov	r1, r4
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f04f 0400 	mov.w	r4, #0
 80053b8:	461a      	mov	r2, r3
 80053ba:	4623      	mov	r3, r4
 80053bc:	f7fb f984 	bl	80006c8 <__aeabi_uldivmod>
 80053c0:	4603      	mov	r3, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	e049      	b.n	800545c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053c8:	4b85      	ldr	r3, [pc, #532]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x334>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	099b      	lsrs	r3, r3, #6
 80053ce:	f04f 0400 	mov.w	r4, #0
 80053d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	ea03 0501 	and.w	r5, r3, r1
 80053de:	ea04 0602 	and.w	r6, r4, r2
 80053e2:	4629      	mov	r1, r5
 80053e4:	4632      	mov	r2, r6
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	f04f 0400 	mov.w	r4, #0
 80053ee:	0154      	lsls	r4, r2, #5
 80053f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053f4:	014b      	lsls	r3, r1, #5
 80053f6:	4619      	mov	r1, r3
 80053f8:	4622      	mov	r2, r4
 80053fa:	1b49      	subs	r1, r1, r5
 80053fc:	eb62 0206 	sbc.w	r2, r2, r6
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	f04f 0400 	mov.w	r4, #0
 8005408:	0194      	lsls	r4, r2, #6
 800540a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800540e:	018b      	lsls	r3, r1, #6
 8005410:	1a5b      	subs	r3, r3, r1
 8005412:	eb64 0402 	sbc.w	r4, r4, r2
 8005416:	f04f 0100 	mov.w	r1, #0
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	00e2      	lsls	r2, r4, #3
 8005420:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005424:	00d9      	lsls	r1, r3, #3
 8005426:	460b      	mov	r3, r1
 8005428:	4614      	mov	r4, r2
 800542a:	195b      	adds	r3, r3, r5
 800542c:	eb44 0406 	adc.w	r4, r4, r6
 8005430:	f04f 0100 	mov.w	r1, #0
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	02a2      	lsls	r2, r4, #10
 800543a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800543e:	0299      	lsls	r1, r3, #10
 8005440:	460b      	mov	r3, r1
 8005442:	4614      	mov	r4, r2
 8005444:	4618      	mov	r0, r3
 8005446:	4621      	mov	r1, r4
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f04f 0400 	mov.w	r4, #0
 800544e:	461a      	mov	r2, r3
 8005450:	4623      	mov	r3, r4
 8005452:	f7fb f939 	bl	80006c8 <__aeabi_uldivmod>
 8005456:	4603      	mov	r3, r0
 8005458:	460c      	mov	r4, r1
 800545a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800545c:	4b60      	ldr	r3, [pc, #384]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x334>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	0c1b      	lsrs	r3, r3, #16
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	3301      	adds	r3, #1
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	fbb2 f3f3 	udiv	r3, r2, r3
 8005474:	613b      	str	r3, [r7, #16]
      break;
 8005476:	e0ae      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005478:	4b59      	ldr	r3, [pc, #356]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x334>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005480:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005482:	4b57      	ldr	r3, [pc, #348]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d04a      	beq.n	8005524 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800548e:	4b54      	ldr	r3, [pc, #336]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	099b      	lsrs	r3, r3, #6
 8005494:	f04f 0400 	mov.w	r4, #0
 8005498:	f240 11ff 	movw	r1, #511	; 0x1ff
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	ea03 0501 	and.w	r5, r3, r1
 80054a4:	ea04 0602 	and.w	r6, r4, r2
 80054a8:	4629      	mov	r1, r5
 80054aa:	4632      	mov	r2, r6
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	f04f 0400 	mov.w	r4, #0
 80054b4:	0154      	lsls	r4, r2, #5
 80054b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054ba:	014b      	lsls	r3, r1, #5
 80054bc:	4619      	mov	r1, r3
 80054be:	4622      	mov	r2, r4
 80054c0:	1b49      	subs	r1, r1, r5
 80054c2:	eb62 0206 	sbc.w	r2, r2, r6
 80054c6:	f04f 0300 	mov.w	r3, #0
 80054ca:	f04f 0400 	mov.w	r4, #0
 80054ce:	0194      	lsls	r4, r2, #6
 80054d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80054d4:	018b      	lsls	r3, r1, #6
 80054d6:	1a5b      	subs	r3, r3, r1
 80054d8:	eb64 0402 	sbc.w	r4, r4, r2
 80054dc:	f04f 0100 	mov.w	r1, #0
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	00e2      	lsls	r2, r4, #3
 80054e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80054ea:	00d9      	lsls	r1, r3, #3
 80054ec:	460b      	mov	r3, r1
 80054ee:	4614      	mov	r4, r2
 80054f0:	195b      	adds	r3, r3, r5
 80054f2:	eb44 0406 	adc.w	r4, r4, r6
 80054f6:	f04f 0100 	mov.w	r1, #0
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	0262      	lsls	r2, r4, #9
 8005500:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005504:	0259      	lsls	r1, r3, #9
 8005506:	460b      	mov	r3, r1
 8005508:	4614      	mov	r4, r2
 800550a:	4618      	mov	r0, r3
 800550c:	4621      	mov	r1, r4
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f04f 0400 	mov.w	r4, #0
 8005514:	461a      	mov	r2, r3
 8005516:	4623      	mov	r3, r4
 8005518:	f7fb f8d6 	bl	80006c8 <__aeabi_uldivmod>
 800551c:	4603      	mov	r3, r0
 800551e:	460c      	mov	r4, r1
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e049      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005524:	4b2e      	ldr	r3, [pc, #184]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	099b      	lsrs	r3, r3, #6
 800552a:	f04f 0400 	mov.w	r4, #0
 800552e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	ea03 0501 	and.w	r5, r3, r1
 800553a:	ea04 0602 	and.w	r6, r4, r2
 800553e:	4629      	mov	r1, r5
 8005540:	4632      	mov	r2, r6
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	f04f 0400 	mov.w	r4, #0
 800554a:	0154      	lsls	r4, r2, #5
 800554c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005550:	014b      	lsls	r3, r1, #5
 8005552:	4619      	mov	r1, r3
 8005554:	4622      	mov	r2, r4
 8005556:	1b49      	subs	r1, r1, r5
 8005558:	eb62 0206 	sbc.w	r2, r2, r6
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	f04f 0400 	mov.w	r4, #0
 8005564:	0194      	lsls	r4, r2, #6
 8005566:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800556a:	018b      	lsls	r3, r1, #6
 800556c:	1a5b      	subs	r3, r3, r1
 800556e:	eb64 0402 	sbc.w	r4, r4, r2
 8005572:	f04f 0100 	mov.w	r1, #0
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	00e2      	lsls	r2, r4, #3
 800557c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005580:	00d9      	lsls	r1, r3, #3
 8005582:	460b      	mov	r3, r1
 8005584:	4614      	mov	r4, r2
 8005586:	195b      	adds	r3, r3, r5
 8005588:	eb44 0406 	adc.w	r4, r4, r6
 800558c:	f04f 0100 	mov.w	r1, #0
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	02a2      	lsls	r2, r4, #10
 8005596:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800559a:	0299      	lsls	r1, r3, #10
 800559c:	460b      	mov	r3, r1
 800559e:	4614      	mov	r4, r2
 80055a0:	4618      	mov	r0, r3
 80055a2:	4621      	mov	r1, r4
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f04f 0400 	mov.w	r4, #0
 80055aa:	461a      	mov	r2, r3
 80055ac:	4623      	mov	r3, r4
 80055ae:	f7fb f88b 	bl	80006c8 <__aeabi_uldivmod>
 80055b2:	4603      	mov	r3, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80055b8:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x334>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	0f1b      	lsrs	r3, r3, #28
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	613b      	str	r3, [r7, #16]
      break;
 80055ce:	e002      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055d0:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x338>)
 80055d2:	613b      	str	r3, [r7, #16]
      break;
 80055d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055d6:	693b      	ldr	r3, [r7, #16]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055e0:	40023800 	.word	0x40023800
 80055e4:	00f42400 	.word	0x00f42400
 80055e8:	007a1200 	.word	0x007a1200

080055ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8087 	beq.w	8005714 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005606:	4b97      	ldr	r3, [pc, #604]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 030c 	and.w	r3, r3, #12
 800560e:	2b04      	cmp	r3, #4
 8005610:	d019      	beq.n	8005646 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005612:	4b94      	ldr	r3, [pc, #592]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800561a:	2b08      	cmp	r3, #8
 800561c:	d106      	bne.n	800562c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800561e:	4b91      	ldr	r3, [pc, #580]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800562a:	d00c      	beq.n	8005646 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800562c:	4b8d      	ldr	r3, [pc, #564]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005634:	2b0c      	cmp	r3, #12
 8005636:	d112      	bne.n	800565e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005638:	4b8a      	ldr	r3, [pc, #552]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005644:	d10b      	bne.n	800565e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005646:	4b87      	ldr	r3, [pc, #540]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d05f      	beq.n	8005712 <HAL_RCC_OscConfig+0x126>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d15b      	bne.n	8005712 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e21a      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005666:	d106      	bne.n	8005676 <HAL_RCC_OscConfig+0x8a>
 8005668:	4b7e      	ldr	r3, [pc, #504]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a7d      	ldr	r2, [pc, #500]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 800566e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	e01d      	b.n	80056b2 <HAL_RCC_OscConfig+0xc6>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800567e:	d10c      	bne.n	800569a <HAL_RCC_OscConfig+0xae>
 8005680:	4b78      	ldr	r3, [pc, #480]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a77      	ldr	r2, [pc, #476]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 8005686:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	4b75      	ldr	r3, [pc, #468]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a74      	ldr	r2, [pc, #464]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 8005692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	e00b      	b.n	80056b2 <HAL_RCC_OscConfig+0xc6>
 800569a:	4b72      	ldr	r3, [pc, #456]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a71      	ldr	r2, [pc, #452]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 80056a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	4b6f      	ldr	r3, [pc, #444]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a6e      	ldr	r2, [pc, #440]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 80056ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d015      	beq.n	80056e6 <HAL_RCC_OscConfig+0xfa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ba:	f7fc fb33 	bl	8001d24 <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c0:	e00a      	b.n	80056d8 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056c2:	f7fc fb2f 	bl	8001d24 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0xec>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e1dd      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d8:	4b62      	ldr	r3, [pc, #392]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0ee      	beq.n	80056c2 <HAL_RCC_OscConfig+0xd6>
 80056e4:	e016      	b.n	8005714 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e6:	f7fc fb1d 	bl	8001d24 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ec:	e00a      	b.n	8005704 <HAL_RCC_OscConfig+0x118>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ee:	f7fc fb19 	bl	8001d24 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e1c7      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005704:	4b57      	ldr	r3, [pc, #348]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1ee      	bne.n	80056ee <HAL_RCC_OscConfig+0x102>
 8005710:	e000      	b.n	8005714 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005712:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d06f      	beq.n	8005800 <HAL_RCC_OscConfig+0x214>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005720:	4b50      	ldr	r3, [pc, #320]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 030c 	and.w	r3, r3, #12
 8005728:	2b00      	cmp	r3, #0
 800572a:	d017      	beq.n	800575c <HAL_RCC_OscConfig+0x170>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800572c:	4b4d      	ldr	r3, [pc, #308]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005734:	2b08      	cmp	r3, #8
 8005736:	d105      	bne.n	8005744 <HAL_RCC_OscConfig+0x158>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005738:	4b4a      	ldr	r3, [pc, #296]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <HAL_RCC_OscConfig+0x170>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005744:	4b47      	ldr	r3, [pc, #284]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800574c:	2b0c      	cmp	r3, #12
 800574e:	d11c      	bne.n	800578a <HAL_RCC_OscConfig+0x19e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005750:	4b44      	ldr	r3, [pc, #272]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d116      	bne.n	800578a <HAL_RCC_OscConfig+0x19e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800575c:	4b41      	ldr	r3, [pc, #260]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_RCC_OscConfig+0x188>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d001      	beq.n	8005774 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e18f      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005774:	4b3b      	ldr	r3, [pc, #236]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4938      	ldr	r1, [pc, #224]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 8005784:	4313      	orrs	r3, r2
 8005786:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005788:	e03a      	b.n	8005800 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d020      	beq.n	80057d4 <HAL_RCC_OscConfig+0x1e8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005792:	4b35      	ldr	r3, [pc, #212]	; (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005794:	2201      	movs	r2, #1
 8005796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005798:	f7fc fac4 	bl	8001d24 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057a0:	f7fc fac0 	bl	8001d24 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e170      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b2:	4b2c      	ldr	r3, [pc, #176]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0x1b4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057be:	4b29      	ldr	r3, [pc, #164]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4925      	ldr	r1, [pc, #148]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	600b      	str	r3, [r1, #0]
 80057d2:	e015      	b.n	8005800 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057d4:	4b24      	ldr	r3, [pc, #144]	; (8005868 <HAL_RCC_OscConfig+0x27c>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057da:	f7fc faa3 	bl	8001d24 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x208>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057e2:	f7fc fa9f 	bl	8001d24 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x208>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e14f      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057f4:	4b1b      	ldr	r3, [pc, #108]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1f0      	bne.n	80057e2 <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b00      	cmp	r3, #0
 800580a:	d037      	beq.n	800587c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d016      	beq.n	8005842 <HAL_RCC_OscConfig+0x256>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005814:	4b15      	ldr	r3, [pc, #84]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581a:	f7fc fa83 	bl	8001d24 <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005822:	f7fc fa7f 	bl	8001d24 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e12f      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005834:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <HAL_RCC_OscConfig+0x278>)
 8005836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0f0      	beq.n	8005822 <HAL_RCC_OscConfig+0x236>
 8005840:	e01c      	b.n	800587c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005842:	4b0a      	ldr	r3, [pc, #40]	; (800586c <HAL_RCC_OscConfig+0x280>)
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005848:	f7fc fa6c 	bl	8001d24 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800584e:	e00f      	b.n	8005870 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005850:	f7fc fa68 	bl	8001d24 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d908      	bls.n	8005870 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e118      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
 8005862:	bf00      	nop
 8005864:	40023800 	.word	0x40023800
 8005868:	42470000 	.word	0x42470000
 800586c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005870:	4b8a      	ldr	r3, [pc, #552]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 8005872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e9      	bne.n	8005850 <HAL_RCC_OscConfig+0x264>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 8097 	beq.w	80059b8 <HAL_RCC_OscConfig+0x3cc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800588a:	2300      	movs	r3, #0
 800588c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800588e:	4b83      	ldr	r3, [pc, #524]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10f      	bne.n	80058ba <HAL_RCC_OscConfig+0x2ce>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	4b7f      	ldr	r3, [pc, #508]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	4a7e      	ldr	r2, [pc, #504]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 80058a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a8:	6413      	str	r3, [r2, #64]	; 0x40
 80058aa:	4b7c      	ldr	r3, [pc, #496]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80058b6:	2301      	movs	r3, #1
 80058b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ba:	4b79      	ldr	r3, [pc, #484]	; (8005aa0 <HAL_RCC_OscConfig+0x4b4>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d118      	bne.n	80058f8 <HAL_RCC_OscConfig+0x30c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058c6:	4b76      	ldr	r3, [pc, #472]	; (8005aa0 <HAL_RCC_OscConfig+0x4b4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a75      	ldr	r2, [pc, #468]	; (8005aa0 <HAL_RCC_OscConfig+0x4b4>)
 80058cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058d2:	f7fc fa27 	bl	8001d24 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058da:	f7fc fa23 	bl	8001d24 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e0d3      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ec:	4b6c      	ldr	r3, [pc, #432]	; (8005aa0 <HAL_RCC_OscConfig+0x4b4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0f0      	beq.n	80058da <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d106      	bne.n	800590e <HAL_RCC_OscConfig+0x322>
 8005900:	4b66      	ldr	r3, [pc, #408]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 8005902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005904:	4a65      	ldr	r2, [pc, #404]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	6713      	str	r3, [r2, #112]	; 0x70
 800590c:	e01c      	b.n	8005948 <HAL_RCC_OscConfig+0x35c>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	2b05      	cmp	r3, #5
 8005914:	d10c      	bne.n	8005930 <HAL_RCC_OscConfig+0x344>
 8005916:	4b61      	ldr	r3, [pc, #388]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 8005918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591a:	4a60      	ldr	r2, [pc, #384]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 800591c:	f043 0304 	orr.w	r3, r3, #4
 8005920:	6713      	str	r3, [r2, #112]	; 0x70
 8005922:	4b5e      	ldr	r3, [pc, #376]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	4a5d      	ldr	r2, [pc, #372]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	6713      	str	r3, [r2, #112]	; 0x70
 800592e:	e00b      	b.n	8005948 <HAL_RCC_OscConfig+0x35c>
 8005930:	4b5a      	ldr	r3, [pc, #360]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 8005932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005934:	4a59      	ldr	r2, [pc, #356]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 8005936:	f023 0301 	bic.w	r3, r3, #1
 800593a:	6713      	str	r3, [r2, #112]	; 0x70
 800593c:	4b57      	ldr	r3, [pc, #348]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 800593e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005940:	4a56      	ldr	r2, [pc, #344]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 8005942:	f023 0304 	bic.w	r3, r3, #4
 8005946:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d015      	beq.n	800597c <HAL_RCC_OscConfig+0x390>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005950:	f7fc f9e8 	bl	8001d24 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005956:	e00a      	b.n	800596e <HAL_RCC_OscConfig+0x382>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005958:	f7fc f9e4 	bl	8001d24 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	f241 3288 	movw	r2, #5000	; 0x1388
 8005966:	4293      	cmp	r3, r2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x382>
        {
          return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e092      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800596e:	4b4b      	ldr	r3, [pc, #300]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 8005970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0ee      	beq.n	8005958 <HAL_RCC_OscConfig+0x36c>
 800597a:	e014      	b.n	80059a6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597c:	f7fc f9d2 	bl	8001d24 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005982:	e00a      	b.n	800599a <HAL_RCC_OscConfig+0x3ae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005984:	f7fc f9ce 	bl	8001d24 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x3ae>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e07c      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800599a:	4b40      	ldr	r3, [pc, #256]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1ee      	bne.n	8005984 <HAL_RCC_OscConfig+0x398>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d105      	bne.n	80059b8 <HAL_RCC_OscConfig+0x3cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ac:	4b3b      	ldr	r3, [pc, #236]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	4a3a      	ldr	r2, [pc, #232]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 80059b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d068      	beq.n	8005a92 <HAL_RCC_OscConfig+0x4a6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059c0:	4b36      	ldr	r3, [pc, #216]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 030c 	and.w	r3, r3, #12
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d060      	beq.n	8005a8e <HAL_RCC_OscConfig+0x4a2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d145      	bne.n	8005a60 <HAL_RCC_OscConfig+0x474>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d4:	4b33      	ldr	r3, [pc, #204]	; (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059da:	f7fc f9a3 	bl	8001d24 <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x408>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e2:	f7fc f99f 	bl	8001d24 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e04f      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f4:	4b29      	ldr	r3, [pc, #164]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1f0      	bne.n	80059e2 <HAL_RCC_OscConfig+0x3f6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	019b      	lsls	r3, r3, #6
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	085b      	lsrs	r3, r3, #1
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	061b      	lsls	r3, r3, #24
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	071b      	lsls	r3, r3, #28
 8005a2c:	491b      	ldr	r1, [pc, #108]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a32:	4b1c      	ldr	r3, [pc, #112]	; (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a38:	f7fc f974 	bl	8001d24 <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0x466>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a40:	f7fc f970 	bl	8001d24 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x466>
          {
            return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e020      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a52:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0f0      	beq.n	8005a40 <HAL_RCC_OscConfig+0x454>
 8005a5e:	e018      	b.n	8005a92 <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a60:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a66:	f7fc f95d 	bl	8001d24 <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x494>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a6e:	f7fc f959 	bl	8001d24 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x494>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e009      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a80:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <HAL_RCC_OscConfig+0x4b0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f0      	bne.n	8005a6e <HAL_RCC_OscConfig+0x482>
 8005a8c:	e001      	b.n	8005a92 <HAL_RCC_OscConfig+0x4a6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <HAL_RCC_OscConfig+0x4a8>
    }
  }
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	40007000 	.word	0x40007000
 8005aa4:	42470060 	.word	0x42470060

08005aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e056      	b.n	8005b68 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d106      	bne.n	8005ada <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f84b 	bl	8005b70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2202      	movs	r2, #2
 8005ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	431a      	orrs	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	ea42 0103 	orr.w	r1, r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	0c1b      	lsrs	r3, r3, #16
 8005b38:	f003 0104 	and.w	r1, r3, #4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	69da      	ldr	r2, [r3, #28]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d110      	bne.n	8005bc0 <HAL_SPI_Receive_DMA+0x3c>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ba6:	d10b      	bne.n	8005bc0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2204      	movs	r2, #4
 8005bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 f8a4 	bl	8005d04 <HAL_SPI_TransmitReceive_DMA>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	e097      	b.n	8005cf0 <HAL_SPI_Receive_DMA+0x16c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_SPI_Receive_DMA+0x4a>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e090      	b.n	8005cf0 <HAL_SPI_Receive_DMA+0x16c>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d002      	beq.n	8005be8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
 8005be4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005be6:	e07e      	b.n	8005ce6 <HAL_SPI_Receive_DMA+0x162>
  }

  if ((pData == NULL) || (Size == 0U))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_SPI_Receive_DMA+0x70>
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d102      	bne.n	8005bfa <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bf8:	e075      	b.n	8005ce6 <HAL_SPI_Receive_DMA+0x162>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2204      	movs	r2, #4
 8005bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	88fa      	ldrh	r2, [r7, #6]
 8005c12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	88fa      	ldrh	r2, [r7, #6]
 8005c18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3a:	d107      	bne.n	8005c4c <HAL_SPI_Receive_DMA+0xc8>
  {
    SPI_1LINE_RX(hspi);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c50:	4a29      	ldr	r2, [pc, #164]	; (8005cf8 <HAL_SPI_Receive_DMA+0x174>)
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c58:	4a28      	ldr	r2, [pc, #160]	; (8005cfc <HAL_SPI_Receive_DMA+0x178>)
 8005c5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c60:	4a27      	ldr	r2, [pc, #156]	; (8005d00 <HAL_SPI_Receive_DMA+0x17c>)
 8005c62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c68:	2200      	movs	r2, #0
 8005c6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	330c      	adds	r3, #12
 8005c76:	4619      	mov	r1, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c82:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005c84:	f7fc fa9a 	bl	80021bc <HAL_DMA_Start_IT>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00c      	beq.n	8005ca8 <HAL_SPI_Receive_DMA+0x124>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c92:	f043 0210 	orr.w	r2, r3, #16
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005ca6:	e01e      	b.n	8005ce6 <HAL_SPI_Receive_DMA+0x162>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d007      	beq.n	8005cc6 <HAL_SPI_Receive_DMA+0x142>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0220 	orr.w	r2, r2, #32
 8005cd4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0201 	orr.w	r2, r2, #1
 8005ce4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	080060a5 	.word	0x080060a5
 8005cfc:	08005f6d 	.word	0x08005f6d
 8005d00:	080060dd 	.word	0x080060dd

08005d04 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e0e3      	b.n	8005eec <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d32:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005d3a:	7dbb      	ldrb	r3, [r7, #22]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d00d      	beq.n	8005d5c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d46:	d106      	bne.n	8005d56 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d102      	bne.n	8005d56 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005d50:	7dbb      	ldrb	r3, [r7, #22]
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d002      	beq.n	8005d5c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005d56:	2302      	movs	r3, #2
 8005d58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d5a:	e0c2      	b.n	8005ee2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005d68:	887b      	ldrh	r3, [r7, #2]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d102      	bne.n	8005d74 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d72:	e0b6      	b.n	8005ee2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d003      	beq.n	8005d88 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2205      	movs	r2, #5
 8005d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	887a      	ldrh	r2, [r7, #2]
 8005d98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	887a      	ldrh	r2, [r7, #2]
 8005d9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	887a      	ldrh	r2, [r7, #2]
 8005daa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	887a      	ldrh	r2, [r7, #2]
 8005db0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d108      	bne.n	8005ddc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dce:	4a49      	ldr	r2, [pc, #292]	; (8005ef4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd6:	4a48      	ldr	r2, [pc, #288]	; (8005ef8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005dd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8005dda:	e007      	b.n	8005dec <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de0:	4a46      	ldr	r2, [pc, #280]	; (8005efc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de8:	4a45      	ldr	r2, [pc, #276]	; (8005f00 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8005dea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df0:	4a44      	ldr	r2, [pc, #272]	; (8005f04 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8005df2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df8:	2200      	movs	r2, #0
 8005dfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	4619      	mov	r1, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e12:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005e14:	f7fc f9d2 	bl	80021bc <HAL_DMA_Start_IT>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00c      	beq.n	8005e38 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e22:	f043 0210 	orr.w	r2, r3, #16
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005e36:	e054      	b.n	8005ee2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e54:	2200      	movs	r2, #0
 8005e56:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e64:	2200      	movs	r2, #0
 8005e66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	4619      	mov	r1, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	330c      	adds	r3, #12
 8005e78:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005e80:	f7fc f99c 	bl	80021bc <HAL_DMA_Start_IT>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00c      	beq.n	8005ea4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	f043 0210 	orr.w	r2, r3, #16
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005ea2:	e01e      	b.n	8005ee2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eae:	2b40      	cmp	r3, #64	; 0x40
 8005eb0:	d007      	beq.n	8005ec2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ec0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0220 	orr.w	r2, r2, #32
 8005ed0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0202 	orr.w	r2, r2, #2
 8005ee0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	080060a5 	.word	0x080060a5
 8005ef8:	08005f6d 	.word	0x08005f6d
 8005efc:	080060c1 	.word	0x080060c1
 8005f00:	08006015 	.word	0x08006015
 8005f04:	080060dd 	.word	0x080060dd

08005f08 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f7a:	f7fb fed3 	bl	8001d24 <HAL_GetTick>
 8005f7e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f8e:	d03b      	beq.n	8006008 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0220 	bic.w	r2, r2, #32
 8005f9e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10d      	bne.n	8005fc4 <SPI_DMAReceiveCplt+0x58>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fb0:	d108      	bne.n	8005fc4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0203 	bic.w	r2, r2, #3
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	e007      	b.n	8005fd4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0201 	bic.w	r2, r2, #1
 8005fd2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	2164      	movs	r1, #100	; 0x64
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f909 	bl	80061f0 <SPI_EndRxTransaction>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff ffa9 	bl	8005f58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006006:	e002      	b.n	800600e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f7ff ff7d 	bl	8005f08 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006022:	f7fb fe7f 	bl	8001d24 <HAL_GetTick>
 8006026:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006036:	d02f      	beq.n	8006098 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0220 	bic.w	r2, r2, #32
 8006046:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	2164      	movs	r1, #100	; 0x64
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f935 	bl	80062bc <SPI_EndRxTxTransaction>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d005      	beq.n	8006064 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605c:	f043 0220 	orr.w	r2, r3, #32
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0203 	bic.w	r2, r2, #3
 8006072:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f7ff ff61 	bl	8005f58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006096:	e002      	b.n	800609e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7ff ff3f 	bl	8005f1c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f7ff ff3c 	bl	8005f30 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060b8:	bf00      	nop
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f7ff ff38 	bl	8005f44 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0203 	bic.w	r2, r2, #3
 80060f8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fe:	f043 0210 	orr.w	r2, r3, #16
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7ff ff22 	bl	8005f58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006114:	bf00      	nop
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	4613      	mov	r3, r2
 800612a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800612c:	e04c      	b.n	80061c8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006134:	d048      	beq.n	80061c8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006136:	f7fb fdf5 	bl	8001d24 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d902      	bls.n	800614c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d13d      	bne.n	80061c8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800615a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006164:	d111      	bne.n	800618a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800616e:	d004      	beq.n	800617a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006178:	d107      	bne.n	800618a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006188:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006192:	d10f      	bne.n	80061b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e00f      	b.n	80061e8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4013      	ands	r3, r2
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	bf0c      	ite	eq
 80061d8:	2301      	moveq	r3, #1
 80061da:	2300      	movne	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d1a3      	bne.n	800612e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006204:	d111      	bne.n	800622a <SPI_EndRxTransaction+0x3a>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800620e:	d004      	beq.n	800621a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006218:	d107      	bne.n	800622a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006228:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006232:	d12a      	bne.n	800628a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623c:	d012      	beq.n	8006264 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2200      	movs	r2, #0
 8006246:	2180      	movs	r1, #128	; 0x80
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f7ff ff67 	bl	800611c <SPI_WaitFlagStateUntilTimeout>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d02d      	beq.n	80062b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006258:	f043 0220 	orr.w	r2, r3, #32
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e026      	b.n	80062b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2200      	movs	r2, #0
 800626c:	2101      	movs	r1, #1
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f7ff ff54 	bl	800611c <SPI_WaitFlagStateUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d01a      	beq.n	80062b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627e:	f043 0220 	orr.w	r2, r3, #32
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e013      	b.n	80062b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2200      	movs	r2, #0
 8006292:	2101      	movs	r1, #1
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff ff41 	bl	800611c <SPI_WaitFlagStateUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a4:	f043 0220 	orr.w	r2, r3, #32
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e000      	b.n	80062b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062c8:	4b1b      	ldr	r3, [pc, #108]	; (8006338 <SPI_EndRxTxTransaction+0x7c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1b      	ldr	r2, [pc, #108]	; (800633c <SPI_EndRxTxTransaction+0x80>)
 80062ce:	fba2 2303 	umull	r2, r3, r2, r3
 80062d2:	0d5b      	lsrs	r3, r3, #21
 80062d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062d8:	fb02 f303 	mul.w	r3, r2, r3
 80062dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062e6:	d112      	bne.n	800630e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2200      	movs	r2, #0
 80062f0:	2180      	movs	r1, #128	; 0x80
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f7ff ff12 	bl	800611c <SPI_WaitFlagStateUntilTimeout>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d016      	beq.n	800632c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006302:	f043 0220 	orr.w	r2, r3, #32
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e00f      	b.n	800632e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	3b01      	subs	r3, #1
 8006318:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006324:	2b80      	cmp	r3, #128	; 0x80
 8006326:	d0f2      	beq.n	800630e <SPI_EndRxTxTransaction+0x52>
 8006328:	e000      	b.n	800632c <SPI_EndRxTxTransaction+0x70>
        break;
 800632a:	bf00      	nop
  }

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	200005f0 	.word	0x200005f0
 800633c:	165e9f81 	.word	0x165e9f81

08006340 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2201      	movs	r2, #1
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fead 	bl	80070b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a15      	ldr	r2, [pc, #84]	; (80063b4 <HAL_TIM_OC_Start+0x74>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <HAL_TIM_OC_Start+0x2c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <HAL_TIM_OC_Start+0x78>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d101      	bne.n	8006370 <HAL_TIM_OC_Start+0x30>
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <HAL_TIM_OC_Start+0x32>
 8006370:	2300      	movs	r3, #0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006384:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b06      	cmp	r3, #6
 8006396:	d007      	beq.n	80063a8 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40010400 	.word	0x40010400

080063bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e01d      	b.n	800640a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f815 	bl	8006412 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f000 f9da 	bl	80067b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b084      	sub	sp, #16
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2201      	movs	r2, #1
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fe3a 	bl	80070b2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b06      	cmp	r3, #6
 800644e:	d007      	beq.n	8006460 <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	60f8      	str	r0, [r7, #12]
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006480:	2302      	movs	r3, #2
 8006482:	e08a      	b.n	800659a <HAL_TIM_IC_ConfigChannel+0x130>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d11b      	bne.n	80064d2 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6819      	ldr	r1, [r3, #0]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f000 fc59 	bl	8006d60 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	699a      	ldr	r2, [r3, #24]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 020c 	bic.w	r2, r2, #12
 80064bc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6999      	ldr	r1, [r3, #24]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	619a      	str	r2, [r3, #24]
 80064d0:	e05a      	b.n	8006588 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d11c      	bne.n	8006512 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6818      	ldr	r0, [r3, #0]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	6819      	ldr	r1, [r3, #0]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f000 fcdd 	bl	8006ea6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80064fa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6999      	ldr	r1, [r3, #24]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	021a      	lsls	r2, r3, #8
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	619a      	str	r2, [r3, #24]
 8006510:	e03a      	b.n	8006588 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b08      	cmp	r3, #8
 8006516:	d11b      	bne.n	8006550 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6818      	ldr	r0, [r3, #0]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	6819      	ldr	r1, [r3, #0]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f000 fd2a 	bl	8006f80 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	69da      	ldr	r2, [r3, #28]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 020c 	bic.w	r2, r2, #12
 800653a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	69d9      	ldr	r1, [r3, #28]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	61da      	str	r2, [r3, #28]
 800654e:	e01b      	b.n	8006588 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	6819      	ldr	r1, [r3, #0]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f000 fd4a 	bl	8006ff8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69da      	ldr	r2, [r3, #28]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006572:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69d9      	ldr	r1, [r3, #28]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	021a      	lsls	r2, r3, #8
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e0b4      	b.n	8006728 <HAL_TIM_PWM_ConfigChannel+0x184>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2202      	movs	r2, #2
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b0c      	cmp	r3, #12
 80065d2:	f200 809f 	bhi.w	8006714 <HAL_TIM_PWM_ConfigChannel+0x170>
 80065d6:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	08006611 	.word	0x08006611
 80065e0:	08006715 	.word	0x08006715
 80065e4:	08006715 	.word	0x08006715
 80065e8:	08006715 	.word	0x08006715
 80065ec:	08006651 	.word	0x08006651
 80065f0:	08006715 	.word	0x08006715
 80065f4:	08006715 	.word	0x08006715
 80065f8:	08006715 	.word	0x08006715
 80065fc:	08006693 	.word	0x08006693
 8006600:	08006715 	.word	0x08006715
 8006604:	08006715 	.word	0x08006715
 8006608:	08006715 	.word	0x08006715
 800660c:	080066d3 	.word	0x080066d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f96c 	bl	80068f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	699a      	ldr	r2, [r3, #24]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0208 	orr.w	r2, r2, #8
 800662a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0204 	bic.w	r2, r2, #4
 800663a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6999      	ldr	r1, [r3, #24]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	691a      	ldr	r2, [r3, #16]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	619a      	str	r2, [r3, #24]
      break;
 800664e:	e062      	b.n	8006716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	4618      	mov	r0, r3
 8006658:	f000 f9bc 	bl	80069d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800666a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800667a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6999      	ldr	r1, [r3, #24]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	021a      	lsls	r2, r3, #8
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	619a      	str	r2, [r3, #24]
      break;
 8006690:	e041      	b.n	8006716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68b9      	ldr	r1, [r7, #8]
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fa11 	bl	8006ac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0208 	orr.w	r2, r2, #8
 80066ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69da      	ldr	r2, [r3, #28]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0204 	bic.w	r2, r2, #4
 80066bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69d9      	ldr	r1, [r3, #28]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	61da      	str	r2, [r3, #28]
      break;
 80066d0:	e021      	b.n	8006716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fa65 	bl	8006ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69da      	ldr	r2, [r3, #28]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69d9      	ldr	r1, [r3, #28]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	021a      	lsls	r2, r3, #8
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	61da      	str	r2, [r3, #28]
      break;
 8006712:	e000      	b.n	8006716 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006714:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006744:	2302      	movs	r3, #2
 8006746:	e031      	b.n	80067ac <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fa7a 	bl	8006c54 <TIM_SlaveTimer_SetConfig>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e018      	b.n	80067ac <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006788:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006798:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a40      	ldr	r2, [pc, #256]	; (80068c8 <TIM_Base_SetConfig+0x114>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d013      	beq.n	80067f4 <TIM_Base_SetConfig+0x40>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d2:	d00f      	beq.n	80067f4 <TIM_Base_SetConfig+0x40>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a3d      	ldr	r2, [pc, #244]	; (80068cc <TIM_Base_SetConfig+0x118>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00b      	beq.n	80067f4 <TIM_Base_SetConfig+0x40>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a3c      	ldr	r2, [pc, #240]	; (80068d0 <TIM_Base_SetConfig+0x11c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d007      	beq.n	80067f4 <TIM_Base_SetConfig+0x40>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a3b      	ldr	r2, [pc, #236]	; (80068d4 <TIM_Base_SetConfig+0x120>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d003      	beq.n	80067f4 <TIM_Base_SetConfig+0x40>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a3a      	ldr	r2, [pc, #232]	; (80068d8 <TIM_Base_SetConfig+0x124>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d108      	bne.n	8006806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4313      	orrs	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a2f      	ldr	r2, [pc, #188]	; (80068c8 <TIM_Base_SetConfig+0x114>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d02b      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006814:	d027      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a2c      	ldr	r2, [pc, #176]	; (80068cc <TIM_Base_SetConfig+0x118>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d023      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a2b      	ldr	r2, [pc, #172]	; (80068d0 <TIM_Base_SetConfig+0x11c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d01f      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a2a      	ldr	r2, [pc, #168]	; (80068d4 <TIM_Base_SetConfig+0x120>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d01b      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a29      	ldr	r2, [pc, #164]	; (80068d8 <TIM_Base_SetConfig+0x124>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d017      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a28      	ldr	r2, [pc, #160]	; (80068dc <TIM_Base_SetConfig+0x128>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d013      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a27      	ldr	r2, [pc, #156]	; (80068e0 <TIM_Base_SetConfig+0x12c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00f      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a26      	ldr	r2, [pc, #152]	; (80068e4 <TIM_Base_SetConfig+0x130>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00b      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a25      	ldr	r2, [pc, #148]	; (80068e8 <TIM_Base_SetConfig+0x134>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d007      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a24      	ldr	r2, [pc, #144]	; (80068ec <TIM_Base_SetConfig+0x138>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a23      	ldr	r2, [pc, #140]	; (80068f0 <TIM_Base_SetConfig+0x13c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d108      	bne.n	8006878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800686c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a0a      	ldr	r2, [pc, #40]	; (80068c8 <TIM_Base_SetConfig+0x114>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <TIM_Base_SetConfig+0xf8>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a0c      	ldr	r2, [pc, #48]	; (80068d8 <TIM_Base_SetConfig+0x124>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d103      	bne.n	80068b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	691a      	ldr	r2, [r3, #16]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	615a      	str	r2, [r3, #20]
}
 80068ba:	bf00      	nop
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40010000 	.word	0x40010000
 80068cc:	40000400 	.word	0x40000400
 80068d0:	40000800 	.word	0x40000800
 80068d4:	40000c00 	.word	0x40000c00
 80068d8:	40010400 	.word	0x40010400
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40014400 	.word	0x40014400
 80068e4:	40014800 	.word	0x40014800
 80068e8:	40001800 	.word	0x40001800
 80068ec:	40001c00 	.word	0x40001c00
 80068f0:	40002000 	.word	0x40002000

080068f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	f023 0201 	bic.w	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0303 	bic.w	r3, r3, #3
 800692a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f023 0302 	bic.w	r3, r3, #2
 800693c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a20      	ldr	r2, [pc, #128]	; (80069cc <TIM_OC1_SetConfig+0xd8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_OC1_SetConfig+0x64>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a1f      	ldr	r2, [pc, #124]	; (80069d0 <TIM_OC1_SetConfig+0xdc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d10c      	bne.n	8006972 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f023 0308 	bic.w	r3, r3, #8
 800695e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f023 0304 	bic.w	r3, r3, #4
 8006970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a15      	ldr	r2, [pc, #84]	; (80069cc <TIM_OC1_SetConfig+0xd8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_OC1_SetConfig+0x8e>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a14      	ldr	r2, [pc, #80]	; (80069d0 <TIM_OC1_SetConfig+0xdc>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d111      	bne.n	80069a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	621a      	str	r2, [r3, #32]
}
 80069c0:	bf00      	nop
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	40010000 	.word	0x40010000
 80069d0:	40010400 	.word	0x40010400

080069d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f023 0210 	bic.w	r2, r3, #16
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	021b      	lsls	r3, r3, #8
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f023 0320 	bic.w	r3, r3, #32
 8006a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a22      	ldr	r2, [pc, #136]	; (8006ab8 <TIM_OC2_SetConfig+0xe4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d003      	beq.n	8006a3c <TIM_OC2_SetConfig+0x68>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a21      	ldr	r2, [pc, #132]	; (8006abc <TIM_OC2_SetConfig+0xe8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d10d      	bne.n	8006a58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a17      	ldr	r2, [pc, #92]	; (8006ab8 <TIM_OC2_SetConfig+0xe4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_OC2_SetConfig+0x94>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a16      	ldr	r2, [pc, #88]	; (8006abc <TIM_OC2_SetConfig+0xe8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d113      	bne.n	8006a90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	621a      	str	r2, [r3, #32]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40010400 	.word	0x40010400

08006ac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	021b      	lsls	r3, r3, #8
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a21      	ldr	r2, [pc, #132]	; (8006ba0 <TIM_OC3_SetConfig+0xe0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d003      	beq.n	8006b26 <TIM_OC3_SetConfig+0x66>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a20      	ldr	r2, [pc, #128]	; (8006ba4 <TIM_OC3_SetConfig+0xe4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d10d      	bne.n	8006b42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a16      	ldr	r2, [pc, #88]	; (8006ba0 <TIM_OC3_SetConfig+0xe0>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d003      	beq.n	8006b52 <TIM_OC3_SetConfig+0x92>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a15      	ldr	r2, [pc, #84]	; (8006ba4 <TIM_OC3_SetConfig+0xe4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d113      	bne.n	8006b7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	621a      	str	r2, [r3, #32]
}
 8006b94:	bf00      	nop
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	40010000 	.word	0x40010000
 8006ba4:	40010400 	.word	0x40010400

08006ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	021b      	lsls	r3, r3, #8
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	031b      	lsls	r3, r3, #12
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a12      	ldr	r2, [pc, #72]	; (8006c4c <TIM_OC4_SetConfig+0xa4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d003      	beq.n	8006c10 <TIM_OC4_SetConfig+0x68>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a11      	ldr	r2, [pc, #68]	; (8006c50 <TIM_OC4_SetConfig+0xa8>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d109      	bne.n	8006c24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	019b      	lsls	r3, r3, #6
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	40010000 	.word	0x40010000
 8006c50:	40010400 	.word	0x40010400

08006c54 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f023 0307 	bic.w	r3, r3, #7
 8006c7e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	2b30      	cmp	r3, #48	; 0x30
 8006c98:	d05c      	beq.n	8006d54 <TIM_SlaveTimer_SetConfig+0x100>
 8006c9a:	2b30      	cmp	r3, #48	; 0x30
 8006c9c:	d806      	bhi.n	8006cac <TIM_SlaveTimer_SetConfig+0x58>
 8006c9e:	2b10      	cmp	r3, #16
 8006ca0:	d058      	beq.n	8006d54 <TIM_SlaveTimer_SetConfig+0x100>
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	d056      	beq.n	8006d54 <TIM_SlaveTimer_SetConfig+0x100>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d054      	beq.n	8006d54 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006caa:	e054      	b.n	8006d56 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006cac:	2b50      	cmp	r3, #80	; 0x50
 8006cae:	d03d      	beq.n	8006d2c <TIM_SlaveTimer_SetConfig+0xd8>
 8006cb0:	2b50      	cmp	r3, #80	; 0x50
 8006cb2:	d802      	bhi.n	8006cba <TIM_SlaveTimer_SetConfig+0x66>
 8006cb4:	2b40      	cmp	r3, #64	; 0x40
 8006cb6:	d010      	beq.n	8006cda <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8006cb8:	e04d      	b.n	8006d56 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006cba:	2b60      	cmp	r3, #96	; 0x60
 8006cbc:	d040      	beq.n	8006d40 <TIM_SlaveTimer_SetConfig+0xec>
 8006cbe:	2b70      	cmp	r3, #112	; 0x70
 8006cc0:	d000      	beq.n	8006cc4 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8006cc2:	e048      	b.n	8006d56 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6818      	ldr	r0, [r3, #0]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	68d9      	ldr	r1, [r3, #12]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f000 f9cd 	bl	8007072 <TIM_ETR_SetConfig>
      break;
 8006cd8:	e03d      	b.n	8006d56 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b05      	cmp	r3, #5
 8006ce0:	d101      	bne.n	8006ce6 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e038      	b.n	8006d58 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6a1a      	ldr	r2, [r3, #32]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0201 	bic.w	r2, r2, #1
 8006cfc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d0c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	621a      	str	r2, [r3, #32]
      break;
 8006d2a:	e014      	b.n	8006d56 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	6899      	ldr	r1, [r3, #8]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	f000 f885 	bl	8006e48 <TIM_TI1_ConfigInputStage>
      break;
 8006d3e:	e00a      	b.n	8006d56 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	6899      	ldr	r1, [r3, #8]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f000 f8e7 	bl	8006f20 <TIM_TI2_ConfigInputStage>
      break;
 8006d52:	e000      	b.n	8006d56 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8006d54:	bf00      	nop
  }
  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	f023 0201 	bic.w	r2, r3, #1
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4a28      	ldr	r2, [pc, #160]	; (8006e2c <TIM_TI1_SetConfig+0xcc>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d01b      	beq.n	8006dc6 <TIM_TI1_SetConfig+0x66>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d94:	d017      	beq.n	8006dc6 <TIM_TI1_SetConfig+0x66>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a25      	ldr	r2, [pc, #148]	; (8006e30 <TIM_TI1_SetConfig+0xd0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d013      	beq.n	8006dc6 <TIM_TI1_SetConfig+0x66>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4a24      	ldr	r2, [pc, #144]	; (8006e34 <TIM_TI1_SetConfig+0xd4>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00f      	beq.n	8006dc6 <TIM_TI1_SetConfig+0x66>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4a23      	ldr	r2, [pc, #140]	; (8006e38 <TIM_TI1_SetConfig+0xd8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00b      	beq.n	8006dc6 <TIM_TI1_SetConfig+0x66>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4a22      	ldr	r2, [pc, #136]	; (8006e3c <TIM_TI1_SetConfig+0xdc>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d007      	beq.n	8006dc6 <TIM_TI1_SetConfig+0x66>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4a21      	ldr	r2, [pc, #132]	; (8006e40 <TIM_TI1_SetConfig+0xe0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d003      	beq.n	8006dc6 <TIM_TI1_SetConfig+0x66>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4a20      	ldr	r2, [pc, #128]	; (8006e44 <TIM_TI1_SetConfig+0xe4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d101      	bne.n	8006dca <TIM_TI1_SetConfig+0x6a>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e000      	b.n	8006dcc <TIM_TI1_SetConfig+0x6c>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d008      	beq.n	8006de2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	e003      	b.n	8006dea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f043 0301 	orr.w	r3, r3, #1
 8006de8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	011b      	lsls	r3, r3, #4
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f023 030a 	bic.w	r3, r3, #10
 8006e04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f003 030a 	and.w	r3, r3, #10
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	621a      	str	r2, [r3, #32]
}
 8006e1e:	bf00      	nop
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40010000 	.word	0x40010000
 8006e30:	40000400 	.word	0x40000400
 8006e34:	40000800 	.word	0x40000800
 8006e38:	40000c00 	.word	0x40000c00
 8006e3c:	40010400 	.word	0x40010400
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40001800 	.word	0x40001800

08006e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	f023 0201 	bic.w	r2, r3, #1
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f023 030a 	bic.w	r3, r3, #10
 8006e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b087      	sub	sp, #28
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	607a      	str	r2, [r7, #4]
 8006eb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f023 0210 	bic.w	r2, r3, #16
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	031b      	lsls	r3, r3, #12
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ef8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	011b      	lsls	r3, r3, #4
 8006efe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	621a      	str	r2, [r3, #32]
}
 8006f14:	bf00      	nop
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	f023 0210 	bic.w	r2, r3, #16
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	031b      	lsls	r3, r3, #12
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	011b      	lsls	r3, r3, #4
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	621a      	str	r2, [r3, #32]
}
 8006f74:	bf00      	nop
 8006f76:	371c      	adds	r7, #28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f023 0303 	bic.w	r3, r3, #3
 8006fac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006fd0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	021b      	lsls	r3, r3, #8
 8006fd6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	621a      	str	r2, [r3, #32]
}
 8006fec:	bf00      	nop
 8006fee:	371c      	adds	r7, #28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007024:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	4313      	orrs	r3, r2
 800702e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007036:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	031b      	lsls	r3, r3, #12
 800703c:	b29b      	uxth	r3, r3
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800704a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	031b      	lsls	r3, r3, #12
 8007050:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	4313      	orrs	r3, r2
 8007058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	621a      	str	r2, [r3, #32]
}
 8007066:	bf00      	nop
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007072:	b480      	push	{r7}
 8007074:	b087      	sub	sp, #28
 8007076:	af00      	add	r7, sp, #0
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	607a      	str	r2, [r7, #4]
 800707e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800708c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	021a      	lsls	r2, r3, #8
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	431a      	orrs	r2, r3
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	4313      	orrs	r3, r2
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	4313      	orrs	r3, r2
 800709e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	609a      	str	r2, [r3, #8]
}
 80070a6:	bf00      	nop
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b087      	sub	sp, #28
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	2201      	movs	r2, #1
 80070c6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a1a      	ldr	r2, [r3, #32]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	43db      	mvns	r3, r3
 80070d4:	401a      	ands	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6a1a      	ldr	r2, [r3, #32]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f003 031f 	and.w	r3, r3, #31
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ea:	431a      	orrs	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	621a      	str	r2, [r3, #32]
}
 80070f0:	bf00      	nop
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e03f      	b.n	800718e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d106      	bne.n	8007128 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f004 fe10 	bl	800bd48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2224      	movs	r2, #36	; 0x24
 800712c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800713e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f90b 	bl	800735c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	691a      	ldr	r2, [r3, #16]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007154:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	695a      	ldr	r2, [r3, #20]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007164:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007174:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b088      	sub	sp, #32
 800719a:	af02      	add	r7, sp, #8
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	4613      	mov	r3, r2
 80071a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b20      	cmp	r3, #32
 80071b4:	f040 8083 	bne.w	80072be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <HAL_UART_Transmit+0x2e>
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e07b      	b.n	80072c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d101      	bne.n	80071d6 <HAL_UART_Transmit+0x40>
 80071d2:	2302      	movs	r3, #2
 80071d4:	e074      	b.n	80072c0 <HAL_UART_Transmit+0x12a>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2221      	movs	r2, #33	; 0x21
 80071e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80071ec:	f7fa fd9a 	bl	8001d24 <HAL_GetTick>
 80071f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	88fa      	ldrh	r2, [r7, #6]
 80071f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	88fa      	ldrh	r2, [r7, #6]
 80071fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007206:	e042      	b.n	800728e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800720c:	b29b      	uxth	r3, r3
 800720e:	3b01      	subs	r3, #1
 8007210:	b29a      	uxth	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721e:	d122      	bne.n	8007266 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2200      	movs	r2, #0
 8007228:	2180      	movs	r1, #128	; 0x80
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 f84c 	bl	80072c8 <UART_WaitOnFlagUntilTimeout>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e042      	b.n	80072c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800724c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d103      	bne.n	800725e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	3302      	adds	r3, #2
 800725a:	60bb      	str	r3, [r7, #8]
 800725c:	e017      	b.n	800728e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	3301      	adds	r3, #1
 8007262:	60bb      	str	r3, [r7, #8]
 8007264:	e013      	b.n	800728e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2200      	movs	r2, #0
 800726e:	2180      	movs	r1, #128	; 0x80
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 f829 	bl	80072c8 <UART_WaitOnFlagUntilTimeout>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e01f      	b.n	80072c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	60ba      	str	r2, [r7, #8]
 8007286:	781a      	ldrb	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007292:	b29b      	uxth	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1b7      	bne.n	8007208 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	2200      	movs	r2, #0
 80072a0:	2140      	movs	r1, #64	; 0x40
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 f810 	bl	80072c8 <UART_WaitOnFlagUntilTimeout>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e006      	b.n	80072c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	e000      	b.n	80072c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80072be:	2302      	movs	r3, #2
  }
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	603b      	str	r3, [r7, #0]
 80072d4:	4613      	mov	r3, r2
 80072d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072d8:	e02c      	b.n	8007334 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e0:	d028      	beq.n	8007334 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d007      	beq.n	80072f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80072e8:	f7fa fd1c 	bl	8001d24 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d21d      	bcs.n	8007334 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007306:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	695a      	ldr	r2, [r3, #20]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0201 	bic.w	r2, r2, #1
 8007316:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2220      	movs	r2, #32
 800731c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2220      	movs	r2, #32
 8007324:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e00f      	b.n	8007354 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	4013      	ands	r3, r2
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	429a      	cmp	r2, r3
 8007342:	bf0c      	ite	eq
 8007344:	2301      	moveq	r3, #1
 8007346:	2300      	movne	r3, #0
 8007348:	b2db      	uxtb	r3, r3
 800734a:	461a      	mov	r2, r3
 800734c:	79fb      	ldrb	r3, [r7, #7]
 800734e:	429a      	cmp	r2, r3
 8007350:	d0c3      	beq.n	80072da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007360:	b085      	sub	sp, #20
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	431a      	orrs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800739e:	f023 030c 	bic.w	r3, r3, #12
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6812      	ldr	r2, [r2, #0]
 80073a6:	68f9      	ldr	r1, [r7, #12]
 80073a8:	430b      	orrs	r3, r1
 80073aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ca:	f040 818b 	bne.w	80076e4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4ac1      	ldr	r2, [pc, #772]	; (80076d8 <UART_SetConfig+0x37c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d005      	beq.n	80073e4 <UART_SetConfig+0x88>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4abf      	ldr	r2, [pc, #764]	; (80076dc <UART_SetConfig+0x380>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	f040 80bd 	bne.w	800755e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073e4:	f7fd f940 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 80073e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	461d      	mov	r5, r3
 80073ee:	f04f 0600 	mov.w	r6, #0
 80073f2:	46a8      	mov	r8, r5
 80073f4:	46b1      	mov	r9, r6
 80073f6:	eb18 0308 	adds.w	r3, r8, r8
 80073fa:	eb49 0409 	adc.w	r4, r9, r9
 80073fe:	4698      	mov	r8, r3
 8007400:	46a1      	mov	r9, r4
 8007402:	eb18 0805 	adds.w	r8, r8, r5
 8007406:	eb49 0906 	adc.w	r9, r9, r6
 800740a:	f04f 0100 	mov.w	r1, #0
 800740e:	f04f 0200 	mov.w	r2, #0
 8007412:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007416:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800741a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800741e:	4688      	mov	r8, r1
 8007420:	4691      	mov	r9, r2
 8007422:	eb18 0005 	adds.w	r0, r8, r5
 8007426:	eb49 0106 	adc.w	r1, r9, r6
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	461d      	mov	r5, r3
 8007430:	f04f 0600 	mov.w	r6, #0
 8007434:	196b      	adds	r3, r5, r5
 8007436:	eb46 0406 	adc.w	r4, r6, r6
 800743a:	461a      	mov	r2, r3
 800743c:	4623      	mov	r3, r4
 800743e:	f7f9 f943 	bl	80006c8 <__aeabi_uldivmod>
 8007442:	4603      	mov	r3, r0
 8007444:	460c      	mov	r4, r1
 8007446:	461a      	mov	r2, r3
 8007448:	4ba5      	ldr	r3, [pc, #660]	; (80076e0 <UART_SetConfig+0x384>)
 800744a:	fba3 2302 	umull	r2, r3, r3, r2
 800744e:	095b      	lsrs	r3, r3, #5
 8007450:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	461d      	mov	r5, r3
 8007458:	f04f 0600 	mov.w	r6, #0
 800745c:	46a9      	mov	r9, r5
 800745e:	46b2      	mov	sl, r6
 8007460:	eb19 0309 	adds.w	r3, r9, r9
 8007464:	eb4a 040a 	adc.w	r4, sl, sl
 8007468:	4699      	mov	r9, r3
 800746a:	46a2      	mov	sl, r4
 800746c:	eb19 0905 	adds.w	r9, r9, r5
 8007470:	eb4a 0a06 	adc.w	sl, sl, r6
 8007474:	f04f 0100 	mov.w	r1, #0
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007480:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007484:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007488:	4689      	mov	r9, r1
 800748a:	4692      	mov	sl, r2
 800748c:	eb19 0005 	adds.w	r0, r9, r5
 8007490:	eb4a 0106 	adc.w	r1, sl, r6
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	461d      	mov	r5, r3
 800749a:	f04f 0600 	mov.w	r6, #0
 800749e:	196b      	adds	r3, r5, r5
 80074a0:	eb46 0406 	adc.w	r4, r6, r6
 80074a4:	461a      	mov	r2, r3
 80074a6:	4623      	mov	r3, r4
 80074a8:	f7f9 f90e 	bl	80006c8 <__aeabi_uldivmod>
 80074ac:	4603      	mov	r3, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	461a      	mov	r2, r3
 80074b2:	4b8b      	ldr	r3, [pc, #556]	; (80076e0 <UART_SetConfig+0x384>)
 80074b4:	fba3 1302 	umull	r1, r3, r3, r2
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	2164      	movs	r1, #100	; 0x64
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	3332      	adds	r3, #50	; 0x32
 80074c6:	4a86      	ldr	r2, [pc, #536]	; (80076e0 <UART_SetConfig+0x384>)
 80074c8:	fba2 2303 	umull	r2, r3, r2, r3
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074d4:	4498      	add	r8, r3
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	461d      	mov	r5, r3
 80074da:	f04f 0600 	mov.w	r6, #0
 80074de:	46a9      	mov	r9, r5
 80074e0:	46b2      	mov	sl, r6
 80074e2:	eb19 0309 	adds.w	r3, r9, r9
 80074e6:	eb4a 040a 	adc.w	r4, sl, sl
 80074ea:	4699      	mov	r9, r3
 80074ec:	46a2      	mov	sl, r4
 80074ee:	eb19 0905 	adds.w	r9, r9, r5
 80074f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80074f6:	f04f 0100 	mov.w	r1, #0
 80074fa:	f04f 0200 	mov.w	r2, #0
 80074fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007502:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007506:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800750a:	4689      	mov	r9, r1
 800750c:	4692      	mov	sl, r2
 800750e:	eb19 0005 	adds.w	r0, r9, r5
 8007512:	eb4a 0106 	adc.w	r1, sl, r6
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	461d      	mov	r5, r3
 800751c:	f04f 0600 	mov.w	r6, #0
 8007520:	196b      	adds	r3, r5, r5
 8007522:	eb46 0406 	adc.w	r4, r6, r6
 8007526:	461a      	mov	r2, r3
 8007528:	4623      	mov	r3, r4
 800752a:	f7f9 f8cd 	bl	80006c8 <__aeabi_uldivmod>
 800752e:	4603      	mov	r3, r0
 8007530:	460c      	mov	r4, r1
 8007532:	461a      	mov	r2, r3
 8007534:	4b6a      	ldr	r3, [pc, #424]	; (80076e0 <UART_SetConfig+0x384>)
 8007536:	fba3 1302 	umull	r1, r3, r3, r2
 800753a:	095b      	lsrs	r3, r3, #5
 800753c:	2164      	movs	r1, #100	; 0x64
 800753e:	fb01 f303 	mul.w	r3, r1, r3
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	3332      	adds	r3, #50	; 0x32
 8007548:	4a65      	ldr	r2, [pc, #404]	; (80076e0 <UART_SetConfig+0x384>)
 800754a:	fba2 2303 	umull	r2, r3, r2, r3
 800754e:	095b      	lsrs	r3, r3, #5
 8007550:	f003 0207 	and.w	r2, r3, #7
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4442      	add	r2, r8
 800755a:	609a      	str	r2, [r3, #8]
 800755c:	e26f      	b.n	8007a3e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800755e:	f7fd f86f 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8007562:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	461d      	mov	r5, r3
 8007568:	f04f 0600 	mov.w	r6, #0
 800756c:	46a8      	mov	r8, r5
 800756e:	46b1      	mov	r9, r6
 8007570:	eb18 0308 	adds.w	r3, r8, r8
 8007574:	eb49 0409 	adc.w	r4, r9, r9
 8007578:	4698      	mov	r8, r3
 800757a:	46a1      	mov	r9, r4
 800757c:	eb18 0805 	adds.w	r8, r8, r5
 8007580:	eb49 0906 	adc.w	r9, r9, r6
 8007584:	f04f 0100 	mov.w	r1, #0
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007590:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007594:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007598:	4688      	mov	r8, r1
 800759a:	4691      	mov	r9, r2
 800759c:	eb18 0005 	adds.w	r0, r8, r5
 80075a0:	eb49 0106 	adc.w	r1, r9, r6
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	461d      	mov	r5, r3
 80075aa:	f04f 0600 	mov.w	r6, #0
 80075ae:	196b      	adds	r3, r5, r5
 80075b0:	eb46 0406 	adc.w	r4, r6, r6
 80075b4:	461a      	mov	r2, r3
 80075b6:	4623      	mov	r3, r4
 80075b8:	f7f9 f886 	bl	80006c8 <__aeabi_uldivmod>
 80075bc:	4603      	mov	r3, r0
 80075be:	460c      	mov	r4, r1
 80075c0:	461a      	mov	r2, r3
 80075c2:	4b47      	ldr	r3, [pc, #284]	; (80076e0 <UART_SetConfig+0x384>)
 80075c4:	fba3 2302 	umull	r2, r3, r3, r2
 80075c8:	095b      	lsrs	r3, r3, #5
 80075ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	461d      	mov	r5, r3
 80075d2:	f04f 0600 	mov.w	r6, #0
 80075d6:	46a9      	mov	r9, r5
 80075d8:	46b2      	mov	sl, r6
 80075da:	eb19 0309 	adds.w	r3, r9, r9
 80075de:	eb4a 040a 	adc.w	r4, sl, sl
 80075e2:	4699      	mov	r9, r3
 80075e4:	46a2      	mov	sl, r4
 80075e6:	eb19 0905 	adds.w	r9, r9, r5
 80075ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80075ee:	f04f 0100 	mov.w	r1, #0
 80075f2:	f04f 0200 	mov.w	r2, #0
 80075f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007602:	4689      	mov	r9, r1
 8007604:	4692      	mov	sl, r2
 8007606:	eb19 0005 	adds.w	r0, r9, r5
 800760a:	eb4a 0106 	adc.w	r1, sl, r6
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	461d      	mov	r5, r3
 8007614:	f04f 0600 	mov.w	r6, #0
 8007618:	196b      	adds	r3, r5, r5
 800761a:	eb46 0406 	adc.w	r4, r6, r6
 800761e:	461a      	mov	r2, r3
 8007620:	4623      	mov	r3, r4
 8007622:	f7f9 f851 	bl	80006c8 <__aeabi_uldivmod>
 8007626:	4603      	mov	r3, r0
 8007628:	460c      	mov	r4, r1
 800762a:	461a      	mov	r2, r3
 800762c:	4b2c      	ldr	r3, [pc, #176]	; (80076e0 <UART_SetConfig+0x384>)
 800762e:	fba3 1302 	umull	r1, r3, r3, r2
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	2164      	movs	r1, #100	; 0x64
 8007636:	fb01 f303 	mul.w	r3, r1, r3
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	00db      	lsls	r3, r3, #3
 800763e:	3332      	adds	r3, #50	; 0x32
 8007640:	4a27      	ldr	r2, [pc, #156]	; (80076e0 <UART_SetConfig+0x384>)
 8007642:	fba2 2303 	umull	r2, r3, r2, r3
 8007646:	095b      	lsrs	r3, r3, #5
 8007648:	005b      	lsls	r3, r3, #1
 800764a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800764e:	4498      	add	r8, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	461d      	mov	r5, r3
 8007654:	f04f 0600 	mov.w	r6, #0
 8007658:	46a9      	mov	r9, r5
 800765a:	46b2      	mov	sl, r6
 800765c:	eb19 0309 	adds.w	r3, r9, r9
 8007660:	eb4a 040a 	adc.w	r4, sl, sl
 8007664:	4699      	mov	r9, r3
 8007666:	46a2      	mov	sl, r4
 8007668:	eb19 0905 	adds.w	r9, r9, r5
 800766c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007670:	f04f 0100 	mov.w	r1, #0
 8007674:	f04f 0200 	mov.w	r2, #0
 8007678:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800767c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007680:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007684:	4689      	mov	r9, r1
 8007686:	4692      	mov	sl, r2
 8007688:	eb19 0005 	adds.w	r0, r9, r5
 800768c:	eb4a 0106 	adc.w	r1, sl, r6
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	461d      	mov	r5, r3
 8007696:	f04f 0600 	mov.w	r6, #0
 800769a:	196b      	adds	r3, r5, r5
 800769c:	eb46 0406 	adc.w	r4, r6, r6
 80076a0:	461a      	mov	r2, r3
 80076a2:	4623      	mov	r3, r4
 80076a4:	f7f9 f810 	bl	80006c8 <__aeabi_uldivmod>
 80076a8:	4603      	mov	r3, r0
 80076aa:	460c      	mov	r4, r1
 80076ac:	461a      	mov	r2, r3
 80076ae:	4b0c      	ldr	r3, [pc, #48]	; (80076e0 <UART_SetConfig+0x384>)
 80076b0:	fba3 1302 	umull	r1, r3, r3, r2
 80076b4:	095b      	lsrs	r3, r3, #5
 80076b6:	2164      	movs	r1, #100	; 0x64
 80076b8:	fb01 f303 	mul.w	r3, r1, r3
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	3332      	adds	r3, #50	; 0x32
 80076c2:	4a07      	ldr	r2, [pc, #28]	; (80076e0 <UART_SetConfig+0x384>)
 80076c4:	fba2 2303 	umull	r2, r3, r2, r3
 80076c8:	095b      	lsrs	r3, r3, #5
 80076ca:	f003 0207 	and.w	r2, r3, #7
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4442      	add	r2, r8
 80076d4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80076d6:	e1b2      	b.n	8007a3e <UART_SetConfig+0x6e2>
 80076d8:	40011000 	.word	0x40011000
 80076dc:	40011400 	.word	0x40011400
 80076e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4ad7      	ldr	r2, [pc, #860]	; (8007a48 <UART_SetConfig+0x6ec>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d005      	beq.n	80076fa <UART_SetConfig+0x39e>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4ad6      	ldr	r2, [pc, #856]	; (8007a4c <UART_SetConfig+0x6f0>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	f040 80d1 	bne.w	800789c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80076fa:	f7fc ffb5 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 80076fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	469a      	mov	sl, r3
 8007704:	f04f 0b00 	mov.w	fp, #0
 8007708:	46d0      	mov	r8, sl
 800770a:	46d9      	mov	r9, fp
 800770c:	eb18 0308 	adds.w	r3, r8, r8
 8007710:	eb49 0409 	adc.w	r4, r9, r9
 8007714:	4698      	mov	r8, r3
 8007716:	46a1      	mov	r9, r4
 8007718:	eb18 080a 	adds.w	r8, r8, sl
 800771c:	eb49 090b 	adc.w	r9, r9, fp
 8007720:	f04f 0100 	mov.w	r1, #0
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800772c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007730:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007734:	4688      	mov	r8, r1
 8007736:	4691      	mov	r9, r2
 8007738:	eb1a 0508 	adds.w	r5, sl, r8
 800773c:	eb4b 0609 	adc.w	r6, fp, r9
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	4619      	mov	r1, r3
 8007746:	f04f 0200 	mov.w	r2, #0
 800774a:	f04f 0300 	mov.w	r3, #0
 800774e:	f04f 0400 	mov.w	r4, #0
 8007752:	0094      	lsls	r4, r2, #2
 8007754:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007758:	008b      	lsls	r3, r1, #2
 800775a:	461a      	mov	r2, r3
 800775c:	4623      	mov	r3, r4
 800775e:	4628      	mov	r0, r5
 8007760:	4631      	mov	r1, r6
 8007762:	f7f8 ffb1 	bl	80006c8 <__aeabi_uldivmod>
 8007766:	4603      	mov	r3, r0
 8007768:	460c      	mov	r4, r1
 800776a:	461a      	mov	r2, r3
 800776c:	4bb8      	ldr	r3, [pc, #736]	; (8007a50 <UART_SetConfig+0x6f4>)
 800776e:	fba3 2302 	umull	r2, r3, r3, r2
 8007772:	095b      	lsrs	r3, r3, #5
 8007774:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	469b      	mov	fp, r3
 800777c:	f04f 0c00 	mov.w	ip, #0
 8007780:	46d9      	mov	r9, fp
 8007782:	46e2      	mov	sl, ip
 8007784:	eb19 0309 	adds.w	r3, r9, r9
 8007788:	eb4a 040a 	adc.w	r4, sl, sl
 800778c:	4699      	mov	r9, r3
 800778e:	46a2      	mov	sl, r4
 8007790:	eb19 090b 	adds.w	r9, r9, fp
 8007794:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007798:	f04f 0100 	mov.w	r1, #0
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077ac:	4689      	mov	r9, r1
 80077ae:	4692      	mov	sl, r2
 80077b0:	eb1b 0509 	adds.w	r5, fp, r9
 80077b4:	eb4c 060a 	adc.w	r6, ip, sl
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	4619      	mov	r1, r3
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	f04f 0400 	mov.w	r4, #0
 80077ca:	0094      	lsls	r4, r2, #2
 80077cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077d0:	008b      	lsls	r3, r1, #2
 80077d2:	461a      	mov	r2, r3
 80077d4:	4623      	mov	r3, r4
 80077d6:	4628      	mov	r0, r5
 80077d8:	4631      	mov	r1, r6
 80077da:	f7f8 ff75 	bl	80006c8 <__aeabi_uldivmod>
 80077de:	4603      	mov	r3, r0
 80077e0:	460c      	mov	r4, r1
 80077e2:	461a      	mov	r2, r3
 80077e4:	4b9a      	ldr	r3, [pc, #616]	; (8007a50 <UART_SetConfig+0x6f4>)
 80077e6:	fba3 1302 	umull	r1, r3, r3, r2
 80077ea:	095b      	lsrs	r3, r3, #5
 80077ec:	2164      	movs	r1, #100	; 0x64
 80077ee:	fb01 f303 	mul.w	r3, r1, r3
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	3332      	adds	r3, #50	; 0x32
 80077f8:	4a95      	ldr	r2, [pc, #596]	; (8007a50 <UART_SetConfig+0x6f4>)
 80077fa:	fba2 2303 	umull	r2, r3, r2, r3
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007804:	4498      	add	r8, r3
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	469b      	mov	fp, r3
 800780a:	f04f 0c00 	mov.w	ip, #0
 800780e:	46d9      	mov	r9, fp
 8007810:	46e2      	mov	sl, ip
 8007812:	eb19 0309 	adds.w	r3, r9, r9
 8007816:	eb4a 040a 	adc.w	r4, sl, sl
 800781a:	4699      	mov	r9, r3
 800781c:	46a2      	mov	sl, r4
 800781e:	eb19 090b 	adds.w	r9, r9, fp
 8007822:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007826:	f04f 0100 	mov.w	r1, #0
 800782a:	f04f 0200 	mov.w	r2, #0
 800782e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007832:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007836:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800783a:	4689      	mov	r9, r1
 800783c:	4692      	mov	sl, r2
 800783e:	eb1b 0509 	adds.w	r5, fp, r9
 8007842:	eb4c 060a 	adc.w	r6, ip, sl
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	4619      	mov	r1, r3
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	f04f 0300 	mov.w	r3, #0
 8007854:	f04f 0400 	mov.w	r4, #0
 8007858:	0094      	lsls	r4, r2, #2
 800785a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800785e:	008b      	lsls	r3, r1, #2
 8007860:	461a      	mov	r2, r3
 8007862:	4623      	mov	r3, r4
 8007864:	4628      	mov	r0, r5
 8007866:	4631      	mov	r1, r6
 8007868:	f7f8 ff2e 	bl	80006c8 <__aeabi_uldivmod>
 800786c:	4603      	mov	r3, r0
 800786e:	460c      	mov	r4, r1
 8007870:	461a      	mov	r2, r3
 8007872:	4b77      	ldr	r3, [pc, #476]	; (8007a50 <UART_SetConfig+0x6f4>)
 8007874:	fba3 1302 	umull	r1, r3, r3, r2
 8007878:	095b      	lsrs	r3, r3, #5
 800787a:	2164      	movs	r1, #100	; 0x64
 800787c:	fb01 f303 	mul.w	r3, r1, r3
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	3332      	adds	r3, #50	; 0x32
 8007886:	4a72      	ldr	r2, [pc, #456]	; (8007a50 <UART_SetConfig+0x6f4>)
 8007888:	fba2 2303 	umull	r2, r3, r2, r3
 800788c:	095b      	lsrs	r3, r3, #5
 800788e:	f003 020f 	and.w	r2, r3, #15
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4442      	add	r2, r8
 8007898:	609a      	str	r2, [r3, #8]
 800789a:	e0d0      	b.n	8007a3e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800789c:	f7fc fed0 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 80078a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	469a      	mov	sl, r3
 80078a6:	f04f 0b00 	mov.w	fp, #0
 80078aa:	46d0      	mov	r8, sl
 80078ac:	46d9      	mov	r9, fp
 80078ae:	eb18 0308 	adds.w	r3, r8, r8
 80078b2:	eb49 0409 	adc.w	r4, r9, r9
 80078b6:	4698      	mov	r8, r3
 80078b8:	46a1      	mov	r9, r4
 80078ba:	eb18 080a 	adds.w	r8, r8, sl
 80078be:	eb49 090b 	adc.w	r9, r9, fp
 80078c2:	f04f 0100 	mov.w	r1, #0
 80078c6:	f04f 0200 	mov.w	r2, #0
 80078ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80078ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80078d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80078d6:	4688      	mov	r8, r1
 80078d8:	4691      	mov	r9, r2
 80078da:	eb1a 0508 	adds.w	r5, sl, r8
 80078de:	eb4b 0609 	adc.w	r6, fp, r9
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	4619      	mov	r1, r3
 80078e8:	f04f 0200 	mov.w	r2, #0
 80078ec:	f04f 0300 	mov.w	r3, #0
 80078f0:	f04f 0400 	mov.w	r4, #0
 80078f4:	0094      	lsls	r4, r2, #2
 80078f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078fa:	008b      	lsls	r3, r1, #2
 80078fc:	461a      	mov	r2, r3
 80078fe:	4623      	mov	r3, r4
 8007900:	4628      	mov	r0, r5
 8007902:	4631      	mov	r1, r6
 8007904:	f7f8 fee0 	bl	80006c8 <__aeabi_uldivmod>
 8007908:	4603      	mov	r3, r0
 800790a:	460c      	mov	r4, r1
 800790c:	461a      	mov	r2, r3
 800790e:	4b50      	ldr	r3, [pc, #320]	; (8007a50 <UART_SetConfig+0x6f4>)
 8007910:	fba3 2302 	umull	r2, r3, r3, r2
 8007914:	095b      	lsrs	r3, r3, #5
 8007916:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	469b      	mov	fp, r3
 800791e:	f04f 0c00 	mov.w	ip, #0
 8007922:	46d9      	mov	r9, fp
 8007924:	46e2      	mov	sl, ip
 8007926:	eb19 0309 	adds.w	r3, r9, r9
 800792a:	eb4a 040a 	adc.w	r4, sl, sl
 800792e:	4699      	mov	r9, r3
 8007930:	46a2      	mov	sl, r4
 8007932:	eb19 090b 	adds.w	r9, r9, fp
 8007936:	eb4a 0a0c 	adc.w	sl, sl, ip
 800793a:	f04f 0100 	mov.w	r1, #0
 800793e:	f04f 0200 	mov.w	r2, #0
 8007942:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007946:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800794a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800794e:	4689      	mov	r9, r1
 8007950:	4692      	mov	sl, r2
 8007952:	eb1b 0509 	adds.w	r5, fp, r9
 8007956:	eb4c 060a 	adc.w	r6, ip, sl
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	4619      	mov	r1, r3
 8007960:	f04f 0200 	mov.w	r2, #0
 8007964:	f04f 0300 	mov.w	r3, #0
 8007968:	f04f 0400 	mov.w	r4, #0
 800796c:	0094      	lsls	r4, r2, #2
 800796e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007972:	008b      	lsls	r3, r1, #2
 8007974:	461a      	mov	r2, r3
 8007976:	4623      	mov	r3, r4
 8007978:	4628      	mov	r0, r5
 800797a:	4631      	mov	r1, r6
 800797c:	f7f8 fea4 	bl	80006c8 <__aeabi_uldivmod>
 8007980:	4603      	mov	r3, r0
 8007982:	460c      	mov	r4, r1
 8007984:	461a      	mov	r2, r3
 8007986:	4b32      	ldr	r3, [pc, #200]	; (8007a50 <UART_SetConfig+0x6f4>)
 8007988:	fba3 1302 	umull	r1, r3, r3, r2
 800798c:	095b      	lsrs	r3, r3, #5
 800798e:	2164      	movs	r1, #100	; 0x64
 8007990:	fb01 f303 	mul.w	r3, r1, r3
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	011b      	lsls	r3, r3, #4
 8007998:	3332      	adds	r3, #50	; 0x32
 800799a:	4a2d      	ldr	r2, [pc, #180]	; (8007a50 <UART_SetConfig+0x6f4>)
 800799c:	fba2 2303 	umull	r2, r3, r2, r3
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079a6:	4498      	add	r8, r3
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	469b      	mov	fp, r3
 80079ac:	f04f 0c00 	mov.w	ip, #0
 80079b0:	46d9      	mov	r9, fp
 80079b2:	46e2      	mov	sl, ip
 80079b4:	eb19 0309 	adds.w	r3, r9, r9
 80079b8:	eb4a 040a 	adc.w	r4, sl, sl
 80079bc:	4699      	mov	r9, r3
 80079be:	46a2      	mov	sl, r4
 80079c0:	eb19 090b 	adds.w	r9, r9, fp
 80079c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079c8:	f04f 0100 	mov.w	r1, #0
 80079cc:	f04f 0200 	mov.w	r2, #0
 80079d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079dc:	4689      	mov	r9, r1
 80079de:	4692      	mov	sl, r2
 80079e0:	eb1b 0509 	adds.w	r5, fp, r9
 80079e4:	eb4c 060a 	adc.w	r6, ip, sl
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	4619      	mov	r1, r3
 80079ee:	f04f 0200 	mov.w	r2, #0
 80079f2:	f04f 0300 	mov.w	r3, #0
 80079f6:	f04f 0400 	mov.w	r4, #0
 80079fa:	0094      	lsls	r4, r2, #2
 80079fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a00:	008b      	lsls	r3, r1, #2
 8007a02:	461a      	mov	r2, r3
 8007a04:	4623      	mov	r3, r4
 8007a06:	4628      	mov	r0, r5
 8007a08:	4631      	mov	r1, r6
 8007a0a:	f7f8 fe5d 	bl	80006c8 <__aeabi_uldivmod>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	460c      	mov	r4, r1
 8007a12:	461a      	mov	r2, r3
 8007a14:	4b0e      	ldr	r3, [pc, #56]	; (8007a50 <UART_SetConfig+0x6f4>)
 8007a16:	fba3 1302 	umull	r1, r3, r3, r2
 8007a1a:	095b      	lsrs	r3, r3, #5
 8007a1c:	2164      	movs	r1, #100	; 0x64
 8007a1e:	fb01 f303 	mul.w	r3, r1, r3
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	3332      	adds	r3, #50	; 0x32
 8007a28:	4a09      	ldr	r2, [pc, #36]	; (8007a50 <UART_SetConfig+0x6f4>)
 8007a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2e:	095b      	lsrs	r3, r3, #5
 8007a30:	f003 020f 	and.w	r2, r3, #15
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4442      	add	r2, r8
 8007a3a:	609a      	str	r2, [r3, #8]
}
 8007a3c:	e7ff      	b.n	8007a3e <UART_SetConfig+0x6e2>
 8007a3e:	bf00      	nop
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a48:	40011000 	.word	0x40011000
 8007a4c:	40011400 	.word	0x40011400
 8007a50:	51eb851f 	.word	0x51eb851f

08007a54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a54:	b084      	sub	sp, #16
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	f107 001c 	add.w	r0, r7, #28
 8007a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d122      	bne.n	8007ab2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d105      	bne.n	8007aa6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 faae 	bl	8009008 <USB_CoreReset>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73fb      	strb	r3, [r7, #15]
 8007ab0:	e01a      	b.n	8007ae8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f001 faa2 	bl	8009008 <USB_CoreReset>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d106      	bne.n	8007adc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38
 8007ada:	e005      	b.n	8007ae8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d10b      	bne.n	8007b06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f043 0206 	orr.w	r2, r3, #6
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f043 0220 	orr.w	r2, r3, #32
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b12:	b004      	add	sp, #16
 8007b14:	4770      	bx	lr
	...

08007b18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	4613      	mov	r3, r2
 8007b24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d165      	bne.n	8007bf8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	4a41      	ldr	r2, [pc, #260]	; (8007c34 <USB_SetTurnaroundTime+0x11c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d906      	bls.n	8007b42 <USB_SetTurnaroundTime+0x2a>
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4a40      	ldr	r2, [pc, #256]	; (8007c38 <USB_SetTurnaroundTime+0x120>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d802      	bhi.n	8007b42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007b3c:	230f      	movs	r3, #15
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	e062      	b.n	8007c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	4a3c      	ldr	r2, [pc, #240]	; (8007c38 <USB_SetTurnaroundTime+0x120>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d906      	bls.n	8007b58 <USB_SetTurnaroundTime+0x40>
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	4a3b      	ldr	r2, [pc, #236]	; (8007c3c <USB_SetTurnaroundTime+0x124>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d802      	bhi.n	8007b58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007b52:	230e      	movs	r3, #14
 8007b54:	617b      	str	r3, [r7, #20]
 8007b56:	e057      	b.n	8007c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4a38      	ldr	r2, [pc, #224]	; (8007c3c <USB_SetTurnaroundTime+0x124>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d906      	bls.n	8007b6e <USB_SetTurnaroundTime+0x56>
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	4a37      	ldr	r2, [pc, #220]	; (8007c40 <USB_SetTurnaroundTime+0x128>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d802      	bhi.n	8007b6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007b68:	230d      	movs	r3, #13
 8007b6a:	617b      	str	r3, [r7, #20]
 8007b6c:	e04c      	b.n	8007c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	4a33      	ldr	r2, [pc, #204]	; (8007c40 <USB_SetTurnaroundTime+0x128>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d906      	bls.n	8007b84 <USB_SetTurnaroundTime+0x6c>
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	4a32      	ldr	r2, [pc, #200]	; (8007c44 <USB_SetTurnaroundTime+0x12c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d802      	bhi.n	8007b84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007b7e:	230c      	movs	r3, #12
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	e041      	b.n	8007c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	4a2f      	ldr	r2, [pc, #188]	; (8007c44 <USB_SetTurnaroundTime+0x12c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d906      	bls.n	8007b9a <USB_SetTurnaroundTime+0x82>
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	4a2e      	ldr	r2, [pc, #184]	; (8007c48 <USB_SetTurnaroundTime+0x130>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d802      	bhi.n	8007b9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007b94:	230b      	movs	r3, #11
 8007b96:	617b      	str	r3, [r7, #20]
 8007b98:	e036      	b.n	8007c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	4a2a      	ldr	r2, [pc, #168]	; (8007c48 <USB_SetTurnaroundTime+0x130>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d906      	bls.n	8007bb0 <USB_SetTurnaroundTime+0x98>
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	4a29      	ldr	r2, [pc, #164]	; (8007c4c <USB_SetTurnaroundTime+0x134>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d802      	bhi.n	8007bb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007baa:	230a      	movs	r3, #10
 8007bac:	617b      	str	r3, [r7, #20]
 8007bae:	e02b      	b.n	8007c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	4a26      	ldr	r2, [pc, #152]	; (8007c4c <USB_SetTurnaroundTime+0x134>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d906      	bls.n	8007bc6 <USB_SetTurnaroundTime+0xae>
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	4a25      	ldr	r2, [pc, #148]	; (8007c50 <USB_SetTurnaroundTime+0x138>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d802      	bhi.n	8007bc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007bc0:	2309      	movs	r3, #9
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	e020      	b.n	8007c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	4a21      	ldr	r2, [pc, #132]	; (8007c50 <USB_SetTurnaroundTime+0x138>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d906      	bls.n	8007bdc <USB_SetTurnaroundTime+0xc4>
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	4a20      	ldr	r2, [pc, #128]	; (8007c54 <USB_SetTurnaroundTime+0x13c>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d802      	bhi.n	8007bdc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007bd6:	2308      	movs	r3, #8
 8007bd8:	617b      	str	r3, [r7, #20]
 8007bda:	e015      	b.n	8007c08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4a1d      	ldr	r2, [pc, #116]	; (8007c54 <USB_SetTurnaroundTime+0x13c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d906      	bls.n	8007bf2 <USB_SetTurnaroundTime+0xda>
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	4a1c      	ldr	r2, [pc, #112]	; (8007c58 <USB_SetTurnaroundTime+0x140>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d802      	bhi.n	8007bf2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007bec:	2307      	movs	r3, #7
 8007bee:	617b      	str	r3, [r7, #20]
 8007bf0:	e00a      	b.n	8007c08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007bf2:	2306      	movs	r3, #6
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	e007      	b.n	8007c08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d102      	bne.n	8007c04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007bfe:	2309      	movs	r3, #9
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	e001      	b.n	8007c08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007c04:	2309      	movs	r3, #9
 8007c06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	68da      	ldr	r2, [r3, #12]
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	029b      	lsls	r3, r3, #10
 8007c1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007c20:	431a      	orrs	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	371c      	adds	r7, #28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	00d8acbf 	.word	0x00d8acbf
 8007c38:	00e4e1bf 	.word	0x00e4e1bf
 8007c3c:	00f423ff 	.word	0x00f423ff
 8007c40:	0106737f 	.word	0x0106737f
 8007c44:	011a499f 	.word	0x011a499f
 8007c48:	01312cff 	.word	0x01312cff
 8007c4c:	014ca43f 	.word	0x014ca43f
 8007c50:	016e35ff 	.word	0x016e35ff
 8007c54:	01a6ab1f 	.word	0x01a6ab1f
 8007c58:	01e847ff 	.word	0x01e847ff

08007c5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f043 0201 	orr.w	r2, r3, #1
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b083      	sub	sp, #12
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f023 0201 	bic.w	r2, r3, #1
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cb8:	78fb      	ldrb	r3, [r7, #3]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d106      	bne.n	8007ccc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	60da      	str	r2, [r3, #12]
 8007cca:	e00b      	b.n	8007ce4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ccc:	78fb      	ldrb	r3, [r7, #3]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d106      	bne.n	8007ce0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	60da      	str	r2, [r3, #12]
 8007cde:	e001      	b.n	8007ce4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e003      	b.n	8007cec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007ce4:	2032      	movs	r0, #50	; 0x32
 8007ce6:	f7fa f829 	bl	8001d3c <HAL_Delay>

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b086      	sub	sp, #24
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d0e:	2300      	movs	r3, #0
 8007d10:	613b      	str	r3, [r7, #16]
 8007d12:	e009      	b.n	8007d28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	3340      	adds	r3, #64	; 0x40
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	2200      	movs	r2, #0
 8007d20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	3301      	adds	r3, #1
 8007d26:	613b      	str	r3, [r7, #16]
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	2b0e      	cmp	r3, #14
 8007d2c:	d9f2      	bls.n	8007d14 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d11c      	bne.n	8007d6e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d42:	f043 0302 	orr.w	r3, r3, #2
 8007d46:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	e005      	b.n	8007d7a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d80:	461a      	mov	r2, r3
 8007d82:	2300      	movs	r3, #0
 8007d84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d94:	461a      	mov	r2, r3
 8007d96:	680b      	ldr	r3, [r1, #0]
 8007d98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d10c      	bne.n	8007dba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d104      	bne.n	8007db0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007da6:	2100      	movs	r1, #0
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f949 	bl	8008040 <USB_SetDevSpeed>
 8007dae:	e008      	b.n	8007dc2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007db0:	2101      	movs	r1, #1
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f944 	bl	8008040 <USB_SetDevSpeed>
 8007db8:	e003      	b.n	8007dc2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007dba:	2103      	movs	r1, #3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f93f 	bl	8008040 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007dc2:	2110      	movs	r1, #16
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f8f3 	bl	8007fb0 <USB_FlushTxFifo>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f911 	bl	8007ffc <USB_FlushRxFifo>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dea:	461a      	mov	r2, r3
 8007dec:	2300      	movs	r3, #0
 8007dee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df6:	461a      	mov	r2, r3
 8007df8:	2300      	movs	r3, #0
 8007dfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e02:	461a      	mov	r2, r3
 8007e04:	2300      	movs	r3, #0
 8007e06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e08:	2300      	movs	r3, #0
 8007e0a:	613b      	str	r3, [r7, #16]
 8007e0c:	e043      	b.n	8007e96 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e24:	d118      	bne.n	8007e58 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e38:	461a      	mov	r2, r3
 8007e3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e3e:	6013      	str	r3, [r2, #0]
 8007e40:	e013      	b.n	8007e6a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e54:	6013      	str	r3, [r2, #0]
 8007e56:	e008      	b.n	8007e6a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	015a      	lsls	r2, r3, #5
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e64:	461a      	mov	r2, r3
 8007e66:	2300      	movs	r3, #0
 8007e68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e76:	461a      	mov	r2, r3
 8007e78:	2300      	movs	r3, #0
 8007e7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e88:	461a      	mov	r2, r3
 8007e8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	3301      	adds	r3, #1
 8007e94:	613b      	str	r3, [r7, #16]
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d3b7      	bcc.n	8007e0e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	613b      	str	r3, [r7, #16]
 8007ea2:	e043      	b.n	8007f2c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eba:	d118      	bne.n	8007eee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10a      	bne.n	8007ed8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ed4:	6013      	str	r3, [r2, #0]
 8007ed6:	e013      	b.n	8007f00 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	e008      	b.n	8007f00 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	015a      	lsls	r2, r3, #5
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efa:	461a      	mov	r2, r3
 8007efc:	2300      	movs	r3, #0
 8007efe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	2300      	movs	r3, #0
 8007f10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	613b      	str	r3, [r7, #16]
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d3b7      	bcc.n	8007ea4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d105      	bne.n	8007f68 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	f043 0210 	orr.w	r2, r3, #16
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	699a      	ldr	r2, [r3, #24]
 8007f6c:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <USB_DevInit+0x2b8>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d005      	beq.n	8007f86 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	f043 0208 	orr.w	r2, r3, #8
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d107      	bne.n	8007f9c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f94:	f043 0304 	orr.w	r3, r3, #4
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fa8:	b004      	add	sp, #16
 8007faa:	4770      	bx	lr
 8007fac:	803c3800 	.word	0x803c3800

08007fb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	019b      	lsls	r3, r3, #6
 8007fc2:	f043 0220 	orr.w	r2, r3, #32
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4a09      	ldr	r2, [pc, #36]	; (8007ff8 <USB_FlushTxFifo+0x48>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d901      	bls.n	8007fdc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e006      	b.n	8007fea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	f003 0320 	and.w	r3, r3, #32
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	d0f0      	beq.n	8007fca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	00030d40 	.word	0x00030d40

08007ffc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2210      	movs	r2, #16
 800800c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3301      	adds	r3, #1
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4a09      	ldr	r2, [pc, #36]	; (800803c <USB_FlushRxFifo+0x40>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d901      	bls.n	8008020 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e006      	b.n	800802e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	2b10      	cmp	r3, #16
 800802a:	d0f0      	beq.n	800800e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	00030d40 	.word	0x00030d40

08008040 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	460b      	mov	r3, r1
 800804a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	78fb      	ldrb	r3, [r7, #3]
 800805a:	68f9      	ldr	r1, [r7, #12]
 800805c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008060:	4313      	orrs	r3, r2
 8008062:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008072:	b480      	push	{r7}
 8008074:	b087      	sub	sp, #28
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f003 0306 	and.w	r3, r3, #6
 800808a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d102      	bne.n	8008098 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008092:	2300      	movs	r3, #0
 8008094:	75fb      	strb	r3, [r7, #23]
 8008096:	e00a      	b.n	80080ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d002      	beq.n	80080a4 <USB_GetDevSpeed+0x32>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b06      	cmp	r3, #6
 80080a2:	d102      	bne.n	80080aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80080a4:	2302      	movs	r3, #2
 80080a6:	75fb      	strb	r3, [r7, #23]
 80080a8:	e001      	b.n	80080ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80080aa:	230f      	movs	r3, #15
 80080ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	371c      	adds	r7, #28
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	785b      	ldrb	r3, [r3, #1]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d13a      	bne.n	800814e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080de:	69da      	ldr	r2, [r3, #28]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	2101      	movs	r1, #1
 80080ea:	fa01 f303 	lsl.w	r3, r1, r3
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	68f9      	ldr	r1, [r7, #12]
 80080f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080f6:	4313      	orrs	r3, r2
 80080f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d155      	bne.n	80081bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4413      	add	r3, r2
 8008118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	78db      	ldrb	r3, [r3, #3]
 800812a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800812c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	059b      	lsls	r3, r3, #22
 8008132:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008134:	4313      	orrs	r3, r2
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	0151      	lsls	r1, r2, #5
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	440a      	add	r2, r1
 800813e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	e036      	b.n	80081bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008154:	69da      	ldr	r2, [r3, #28]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	f003 030f 	and.w	r3, r3, #15
 800815e:	2101      	movs	r1, #1
 8008160:	fa01 f303 	lsl.w	r3, r1, r3
 8008164:	041b      	lsls	r3, r3, #16
 8008166:	68f9      	ldr	r1, [r7, #12]
 8008168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800816c:	4313      	orrs	r3, r2
 800816e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4413      	add	r3, r2
 8008178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d11a      	bne.n	80081bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4413      	add	r3, r2
 800818e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	78db      	ldrb	r3, [r3, #3]
 80081a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80081a2:	430b      	orrs	r3, r1
 80081a4:	4313      	orrs	r3, r2
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	0151      	lsls	r1, r2, #5
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	440a      	add	r2, r1
 80081ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
	...

080081cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	785b      	ldrb	r3, [r3, #1]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d161      	bne.n	80082ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081fe:	d11f      	bne.n	8008240 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4413      	add	r3, r2
 8008208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	0151      	lsls	r1, r2, #5
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	440a      	add	r2, r1
 8008216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800821a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800821e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4413      	add	r3, r2
 8008228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	0151      	lsls	r1, r2, #5
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	440a      	add	r2, r1
 8008236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800823a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800823e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	f003 030f 	and.w	r3, r3, #15
 8008250:	2101      	movs	r1, #1
 8008252:	fa01 f303 	lsl.w	r3, r1, r3
 8008256:	b29b      	uxth	r3, r3
 8008258:	43db      	mvns	r3, r3
 800825a:	68f9      	ldr	r1, [r7, #12]
 800825c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008260:	4013      	ands	r3, r2
 8008262:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800826a:	69da      	ldr	r2, [r3, #28]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	f003 030f 	and.w	r3, r3, #15
 8008274:	2101      	movs	r1, #1
 8008276:	fa01 f303 	lsl.w	r3, r1, r3
 800827a:	b29b      	uxth	r3, r3
 800827c:	43db      	mvns	r3, r3
 800827e:	68f9      	ldr	r1, [r7, #12]
 8008280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008284:	4013      	ands	r3, r2
 8008286:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	0159      	lsls	r1, r3, #5
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	440b      	add	r3, r1
 800829e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a2:	4619      	mov	r1, r3
 80082a4:	4b35      	ldr	r3, [pc, #212]	; (800837c <USB_DeactivateEndpoint+0x1b0>)
 80082a6:	4013      	ands	r3, r2
 80082a8:	600b      	str	r3, [r1, #0]
 80082aa:	e060      	b.n	800836e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082c2:	d11f      	bne.n	8008304 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	0151      	lsls	r1, r2, #5
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	440a      	add	r2, r1
 80082da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	0151      	lsls	r1, r2, #5
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	440a      	add	r2, r1
 80082fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008302:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800830a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	2101      	movs	r1, #1
 8008316:	fa01 f303 	lsl.w	r3, r1, r3
 800831a:	041b      	lsls	r3, r3, #16
 800831c:	43db      	mvns	r3, r3
 800831e:	68f9      	ldr	r1, [r7, #12]
 8008320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008324:	4013      	ands	r3, r2
 8008326:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832e:	69da      	ldr	r2, [r3, #28]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	f003 030f 	and.w	r3, r3, #15
 8008338:	2101      	movs	r1, #1
 800833a:	fa01 f303 	lsl.w	r3, r1, r3
 800833e:	041b      	lsls	r3, r3, #16
 8008340:	43db      	mvns	r3, r3
 8008342:	68f9      	ldr	r1, [r7, #12]
 8008344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008348:	4013      	ands	r3, r2
 800834a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	0159      	lsls	r1, r3, #5
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	440b      	add	r3, r1
 8008362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008366:	4619      	mov	r1, r3
 8008368:	4b05      	ldr	r3, [pc, #20]	; (8008380 <USB_DeactivateEndpoint+0x1b4>)
 800836a:	4013      	ands	r3, r2
 800836c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	ec337800 	.word	0xec337800
 8008380:	eff37800 	.word	0xeff37800

08008384 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08a      	sub	sp, #40	; 0x28
 8008388:	af02      	add	r7, sp, #8
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	4613      	mov	r3, r2
 8008390:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	785b      	ldrb	r3, [r3, #1]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	f040 815c 	bne.w	800865e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d132      	bne.n	8008414 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	69ba      	ldr	r2, [r7, #24]
 80083be:	0151      	lsls	r1, r2, #5
 80083c0:	69fa      	ldr	r2, [r7, #28]
 80083c2:	440a      	add	r2, r1
 80083c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	0151      	lsls	r1, r2, #5
 80083e4:	69fa      	ldr	r2, [r7, #28]
 80083e6:	440a      	add	r2, r1
 80083e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	0151      	lsls	r1, r2, #5
 8008404:	69fa      	ldr	r2, [r7, #28]
 8008406:	440a      	add	r2, r1
 8008408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800840c:	0cdb      	lsrs	r3, r3, #19
 800840e:	04db      	lsls	r3, r3, #19
 8008410:	6113      	str	r3, [r2, #16]
 8008412:	e074      	b.n	80084fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	0151      	lsls	r1, r2, #5
 8008426:	69fa      	ldr	r2, [r7, #28]
 8008428:	440a      	add	r2, r1
 800842a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800842e:	0cdb      	lsrs	r3, r3, #19
 8008430:	04db      	lsls	r3, r3, #19
 8008432:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	69ba      	ldr	r2, [r7, #24]
 8008444:	0151      	lsls	r1, r2, #5
 8008446:	69fa      	ldr	r2, [r7, #28]
 8008448:	440a      	add	r2, r1
 800844a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800844e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008452:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008456:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008464:	691a      	ldr	r2, [r3, #16]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	6959      	ldr	r1, [r3, #20]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	440b      	add	r3, r1
 8008470:	1e59      	subs	r1, r3, #1
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	fbb1 f3f3 	udiv	r3, r1, r3
 800847a:	04d9      	lsls	r1, r3, #19
 800847c:	4b9d      	ldr	r3, [pc, #628]	; (80086f4 <USB_EPStartXfer+0x370>)
 800847e:	400b      	ands	r3, r1
 8008480:	69b9      	ldr	r1, [r7, #24]
 8008482:	0148      	lsls	r0, r1, #5
 8008484:	69f9      	ldr	r1, [r7, #28]
 8008486:	4401      	add	r1, r0
 8008488:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800848c:	4313      	orrs	r3, r2
 800848e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849c:	691a      	ldr	r2, [r3, #16]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084a6:	69b9      	ldr	r1, [r7, #24]
 80084a8:	0148      	lsls	r0, r1, #5
 80084aa:	69f9      	ldr	r1, [r7, #28]
 80084ac:	4401      	add	r1, r0
 80084ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80084b2:	4313      	orrs	r3, r2
 80084b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	78db      	ldrb	r3, [r3, #3]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d11f      	bne.n	80084fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	69ba      	ldr	r2, [r7, #24]
 80084ce:	0151      	lsls	r1, r2, #5
 80084d0:	69fa      	ldr	r2, [r7, #28]
 80084d2:	440a      	add	r2, r1
 80084d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80084dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	0151      	lsls	r1, r2, #5
 80084f0:	69fa      	ldr	r2, [r7, #28]
 80084f2:	440a      	add	r2, r1
 80084f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80084fe:	79fb      	ldrb	r3, [r7, #7]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d14b      	bne.n	800859c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d009      	beq.n	8008520 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008518:	461a      	mov	r2, r3
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	78db      	ldrb	r3, [r3, #3]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d128      	bne.n	800857a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008534:	2b00      	cmp	r3, #0
 8008536:	d110      	bne.n	800855a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	4413      	add	r3, r2
 8008540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69ba      	ldr	r2, [r7, #24]
 8008548:	0151      	lsls	r1, r2, #5
 800854a:	69fa      	ldr	r2, [r7, #28]
 800854c:	440a      	add	r2, r1
 800854e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008552:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	e00f      	b.n	800857a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	0151      	lsls	r1, r2, #5
 800856c:	69fa      	ldr	r2, [r7, #28]
 800856e:	440a      	add	r2, r1
 8008570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008578:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	0151      	lsls	r1, r2, #5
 800858c:	69fa      	ldr	r2, [r7, #28]
 800858e:	440a      	add	r2, r1
 8008590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008594:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	e12f      	b.n	80087fc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	69ba      	ldr	r2, [r7, #24]
 80085ac:	0151      	lsls	r1, r2, #5
 80085ae:	69fa      	ldr	r2, [r7, #28]
 80085b0:	440a      	add	r2, r1
 80085b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	78db      	ldrb	r3, [r3, #3]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d015      	beq.n	80085f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8117 	beq.w	80087fc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	f003 030f 	and.w	r3, r3, #15
 80085de:	2101      	movs	r1, #1
 80085e0:	fa01 f303 	lsl.w	r3, r1, r3
 80085e4:	69f9      	ldr	r1, [r7, #28]
 80085e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085ea:	4313      	orrs	r3, r2
 80085ec:	634b      	str	r3, [r1, #52]	; 0x34
 80085ee:	e105      	b.n	80087fc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d110      	bne.n	8008622 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	4413      	add	r3, r2
 8008608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	0151      	lsls	r1, r2, #5
 8008612:	69fa      	ldr	r2, [r7, #28]
 8008614:	440a      	add	r2, r1
 8008616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800861a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	e00f      	b.n	8008642 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	0151      	lsls	r1, r2, #5
 8008634:	69fa      	ldr	r2, [r7, #28]
 8008636:	440a      	add	r2, r1
 8008638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800863c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008640:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	68d9      	ldr	r1, [r3, #12]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	781a      	ldrb	r2, [r3, #0]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	b298      	uxth	r0, r3
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	4603      	mov	r3, r0
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 fa2b 	bl	8008ab2 <USB_WritePacket>
 800865c:	e0ce      	b.n	80087fc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	4413      	add	r3, r2
 8008666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	0151      	lsls	r1, r2, #5
 8008670:	69fa      	ldr	r2, [r7, #28]
 8008672:	440a      	add	r2, r1
 8008674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008678:	0cdb      	lsrs	r3, r3, #19
 800867a:	04db      	lsls	r3, r3, #19
 800867c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	4413      	add	r3, r2
 8008686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	69ba      	ldr	r2, [r7, #24]
 800868e:	0151      	lsls	r1, r2, #5
 8008690:	69fa      	ldr	r2, [r7, #28]
 8008692:	440a      	add	r2, r1
 8008694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008698:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800869c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d126      	bne.n	80086f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b6:	691a      	ldr	r2, [r3, #16]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086c0:	69b9      	ldr	r1, [r7, #24]
 80086c2:	0148      	lsls	r0, r1, #5
 80086c4:	69f9      	ldr	r1, [r7, #28]
 80086c6:	4401      	add	r1, r0
 80086c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086cc:	4313      	orrs	r3, r2
 80086ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	0151      	lsls	r1, r2, #5
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	440a      	add	r2, r1
 80086e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086ee:	6113      	str	r3, [r2, #16]
 80086f0:	e036      	b.n	8008760 <USB_EPStartXfer+0x3dc>
 80086f2:	bf00      	nop
 80086f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	695a      	ldr	r2, [r3, #20]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	4413      	add	r3, r2
 8008702:	1e5a      	subs	r2, r3, #1
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	fbb2 f3f3 	udiv	r3, r2, r3
 800870c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	015a      	lsls	r2, r3, #5
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	4413      	add	r3, r2
 8008716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800871a:	691a      	ldr	r2, [r3, #16]
 800871c:	8afb      	ldrh	r3, [r7, #22]
 800871e:	04d9      	lsls	r1, r3, #19
 8008720:	4b39      	ldr	r3, [pc, #228]	; (8008808 <USB_EPStartXfer+0x484>)
 8008722:	400b      	ands	r3, r1
 8008724:	69b9      	ldr	r1, [r7, #24]
 8008726:	0148      	lsls	r0, r1, #5
 8008728:	69f9      	ldr	r1, [r7, #28]
 800872a:	4401      	add	r1, r0
 800872c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008730:	4313      	orrs	r3, r2
 8008732:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008740:	691a      	ldr	r2, [r3, #16]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	8af9      	ldrh	r1, [r7, #22]
 8008748:	fb01 f303 	mul.w	r3, r1, r3
 800874c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008750:	69b9      	ldr	r1, [r7, #24]
 8008752:	0148      	lsls	r0, r1, #5
 8008754:	69f9      	ldr	r1, [r7, #28]
 8008756:	4401      	add	r1, r0
 8008758:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800875c:	4313      	orrs	r3, r2
 800875e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008760:	79fb      	ldrb	r3, [r7, #7]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d10d      	bne.n	8008782 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d009      	beq.n	8008782 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	68d9      	ldr	r1, [r3, #12]
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800877e:	460a      	mov	r2, r1
 8008780:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	78db      	ldrb	r3, [r3, #3]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d128      	bne.n	80087dc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008796:	2b00      	cmp	r3, #0
 8008798:	d110      	bne.n	80087bc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	0151      	lsls	r1, r2, #5
 80087ac:	69fa      	ldr	r2, [r7, #28]
 80087ae:	440a      	add	r2, r1
 80087b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	e00f      	b.n	80087dc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	0151      	lsls	r1, r2, #5
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	440a      	add	r2, r1
 80087d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	0151      	lsls	r1, r2, #5
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	440a      	add	r2, r1
 80087f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3720      	adds	r7, #32
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	1ff80000 	.word	0x1ff80000

0800880c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	4613      	mov	r3, r2
 8008818:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	785b      	ldrb	r3, [r3, #1]
 8008828:	2b01      	cmp	r3, #1
 800882a:	f040 80cd 	bne.w	80089c8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d132      	bne.n	800889c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	4413      	add	r3, r2
 800883e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	0151      	lsls	r1, r2, #5
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	440a      	add	r2, r1
 800884c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008850:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008854:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008858:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	4413      	add	r3, r2
 8008862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	0151      	lsls	r1, r2, #5
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	440a      	add	r2, r1
 8008870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008878:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	015a      	lsls	r2, r3, #5
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	4413      	add	r3, r2
 8008882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	0151      	lsls	r1, r2, #5
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	440a      	add	r2, r1
 8008890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008894:	0cdb      	lsrs	r3, r3, #19
 8008896:	04db      	lsls	r3, r3, #19
 8008898:	6113      	str	r3, [r2, #16]
 800889a:	e04e      	b.n	800893a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	0151      	lsls	r1, r2, #5
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	440a      	add	r2, r1
 80088b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b6:	0cdb      	lsrs	r3, r3, #19
 80088b8:	04db      	lsls	r3, r3, #19
 80088ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	0151      	lsls	r1, r2, #5
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	440a      	add	r2, r1
 80088d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	695a      	ldr	r2, [r3, #20]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d903      	bls.n	80088f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	0151      	lsls	r1, r2, #5
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	440a      	add	r2, r1
 800890a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800890e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008912:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008920:	691a      	ldr	r2, [r3, #16]
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800892a:	6939      	ldr	r1, [r7, #16]
 800892c:	0148      	lsls	r0, r1, #5
 800892e:	6979      	ldr	r1, [r7, #20]
 8008930:	4401      	add	r1, r0
 8008932:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008936:	4313      	orrs	r3, r2
 8008938:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d11e      	bne.n	800897e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d009      	beq.n	800895c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	015a      	lsls	r2, r3, #5
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	4413      	add	r3, r2
 8008950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008954:	461a      	mov	r2, r3
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	0151      	lsls	r1, r2, #5
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	440a      	add	r2, r1
 8008972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008976:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800897a:	6013      	str	r3, [r2, #0]
 800897c:	e092      	b.n	8008aa4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	4413      	add	r3, r2
 8008986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	0151      	lsls	r1, r2, #5
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	440a      	add	r2, r1
 8008994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008998:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800899c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d07e      	beq.n	8008aa4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	f003 030f 	and.w	r3, r3, #15
 80089b6:	2101      	movs	r1, #1
 80089b8:	fa01 f303 	lsl.w	r3, r1, r3
 80089bc:	6979      	ldr	r1, [r7, #20]
 80089be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089c2:	4313      	orrs	r3, r2
 80089c4:	634b      	str	r3, [r1, #52]	; 0x34
 80089c6:	e06d      	b.n	8008aa4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	0151      	lsls	r1, r2, #5
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	440a      	add	r2, r1
 80089de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089e2:	0cdb      	lsrs	r3, r3, #19
 80089e4:	04db      	lsls	r3, r3, #19
 80089e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	0151      	lsls	r1, r2, #5
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	440a      	add	r2, r1
 80089fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a0a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d003      	beq.n	8008a1c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	0151      	lsls	r1, r2, #5
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	440a      	add	r2, r1
 8008a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a48:	691a      	ldr	r2, [r3, #16]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a52:	6939      	ldr	r1, [r7, #16]
 8008a54:	0148      	lsls	r0, r1, #5
 8008a56:	6979      	ldr	r1, [r7, #20]
 8008a58:	4401      	add	r1, r0
 8008a5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008a62:	79fb      	ldrb	r3, [r7, #7]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d10d      	bne.n	8008a84 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d009      	beq.n	8008a84 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	68d9      	ldr	r1, [r3, #12]
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a80:	460a      	mov	r2, r1
 8008a82:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	0151      	lsls	r1, r2, #5
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	440a      	add	r2, r1
 8008a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008aa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b089      	sub	sp, #36	; 0x24
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	4611      	mov	r1, r2
 8008abe:	461a      	mov	r2, r3
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	71fb      	strb	r3, [r7, #7]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008ad0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d11a      	bne.n	8008b0e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008ad8:	88bb      	ldrh	r3, [r7, #4]
 8008ada:	3303      	adds	r3, #3
 8008adc:	089b      	lsrs	r3, r3, #2
 8008ade:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	61bb      	str	r3, [r7, #24]
 8008ae4:	e00f      	b.n	8008b06 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ae6:	79fb      	ldrb	r3, [r7, #7]
 8008ae8:	031a      	lsls	r2, r3, #12
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af2:	461a      	mov	r2, r3
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	3304      	adds	r3, #4
 8008afe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	3301      	adds	r3, #1
 8008b04:	61bb      	str	r3, [r7, #24]
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d3eb      	bcc.n	8008ae6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3724      	adds	r7, #36	; 0x24
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b089      	sub	sp, #36	; 0x24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	4613      	mov	r3, r2
 8008b28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008b32:	88fb      	ldrh	r3, [r7, #6]
 8008b34:	3303      	adds	r3, #3
 8008b36:	089b      	lsrs	r3, r3, #2
 8008b38:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61bb      	str	r3, [r7, #24]
 8008b3e:	e00b      	b.n	8008b58 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	3301      	adds	r3, #1
 8008b56:	61bb      	str	r3, [r7, #24]
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d3ef      	bcc.n	8008b40 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008b60:	69fb      	ldr	r3, [r7, #28]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3724      	adds	r7, #36	; 0x24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b085      	sub	sp, #20
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	785b      	ldrb	r3, [r3, #1]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d12c      	bne.n	8008be4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	db12      	blt.n	8008bc2 <USB_EPSetStall+0x54>
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00f      	beq.n	8008bc2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	0151      	lsls	r1, r2, #5
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	440a      	add	r2, r1
 8008bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008bc0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	0151      	lsls	r1, r2, #5
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	440a      	add	r2, r1
 8008bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008be0:	6013      	str	r3, [r2, #0]
 8008be2:	e02b      	b.n	8008c3c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	db12      	blt.n	8008c1c <USB_EPSetStall+0xae>
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00f      	beq.n	8008c1c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	0151      	lsls	r1, r2, #5
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	440a      	add	r2, r1
 8008c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c1a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	0151      	lsls	r1, r2, #5
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	440a      	add	r2, r1
 8008c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b085      	sub	sp, #20
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	785b      	ldrb	r3, [r3, #1]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d128      	bne.n	8008cb8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	015a      	lsls	r2, r3, #5
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	0151      	lsls	r1, r2, #5
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	440a      	add	r2, r1
 8008c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	78db      	ldrb	r3, [r3, #3]
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d003      	beq.n	8008c96 <USB_EPClearStall+0x4c>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	78db      	ldrb	r3, [r3, #3]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d138      	bne.n	8008d08 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	015a      	lsls	r2, r3, #5
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	0151      	lsls	r1, r2, #5
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	440a      	add	r2, r1
 8008cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cb4:	6013      	str	r3, [r2, #0]
 8008cb6:	e027      	b.n	8008d08 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	015a      	lsls	r2, r3, #5
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	0151      	lsls	r1, r2, #5
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	440a      	add	r2, r1
 8008cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cd6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	78db      	ldrb	r3, [r3, #3]
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d003      	beq.n	8008ce8 <USB_EPClearStall+0x9e>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	78db      	ldrb	r3, [r3, #3]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d10f      	bne.n	8008d08 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	0151      	lsls	r1, r2, #5
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	440a      	add	r2, r1
 8008cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d06:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b085      	sub	sp, #20
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d34:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d38:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	78fb      	ldrb	r3, [r7, #3]
 8008d44:	011b      	lsls	r3, r3, #4
 8008d46:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008d4a:	68f9      	ldr	r1, [r7, #12]
 8008d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d50:	4313      	orrs	r3, r2
 8008d52:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d7c:	f023 0302 	bic.w	r3, r3, #2
 8008d80:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008d82:	2003      	movs	r0, #3
 8008d84:	f7f8 ffda 	bl	8001d3c <HAL_Delay>

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b084      	sub	sp, #16
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dac:	f043 0302 	orr.w	r3, r3, #2
 8008db0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008db2:	2003      	movs	r0, #3
 8008db4:	f7f8 ffc2 	bl	8001d3c <HAL_Delay>

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b085      	sub	sp, #20
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008dda:	68fb      	ldr	r3, [r7, #12]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	4013      	ands	r3, r2
 8008e0a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	0c1b      	lsrs	r3, r3, #16
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	b29b      	uxth	r3, r3
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e7e:	68bb      	ldr	r3, [r7, #8]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	460b      	mov	r3, r1
 8008e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	f003 030f 	and.w	r3, r3, #15
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ebc:	01db      	lsls	r3, r3, #7
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008ec6:	78fb      	ldrb	r3, [r7, #3]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008eda:	68bb      	ldr	r3, [r7, #8]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	371c      	adds	r7, #28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	695b      	ldr	r3, [r3, #20]
 8008ef4:	f003 0301 	and.w	r3, r3, #1
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f22:	f023 0307 	bic.w	r3, r3, #7
 8008f26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
	...

08008f4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b087      	sub	sp, #28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	460b      	mov	r3, r1
 8008f56:	607a      	str	r2, [r7, #4]
 8008f58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	333c      	adds	r3, #60	; 0x3c
 8008f62:	3304      	adds	r3, #4
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	4a26      	ldr	r2, [pc, #152]	; (8009004 <USB_EP0_OutStart+0xb8>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d90a      	bls.n	8008f86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f80:	d101      	bne.n	8008f86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	e037      	b.n	8008ff6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	2300      	movs	r3, #0
 8008f90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fb4:	f043 0318 	orr.w	r3, r3, #24
 8008fb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008fcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008fce:	7afb      	ldrb	r3, [r7, #11]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d10f      	bne.n	8008ff4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fda:	461a      	mov	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008ff2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	371c      	adds	r7, #28
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	4f54300a 	.word	0x4f54300a

08009008 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3301      	adds	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4a13      	ldr	r2, [pc, #76]	; (800906c <USB_CoreReset+0x64>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d901      	bls.n	8009026 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e01b      	b.n	800905e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	2b00      	cmp	r3, #0
 800902c:	daf2      	bge.n	8009014 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800902e:	2300      	movs	r3, #0
 8009030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f043 0201 	orr.w	r2, r3, #1
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	3301      	adds	r3, #1
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4a09      	ldr	r2, [pc, #36]	; (800906c <USB_CoreReset+0x64>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d901      	bls.n	8009050 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e006      	b.n	800905e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	f003 0301 	and.w	r3, r3, #1
 8009058:	2b01      	cmp	r3, #1
 800905a:	d0f0      	beq.n	800903e <USB_CoreReset+0x36>

  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	00030d40 	.word	0x00030d40

08009070 <USBD_AUDIO_Init>:
* @retval status
*/

static uint8_t  USBD_AUDIO_Init (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	70fb      	strb	r3, [r7, #3]
  if(haudioInstance.state!=STATE_USB_WAITING_FOR_INIT)
 800907c:	4b25      	ldr	r3, [pc, #148]	; (8009114 <USBD_AUDIO_Init+0xa4>)
 800907e:	7d1b      	ldrb	r3, [r3, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <USBD_AUDIO_Init+0x18>
  {
    return USBD_FAIL; 
 8009084:	2303      	movs	r3, #3
 8009086:	e041      	b.n	800910c <USBD_AUDIO_Init+0x9c>
  }
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  pdev->pClassData = &haudioInstance;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a22      	ldr	r2, [pc, #136]	; (8009114 <USBD_AUDIO_Init+0xa4>)
 800908c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009096:	60fb      	str	r3, [r7, #12]
  uint16_t packet_dim = haudio->paketDimension;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	8a5b      	ldrh	r3, [r3, #18]
 800909c:	817b      	strh	r3, [r7, #10]
  uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * haudio->dataAmount / haudio->paketDimension;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	8a1b      	ldrh	r3, [r3, #16]
 80090a2:	461a      	mov	r2, r3
 80090a4:	4613      	mov	r3, r2
 80090a6:	005b      	lsls	r3, r3, #1
 80090a8:	4413      	add	r3, r2
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	8a52      	ldrh	r2, [r2, #18]
 80090ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80090b2:	813b      	strh	r3, [r7, #8]
  haudio->wr_ptr=wr_rd_offset * packet_dim;
 80090b4:	893a      	ldrh	r2, [r7, #8]
 80090b6:	897b      	ldrh	r3, [r7, #10]
 80090b8:	fb12 f303 	smulbb	r3, r2, r3
 80090bc:	b29a      	uxth	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	831a      	strh	r2, [r3, #24]
  haudio->rd_ptr = 0;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	82da      	strh	r2, [r3, #22]
  haudio->timeout = 0;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	819a      	strh	r2, [r3, #12]
  
  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(haudio->frequency,0,haudio->channels);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	6890      	ldr	r0, [r2, #8]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	7912      	ldrb	r2, [r2, #4]
 80090de:	2100      	movs	r1, #0
 80090e0:	4798      	blx	r3
  
  USBD_LL_OpenEP(pdev,
 80090e2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80090e6:	2201      	movs	r2, #1
 80090e8:	2181      	movs	r1, #129	; 0x81
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f003 f8ed 	bl	800c2ca <USBD_LL_OpenEP>
                 AUDIO_IN_EP,
                 USBD_EP_TYPE_ISOC,
                 AUDIO_IN_PACKET);
  
  USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 80090f0:	2181      	movs	r1, #129	; 0x81
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f003 f916 	bl	800c324 <USBD_LL_FlushEP>
  
  
  USBD_LL_Transmit(pdev, AUDIO_IN_EP,
 80090f8:	897b      	ldrh	r3, [r7, #10]
 80090fa:	4a07      	ldr	r2, [pc, #28]	; (8009118 <USBD_AUDIO_Init+0xa8>)
 80090fc:	2181      	movs	r1, #129	; 0x81
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f003 f988 	bl	800c414 <USBD_LL_Transmit>
                   IsocInBuffDummy,                        
                   packet_dim);      
  
  haudio->state=STATE_USB_IDLE;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2201      	movs	r2, #1
 8009108:	751a      	strb	r2, [r3, #20]
  return USBD_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	2000198c 	.word	0x2000198c
 8009118:	20001808 	.word	0x20001808

0800911c <USBD_AUDIO_DeInit>:
* @param  cfgidx: Configuration index
* @retval status
*/
static uint8_t  USBD_AUDIO_DeInit (USBD_HandleTypeDef *pdev, 
                                   uint8_t cfgidx)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]
  /* Close EP IN */
  USBD_LL_CloseEP(pdev,AUDIO_IN_EP);  
 8009128:	2181      	movs	r1, #129	; 0x81
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f003 f8e7 	bl	800c2fe <USBD_LL_CloseEP>
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009136:	2b00      	cmp	r3, #0
 8009138:	d008      	beq.n	800914c <USBD_AUDIO_DeInit+0x30>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	2000      	movs	r0, #0
 8009144:	4798      	blx	r3
    haudioInstance.state = STATE_USB_WAITING_FOR_INIT; 
 8009146:	4b04      	ldr	r3, [pc, #16]	; (8009158 <USBD_AUDIO_DeInit+0x3c>)
 8009148:	2200      	movs	r2, #0
 800914a:	751a      	strb	r2, [r3, #20]
  }
  return USBD_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	2000198c 	.word	0x2000198c

0800915c <USBD_AUDIO_Setup>:
* @param  req: usb requests
* @retval status
*/
static uint8_t  USBD_AUDIO_Setup (USBD_HandleTypeDef *pdev, 
                                  USBD_SetupReqTypedef *req)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint8_t ret = USBD_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	75fb      	strb	r3, [r7, #23]
  haudio = pdev->pClassData;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009170:	613b      	str	r3, [r7, #16]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800917a:	2b00      	cmp	r3, #0
 800917c:	d031      	beq.n	80091e2 <USBD_AUDIO_Setup+0x86>
 800917e:	2b20      	cmp	r3, #32
 8009180:	d166      	bne.n	8009250 <USBD_AUDIO_Setup+0xf4>
  {
    /* AUDIO Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :    
    switch (req->bRequest)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	785b      	ldrb	r3, [r3, #1]
 8009186:	2b82      	cmp	r3, #130	; 0x82
 8009188:	d015      	beq.n	80091b6 <USBD_AUDIO_Setup+0x5a>
 800918a:	2b82      	cmp	r3, #130	; 0x82
 800918c:	dc04      	bgt.n	8009198 <USBD_AUDIO_Setup+0x3c>
 800918e:	2b01      	cmp	r3, #1
 8009190:	d00c      	beq.n	80091ac <USBD_AUDIO_Setup+0x50>
 8009192:	2b81      	cmp	r3, #129	; 0x81
 8009194:	d005      	beq.n	80091a2 <USBD_AUDIO_Setup+0x46>
 8009196:	e01d      	b.n	80091d4 <USBD_AUDIO_Setup+0x78>
 8009198:	2b83      	cmp	r3, #131	; 0x83
 800919a:	d011      	beq.n	80091c0 <USBD_AUDIO_Setup+0x64>
 800919c:	2b84      	cmp	r3, #132	; 0x84
 800919e:	d014      	beq.n	80091ca <USBD_AUDIO_Setup+0x6e>
 80091a0:	e018      	b.n	80091d4 <USBD_AUDIO_Setup+0x78>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f9ed 	bl	8009584 <AUDIO_REQ_GetCurrent>
      break;
 80091aa:	e019      	b.n	80091e0 <USBD_AUDIO_Setup+0x84>
      
    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);   
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fa10 	bl	80095d4 <AUDIO_REQ_SetCurrent>
      break;
 80091b4:	e014      	b.n	80091e0 <USBD_AUDIO_Setup+0x84>
      
    case AUDIO_REQ_GET_MIN:
      AUDIO_REQ_GetMinimum(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f9ab 	bl	8009514 <AUDIO_REQ_GetMinimum>
      break;
 80091be:	e00f      	b.n	80091e0 <USBD_AUDIO_Setup+0x84>
      
    case AUDIO_REQ_GET_MAX:
      AUDIO_REQ_GetMaximum(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f98a 	bl	80094dc <AUDIO_REQ_GetMaximum>
      break;
 80091c8:	e00a      	b.n	80091e0 <USBD_AUDIO_Setup+0x84>
      
    case AUDIO_REQ_GET_RES:
      AUDIO_REQ_GetResolution(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f9bd 	bl	800954c <AUDIO_REQ_GetResolution>
      break;
 80091d2:	e005      	b.n	80091e0 <USBD_AUDIO_Setup+0x84>
      
    default:
      USBD_CtlError (pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f001 fe44 	bl	800ae64 <USBD_CtlError>
      return USBD_FAIL;
 80091dc:	2303      	movs	r3, #3
 80091de:	e038      	b.n	8009252 <USBD_AUDIO_Setup+0xf6>
    }
    break; 
 80091e0:	e036      	b.n	8009250 <USBD_AUDIO_Setup+0xf4>
    
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	785b      	ldrb	r3, [r3, #1]
 80091e6:	2b0a      	cmp	r3, #10
 80091e8:	d018      	beq.n	800921c <USBD_AUDIO_Setup+0xc0>
 80091ea:	2b0b      	cmp	r3, #11
 80091ec:	d01e      	beq.n	800922c <USBD_AUDIO_Setup+0xd0>
 80091ee:	2b06      	cmp	r3, #6
 80091f0:	d12e      	bne.n	8009250 <USBD_AUDIO_Setup+0xf4>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	885b      	ldrh	r3, [r3, #2]
 80091f6:	0a1b      	lsrs	r3, r3, #8
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	2b21      	cmp	r3, #33	; 0x21
 80091fc:	d127      	bne.n	800924e <USBD_AUDIO_Setup+0xf2>
      {
        
        pbuf = USBD_AUDIO_CfgDesc + 18;
 80091fe:	4b17      	ldr	r3, [pc, #92]	; (800925c <USBD_AUDIO_Setup+0x100>)
 8009200:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ , req->wLength);   
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	88db      	ldrh	r3, [r3, #6]
 8009206:	2b09      	cmp	r3, #9
 8009208:	bf28      	it	cs
 800920a:	2309      	movcs	r3, #9
 800920c:	817b      	strh	r3, [r7, #10]
        
        USBD_CtlSendData (pdev, 
 800920e:	897b      	ldrh	r3, [r7, #10]
 8009210:	461a      	mov	r2, r3
 8009212:	68f9      	ldr	r1, [r7, #12]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f001 fe96 	bl	800af46 <USBD_CtlSendData>
                          pbuf,
                          len);
      }
      break;
 800921a:	e018      	b.n	800924e <USBD_AUDIO_Setup+0xf2>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)haudio->alt_setting,
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	681b      	ldr	r3, [r3, #0]
      USBD_CtlSendData (pdev,
 8009220:	2201      	movs	r2, #1
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 fe8e 	bl	800af46 <USBD_CtlSendData>
                        1);
      break;
 800922a:	e011      	b.n	8009250 <USBD_AUDIO_Setup+0xf4>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_MAX_NUM_INTERFACES)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	885b      	ldrh	r3, [r3, #2]
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b01      	cmp	r3, #1
 8009234:	d806      	bhi.n	8009244 <USBD_AUDIO_Setup+0xe8>
      {
        haudio->alt_setting = (uint8_t)(req->wValue);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	885b      	ldrh	r3, [r3, #2]
 800923a:	b2db      	uxtb	r3, r3
 800923c:	461a      	mov	r2, r3
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;
 8009242:	e005      	b.n	8009250 <USBD_AUDIO_Setup+0xf4>
        USBD_CtlError (pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f001 fe0c 	bl	800ae64 <USBD_CtlError>
      break;
 800924c:	e000      	b.n	8009250 <USBD_AUDIO_Setup+0xf4>
      break;
 800924e:	bf00      	nop
    }
  }
  return ret;
 8009250:	7dfb      	ldrb	r3, [r7, #23]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20001a02 	.word	0x20001a02

08009260 <USBD_AUDIO_GetCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_CfgDesc);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2276      	movs	r2, #118	; 0x76
 800926c:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_CfgDesc;
 800926e:	4b03      	ldr	r3, [pc, #12]	; (800927c <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8009270:	4618      	mov	r0, r3
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	200019f0 	.word	0x200019f0

08009280 <USBD_AUDIO_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_AUDIO_DataIn (USBD_HandleTypeDef *pdev,
                                  uint8_t epnum)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b088      	sub	sp, #32
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	460b      	mov	r3, r1
 800928a:	70fb      	strb	r3, [r7, #3]
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009292:	617b      	str	r3, [r7, #20]
  uint32_t length_usb_pck;
  uint16_t app;
  uint16_t IsocInWr_app = haudio->wr_ptr;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	8b1b      	ldrh	r3, [r3, #24]
 8009298:	827b      	strh	r3, [r7, #18]
  uint16_t true_dim = haudio->buffer_length;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	89db      	ldrh	r3, [r3, #14]
 800929e:	823b      	strh	r3, [r7, #16]
  uint16_t packet_dim = haudio->paketDimension;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	8a5b      	ldrh	r3, [r3, #18]
 80092a4:	81fb      	strh	r3, [r7, #14]
  uint16_t channels = haudio->channels;
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	791b      	ldrb	r3, [r3, #4]
 80092aa:	81bb      	strh	r3, [r7, #12]
  length_usb_pck = packet_dim;  
 80092ac:	89fb      	ldrh	r3, [r7, #14]
 80092ae:	61fb      	str	r3, [r7, #28]
  haudio->timeout=0;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2200      	movs	r2, #0
 80092b4:	819a      	strh	r2, [r3, #12]
  if (epnum == (AUDIO_IN_EP & 0x7F))
 80092b6:	78fb      	ldrb	r3, [r7, #3]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	f040 8085 	bne.w	80093c8 <USBD_AUDIO_DataIn+0x148>
  {    
    if (haudio->state == STATE_USB_IDLE) 
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	7d1b      	ldrb	r3, [r3, #20]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d107      	bne.n	80092d6 <USBD_AUDIO_DataIn+0x56>
    {
      haudio->state=STATE_USB_REQUESTS_STARTED;
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2202      	movs	r2, #2
 80092ca:	751a      	strb	r2, [r3, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Record();      
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	4798      	blx	r3
    }    
    if (haudio->state == STATE_USB_BUFFER_WRITE_STARTED)   
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	7d1b      	ldrb	r3, [r3, #20]
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d16e      	bne.n	80093bc <USBD_AUDIO_DataIn+0x13c>
    {      
      haudio->rd_ptr = haudio->rd_ptr % (true_dim);              
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	8adb      	ldrh	r3, [r3, #22]
 80092e2:	8a3a      	ldrh	r2, [r7, #16]
 80092e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80092e8:	fb02 f201 	mul.w	r2, r2, r1
 80092ec:	1a9b      	subs	r3, r3, r2
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	82da      	strh	r2, [r3, #22]
      if(IsocInWr_app<haudio->rd_ptr){
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	8adb      	ldrh	r3, [r3, #22]
 80092f8:	8a7a      	ldrh	r2, [r7, #18]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d208      	bcs.n	8009310 <USBD_AUDIO_DataIn+0x90>
        app = ((true_dim) - haudio->rd_ptr) +  IsocInWr_app;
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	8adb      	ldrh	r3, [r3, #22]
 8009302:	8a3a      	ldrh	r2, [r7, #16]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	b29a      	uxth	r2, r3
 8009308:	8a7b      	ldrh	r3, [r7, #18]
 800930a:	4413      	add	r3, r2
 800930c:	837b      	strh	r3, [r7, #26]
 800930e:	e004      	b.n	800931a <USBD_AUDIO_DataIn+0x9a>
      }else{
        app = IsocInWr_app - haudio->rd_ptr;
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	8adb      	ldrh	r3, [r3, #22]
 8009314:	8a7a      	ldrh	r2, [r7, #18]
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	837b      	strh	r3, [r7, #26]
      }        
      if(app >= (packet_dim*haudio->upper_treshold)){       
 800931a:	8b7a      	ldrh	r2, [r7, #26]
 800931c:	89fb      	ldrh	r3, [r7, #14]
 800931e:	6979      	ldr	r1, [r7, #20]
 8009320:	7e89      	ldrb	r1, [r1, #26]
 8009322:	fb01 f303 	mul.w	r3, r1, r3
 8009326:	429a      	cmp	r2, r3
 8009328:	db06      	blt.n	8009338 <USBD_AUDIO_DataIn+0xb8>
        length_usb_pck += channels*2;
 800932a:	89bb      	ldrh	r3, [r7, #12]
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	461a      	mov	r2, r3
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	4413      	add	r3, r2
 8009334:	61fb      	str	r3, [r7, #28]
 8009336:	e00d      	b.n	8009354 <USBD_AUDIO_DataIn+0xd4>
      }else if(app <= (packet_dim*haudio->lower_treshold)){
 8009338:	8b7a      	ldrh	r2, [r7, #26]
 800933a:	89fb      	ldrh	r3, [r7, #14]
 800933c:	6979      	ldr	r1, [r7, #20]
 800933e:	7ec9      	ldrb	r1, [r1, #27]
 8009340:	fb01 f303 	mul.w	r3, r1, r3
 8009344:	429a      	cmp	r2, r3
 8009346:	dc05      	bgt.n	8009354 <USBD_AUDIO_DataIn+0xd4>
        length_usb_pck -= channels*2;
 8009348:	89bb      	ldrh	r3, [r7, #12]
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	461a      	mov	r2, r3
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	1a9b      	subs	r3, r3, r2
 8009352:	61fb      	str	r3, [r7, #28]
      }     
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
                        (uint8_t*)(&haudio->buffer[haudio->rd_ptr]),
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	8ad2      	ldrh	r2, [r2, #22]
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 800935c:	441a      	add	r2, r3
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	2181      	movs	r1, #129	; 0x81
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f003 f856 	bl	800c414 <USBD_LL_Transmit>
                        length_usb_pck);      
      haudio->rd_ptr += length_usb_pck;      
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	8ada      	ldrh	r2, [r3, #22]
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	b29b      	uxth	r3, r3
 8009370:	4413      	add	r3, r2
 8009372:	b29a      	uxth	r2, r3
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	82da      	strh	r2, [r3, #22]

      if(app < haudio->buffer_length/10)
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	89db      	ldrh	r3, [r3, #14]
 800937c:	4a15      	ldr	r2, [pc, #84]	; (80093d4 <USBD_AUDIO_DataIn+0x154>)
 800937e:	fba2 2303 	umull	r2, r3, r2, r3
 8009382:	08db      	lsrs	r3, r3, #3
 8009384:	b29b      	uxth	r3, r3
 8009386:	8b7a      	ldrh	r2, [r7, #26]
 8009388:	429a      	cmp	r2, r3
 800938a:	d21d      	bcs.n	80093c8 <USBD_AUDIO_DataIn+0x148>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Stop();
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009392:	695b      	ldr	r3, [r3, #20]
 8009394:	4798      	blx	r3
        haudio->state = STATE_USB_IDLE; 
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2201      	movs	r2, #1
 800939a:	751a      	strb	r2, [r3, #20]
        haudio->timeout=0;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2200      	movs	r2, #0
 80093a0:	819a      	strh	r2, [r3, #12]
        memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	89db      	ldrh	r3, [r3, #14]
 80093aa:	461a      	mov	r2, r3
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	8a1b      	ldrh	r3, [r3, #16]
 80093b0:	4413      	add	r3, r2
 80093b2:	461a      	mov	r2, r3
 80093b4:	2100      	movs	r1, #0
 80093b6:	f005 f8a0 	bl	800e4fa <memset>
 80093ba:	e005      	b.n	80093c8 <USBD_AUDIO_DataIn+0x148>
      }       
    }
    else 
    {      
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	4a06      	ldr	r2, [pc, #24]	; (80093d8 <USBD_AUDIO_DataIn+0x158>)
 80093c0:	2181      	movs	r1, #129	; 0x81
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f003 f826 	bl	800c414 <USBD_LL_Transmit>
                        IsocInBuffDummy,
                        length_usb_pck);      
    }    
  }
  return USBD_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3720      	adds	r7, #32
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	cccccccd 	.word	0xcccccccd
 80093d8:	20001808 	.word	0x20001808

080093dc <USBD_AUDIO_EP0_RxReady>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t  USBD_AUDIO_EP0_RxReady (USBD_HandleTypeDef *pdev)
{  
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093ea:	60fb      	str	r3, [r7, #12]
  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	7f1b      	ldrb	r3, [r3, #28]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d11e      	bne.n	8009432 <USBD_AUDIO_EP0_RxReady+0x56>
  {    
    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d119      	bne.n	8009432 <USBD_AUDIO_EP0_RxReady+0x56>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->VolumeCtl(VOL_CUR);    
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	4a0d      	ldr	r2, [pc, #52]	; (800943c <USBD_AUDIO_EP0_RxReady+0x60>)
 8009408:	f9b2 2000 	ldrsh.w	r2, [r2]
 800940c:	4610      	mov	r0, r2
 800940e:	4798      	blx	r3
      
      haudio->control.cmd = 0;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	771a      	strb	r2, [r3, #28]
      haudio->control.len = 0;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      haudio->control.unit = 0;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
      haudio->control.data[0]=0;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	775a      	strb	r2, [r3, #29]
      haudio->control.data[0]=0;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	775a      	strb	r2, [r3, #29]
    }
  }    
  return USBD_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	20001988 	.word	0x20001988

08009440 <USBD_AUDIO_EP0_TxReady>:
*         handle EP0 TRx Ready event
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <USBD_AUDIO_SOF>:
*         handle SOF event
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_AUDIO_SOF (USBD_HandleTypeDef *pdev)
{  
 8009456:	b480      	push	{r7}
 8009458:	b083      	sub	sp, #12
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <USBD_AUDIO_IsoINIncomplete>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{  
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <USBD_AUDIO_IsoOutIncomplete>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{  
 8009486:	b480      	push	{r7}
 8009488:	b083      	sub	sp, #12
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	460b      	mov	r3, r1
 8009490:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <USBD_AUDIO_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_DataOut (USBD_HandleTypeDef *pdev, 
                                    uint8_t epnum)
{  
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
	...

080094bc <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	220a      	movs	r2, #10
 80094c8:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
 80094ca:	4b03      	ldr	r3, [pc, #12]	; (80094d8 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	200005e4 	.word	0x200005e4

080094dc <AUDIO_REQ_GetMaximum>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetMaximum(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094ec:	60fb      	str	r3, [r7, #12]
  
  (haudio->control.data)[0] = (uint16_t)VOL_MAX & 0xFF;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_MAX & 0xFF00 ) >> 8;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	779a      	strb	r2, [r3, #30]
  
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);  
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 8009504:	461a      	mov	r2, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f001 fd1d 	bl	800af46 <USBD_CtlSendData>
}
 800950c:	bf00      	nop
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <AUDIO_REQ_GetMinimum>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetMinimum(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009524:	60fb      	str	r3, [r7, #12]
  (haudio->control.data)[0] = (uint16_t)VOL_MIN & 0xFF;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	22e0      	movs	r2, #224	; 0xe0
 800952a:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_MIN & 0xFF00 ) >> 8;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	22db      	movs	r2, #219	; 0xdb
 8009530:	779a      	strb	r2, [r3, #30]
  /* Send the current mute state */
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);   
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 800953c:	461a      	mov	r2, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 fd01 	bl	800af46 <USBD_CtlSendData>
}
 8009544:	bf00      	nop
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <AUDIO_REQ_GetResolution>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetResolution(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800955c:	60fb      	str	r3, [r7, #12]
  (haudio->control.data)[0] = (uint16_t)VOL_RES & 0xFF;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2223      	movs	r2, #35	; 0x23
 8009562:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_RES & 0xFF00 ) >> 8;  
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	779a      	strb	r2, [r3, #30]
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 8009574:	461a      	mov	r2, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f001 fce5 	bl	800af46 <USBD_CtlSendData>
}
 800957c:	bf00      	nop
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <AUDIO_REQ_GetCurrent>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{  
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009594:	60fb      	str	r3, [r7, #12]
  
  (haudio->control.data)[0] = (uint16_t)VOL_CUR & 0xFF;
 8009596:	4b0e      	ldr	r3, [pc, #56]	; (80095d0 <AUDIO_REQ_GetCurrent+0x4c>)
 8009598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800959c:	b2da      	uxtb	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_CUR & 0xFF00 ) >> 8;
 80095a2:	4b0b      	ldr	r3, [pc, #44]	; (80095d0 <AUDIO_REQ_GetCurrent+0x4c>)
 80095a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	0a1b      	lsrs	r3, r3, #8
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	779a      	strb	r2, [r3, #30]
  
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);  
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 80095be:	461a      	mov	r2, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f001 fcc0 	bl	800af46 <USBD_CtlSendData>
}
 80095c6:	bf00      	nop
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	20001988 	.word	0x20001988

080095d4 <AUDIO_REQ_SetCurrent>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{ 
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095e4:	60fb      	str	r3, [r7, #12]
  if (req->wLength)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	88db      	ldrh	r3, [r3, #6]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d017      	beq.n	800961e <AUDIO_REQ_SetCurrent+0x4a>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx (pdev,
                       (uint8_t *)&VOL_CUR,
                       req->wLength);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	88db      	ldrh	r3, [r3, #6]
    USBD_CtlPrepareRx (pdev,
 80095f2:	461a      	mov	r2, r3
 80095f4:	490c      	ldr	r1, [pc, #48]	; (8009628 <AUDIO_REQ_SetCurrent+0x54>)
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f001 fcd1 	bl	800af9e <USBD_CtlPrepareRx>
    
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2201      	movs	r2, #1
 8009600:	771a      	strb	r2, [r3, #28]
    haudio->control.len = req->wLength;          /* Set the request data length */
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	88db      	ldrh	r3, [r3, #6]
 8009606:	b2da      	uxtb	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	889b      	ldrh	r3, [r3, #4]
 8009612:	0a1b      	lsrs	r3, r3, #8
 8009614:	b29b      	uxth	r3, r3
 8009616:	b2da      	uxtb	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  }
}
 800961e:	bf00      	nop
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20001988 	.word	0x20001988

0800962c <USBD_AUDIO_Data_Transfer>:
*       you can pass 16 PCM samples if the function is called each millisecond, 
*       32 samples if called every 2 milliseconds and so on. 
* @retval status
*/
uint8_t  USBD_AUDIO_Data_Transfer(USBD_HandleTypeDef *pdev, int16_t * audioData, uint16_t PCMSamples)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	4613      	mov	r3, r2
 8009638:	80fb      	strh	r3, [r7, #6]
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009640:	61fb      	str	r3, [r7, #28]
  
  if(haudioInstance.state==STATE_USB_WAITING_FOR_INIT){    
 8009642:	4b60      	ldr	r3, [pc, #384]	; (80097c4 <USBD_AUDIO_Data_Transfer+0x198>)
 8009644:	7d1b      	ldrb	r3, [r3, #20]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <USBD_AUDIO_Data_Transfer+0x22>
    return USBD_BUSY;    
 800964a:	2301      	movs	r3, #1
 800964c:	e0b6      	b.n	80097bc <USBD_AUDIO_Data_Transfer+0x190>
  }  
  uint16_t dataAmount = PCMSamples * 2; /*Bytes*/
 800964e:	88fb      	ldrh	r3, [r7, #6]
 8009650:	005b      	lsls	r3, r3, #1
 8009652:	837b      	strh	r3, [r7, #26]
  uint16_t true_dim = haudio->buffer_length;
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	89db      	ldrh	r3, [r3, #14]
 8009658:	833b      	strh	r3, [r7, #24]
  uint16_t current_data_Amount = haudio->dataAmount;
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	8a1b      	ldrh	r3, [r3, #16]
 800965e:	82fb      	strh	r3, [r7, #22]
  uint16_t packet_dim = haudio->paketDimension;
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	8a5b      	ldrh	r3, [r3, #18]
 8009664:	82bb      	strh	r3, [r7, #20]
  
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	7d1b      	ldrb	r3, [r3, #20]
 800966a:	2b02      	cmp	r3, #2
 800966c:	d003      	beq.n	8009676 <USBD_AUDIO_Data_Transfer+0x4a>
 800966e:	8afa      	ldrh	r2, [r7, #22]
 8009670:	8b7b      	ldrh	r3, [r7, #26]
 8009672:	429a      	cmp	r2, r3
 8009674:	d05c      	beq.n	8009730 <USBD_AUDIO_Data_Transfer+0x104>
    
    /*USB parameters definition, based on the amount of data passed*/
    haudio->dataAmount=dataAmount;                  
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	8b7a      	ldrh	r2, [r7, #26]
 800967a:	821a      	strh	r2, [r3, #16]
    uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * dataAmount / packet_dim; 
 800967c:	8b7a      	ldrh	r2, [r7, #26]
 800967e:	4613      	mov	r3, r2
 8009680:	005b      	lsls	r3, r3, #1
 8009682:	441a      	add	r2, r3
 8009684:	8abb      	ldrh	r3, [r7, #20]
 8009686:	fb92 f3f3 	sdiv	r3, r2, r3
 800968a:	827b      	strh	r3, [r7, #18]
    haudio->wr_ptr=wr_rd_offset * packet_dim;
 800968c:	8a7a      	ldrh	r2, [r7, #18]
 800968e:	8abb      	ldrh	r3, [r7, #20]
 8009690:	fb12 f303 	smulbb	r3, r2, r3
 8009694:	b29a      	uxth	r2, r3
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	831a      	strh	r2, [r3, #24]
    haudio->rd_ptr = 0;
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	2200      	movs	r2, #0
 800969e:	82da      	strh	r2, [r3, #22]
    haudio->upper_treshold = wr_rd_offset + 1;
 80096a0:	8a7b      	ldrh	r3, [r7, #18]
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	3301      	adds	r3, #1
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	769a      	strb	r2, [r3, #26]
    haudio->lower_treshold = wr_rd_offset - 1;
 80096ac:	8a7b      	ldrh	r3, [r7, #18]
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	3b01      	subs	r3, #1
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	76da      	strb	r2, [r3, #27]
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 80096b8:	8b7a      	ldrh	r2, [r7, #26]
 80096ba:	8abb      	ldrh	r3, [r7, #20]
 80096bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	8aba      	ldrh	r2, [r7, #20]
 80096c4:	fb12 f303 	smulbb	r3, r2, r3
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	461a      	mov	r2, r3
 80096cc:	0052      	lsls	r2, r2, #1
 80096ce:	4413      	add	r3, r2
 80096d0:	005b      	lsls	r3, r3, #1
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	81da      	strh	r2, [r3, #14]
    
    /*Memory allocation for data buffer, depending (also) on data amount passed to the transfer function*/
    if(haudio->buffer != NULL)
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d004      	beq.n	80096ea <USBD_AUDIO_Data_Transfer+0xbe>
    {
      USBD_free(haudio->buffer);      
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096e4:	4618      	mov	r0, r3
 80096e6:	f004 fef5 	bl	800e4d4 <free>
    }
    haudio->buffer = USBD_malloc(haudio->buffer_length + haudio->dataAmount);
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	89db      	ldrh	r3, [r3, #14]
 80096ee:	461a      	mov	r2, r3
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	8a1b      	ldrh	r3, [r3, #16]
 80096f4:	4413      	add	r3, r2
 80096f6:	4618      	mov	r0, r3
 80096f8:	f004 fee4 	bl	800e4c4 <malloc>
 80096fc:	4603      	mov	r3, r0
 80096fe:	461a      	mov	r2, r3
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	661a      	str	r2, [r3, #96]	; 0x60
    if(haudio->buffer == NULL)
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009708:	2b00      	cmp	r3, #0
 800970a:	d101      	bne.n	8009710 <USBD_AUDIO_Data_Transfer+0xe4>
    {
      return USBD_FAIL;       
 800970c:	2303      	movs	r3, #3
 800970e:	e055      	b.n	80097bc <USBD_AUDIO_Data_Transfer+0x190>
    }
    memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	89db      	ldrh	r3, [r3, #14]
 8009718:	461a      	mov	r2, r3
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	8a1b      	ldrh	r3, [r3, #16]
 800971e:	4413      	add	r3, r2
 8009720:	461a      	mov	r2, r3
 8009722:	2100      	movs	r1, #0
 8009724:	f004 fee9 	bl	800e4fa <memset>
    haudio->state=STATE_USB_BUFFER_WRITE_STARTED;
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	2203      	movs	r2, #3
 800972c:	751a      	strb	r2, [r3, #20]
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 800972e:	e044      	b.n	80097ba <USBD_AUDIO_Data_Transfer+0x18e>
    
    
  }else if(haudio->state==STATE_USB_BUFFER_WRITE_STARTED){
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	7d1b      	ldrb	r3, [r3, #20]
 8009734:	2b03      	cmp	r3, #3
 8009736:	d140      	bne.n	80097ba <USBD_AUDIO_Data_Transfer+0x18e>
    if(haudio->timeout++==TIMEOUT_VALUE){
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	899b      	ldrh	r3, [r3, #12]
 800973c:	b21b      	sxth	r3, r3
 800973e:	b29a      	uxth	r2, r3
 8009740:	3201      	adds	r2, #1
 8009742:	b292      	uxth	r2, r2
 8009744:	b211      	sxth	r1, r2
 8009746:	69fa      	ldr	r2, [r7, #28]
 8009748:	8191      	strh	r1, [r2, #12]
 800974a:	2bc8      	cmp	r3, #200	; 0xc8
 800974c:	d10a      	bne.n	8009764 <USBD_AUDIO_Data_Transfer+0x138>
      haudio->state=STATE_USB_IDLE;
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	2201      	movs	r2, #1
 8009752:	751a      	strb	r2, [r3, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Stop();   
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	4798      	blx	r3
     haudio->timeout=0;
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	2200      	movs	r2, #0
 8009762:	819a      	strh	r2, [r3, #12]
    }
    memcpy((uint8_t * )&haudio->buffer[haudio->wr_ptr], (uint8_t *)(audioData), dataAmount);    
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009768:	69fa      	ldr	r2, [r7, #28]
 800976a:	8b12      	ldrh	r2, [r2, #24]
 800976c:	4413      	add	r3, r2
 800976e:	8b7a      	ldrh	r2, [r7, #26]
 8009770:	68b9      	ldr	r1, [r7, #8]
 8009772:	4618      	mov	r0, r3
 8009774:	f004 feb6 	bl	800e4e4 <memcpy>
    haudio->wr_ptr += dataAmount;
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	8b1a      	ldrh	r2, [r3, #24]
 800977c:	8b7b      	ldrh	r3, [r7, #26]
 800977e:	4413      	add	r3, r2
 8009780:	b29a      	uxth	r2, r3
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	831a      	strh	r2, [r3, #24]
    haudio->wr_ptr = haudio->wr_ptr % (true_dim);    
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	8b1b      	ldrh	r3, [r3, #24]
 800978a:	8b3a      	ldrh	r2, [r7, #24]
 800978c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009790:	fb02 f201 	mul.w	r2, r2, r1
 8009794:	1a9b      	subs	r3, r3, r2
 8009796:	b29a      	uxth	r2, r3
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	831a      	strh	r2, [r3, #24]
    if((haudio->wr_ptr-dataAmount) == 0){
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	8b1b      	ldrh	r3, [r3, #24]
 80097a0:	8b7a      	ldrh	r2, [r7, #26]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d109      	bne.n	80097ba <USBD_AUDIO_Data_Transfer+0x18e>
      memcpy((uint8_t *)(((uint8_t *)haudio->buffer)+true_dim),(uint8_t *)haudio->buffer, dataAmount);
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80097aa:	8b3b      	ldrh	r3, [r7, #24]
 80097ac:	18d0      	adds	r0, r2, r3
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097b2:	8b7a      	ldrh	r2, [r7, #26]
 80097b4:	4619      	mov	r1, r3
 80097b6:	f004 fe95 	bl	800e4e4 <memcpy>
    }
  }
  return USBD_OK;  
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3720      	adds	r7, #32
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	2000198c 	.word	0x2000198c

080097c8 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                        USBD_AUDIO_ItfTypeDef *fops)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <USBD_AUDIO_RegisterInterface+0x18>
  {
    pdev->pUserData= fops;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  }
  return 0;}
 80097e0:	2300      	movs	r3, #0
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
	...

080097f0 <USBD_AUDIO_Init_Microphone_Descriptor>:
* @param  samplingFrequency: sampling frequency
* @param  Channels: number of channels
* @retval status
*/
void USBD_AUDIO_Init_Microphone_Descriptor(USBD_HandleTypeDef   *pdev, uint32_t samplingFrequency, uint8_t Channels)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b087      	sub	sp, #28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	4613      	mov	r3, r2
 80097fc:	71fb      	strb	r3, [r7, #7]
  uint16_t index;
  uint8_t AUDIO_CONTROLS;   
  USBD_AUDIO_CfgDesc[0] = 0x09;                                                /* bLength */
 80097fe:	4b5c      	ldr	r3, [pc, #368]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009800:	2209      	movs	r2, #9
 8009802:	701a      	strb	r2, [r3, #0]
  USBD_AUDIO_CfgDesc[1] = 0x02;                                                /* bDescriptorType */
 8009804:	4b5a      	ldr	r3, [pc, #360]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009806:	2202      	movs	r2, #2
 8009808:	705a      	strb	r2, [r3, #1]
  USBD_AUDIO_CfgDesc[2] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)&0xff);       /* wTotalLength */
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	336c      	adds	r3, #108	; 0x6c
 800980e:	b2da      	uxtb	r2, r3
 8009810:	4b57      	ldr	r3, [pc, #348]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009812:	709a      	strb	r2, [r3, #2]
  USBD_AUDIO_CfgDesc[3] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)>>8);
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	336c      	adds	r3, #108	; 0x6c
 8009818:	121b      	asrs	r3, r3, #8
 800981a:	b2da      	uxtb	r2, r3
 800981c:	4b54      	ldr	r3, [pc, #336]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800981e:	70da      	strb	r2, [r3, #3]
  USBD_AUDIO_CfgDesc[4] = 0x02;                                                /* bNumInterfaces */
 8009820:	4b53      	ldr	r3, [pc, #332]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009822:	2202      	movs	r2, #2
 8009824:	711a      	strb	r2, [r3, #4]
  USBD_AUDIO_CfgDesc[5] = 0x01;                                                /* bConfigurationValue */
 8009826:	4b52      	ldr	r3, [pc, #328]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009828:	2201      	movs	r2, #1
 800982a:	715a      	strb	r2, [r3, #5]
  USBD_AUDIO_CfgDesc[6] = 0x00;                                                /* iConfiguration */
 800982c:	4b50      	ldr	r3, [pc, #320]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800982e:	2200      	movs	r2, #0
 8009830:	719a      	strb	r2, [r3, #6]
  USBD_AUDIO_CfgDesc[7] = 0x80;                                                /* bmAttributes  BUS Powered*/
 8009832:	4b4f      	ldr	r3, [pc, #316]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009834:	2280      	movs	r2, #128	; 0x80
 8009836:	71da      	strb	r2, [r3, #7]
  USBD_AUDIO_CfgDesc[8] = 0x32;                                                /* bMaxPower = 100 mA*/   
 8009838:	4b4d      	ldr	r3, [pc, #308]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800983a:	2232      	movs	r2, #50	; 0x32
 800983c:	721a      	strb	r2, [r3, #8]
  /* USB Microphone Standard interface descriptor */
  USBD_AUDIO_CfgDesc[9] = 9;                                                   /* bLength */
 800983e:	4b4c      	ldr	r3, [pc, #304]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009840:	2209      	movs	r2, #9
 8009842:	725a      	strb	r2, [r3, #9]
  USBD_AUDIO_CfgDesc[10] = USB_INTERFACE_DESCRIPTOR_TYPE;                      /* bDescriptorType */
 8009844:	4b4a      	ldr	r3, [pc, #296]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009846:	2204      	movs	r2, #4
 8009848:	729a      	strb	r2, [r3, #10]
  USBD_AUDIO_CfgDesc[11] = 0x00;                                               /* bInterfaceNumber */
 800984a:	4b49      	ldr	r3, [pc, #292]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800984c:	2200      	movs	r2, #0
 800984e:	72da      	strb	r2, [r3, #11]
  USBD_AUDIO_CfgDesc[12] = 0x00;                                               /* bAlternateSetting */
 8009850:	4b47      	ldr	r3, [pc, #284]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009852:	2200      	movs	r2, #0
 8009854:	731a      	strb	r2, [r3, #12]
  USBD_AUDIO_CfgDesc[13] = 0x00;                                               /* bNumEndpoints */
 8009856:	4b46      	ldr	r3, [pc, #280]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009858:	2200      	movs	r2, #0
 800985a:	735a      	strb	r2, [r3, #13]
  USBD_AUDIO_CfgDesc[14] = USB_DEVICE_CLASS_AUDIO;                             /* bInterfaceClass */
 800985c:	4b44      	ldr	r3, [pc, #272]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800985e:	2201      	movs	r2, #1
 8009860:	739a      	strb	r2, [r3, #14]
  USBD_AUDIO_CfgDesc[15] = AUDIO_SUBCLASS_AUDIOCONTROL;                        /* bInterfaceSubClass */
 8009862:	4b43      	ldr	r3, [pc, #268]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009864:	2201      	movs	r2, #1
 8009866:	73da      	strb	r2, [r3, #15]
  USBD_AUDIO_CfgDesc[16] = AUDIO_PROTOCOL_UNDEFINED;                           /* bInterfaceProtocol */
 8009868:	4b41      	ldr	r3, [pc, #260]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800986a:	2200      	movs	r2, #0
 800986c:	741a      	strb	r2, [r3, #16]
  USBD_AUDIO_CfgDesc[17] = 0x00;                                               /* iInterface */   
 800986e:	4b40      	ldr	r3, [pc, #256]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009870:	2200      	movs	r2, #0
 8009872:	745a      	strb	r2, [r3, #17]
  /* USB Microphone Class-specific AC Interface Descriptor */
  USBD_AUDIO_CfgDesc[18] = 9;                                                  /* bLength */
 8009874:	4b3e      	ldr	r3, [pc, #248]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009876:	2209      	movs	r2, #9
 8009878:	749a      	strb	r2, [r3, #18]
  USBD_AUDIO_CfgDesc[19] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 800987a:	4b3d      	ldr	r3, [pc, #244]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800987c:	2224      	movs	r2, #36	; 0x24
 800987e:	74da      	strb	r2, [r3, #19]
  USBD_AUDIO_CfgDesc[20] = AUDIO_CONTROL_HEADER;                               /* bDescriptorSubtype */
 8009880:	4b3b      	ldr	r3, [pc, #236]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009882:	2201      	movs	r2, #1
 8009884:	751a      	strb	r2, [r3, #20]
  USBD_AUDIO_CfgDesc[21] = 0x00;       /* 1.00 */                              /* bcdADC */
 8009886:	4b3a      	ldr	r3, [pc, #232]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009888:	2200      	movs	r2, #0
 800988a:	755a      	strb	r2, [r3, #21]
  USBD_AUDIO_CfgDesc[22] = 0x01;
 800988c:	4b38      	ldr	r3, [pc, #224]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800988e:	2201      	movs	r2, #1
 8009890:	759a      	strb	r2, [r3, #22]
  USBD_AUDIO_CfgDesc[23] = 0x25+Channels;                                      /* wTotalLength = 37+AUDIO_CHANNELS*/
 8009892:	79fb      	ldrb	r3, [r7, #7]
 8009894:	3325      	adds	r3, #37	; 0x25
 8009896:	b2da      	uxtb	r2, r3
 8009898:	4b35      	ldr	r3, [pc, #212]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800989a:	75da      	strb	r2, [r3, #23]
  USBD_AUDIO_CfgDesc[24] = 0x00;
 800989c:	4b34      	ldr	r3, [pc, #208]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800989e:	2200      	movs	r2, #0
 80098a0:	761a      	strb	r2, [r3, #24]
  USBD_AUDIO_CfgDesc[25] = 0x01;                                               /* bInCollection */
 80098a2:	4b33      	ldr	r3, [pc, #204]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098a4:	2201      	movs	r2, #1
 80098a6:	765a      	strb	r2, [r3, #25]
  USBD_AUDIO_CfgDesc[26] = 0x01;                                               /* baInterfaceNr */   
 80098a8:	4b31      	ldr	r3, [pc, #196]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098aa:	2201      	movs	r2, #1
 80098ac:	769a      	strb	r2, [r3, #26]
  /* USB Microphone Input Terminal Descriptor */
  USBD_AUDIO_CfgDesc[27] = AUDIO_INPUT_TERMINAL_DESC_SIZE;                     /* bLength */
 80098ae:	4b30      	ldr	r3, [pc, #192]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098b0:	220c      	movs	r2, #12
 80098b2:	76da      	strb	r2, [r3, #27]
  USBD_AUDIO_CfgDesc[28] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 80098b4:	4b2e      	ldr	r3, [pc, #184]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098b6:	2224      	movs	r2, #36	; 0x24
 80098b8:	771a      	strb	r2, [r3, #28]
  USBD_AUDIO_CfgDesc[29] = AUDIO_CONTROL_INPUT_TERMINAL;                       /* bDescriptorSubtype */
 80098ba:	4b2d      	ldr	r3, [pc, #180]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098bc:	2202      	movs	r2, #2
 80098be:	775a      	strb	r2, [r3, #29]
  USBD_AUDIO_CfgDesc[30] = 0x01;                                               /* bTerminalID */
 80098c0:	4b2b      	ldr	r3, [pc, #172]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098c2:	2201      	movs	r2, #1
 80098c4:	779a      	strb	r2, [r3, #30]
  USBD_AUDIO_CfgDesc[31] = 0x01;                                               /* wTerminalType AUDIO_TERMINAL_USB_MICROPHONE   0x0201 */
 80098c6:	4b2a      	ldr	r3, [pc, #168]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098c8:	2201      	movs	r2, #1
 80098ca:	77da      	strb	r2, [r3, #31]
  USBD_AUDIO_CfgDesc[32] = 0x02;
 80098cc:	4b28      	ldr	r3, [pc, #160]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 2020 	strb.w	r2, [r3, #32]
  USBD_AUDIO_CfgDesc[33] = 0x00;                                               /* bAssocTerminal */
 80098d4:	4b26      	ldr	r3, [pc, #152]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  USBD_AUDIO_CfgDesc[34] = Channels;                                           /* bNrChannels */   
 80098dc:	4a24      	ldr	r2, [pc, #144]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098de:	79fb      	ldrb	r3, [r7, #7]
 80098e0:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
  if(Channels != 2)
 80098e4:	79fb      	ldrb	r3, [r7, #7]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d008      	beq.n	80098fc <USBD_AUDIO_Init_Microphone_Descriptor+0x10c>
  {
    USBD_AUDIO_CfgDesc[35] = 0x00;                                             /* wChannelConfig 0x0000  Mono */
 80098ea:	4b21      	ldr	r3, [pc, #132]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
 80098f2:	4b1f      	ldr	r3, [pc, #124]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80098fa:	e007      	b.n	800990c <USBD_AUDIO_Init_Microphone_Descriptor+0x11c>
  }
  else
  {
    USBD_AUDIO_CfgDesc[35] = 0x03;                                             /* wChannelConfig 0x0003  Stereo */
 80098fc:	4b1c      	ldr	r3, [pc, #112]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 80098fe:	2203      	movs	r2, #3
 8009900:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
 8009904:	4b1a      	ldr	r3, [pc, #104]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }   
  USBD_AUDIO_CfgDesc[37] = 0x00;                                               /* iChannelNames */
 800990c:	4b18      	ldr	r3, [pc, #96]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800990e:	2200      	movs	r2, #0
 8009910:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  USBD_AUDIO_CfgDesc[38] = 0x00;                                               /* iTerminal */   
 8009914:	4b16      	ldr	r3, [pc, #88]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009916:	2200      	movs	r2, #0
 8009918:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  /* USB Microphone Audio Feature Unit Descriptor */
  USBD_AUDIO_CfgDesc[39] = 0x07+Channels+1;                                    /* bLength */
 800991c:	79fb      	ldrb	r3, [r7, #7]
 800991e:	3308      	adds	r3, #8
 8009920:	b2da      	uxtb	r2, r3
 8009922:	4b13      	ldr	r3, [pc, #76]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009924:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  USBD_AUDIO_CfgDesc[40] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 8009928:	4b11      	ldr	r3, [pc, #68]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800992a:	2224      	movs	r2, #36	; 0x24
 800992c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  USBD_AUDIO_CfgDesc[41] = AUDIO_CONTROL_FEATURE_UNIT;                         /* bDescriptorSubtype */
 8009930:	4b0f      	ldr	r3, [pc, #60]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009932:	2206      	movs	r2, #6
 8009934:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  USBD_AUDIO_CfgDesc[42] = 0x02;                                               /* bUnitID */
 8009938:	4b0d      	ldr	r3, [pc, #52]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800993a:	2202      	movs	r2, #2
 800993c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  USBD_AUDIO_CfgDesc[43] = 0x01;                                               /* bSourceID */
 8009940:	4b0b      	ldr	r3, [pc, #44]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009942:	2201      	movs	r2, #1
 8009944:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  USBD_AUDIO_CfgDesc[44] = 0x01;                                               /* bControlSize */   
 8009948:	4b09      	ldr	r3, [pc, #36]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 800994a:	2201      	movs	r2, #1
 800994c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  index = 47;   
 8009950:	232f      	movs	r3, #47	; 0x2f
 8009952:	82fb      	strh	r3, [r7, #22]
  if(Channels == 1)
 8009954:	79fb      	ldrb	r3, [r7, #7]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d10c      	bne.n	8009974 <USBD_AUDIO_Init_Microphone_Descriptor+0x184>
  {
    AUDIO_CONTROLS = (0x02);     
 800995a:	2302      	movs	r3, #2
 800995c:	757b      	strb	r3, [r7, #21]
    USBD_AUDIO_CfgDesc[45] = AUDIO_CONTROLS;
 800995e:	4a04      	ldr	r2, [pc, #16]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009960:	7d7b      	ldrb	r3, [r7, #21]
 8009962:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
    USBD_AUDIO_CfgDesc[46] = 0x00;     
 8009966:	4b02      	ldr	r3, [pc, #8]	; (8009970 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009968:	2200      	movs	r2, #0
 800996a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800996e:	e012      	b.n	8009996 <USBD_AUDIO_Init_Microphone_Descriptor+0x1a6>
 8009970:	200019f0 	.word	0x200019f0
  }
  else
  {
    AUDIO_CONTROLS = (0x02);     
 8009974:	2302      	movs	r3, #2
 8009976:	757b      	strb	r3, [r7, #21]
    USBD_AUDIO_CfgDesc[45] = 0x00;
 8009978:	4bae      	ldr	r3, [pc, #696]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800997a:	2200      	movs	r2, #0
 800997c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    USBD_AUDIO_CfgDesc[46] = AUDIO_CONTROLS;
 8009980:	4aac      	ldr	r2, [pc, #688]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009982:	7d7b      	ldrb	r3, [r7, #21]
 8009984:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009988:	8afb      	ldrh	r3, [r7, #22]
 800998a:	49aa      	ldr	r1, [pc, #680]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800998c:	7d7a      	ldrb	r2, [r7, #21]
 800998e:	54ca      	strb	r2, [r1, r3]
    index++;
 8009990:	8afb      	ldrh	r3, [r7, #22]
 8009992:	3301      	adds	r3, #1
 8009994:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 2)
 8009996:	79fb      	ldrb	r3, [r7, #7]
 8009998:	2b02      	cmp	r3, #2
 800999a:	d906      	bls.n	80099aa <USBD_AUDIO_Init_Microphone_Descriptor+0x1ba>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 800999c:	8afb      	ldrh	r3, [r7, #22]
 800999e:	49a5      	ldr	r1, [pc, #660]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 80099a0:	7d7a      	ldrb	r2, [r7, #21]
 80099a2:	54ca      	strb	r2, [r1, r3]
    index++;
 80099a4:	8afb      	ldrh	r3, [r7, #22]
 80099a6:	3301      	adds	r3, #1
 80099a8:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 3)
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	2b03      	cmp	r3, #3
 80099ae:	d906      	bls.n	80099be <USBD_AUDIO_Init_Microphone_Descriptor+0x1ce>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 80099b0:	8afb      	ldrh	r3, [r7, #22]
 80099b2:	49a0      	ldr	r1, [pc, #640]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 80099b4:	7d7a      	ldrb	r2, [r7, #21]
 80099b6:	54ca      	strb	r2, [r1, r3]
    index++;
 80099b8:	8afb      	ldrh	r3, [r7, #22]
 80099ba:	3301      	adds	r3, #1
 80099bc:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 4)
 80099be:	79fb      	ldrb	r3, [r7, #7]
 80099c0:	2b04      	cmp	r3, #4
 80099c2:	d906      	bls.n	80099d2 <USBD_AUDIO_Init_Microphone_Descriptor+0x1e2>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 80099c4:	8afb      	ldrh	r3, [r7, #22]
 80099c6:	499b      	ldr	r1, [pc, #620]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 80099c8:	7d7a      	ldrb	r2, [r7, #21]
 80099ca:	54ca      	strb	r2, [r1, r3]
    index++;
 80099cc:	8afb      	ldrh	r3, [r7, #22]
 80099ce:	3301      	adds	r3, #1
 80099d0:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 5)
 80099d2:	79fb      	ldrb	r3, [r7, #7]
 80099d4:	2b05      	cmp	r3, #5
 80099d6:	d906      	bls.n	80099e6 <USBD_AUDIO_Init_Microphone_Descriptor+0x1f6>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 80099d8:	8afb      	ldrh	r3, [r7, #22]
 80099da:	4996      	ldr	r1, [pc, #600]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 80099dc:	7d7a      	ldrb	r2, [r7, #21]
 80099de:	54ca      	strb	r2, [r1, r3]
    index++;
 80099e0:	8afb      	ldrh	r3, [r7, #22]
 80099e2:	3301      	adds	r3, #1
 80099e4:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 6)
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	2b06      	cmp	r3, #6
 80099ea:	d906      	bls.n	80099fa <USBD_AUDIO_Init_Microphone_Descriptor+0x20a>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 80099ec:	8afb      	ldrh	r3, [r7, #22]
 80099ee:	4991      	ldr	r1, [pc, #580]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 80099f0:	7d7a      	ldrb	r2, [r7, #21]
 80099f2:	54ca      	strb	r2, [r1, r3]
    index++;
 80099f4:	8afb      	ldrh	r3, [r7, #22]
 80099f6:	3301      	adds	r3, #1
 80099f8:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 7)
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	2b07      	cmp	r3, #7
 80099fe:	d906      	bls.n	8009a0e <USBD_AUDIO_Init_Microphone_Descriptor+0x21e>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009a00:	8afb      	ldrh	r3, [r7, #22]
 8009a02:	498c      	ldr	r1, [pc, #560]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009a04:	7d7a      	ldrb	r2, [r7, #21]
 8009a06:	54ca      	strb	r2, [r1, r3]
    index++;
 8009a08:	8afb      	ldrh	r3, [r7, #22]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	82fb      	strh	r3, [r7, #22]
  }   
  USBD_AUDIO_CfgDesc[index] = 0x00;                                            /* iTerminal */
 8009a0e:	8afb      	ldrh	r3, [r7, #22]
 8009a10:	4a88      	ldr	r2, [pc, #544]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009a12:	2100      	movs	r1, #0
 8009a14:	54d1      	strb	r1, [r2, r3]
  index++;   
 8009a16:	8afb      	ldrh	r3, [r7, #22]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	82fb      	strh	r3, [r7, #22]
  /*USB Microphone Output Terminal Descriptor */
  USBD_AUDIO_CfgDesc[index++] = 0x09;                                          /* bLength */
 8009a1c:	8afb      	ldrh	r3, [r7, #22]
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	82fa      	strh	r2, [r7, #22]
 8009a22:	461a      	mov	r2, r3
 8009a24:	4b83      	ldr	r3, [pc, #524]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009a26:	2109      	movs	r1, #9
 8009a28:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8009a2a:	8afb      	ldrh	r3, [r7, #22]
 8009a2c:	1c5a      	adds	r2, r3, #1
 8009a2e:	82fa      	strh	r2, [r7, #22]
 8009a30:	461a      	mov	r2, r3
 8009a32:	4b80      	ldr	r3, [pc, #512]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009a34:	2124      	movs	r1, #36	; 0x24
 8009a36:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_CONTROL_OUTPUT_TERMINAL;                 /* bDescriptorSubtype */
 8009a38:	8afb      	ldrh	r3, [r7, #22]
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	82fa      	strh	r2, [r7, #22]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	4b7c      	ldr	r3, [pc, #496]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009a42:	2103      	movs	r1, #3
 8009a44:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalID */
 8009a46:	8afb      	ldrh	r3, [r7, #22]
 8009a48:	1c5a      	adds	r2, r3, #1
 8009a4a:	82fa      	strh	r2, [r7, #22]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	4b79      	ldr	r3, [pc, #484]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009a50:	2103      	movs	r1, #3
 8009a52:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wTerminalType AUDIO_TERMINAL_USB_STREAMING 0x0101*/
 8009a54:	8afb      	ldrh	r3, [r7, #22]
 8009a56:	1c5a      	adds	r2, r3, #1
 8009a58:	82fa      	strh	r2, [r7, #22]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	4b75      	ldr	r3, [pc, #468]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009a5e:	2101      	movs	r1, #1
 8009a60:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;
 8009a62:	8afb      	ldrh	r3, [r7, #22]
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	82fa      	strh	r2, [r7, #22]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	4b72      	ldr	r3, [pc, #456]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;
 8009a70:	8afb      	ldrh	r3, [r7, #22]
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	82fa      	strh	r2, [r7, #22]
 8009a76:	461a      	mov	r2, r3
 8009a78:	4b6e      	ldr	r3, [pc, #440]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x02;
 8009a7e:	8afb      	ldrh	r3, [r7, #22]
 8009a80:	1c5a      	adds	r2, r3, #1
 8009a82:	82fa      	strh	r2, [r7, #22]
 8009a84:	461a      	mov	r2, r3
 8009a86:	4b6b      	ldr	r3, [pc, #428]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009a88:	2102      	movs	r1, #2
 8009a8a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 8009a8c:	8afb      	ldrh	r3, [r7, #22]
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	82fa      	strh	r2, [r7, #22]
 8009a92:	461a      	mov	r2, r3
 8009a94:	4b67      	ldr	r3, [pc, #412]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009a96:	2100      	movs	r1, #0
 8009a98:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Zero Bandwith */
  /* Interface 1, Alternate Setting 0                                             */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 8009a9a:	8afb      	ldrh	r3, [r7, #22]
 8009a9c:	1c5a      	adds	r2, r3, #1
 8009a9e:	82fa      	strh	r2, [r7, #22]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	4b64      	ldr	r3, [pc, #400]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009aa4:	2109      	movs	r1, #9
 8009aa6:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 8009aa8:	8afb      	ldrh	r3, [r7, #22]
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	82fa      	strh	r2, [r7, #22]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	4b60      	ldr	r3, [pc, #384]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009ab2:	2104      	movs	r1, #4
 8009ab4:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 8009ab6:	8afb      	ldrh	r3, [r7, #22]
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	82fa      	strh	r2, [r7, #22]
 8009abc:	461a      	mov	r2, r3
 8009abe:	4b5d      	ldr	r3, [pc, #372]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bAlternateSetting */
 8009ac4:	8afb      	ldrh	r3, [r7, #22]
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	82fa      	strh	r2, [r7, #22]
 8009aca:	461a      	mov	r2, r3
 8009acc:	4b59      	ldr	r3, [pc, #356]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009ace:	2100      	movs	r1, #0
 8009ad0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bNumEndpoints */
 8009ad2:	8afb      	ldrh	r3, [r7, #22]
 8009ad4:	1c5a      	adds	r2, r3, #1
 8009ad6:	82fa      	strh	r2, [r7, #22]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	4b56      	ldr	r3, [pc, #344]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009adc:	2100      	movs	r1, #0
 8009ade:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 8009ae0:	8afb      	ldrh	r3, [r7, #22]
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	82fa      	strh	r2, [r7, #22]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	4b52      	ldr	r3, [pc, #328]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009aea:	2101      	movs	r1, #1
 8009aec:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 8009aee:	8afb      	ldrh	r3, [r7, #22]
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	82fa      	strh	r2, [r7, #22]
 8009af4:	461a      	mov	r2, r3
 8009af6:	4b4f      	ldr	r3, [pc, #316]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009af8:	2102      	movs	r1, #2
 8009afa:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 8009afc:	8afb      	ldrh	r3, [r7, #22]
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	82fa      	strh	r2, [r7, #22]
 8009b02:	461a      	mov	r2, r3
 8009b04:	4b4b      	ldr	r3, [pc, #300]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009b06:	2100      	movs	r1, #0
 8009b08:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 8009b0a:	8afb      	ldrh	r3, [r7, #22]
 8009b0c:	1c5a      	adds	r2, r3, #1
 8009b0e:	82fa      	strh	r2, [r7, #22]
 8009b10:	461a      	mov	r2, r3
 8009b12:	4b48      	ldr	r3, [pc, #288]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009b14:	2100      	movs	r1, #0
 8009b16:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Operational */
  /* Interface 1, Alternate Setting 1                                           */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 8009b18:	8afb      	ldrh	r3, [r7, #22]
 8009b1a:	1c5a      	adds	r2, r3, #1
 8009b1c:	82fa      	strh	r2, [r7, #22]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	4b44      	ldr	r3, [pc, #272]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009b22:	2109      	movs	r1, #9
 8009b24:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 8009b26:	8afb      	ldrh	r3, [r7, #22]
 8009b28:	1c5a      	adds	r2, r3, #1
 8009b2a:	82fa      	strh	r2, [r7, #22]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	4b41      	ldr	r3, [pc, #260]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009b30:	2104      	movs	r1, #4
 8009b32:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 8009b34:	8afb      	ldrh	r3, [r7, #22]
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	82fa      	strh	r2, [r7, #22]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	4b3d      	ldr	r3, [pc, #244]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009b3e:	2101      	movs	r1, #1
 8009b40:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bAlternateSetting */
 8009b42:	8afb      	ldrh	r3, [r7, #22]
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	82fa      	strh	r2, [r7, #22]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	4b3a      	ldr	r3, [pc, #232]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bNumEndpoints */
 8009b50:	8afb      	ldrh	r3, [r7, #22]
 8009b52:	1c5a      	adds	r2, r3, #1
 8009b54:	82fa      	strh	r2, [r7, #22]
 8009b56:	461a      	mov	r2, r3
 8009b58:	4b36      	ldr	r3, [pc, #216]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 8009b5e:	8afb      	ldrh	r3, [r7, #22]
 8009b60:	1c5a      	adds	r2, r3, #1
 8009b62:	82fa      	strh	r2, [r7, #22]
 8009b64:	461a      	mov	r2, r3
 8009b66:	4b33      	ldr	r3, [pc, #204]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009b68:	2101      	movs	r1, #1
 8009b6a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 8009b6c:	8afb      	ldrh	r3, [r7, #22]
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	82fa      	strh	r2, [r7, #22]
 8009b72:	461a      	mov	r2, r3
 8009b74:	4b2f      	ldr	r3, [pc, #188]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009b76:	2102      	movs	r1, #2
 8009b78:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 8009b7a:	8afb      	ldrh	r3, [r7, #22]
 8009b7c:	1c5a      	adds	r2, r3, #1
 8009b7e:	82fa      	strh	r2, [r7, #22]
 8009b80:	461a      	mov	r2, r3
 8009b82:	4b2c      	ldr	r3, [pc, #176]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009b84:	2100      	movs	r1, #0
 8009b86:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* iInterface */   
 8009b88:	8afb      	ldrh	r3, [r7, #22]
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	82fa      	strh	r2, [r7, #22]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	4b28      	ldr	r3, [pc, #160]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009b92:	2100      	movs	r1, #0
 8009b94:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Audio Streaming Interface Descriptor */
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_INTERFACE_DESC_SIZE;           /* bLength */
 8009b96:	8afb      	ldrh	r3, [r7, #22]
 8009b98:	1c5a      	adds	r2, r3, #1
 8009b9a:	82fa      	strh	r2, [r7, #22]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	4b25      	ldr	r3, [pc, #148]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009ba0:	2107      	movs	r1, #7
 8009ba2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8009ba4:	8afb      	ldrh	r3, [r7, #22]
 8009ba6:	1c5a      	adds	r2, r3, #1
 8009ba8:	82fa      	strh	r2, [r7, #22]
 8009baa:	461a      	mov	r2, r3
 8009bac:	4b21      	ldr	r3, [pc, #132]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009bae:	2124      	movs	r1, #36	; 0x24
 8009bb0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_GENERAL;                       /* bDescriptorSubtype */
 8009bb2:	8afb      	ldrh	r3, [r7, #22]
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	82fa      	strh	r2, [r7, #22]
 8009bb8:	461a      	mov	r2, r3
 8009bba:	4b1e      	ldr	r3, [pc, #120]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalLink */
 8009bc0:	8afb      	ldrh	r3, [r7, #22]
 8009bc2:	1c5a      	adds	r2, r3, #1
 8009bc4:	82fa      	strh	r2, [r7, #22]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	4b1a      	ldr	r3, [pc, #104]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009bca:	2103      	movs	r1, #3
 8009bcc:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bDelay */
 8009bce:	8afb      	ldrh	r3, [r7, #22]
 8009bd0:	1c5a      	adds	r2, r3, #1
 8009bd2:	82fa      	strh	r2, [r7, #22]
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	4b17      	ldr	r3, [pc, #92]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009bd8:	2101      	movs	r1, #1
 8009bda:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wFormatTag AUDIO_FORMAT_PCM  0x0001*/
 8009bdc:	8afb      	ldrh	r3, [r7, #22]
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	82fa      	strh	r2, [r7, #22]
 8009be2:	461a      	mov	r2, r3
 8009be4:	4b13      	ldr	r3, [pc, #76]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009be6:	2101      	movs	r1, #1
 8009be8:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                
 8009bea:	8afb      	ldrh	r3, [r7, #22]
 8009bec:	1c5a      	adds	r2, r3, #1
 8009bee:	82fa      	strh	r2, [r7, #22]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	4b10      	ldr	r3, [pc, #64]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Audio Type I Format Interface Descriptor */                
  USBD_AUDIO_CfgDesc[index++] = 0x0B;                                          /* bLength */
 8009bf8:	8afb      	ldrh	r3, [r7, #22]
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	82fa      	strh	r2, [r7, #22]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	4b0c      	ldr	r3, [pc, #48]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009c02:	210b      	movs	r1, #11
 8009c04:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 8009c06:	8afb      	ldrh	r3, [r7, #22]
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	82fa      	strh	r2, [r7, #22]
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	4b09      	ldr	r3, [pc, #36]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009c10:	2124      	movs	r1, #36	; 0x24
 8009c12:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_FORMAT_TYPE;                   /* bDescriptorSubtype */
 8009c14:	8afb      	ldrh	r3, [r7, #22]
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	82fa      	strh	r2, [r7, #22]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	4b05      	ldr	r3, [pc, #20]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009c1e:	2102      	movs	r1, #2
 8009c20:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_FORMAT_TYPE_I;                           /* bFormatType */
 8009c22:	8afb      	ldrh	r3, [r7, #22]
 8009c24:	1c5a      	adds	r2, r3, #1
 8009c26:	82fa      	strh	r2, [r7, #22]
 8009c28:	461a      	mov	r2, r3
 8009c2a:	4b02      	ldr	r3, [pc, #8]	; (8009c34 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	5499      	strb	r1, [r3, r2]
 8009c30:	e002      	b.n	8009c38 <USBD_AUDIO_Init_Microphone_Descriptor+0x448>
 8009c32:	bf00      	nop
 8009c34:	200019f0 	.word	0x200019f0
  USBD_AUDIO_CfgDesc[index++] = Channels;                                      /* bNrChannels */
 8009c38:	8afb      	ldrh	r3, [r7, #22]
 8009c3a:	1c5a      	adds	r2, r3, #1
 8009c3c:	82fa      	strh	r2, [r7, #22]
 8009c3e:	4619      	mov	r1, r3
 8009c40:	4a7b      	ldr	r2, [pc, #492]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009c42:	79fb      	ldrb	r3, [r7, #7]
 8009c44:	5453      	strb	r3, [r2, r1]
  USBD_AUDIO_CfgDesc[index++] = 0x02;                                          /* bSubFrameSize */
 8009c46:	8afb      	ldrh	r3, [r7, #22]
 8009c48:	1c5a      	adds	r2, r3, #1
 8009c4a:	82fa      	strh	r2, [r7, #22]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4b78      	ldr	r3, [pc, #480]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009c50:	2102      	movs	r1, #2
 8009c52:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 16;                                            /* bBitResolution */
 8009c54:	8afb      	ldrh	r3, [r7, #22]
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	82fa      	strh	r2, [r7, #22]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	4b74      	ldr	r3, [pc, #464]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009c5e:	2110      	movs	r1, #16
 8009c60:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                           /* bSamFreqType */
 8009c62:	8afb      	ldrh	r3, [r7, #22]
 8009c64:	1c5a      	adds	r2, r3, #1
 8009c66:	82fa      	strh	r2, [r7, #22]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	4b71      	ldr	r3, [pc, #452]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009c6c:	2101      	movs	r1, #1
 8009c6e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency&0xff;                        /* tSamFreq 8000 = 0x1F40 */
 8009c70:	8afb      	ldrh	r3, [r7, #22]
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	82fa      	strh	r2, [r7, #22]
 8009c76:	461a      	mov	r2, r3
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	b2d9      	uxtb	r1, r3
 8009c7c:	4b6c      	ldr	r3, [pc, #432]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009c7e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = (samplingFrequency>>8)&0xff;
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	0a19      	lsrs	r1, r3, #8
 8009c84:	8afb      	ldrh	r3, [r7, #22]
 8009c86:	1c5a      	adds	r2, r3, #1
 8009c88:	82fa      	strh	r2, [r7, #22]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	b2c9      	uxtb	r1, r1
 8009c8e:	4b68      	ldr	r3, [pc, #416]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009c90:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency>>16;   
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	0c19      	lsrs	r1, r3, #16
 8009c96:	8afb      	ldrh	r3, [r7, #22]
 8009c98:	1c5a      	adds	r2, r3, #1
 8009c9a:	82fa      	strh	r2, [r7, #22]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	b2c9      	uxtb	r1, r1
 8009ca0:	4b63      	ldr	r3, [pc, #396]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009ca2:	5499      	strb	r1, [r3, r2]
  /* Endpoint 1 - Standard Descriptor */
  USBD_AUDIO_CfgDesc[index++] =  AUDIO_STANDARD_ENDPOINT_DESC_SIZE;            /* bLength */
 8009ca4:	8afb      	ldrh	r3, [r7, #22]
 8009ca6:	1c5a      	adds	r2, r3, #1
 8009ca8:	82fa      	strh	r2, [r7, #22]
 8009caa:	461a      	mov	r2, r3
 8009cac:	4b60      	ldr	r3, [pc, #384]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009cae:	2109      	movs	r1, #9
 8009cb0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bDescriptorType */
 8009cb2:	8afb      	ldrh	r3, [r7, #22]
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	82fa      	strh	r2, [r7, #22]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4b5d      	ldr	r3, [pc, #372]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009cbc:	2105      	movs	r1, #5
 8009cbe:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_IN_EP;                                   /* bEndpointAddress 1 in endpoint*/
 8009cc0:	8afb      	ldrh	r3, [r7, #22]
 8009cc2:	1c5a      	adds	r2, r3, #1
 8009cc4:	82fa      	strh	r2, [r7, #22]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	4b59      	ldr	r3, [pc, #356]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009cca:	2181      	movs	r1, #129	; 0x81
 8009ccc:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bmAttributes */
 8009cce:	8afb      	ldrh	r3, [r7, #22]
 8009cd0:	1c5a      	adds	r2, r3, #1
 8009cd2:	82fa      	strh	r2, [r7, #22]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	4b56      	ldr	r3, [pc, #344]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009cd8:	2105      	movs	r1, #5
 8009cda:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)&0xFF;  /* wMaxPacketSize */ 
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	4a55      	ldr	r2, [pc, #340]	; (8009e34 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce4:	099b      	lsrs	r3, r3, #6
 8009ce6:	3302      	adds	r3, #2
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	79fa      	ldrb	r2, [r7, #7]
 8009cec:	fb12 f303 	smulbb	r3, r2, r3
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	8afb      	ldrh	r3, [r7, #22]
 8009cf4:	1c59      	adds	r1, r3, #1
 8009cf6:	82f9      	strh	r1, [r7, #22]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	0053      	lsls	r3, r2, #1
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	4b4c      	ldr	r3, [pc, #304]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009d00:	545a      	strb	r2, [r3, r1]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)>>8; 
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	4a4b      	ldr	r2, [pc, #300]	; (8009e34 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009d06:	fba2 2303 	umull	r2, r3, r2, r3
 8009d0a:	099b      	lsrs	r3, r3, #6
 8009d0c:	3302      	adds	r3, #2
 8009d0e:	79fa      	ldrb	r2, [r7, #7]
 8009d10:	fb02 f303 	mul.w	r3, r2, r3
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	0a19      	lsrs	r1, r3, #8
 8009d18:	8afb      	ldrh	r3, [r7, #22]
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	82fa      	strh	r2, [r7, #22]
 8009d1e:	461a      	mov	r2, r3
 8009d20:	b2c9      	uxtb	r1, r1
 8009d22:	4b43      	ldr	r3, [pc, #268]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009d24:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterval */
 8009d26:	8afb      	ldrh	r3, [r7, #22]
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	82fa      	strh	r2, [r7, #22]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	4b40      	ldr	r3, [pc, #256]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009d30:	2101      	movs	r1, #1
 8009d32:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bRefresh */
 8009d34:	8afb      	ldrh	r3, [r7, #22]
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	82fa      	strh	r2, [r7, #22]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	4b3c      	ldr	r3, [pc, #240]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009d3e:	2100      	movs	r1, #0
 8009d40:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bSynchAddress */   
 8009d42:	8afb      	ldrh	r3, [r7, #22]
 8009d44:	1c5a      	adds	r2, r3, #1
 8009d46:	82fa      	strh	r2, [r7, #22]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	4b39      	ldr	r3, [pc, #228]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	5499      	strb	r1, [r3, r2]
  /* Endpoint - Audio Streaming Descriptor*/
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_ENDPOINT_DESC_SIZE;            /* bLength */
 8009d50:	8afb      	ldrh	r3, [r7, #22]
 8009d52:	1c5a      	adds	r2, r3, #1
 8009d54:	82fa      	strh	r2, [r7, #22]
 8009d56:	461a      	mov	r2, r3
 8009d58:	4b35      	ldr	r3, [pc, #212]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009d5a:	2107      	movs	r1, #7
 8009d5c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_DESCRIPTOR_TYPE;                /* bDescriptorType */
 8009d5e:	8afb      	ldrh	r3, [r7, #22]
 8009d60:	1c5a      	adds	r2, r3, #1
 8009d62:	82fa      	strh	r2, [r7, #22]
 8009d64:	461a      	mov	r2, r3
 8009d66:	4b32      	ldr	r3, [pc, #200]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009d68:	2125      	movs	r1, #37	; 0x25
 8009d6a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_GENERAL;                        /* bDescriptor */
 8009d6c:	8afb      	ldrh	r3, [r7, #22]
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	82fa      	strh	r2, [r7, #22]
 8009d72:	461a      	mov	r2, r3
 8009d74:	4b2e      	ldr	r3, [pc, #184]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009d76:	2101      	movs	r1, #1
 8009d78:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bmAttributes */
 8009d7a:	8afb      	ldrh	r3, [r7, #22]
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	82fa      	strh	r2, [r7, #22]
 8009d80:	461a      	mov	r2, r3
 8009d82:	4b2b      	ldr	r3, [pc, #172]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009d84:	2100      	movs	r1, #0
 8009d86:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bLockDelayUnits */
 8009d88:	8afb      	ldrh	r3, [r7, #22]
 8009d8a:	1c5a      	adds	r2, r3, #1
 8009d8c:	82fa      	strh	r2, [r7, #22]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	4b27      	ldr	r3, [pc, #156]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009d92:	2100      	movs	r1, #0
 8009d94:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* wLockDelay */
 8009d96:	8afb      	ldrh	r3, [r7, #22]
 8009d98:	1c5a      	adds	r2, r3, #1
 8009d9a:	82fa      	strh	r2, [r7, #22]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	4b24      	ldr	r3, [pc, #144]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009da0:	2100      	movs	r1, #0
 8009da2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;    
 8009da4:	8afb      	ldrh	r3, [r7, #22]
 8009da6:	1c5a      	adds	r2, r3, #1
 8009da8:	82fa      	strh	r2, [r7, #22]
 8009daa:	461a      	mov	r2, r3
 8009dac:	4b20      	ldr	r3, [pc, #128]	; (8009e30 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 8009dae:	2100      	movs	r1, #0
 8009db0:	5499      	strb	r1, [r3, r2]
    
  haudioInstance.paketDimension = (samplingFrequency/1000*Channels*2);
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	4a1f      	ldr	r2, [pc, #124]	; (8009e34 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 8009db6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dba:	099b      	lsrs	r3, r3, #6
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	79fb      	ldrb	r3, [r7, #7]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	fb12 f303 	smulbb	r3, r2, r3
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	005b      	lsls	r3, r3, #1
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	4b1a      	ldr	r3, [pc, #104]	; (8009e38 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 8009dce:	825a      	strh	r2, [r3, #18]
  haudioInstance.frequency=samplingFrequency;
 8009dd0:	4a19      	ldr	r2, [pc, #100]	; (8009e38 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	6093      	str	r3, [r2, #8]
  haudioInstance.buffer_length = haudioInstance.paketDimension * AUDIO_IN_PACKET_NUM;
 8009dd6:	4b18      	ldr	r3, [pc, #96]	; (8009e38 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 8009dd8:	8a5b      	ldrh	r3, [r3, #18]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	0052      	lsls	r2, r2, #1
 8009dde:	4413      	add	r3, r2
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	4b14      	ldr	r3, [pc, #80]	; (8009e38 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 8009de6:	81da      	strh	r2, [r3, #14]
  haudioInstance.channels=Channels;  
 8009de8:	4a13      	ldr	r2, [pc, #76]	; (8009e38 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	7113      	strb	r3, [r2, #4]
  haudioInstance.upper_treshold = 5;
 8009dee:	4b12      	ldr	r3, [pc, #72]	; (8009e38 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 8009df0:	2205      	movs	r2, #5
 8009df2:	769a      	strb	r2, [r3, #26]
  haudioInstance.lower_treshold = 2;
 8009df4:	4b10      	ldr	r3, [pc, #64]	; (8009e38 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 8009df6:	2202      	movs	r2, #2
 8009df8:	76da      	strb	r2, [r3, #27]
  haudioInstance.state = STATE_USB_WAITING_FOR_INIT;
 8009dfa:	4b0f      	ldr	r3, [pc, #60]	; (8009e38 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	751a      	strb	r2, [r3, #20]
  haudioInstance.wr_ptr = 3 * haudioInstance.paketDimension;
 8009e00:	4b0d      	ldr	r3, [pc, #52]	; (8009e38 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 8009e02:	8a5b      	ldrh	r3, [r3, #18]
 8009e04:	461a      	mov	r2, r3
 8009e06:	0052      	lsls	r2, r2, #1
 8009e08:	4413      	add	r3, r2
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	4b0a      	ldr	r3, [pc, #40]	; (8009e38 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 8009e0e:	831a      	strh	r2, [r3, #24]
  haudioInstance.rd_ptr = 0;  
 8009e10:	4b09      	ldr	r3, [pc, #36]	; (8009e38 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	82da      	strh	r2, [r3, #22]
  haudioInstance.dataAmount=0;
 8009e16:	4b08      	ldr	r3, [pc, #32]	; (8009e38 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	821a      	strh	r2, [r3, #16]
  haudioInstance.buffer = 0;
 8009e1c:	4b06      	ldr	r3, [pc, #24]	; (8009e38 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009e22:	bf00      	nop
 8009e24:	371c      	adds	r7, #28
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	200019f0 	.word	0x200019f0
 8009e34:	10624dd3 	.word	0x10624dd3
 8009e38:	2000198c 	.word	0x2000198c

08009e3c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	4613      	mov	r3, r2
 8009e48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e025      	b.n	8009ea0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d003      	beq.n	8009e78 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	79fa      	ldrb	r2, [r7, #7]
 8009e92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f002 f9c1 	bl	800c21c <USBD_LL_Init>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e010      	b.n	8009ee2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed0:	f107 020e 	add.w	r2, r7, #14
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	4798      	blx	r3
 8009ed8:	4602      	mov	r2, r0
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b082      	sub	sp, #8
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f002 f9da 	bl	800c2ac <USBD_LL_Start>
 8009ef8:	4603      	mov	r3, r0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b083      	sub	sp, #12
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009f24:	2303      	movs	r3, #3
 8009f26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d009      	beq.n	8009f46 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	78fa      	ldrb	r2, [r7, #3]
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	4798      	blx	r3
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d007      	beq.n	8009f76 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	78fa      	ldrb	r2, [r7, #3]
 8009f70:	4611      	mov	r1, r2
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	4798      	blx	r3
  }

  return USBD_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 ff2c 	bl	800adf0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009fb4:	f003 031f 	and.w	r3, r3, #31
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d00e      	beq.n	8009fda <USBD_LL_SetupStage+0x5a>
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d302      	bcc.n	8009fc6 <USBD_LL_SetupStage+0x46>
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d014      	beq.n	8009fee <USBD_LL_SetupStage+0x6e>
 8009fc4:	e01d      	b.n	800a002 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fa18 	bl	800a404 <USBD_StdDevReq>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8009fd8:	e020      	b.n	800a01c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fa7c 	bl	800a4e0 <USBD_StdItfReq>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73fb      	strb	r3, [r7, #15]
      break;
 8009fec:	e016      	b.n	800a01c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fab8 	bl	800a56c <USBD_StdEPReq>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	73fb      	strb	r3, [r7, #15]
      break;
 800a000:	e00c      	b.n	800a01c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a008:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f002 f99a 	bl	800c34a <USBD_LL_StallEP>
 800a016:	4603      	mov	r3, r0
 800a018:	73fb      	strb	r3, [r7, #15]
      break;
 800a01a:	bf00      	nop
  }

  return ret;
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	60f8      	str	r0, [r7, #12]
 800a02e:	460b      	mov	r3, r1
 800a030:	607a      	str	r2, [r7, #4]
 800a032:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a034:	7afb      	ldrb	r3, [r7, #11]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d137      	bne.n	800a0aa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a040:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a048:	2b03      	cmp	r3, #3
 800a04a:	d14a      	bne.n	800a0e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	689a      	ldr	r2, [r3, #8]
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	429a      	cmp	r2, r3
 800a056:	d913      	bls.n	800a080 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	689a      	ldr	r2, [r3, #8]
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	1ad2      	subs	r2, r2, r3
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	68da      	ldr	r2, [r3, #12]
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	4293      	cmp	r3, r2
 800a070:	bf28      	it	cs
 800a072:	4613      	movcs	r3, r2
 800a074:	461a      	mov	r2, r3
 800a076:	6879      	ldr	r1, [r7, #4]
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 ffad 	bl	800afd8 <USBD_CtlContinueRx>
 800a07e:	e030      	b.n	800a0e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00a      	beq.n	800a0a2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a092:	2b03      	cmp	r3, #3
 800a094:	d105      	bne.n	800a0a2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f000 ffa9 	bl	800affa <USBD_CtlSendStatus>
 800a0a8:	e01b      	b.n	800a0e2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d013      	beq.n	800a0de <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	d10e      	bne.n	800a0de <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	7afa      	ldrb	r2, [r7, #11]
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	4798      	blx	r3
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a0da:	7dfb      	ldrb	r3, [r7, #23]
 800a0dc:	e002      	b.n	800a0e4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e000      	b.n	800a0e4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3718      	adds	r7, #24
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	607a      	str	r2, [r7, #4]
 800a0f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a0fa:	7afb      	ldrb	r3, [r7, #11]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d16a      	bne.n	800a1d6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3314      	adds	r3, #20
 800a104:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d155      	bne.n	800a1bc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	689a      	ldr	r2, [r3, #8]
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d914      	bls.n	800a146 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	689a      	ldr	r2, [r3, #8]
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	1ad2      	subs	r2, r2, r3
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	461a      	mov	r2, r3
 800a130:	6879      	ldr	r1, [r7, #4]
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f000 ff22 	bl	800af7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a138:	2300      	movs	r3, #0
 800a13a:	2200      	movs	r2, #0
 800a13c:	2100      	movs	r1, #0
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f002 f97d 	bl	800c43e <USBD_LL_PrepareReceive>
 800a144:	e03a      	b.n	800a1bc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	68da      	ldr	r2, [r3, #12]
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d11c      	bne.n	800a18c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d316      	bcc.n	800a18c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a168:	429a      	cmp	r2, r3
 800a16a:	d20f      	bcs.n	800a18c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a16c:	2200      	movs	r2, #0
 800a16e:	2100      	movs	r1, #0
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f000 ff03 	bl	800af7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a17e:	2300      	movs	r3, #0
 800a180:	2200      	movs	r2, #0
 800a182:	2100      	movs	r1, #0
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f002 f95a 	bl	800c43e <USBD_LL_PrepareReceive>
 800a18a:	e017      	b.n	800a1bc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00a      	beq.n	800a1ae <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a19e:	2b03      	cmp	r3, #3
 800a1a0:	d105      	bne.n	800a1ae <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1ae:	2180      	movs	r1, #128	; 0x80
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f002 f8ca 	bl	800c34a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 ff32 	bl	800b020 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d123      	bne.n	800a20e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f7ff fe9b 	bl	8009f02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a1d4:	e01b      	b.n	800a20e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d013      	beq.n	800a20a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a1e8:	2b03      	cmp	r3, #3
 800a1ea:	d10e      	bne.n	800a20a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	7afa      	ldrb	r2, [r7, #11]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	4798      	blx	r3
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a200:	7dfb      	ldrb	r3, [r7, #23]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	e002      	b.n	800a210 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e000      	b.n	800a210 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a244:	2b00      	cmp	r3, #0
 800a246:	d009      	beq.n	800a25c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	6852      	ldr	r2, [r2, #4]
 800a254:	b2d2      	uxtb	r2, r2
 800a256:	4611      	mov	r1, r2
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a25c:	2340      	movs	r3, #64	; 0x40
 800a25e:	2200      	movs	r2, #0
 800a260:	2100      	movs	r1, #0
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f002 f831 	bl	800c2ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2240      	movs	r2, #64	; 0x40
 800a274:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a278:	2340      	movs	r3, #64	; 0x40
 800a27a:	2200      	movs	r2, #0
 800a27c:	2180      	movs	r1, #128	; 0x80
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f002 f823 	bl	800c2ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2240      	movs	r2, #64	; 0x40
 800a28e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b083      	sub	sp, #12
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	78fa      	ldrb	r2, [r7, #3]
 800a2aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2204      	movs	r2, #4
 800a2d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f2:	2b04      	cmp	r3, #4
 800a2f4:	d105      	bne.n	800a302 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a31e:	2b03      	cmp	r3, #3
 800a320:	d10b      	bne.n	800a33a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d005      	beq.n	800a33a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a334:	69db      	ldr	r3, [r3, #28]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3708      	adds	r7, #8
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	370c      	adds	r7, #12
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a35e:	b480      	push	{r7}
 800a360:	b083      	sub	sp, #12
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	460b      	mov	r3, r1
 800a368:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b082      	sub	sp, #8
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d009      	beq.n	800a3bc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	6852      	ldr	r2, [r2, #4]
 800a3b4:	b2d2      	uxtb	r2, r2
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	4798      	blx	r3
  }

  return USBD_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b087      	sub	sp, #28
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a3e4:	8a3b      	ldrh	r3, [r7, #16]
 800a3e6:	021b      	lsls	r3, r3, #8
 800a3e8:	b21a      	sxth	r2, r3
 800a3ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	b21b      	sxth	r3, r3
 800a3f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a3f4:	89fb      	ldrh	r3, [r7, #14]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	371c      	adds	r7, #28
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
	...

0800a404 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a41a:	2b20      	cmp	r3, #32
 800a41c:	d004      	beq.n	800a428 <USBD_StdDevReq+0x24>
 800a41e:	2b40      	cmp	r3, #64	; 0x40
 800a420:	d002      	beq.n	800a428 <USBD_StdDevReq+0x24>
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00a      	beq.n	800a43c <USBD_StdDevReq+0x38>
 800a426:	e050      	b.n	800a4ca <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	6839      	ldr	r1, [r7, #0]
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	4798      	blx	r3
 800a436:	4603      	mov	r3, r0
 800a438:	73fb      	strb	r3, [r7, #15]
    break;
 800a43a:	e04b      	b.n	800a4d4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	785b      	ldrb	r3, [r3, #1]
 800a440:	2b09      	cmp	r3, #9
 800a442:	d83c      	bhi.n	800a4be <USBD_StdDevReq+0xba>
 800a444:	a201      	add	r2, pc, #4	; (adr r2, 800a44c <USBD_StdDevReq+0x48>)
 800a446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44a:	bf00      	nop
 800a44c:	0800a4a1 	.word	0x0800a4a1
 800a450:	0800a4b5 	.word	0x0800a4b5
 800a454:	0800a4bf 	.word	0x0800a4bf
 800a458:	0800a4ab 	.word	0x0800a4ab
 800a45c:	0800a4bf 	.word	0x0800a4bf
 800a460:	0800a47f 	.word	0x0800a47f
 800a464:	0800a475 	.word	0x0800a475
 800a468:	0800a4bf 	.word	0x0800a4bf
 800a46c:	0800a497 	.word	0x0800a497
 800a470:	0800a489 	.word	0x0800a489
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 f9ce 	bl	800a818 <USBD_GetDescriptor>
      break;
 800a47c:	e024      	b.n	800a4c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fb33 	bl	800aaec <USBD_SetAddress>
      break;
 800a486:	e01f      	b.n	800a4c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fb70 	bl	800ab70 <USBD_SetConfig>
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]
      break;
 800a494:	e018      	b.n	800a4c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fc0d 	bl	800acb8 <USBD_GetConfig>
      break;
 800a49e:	e013      	b.n	800a4c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800a4a0:	6839      	ldr	r1, [r7, #0]
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fc3c 	bl	800ad20 <USBD_GetStatus>
      break;
 800a4a8:	e00e      	b.n	800a4c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 fc6a 	bl	800ad86 <USBD_SetFeature>
      break;
 800a4b2:	e009      	b.n	800a4c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 fc79 	bl	800adae <USBD_ClrFeature>
      break;
 800a4bc:	e004      	b.n	800a4c8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800a4be:	6839      	ldr	r1, [r7, #0]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 fccf 	bl	800ae64 <USBD_CtlError>
      break;
 800a4c6:	bf00      	nop
    }
    break;
 800a4c8:	e004      	b.n	800a4d4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fcc9 	bl	800ae64 <USBD_CtlError>
    break;
 800a4d2:	bf00      	nop
  }

  return ret;
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop

0800a4e0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4f6:	2b20      	cmp	r3, #32
 800a4f8:	d003      	beq.n	800a502 <USBD_StdItfReq+0x22>
 800a4fa:	2b40      	cmp	r3, #64	; 0x40
 800a4fc:	d001      	beq.n	800a502 <USBD_StdItfReq+0x22>
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d12a      	bne.n	800a558 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a508:	3b01      	subs	r3, #1
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d81d      	bhi.n	800a54a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	889b      	ldrh	r3, [r3, #4]
 800a512:	b2db      	uxtb	r3, r3
 800a514:	2b02      	cmp	r3, #2
 800a516:	d813      	bhi.n	800a540 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	4798      	blx	r3
 800a526:	4603      	mov	r3, r0
 800a528:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	88db      	ldrh	r3, [r3, #6]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d110      	bne.n	800a554 <USBD_StdItfReq+0x74>
 800a532:	7bfb      	ldrb	r3, [r7, #15]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10d      	bne.n	800a554 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fd5e 	bl	800affa <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a53e:	e009      	b.n	800a554 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fc8e 	bl	800ae64 <USBD_CtlError>
      break;
 800a548:	e004      	b.n	800a554 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fc89 	bl	800ae64 <USBD_CtlError>
      break;
 800a552:	e000      	b.n	800a556 <USBD_StdItfReq+0x76>
      break;
 800a554:	bf00      	nop
    }
    break;
 800a556:	e004      	b.n	800a562 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fc82 	bl	800ae64 <USBD_CtlError>
    break;
 800a560:	bf00      	nop
  }

  return ret;
 800a562:	7bfb      	ldrb	r3, [r7, #15]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a576:	2300      	movs	r3, #0
 800a578:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	889b      	ldrh	r3, [r3, #4]
 800a57e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a588:	2b20      	cmp	r3, #32
 800a58a:	d004      	beq.n	800a596 <USBD_StdEPReq+0x2a>
 800a58c:	2b40      	cmp	r3, #64	; 0x40
 800a58e:	d002      	beq.n	800a596 <USBD_StdEPReq+0x2a>
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00a      	beq.n	800a5aa <USBD_StdEPReq+0x3e>
 800a594:	e135      	b.n	800a802 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	4798      	blx	r3
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a8:	e130      	b.n	800a80c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	785b      	ldrb	r3, [r3, #1]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d03e      	beq.n	800a630 <USBD_StdEPReq+0xc4>
 800a5b2:	2b03      	cmp	r3, #3
 800a5b4:	d002      	beq.n	800a5bc <USBD_StdEPReq+0x50>
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d077      	beq.n	800a6aa <USBD_StdEPReq+0x13e>
 800a5ba:	e11c      	b.n	800a7f6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d002      	beq.n	800a5cc <USBD_StdEPReq+0x60>
 800a5c6:	2b03      	cmp	r3, #3
 800a5c8:	d015      	beq.n	800a5f6 <USBD_StdEPReq+0x8a>
 800a5ca:	e02b      	b.n	800a624 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5cc:	7bbb      	ldrb	r3, [r7, #14]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00c      	beq.n	800a5ec <USBD_StdEPReq+0x80>
 800a5d2:	7bbb      	ldrb	r3, [r7, #14]
 800a5d4:	2b80      	cmp	r3, #128	; 0x80
 800a5d6:	d009      	beq.n	800a5ec <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5d8:	7bbb      	ldrb	r3, [r7, #14]
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f001 feb4 	bl	800c34a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5e2:	2180      	movs	r1, #128	; 0x80
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f001 feb0 	bl	800c34a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a5ea:	e020      	b.n	800a62e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800a5ec:	6839      	ldr	r1, [r7, #0]
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fc38 	bl	800ae64 <USBD_CtlError>
        break;
 800a5f4:	e01b      	b.n	800a62e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	885b      	ldrh	r3, [r3, #2]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10e      	bne.n	800a61c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a5fe:	7bbb      	ldrb	r3, [r7, #14]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00b      	beq.n	800a61c <USBD_StdEPReq+0xb0>
 800a604:	7bbb      	ldrb	r3, [r7, #14]
 800a606:	2b80      	cmp	r3, #128	; 0x80
 800a608:	d008      	beq.n	800a61c <USBD_StdEPReq+0xb0>
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	88db      	ldrh	r3, [r3, #6]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d104      	bne.n	800a61c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800a612:	7bbb      	ldrb	r3, [r7, #14]
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f001 fe97 	bl	800c34a <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fcec 	bl	800affa <USBD_CtlSendStatus>

        break;
 800a622:	e004      	b.n	800a62e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fc1c 	bl	800ae64 <USBD_CtlError>
        break;
 800a62c:	bf00      	nop
      }
      break;
 800a62e:	e0e7      	b.n	800a800 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a636:	2b02      	cmp	r3, #2
 800a638:	d002      	beq.n	800a640 <USBD_StdEPReq+0xd4>
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	d015      	beq.n	800a66a <USBD_StdEPReq+0xfe>
 800a63e:	e02d      	b.n	800a69c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a640:	7bbb      	ldrb	r3, [r7, #14]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00c      	beq.n	800a660 <USBD_StdEPReq+0xf4>
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	2b80      	cmp	r3, #128	; 0x80
 800a64a:	d009      	beq.n	800a660 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a64c:	7bbb      	ldrb	r3, [r7, #14]
 800a64e:	4619      	mov	r1, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f001 fe7a 	bl	800c34a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a656:	2180      	movs	r1, #128	; 0x80
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f001 fe76 	bl	800c34a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a65e:	e023      	b.n	800a6a8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fbfe 	bl	800ae64 <USBD_CtlError>
        break;
 800a668:	e01e      	b.n	800a6a8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	885b      	ldrh	r3, [r3, #2]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d119      	bne.n	800a6a6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a672:	7bbb      	ldrb	r3, [r7, #14]
 800a674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d004      	beq.n	800a686 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 fe75 	bl	800c370 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fcb7 	bl	800affa <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	4798      	blx	r3
        }
        break;
 800a69a:	e004      	b.n	800a6a6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fbe0 	bl	800ae64 <USBD_CtlError>
        break;
 800a6a4:	e000      	b.n	800a6a8 <USBD_StdEPReq+0x13c>
        break;
 800a6a6:	bf00      	nop
      }
      break;
 800a6a8:	e0aa      	b.n	800a800 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d002      	beq.n	800a6ba <USBD_StdEPReq+0x14e>
 800a6b4:	2b03      	cmp	r3, #3
 800a6b6:	d032      	beq.n	800a71e <USBD_StdEPReq+0x1b2>
 800a6b8:	e097      	b.n	800a7ea <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6ba:	7bbb      	ldrb	r3, [r7, #14]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d007      	beq.n	800a6d0 <USBD_StdEPReq+0x164>
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	2b80      	cmp	r3, #128	; 0x80
 800a6c4:	d004      	beq.n	800a6d0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800a6c6:	6839      	ldr	r1, [r7, #0]
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fbcb 	bl	800ae64 <USBD_CtlError>
          break;
 800a6ce:	e091      	b.n	800a7f4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	da0b      	bge.n	800a6f0 <USBD_StdEPReq+0x184>
 800a6d8:	7bbb      	ldrb	r3, [r7, #14]
 800a6da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6de:	4613      	mov	r3, r2
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	3310      	adds	r3, #16
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	3304      	adds	r3, #4
 800a6ee:	e00b      	b.n	800a708 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a6f0:	7bbb      	ldrb	r3, [r7, #14]
 800a6f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	4413      	add	r3, r2
 800a706:	3304      	adds	r3, #4
 800a708:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2202      	movs	r2, #2
 800a714:	4619      	mov	r1, r3
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 fc15 	bl	800af46 <USBD_CtlSendData>
        break;
 800a71c:	e06a      	b.n	800a7f4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800a71e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a722:	2b00      	cmp	r3, #0
 800a724:	da11      	bge.n	800a74a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a726:	7bbb      	ldrb	r3, [r7, #14]
 800a728:	f003 020f 	and.w	r2, r3, #15
 800a72c:	6879      	ldr	r1, [r7, #4]
 800a72e:	4613      	mov	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	440b      	add	r3, r1
 800a738:	3324      	adds	r3, #36	; 0x24
 800a73a:	881b      	ldrh	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d117      	bne.n	800a770 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fb8e 	bl	800ae64 <USBD_CtlError>
            break;
 800a748:	e054      	b.n	800a7f4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	f003 020f 	and.w	r2, r3, #15
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	4613      	mov	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	440b      	add	r3, r1
 800a75c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a760:	881b      	ldrh	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d104      	bne.n	800a770 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a766:	6839      	ldr	r1, [r7, #0]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fb7b 	bl	800ae64 <USBD_CtlError>
            break;
 800a76e:	e041      	b.n	800a7f4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a774:	2b00      	cmp	r3, #0
 800a776:	da0b      	bge.n	800a790 <USBD_StdEPReq+0x224>
 800a778:	7bbb      	ldrb	r3, [r7, #14]
 800a77a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a77e:	4613      	mov	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4413      	add	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	3310      	adds	r3, #16
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	4413      	add	r3, r2
 800a78c:	3304      	adds	r3, #4
 800a78e:	e00b      	b.n	800a7a8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a796:	4613      	mov	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	4413      	add	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a7aa:	7bbb      	ldrb	r3, [r7, #14]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <USBD_StdEPReq+0x24a>
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	2b80      	cmp	r3, #128	; 0x80
 800a7b4:	d103      	bne.n	800a7be <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	601a      	str	r2, [r3, #0]
 800a7bc:	e00e      	b.n	800a7dc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f001 fde7 	bl	800c396 <USBD_LL_IsStallEP>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	e002      	b.n	800a7dc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	2202      	movs	r2, #2
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fbaf 	bl	800af46 <USBD_CtlSendData>
          break;
 800a7e8:	e004      	b.n	800a7f4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fb39 	bl	800ae64 <USBD_CtlError>
        break;
 800a7f2:	bf00      	nop
      }
      break;
 800a7f4:	e004      	b.n	800a800 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800a7f6:	6839      	ldr	r1, [r7, #0]
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 fb33 	bl	800ae64 <USBD_CtlError>
      break;
 800a7fe:	bf00      	nop
    }
    break;
 800a800:	e004      	b.n	800a80c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800a802:	6839      	ldr	r1, [r7, #0]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fb2d 	bl	800ae64 <USBD_CtlError>
    break;
 800a80a:	bf00      	nop
  }

  return ret;
 800a80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
	...

0800a818 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a826:	2300      	movs	r3, #0
 800a828:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a82a:	2300      	movs	r3, #0
 800a82c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	885b      	ldrh	r3, [r3, #2]
 800a832:	0a1b      	lsrs	r3, r3, #8
 800a834:	b29b      	uxth	r3, r3
 800a836:	3b01      	subs	r3, #1
 800a838:	2b06      	cmp	r3, #6
 800a83a:	f200 8128 	bhi.w	800aa8e <USBD_GetDescriptor+0x276>
 800a83e:	a201      	add	r2, pc, #4	; (adr r2, 800a844 <USBD_GetDescriptor+0x2c>)
 800a840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a844:	0800a861 	.word	0x0800a861
 800a848:	0800a879 	.word	0x0800a879
 800a84c:	0800a8b9 	.word	0x0800a8b9
 800a850:	0800aa8f 	.word	0x0800aa8f
 800a854:	0800aa8f 	.word	0x0800aa8f
 800a858:	0800aa2f 	.word	0x0800aa2f
 800a85c:	0800aa5b 	.word	0x0800aa5b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	7c12      	ldrb	r2, [r2, #16]
 800a86c:	f107 0108 	add.w	r1, r7, #8
 800a870:	4610      	mov	r0, r2
 800a872:	4798      	blx	r3
 800a874:	60f8      	str	r0, [r7, #12]
    break;
 800a876:	e112      	b.n	800aa9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	7c1b      	ldrb	r3, [r3, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10d      	bne.n	800a89c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a888:	f107 0208 	add.w	r2, r7, #8
 800a88c:	4610      	mov	r0, r2
 800a88e:	4798      	blx	r3
 800a890:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3301      	adds	r3, #1
 800a896:	2202      	movs	r2, #2
 800a898:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a89a:	e100      	b.n	800aa9e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a4:	f107 0208 	add.w	r2, r7, #8
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	4798      	blx	r3
 800a8ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	701a      	strb	r2, [r3, #0]
    break;
 800a8b6:	e0f2      	b.n	800aa9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	885b      	ldrh	r3, [r3, #2]
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	2b05      	cmp	r3, #5
 800a8c0:	f200 80ac 	bhi.w	800aa1c <USBD_GetDescriptor+0x204>
 800a8c4:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <USBD_GetDescriptor+0xb4>)
 800a8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ca:	bf00      	nop
 800a8cc:	0800a8e5 	.word	0x0800a8e5
 800a8d0:	0800a919 	.word	0x0800a919
 800a8d4:	0800a94d 	.word	0x0800a94d
 800a8d8:	0800a981 	.word	0x0800a981
 800a8dc:	0800a9b5 	.word	0x0800a9b5
 800a8e0:	0800a9e9 	.word	0x0800a9e9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00b      	beq.n	800a908 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	7c12      	ldrb	r2, [r2, #16]
 800a8fc:	f107 0108 	add.w	r1, r7, #8
 800a900:	4610      	mov	r0, r2
 800a902:	4798      	blx	r3
 800a904:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a906:	e091      	b.n	800aa2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a908:	6839      	ldr	r1, [r7, #0]
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 faaa 	bl	800ae64 <USBD_CtlError>
        err++;
 800a910:	7afb      	ldrb	r3, [r7, #11]
 800a912:	3301      	adds	r3, #1
 800a914:	72fb      	strb	r3, [r7, #11]
      break;
 800a916:	e089      	b.n	800aa2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00b      	beq.n	800a93c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	7c12      	ldrb	r2, [r2, #16]
 800a930:	f107 0108 	add.w	r1, r7, #8
 800a934:	4610      	mov	r0, r2
 800a936:	4798      	blx	r3
 800a938:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a93a:	e077      	b.n	800aa2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fa90 	bl	800ae64 <USBD_CtlError>
        err++;
 800a944:	7afb      	ldrb	r3, [r7, #11]
 800a946:	3301      	adds	r3, #1
 800a948:	72fb      	strb	r3, [r7, #11]
      break;
 800a94a:	e06f      	b.n	800aa2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00b      	beq.n	800a970 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	7c12      	ldrb	r2, [r2, #16]
 800a964:	f107 0108 	add.w	r1, r7, #8
 800a968:	4610      	mov	r0, r2
 800a96a:	4798      	blx	r3
 800a96c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a96e:	e05d      	b.n	800aa2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a970:	6839      	ldr	r1, [r7, #0]
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fa76 	bl	800ae64 <USBD_CtlError>
        err++;
 800a978:	7afb      	ldrb	r3, [r7, #11]
 800a97a:	3301      	adds	r3, #1
 800a97c:	72fb      	strb	r3, [r7, #11]
      break;
 800a97e:	e055      	b.n	800aa2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00b      	beq.n	800a9a4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	7c12      	ldrb	r2, [r2, #16]
 800a998:	f107 0108 	add.w	r1, r7, #8
 800a99c:	4610      	mov	r0, r2
 800a99e:	4798      	blx	r3
 800a9a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9a2:	e043      	b.n	800aa2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a9a4:	6839      	ldr	r1, [r7, #0]
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fa5c 	bl	800ae64 <USBD_CtlError>
        err++;
 800a9ac:	7afb      	ldrb	r3, [r7, #11]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	72fb      	strb	r3, [r7, #11]
      break;
 800a9b2:	e03b      	b.n	800aa2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00b      	beq.n	800a9d8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	7c12      	ldrb	r2, [r2, #16]
 800a9cc:	f107 0108 	add.w	r1, r7, #8
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	4798      	blx	r3
 800a9d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9d6:	e029      	b.n	800aa2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fa42 	bl	800ae64 <USBD_CtlError>
        err++;
 800a9e0:	7afb      	ldrb	r3, [r7, #11]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	72fb      	strb	r3, [r7, #11]
      break;
 800a9e6:	e021      	b.n	800aa2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00b      	beq.n	800aa0c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9fa:	699b      	ldr	r3, [r3, #24]
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	7c12      	ldrb	r2, [r2, #16]
 800aa00:	f107 0108 	add.w	r1, r7, #8
 800aa04:	4610      	mov	r0, r2
 800aa06:	4798      	blx	r3
 800aa08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa0a:	e00f      	b.n	800aa2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fa28 	bl	800ae64 <USBD_CtlError>
        err++;
 800aa14:	7afb      	ldrb	r3, [r7, #11]
 800aa16:	3301      	adds	r3, #1
 800aa18:	72fb      	strb	r3, [r7, #11]
      break;
 800aa1a:	e007      	b.n	800aa2c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fa20 	bl	800ae64 <USBD_CtlError>
      err++;
 800aa24:	7afb      	ldrb	r3, [r7, #11]
 800aa26:	3301      	adds	r3, #1
 800aa28:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800aa2a:	bf00      	nop
    }
    break;
 800aa2c:	e037      	b.n	800aa9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	7c1b      	ldrb	r3, [r3, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d109      	bne.n	800aa4a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3e:	f107 0208 	add.w	r2, r7, #8
 800aa42:	4610      	mov	r0, r2
 800aa44:	4798      	blx	r3
 800aa46:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800aa48:	e029      	b.n	800aa9e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fa09 	bl	800ae64 <USBD_CtlError>
      err++;
 800aa52:	7afb      	ldrb	r3, [r7, #11]
 800aa54:	3301      	adds	r3, #1
 800aa56:	72fb      	strb	r3, [r7, #11]
    break;
 800aa58:	e021      	b.n	800aa9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	7c1b      	ldrb	r3, [r3, #16]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10d      	bne.n	800aa7e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6a:	f107 0208 	add.w	r2, r7, #8
 800aa6e:	4610      	mov	r0, r2
 800aa70:	4798      	blx	r3
 800aa72:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	3301      	adds	r3, #1
 800aa78:	2207      	movs	r2, #7
 800aa7a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800aa7c:	e00f      	b.n	800aa9e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800aa7e:	6839      	ldr	r1, [r7, #0]
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 f9ef 	bl	800ae64 <USBD_CtlError>
      err++;
 800aa86:	7afb      	ldrb	r3, [r7, #11]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	72fb      	strb	r3, [r7, #11]
    break;
 800aa8c:	e007      	b.n	800aa9e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800aa8e:	6839      	ldr	r1, [r7, #0]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 f9e7 	bl	800ae64 <USBD_CtlError>
    err++;
 800aa96:	7afb      	ldrb	r3, [r7, #11]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	72fb      	strb	r3, [r7, #11]
    break;
 800aa9c:	bf00      	nop
  }

  if (err != 0U)
 800aa9e:	7afb      	ldrb	r3, [r7, #11]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d11e      	bne.n	800aae2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	88db      	ldrh	r3, [r3, #6]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d016      	beq.n	800aada <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800aaac:	893b      	ldrh	r3, [r7, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00e      	beq.n	800aad0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	88da      	ldrh	r2, [r3, #6]
 800aab6:	893b      	ldrh	r3, [r7, #8]
 800aab8:	4293      	cmp	r3, r2
 800aaba:	bf28      	it	cs
 800aabc:	4613      	movcs	r3, r2
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800aac2:	893b      	ldrh	r3, [r7, #8]
 800aac4:	461a      	mov	r2, r3
 800aac6:	68f9      	ldr	r1, [r7, #12]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fa3c 	bl	800af46 <USBD_CtlSendData>
 800aace:	e009      	b.n	800aae4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 f9c6 	bl	800ae64 <USBD_CtlError>
 800aad8:	e004      	b.n	800aae4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fa8d 	bl	800affa <USBD_CtlSendStatus>
 800aae0:	e000      	b.n	800aae4 <USBD_GetDescriptor+0x2cc>
    return;
 800aae2:	bf00      	nop
    }
  }
}
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop

0800aaec <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	889b      	ldrh	r3, [r3, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d130      	bne.n	800ab60 <USBD_SetAddress+0x74>
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	88db      	ldrh	r3, [r3, #6]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d12c      	bne.n	800ab60 <USBD_SetAddress+0x74>
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	885b      	ldrh	r3, [r3, #2]
 800ab0a:	2b7f      	cmp	r3, #127	; 0x7f
 800ab0c:	d828      	bhi.n	800ab60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	885b      	ldrh	r3, [r3, #2]
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d104      	bne.n	800ab2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f99c 	bl	800ae64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab2c:	e01c      	b.n	800ab68 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	7bfa      	ldrb	r2, [r7, #15]
 800ab32:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
 800ab38:	4619      	mov	r1, r3
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f001 fc57 	bl	800c3ee <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fa5a 	bl	800affa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d004      	beq.n	800ab56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2202      	movs	r2, #2
 800ab50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab54:	e008      	b.n	800ab68 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab5e:	e003      	b.n	800ab68 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f97e 	bl	800ae64 <USBD_CtlError>
  }
}
 800ab68:	bf00      	nop
 800ab6a:	3710      	adds	r7, #16
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	885b      	ldrh	r3, [r3, #2]
 800ab82:	b2da      	uxtb	r2, r3
 800ab84:	4b4b      	ldr	r3, [pc, #300]	; (800acb4 <USBD_SetConfig+0x144>)
 800ab86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab88:	4b4a      	ldr	r3, [pc, #296]	; (800acb4 <USBD_SetConfig+0x144>)
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d905      	bls.n	800ab9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ab90:	6839      	ldr	r1, [r7, #0]
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f966 	bl	800ae64 <USBD_CtlError>
    return USBD_FAIL;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e087      	b.n	800acac <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d002      	beq.n	800abac <USBD_SetConfig+0x3c>
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	d025      	beq.n	800abf6 <USBD_SetConfig+0x86>
 800abaa:	e071      	b.n	800ac90 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800abac:	4b41      	ldr	r3, [pc, #260]	; (800acb4 <USBD_SetConfig+0x144>)
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d01c      	beq.n	800abee <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800abb4:	4b3f      	ldr	r3, [pc, #252]	; (800acb4 <USBD_SetConfig+0x144>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	461a      	mov	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800abbe:	4b3d      	ldr	r3, [pc, #244]	; (800acb4 <USBD_SetConfig+0x144>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	4619      	mov	r1, r3
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f7ff f9a7 	bl	8009f18 <USBD_SetClassConfig>
 800abca:	4603      	mov	r3, r0
 800abcc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800abce:	7bfb      	ldrb	r3, [r7, #15]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d004      	beq.n	800abde <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800abd4:	6839      	ldr	r1, [r7, #0]
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f944 	bl	800ae64 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800abdc:	e065      	b.n	800acaa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fa0b 	bl	800affa <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2203      	movs	r2, #3
 800abe8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800abec:	e05d      	b.n	800acaa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fa03 	bl	800affa <USBD_CtlSendStatus>
    break;
 800abf4:	e059      	b.n	800acaa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800abf6:	4b2f      	ldr	r3, [pc, #188]	; (800acb4 <USBD_SetConfig+0x144>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d112      	bne.n	800ac24 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2202      	movs	r2, #2
 800ac02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800ac06:	4b2b      	ldr	r3, [pc, #172]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac10:	4b28      	ldr	r3, [pc, #160]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	4619      	mov	r1, r3
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7ff f99a 	bl	8009f50 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f9ec 	bl	800affa <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ac22:	e042      	b.n	800acaa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800ac24:	4b23      	ldr	r3, [pc, #140]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d02a      	beq.n	800ac88 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	4619      	mov	r1, r3
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7ff f988 	bl	8009f50 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ac40:	4b1c      	ldr	r3, [pc, #112]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	461a      	mov	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac4a:	4b1a      	ldr	r3, [pc, #104]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff f961 	bl	8009f18 <USBD_SetClassConfig>
 800ac56:	4603      	mov	r3, r0
 800ac58:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00f      	beq.n	800ac80 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f8fe 	bl	800ae64 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7ff f96d 	bl	8009f50 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2202      	movs	r2, #2
 800ac7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ac7e:	e014      	b.n	800acaa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 f9ba 	bl	800affa <USBD_CtlSendStatus>
    break;
 800ac86:	e010      	b.n	800acaa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 f9b6 	bl	800affa <USBD_CtlSendStatus>
    break;
 800ac8e:	e00c      	b.n	800acaa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f8e6 	bl	800ae64 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac98:	4b06      	ldr	r3, [pc, #24]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7ff f956 	bl	8009f50 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800aca4:	2303      	movs	r3, #3
 800aca6:	73fb      	strb	r3, [r7, #15]
    break;
 800aca8:	bf00      	nop
  }

  return ret;
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	20001a66 	.word	0x20001a66

0800acb8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	88db      	ldrh	r3, [r3, #6]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d004      	beq.n	800acd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f8c9 	bl	800ae64 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800acd2:	e021      	b.n	800ad18 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acda:	2b01      	cmp	r3, #1
 800acdc:	db17      	blt.n	800ad0e <USBD_GetConfig+0x56>
 800acde:	2b02      	cmp	r3, #2
 800ace0:	dd02      	ble.n	800ace8 <USBD_GetConfig+0x30>
 800ace2:	2b03      	cmp	r3, #3
 800ace4:	d00b      	beq.n	800acfe <USBD_GetConfig+0x46>
 800ace6:	e012      	b.n	800ad0e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	3308      	adds	r3, #8
 800acf2:	2201      	movs	r2, #1
 800acf4:	4619      	mov	r1, r3
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f925 	bl	800af46 <USBD_CtlSendData>
      break;
 800acfc:	e00c      	b.n	800ad18 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	3304      	adds	r3, #4
 800ad02:	2201      	movs	r2, #1
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f91d 	bl	800af46 <USBD_CtlSendData>
      break;
 800ad0c:	e004      	b.n	800ad18 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f8a7 	bl	800ae64 <USBD_CtlError>
      break;
 800ad16:	bf00      	nop
}
 800ad18:	bf00      	nop
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad30:	3b01      	subs	r3, #1
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d81e      	bhi.n	800ad74 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	88db      	ldrh	r3, [r3, #6]
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d004      	beq.n	800ad48 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800ad3e:	6839      	ldr	r1, [r7, #0]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f88f 	bl	800ae64 <USBD_CtlError>
      break;
 800ad46:	e01a      	b.n	800ad7e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d005      	beq.n	800ad64 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	f043 0202 	orr.w	r2, r3, #2
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	330c      	adds	r3, #12
 800ad68:	2202      	movs	r2, #2
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f8ea 	bl	800af46 <USBD_CtlSendData>
    break;
 800ad72:	e004      	b.n	800ad7e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f874 	bl	800ae64 <USBD_CtlError>
    break;
 800ad7c:	bf00      	nop
  }
}
 800ad7e:	bf00      	nop
 800ad80:	3708      	adds	r7, #8
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b082      	sub	sp, #8
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	885b      	ldrh	r3, [r3, #2]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d106      	bne.n	800ada6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f92a 	bl	800affa <USBD_CtlSendStatus>
  }
}
 800ada6:	bf00      	nop
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b082      	sub	sp, #8
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adbe:	3b01      	subs	r3, #1
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d80b      	bhi.n	800addc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	885b      	ldrh	r3, [r3, #2]
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d10c      	bne.n	800ade6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 f910 	bl	800affa <USBD_CtlSendStatus>
      }
      break;
 800adda:	e004      	b.n	800ade6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 f840 	bl	800ae64 <USBD_CtlError>
      break;
 800ade4:	e000      	b.n	800ade8 <USBD_ClrFeature+0x3a>
      break;
 800ade6:	bf00      	nop
  }
}
 800ade8:	bf00      	nop
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	781a      	ldrb	r2, [r3, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	781a      	ldrb	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	3301      	adds	r3, #1
 800ae18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f7ff fad3 	bl	800a3c6 <SWAPBYTE>
 800ae20:	4603      	mov	r3, r0
 800ae22:	461a      	mov	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3301      	adds	r3, #1
 800ae32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f7ff fac6 	bl	800a3c6 <SWAPBYTE>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3301      	adds	r3, #1
 800ae46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff fab9 	bl	800a3c6 <SWAPBYTE>
 800ae54:	4603      	mov	r3, r0
 800ae56:	461a      	mov	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	80da      	strh	r2, [r3, #6]
}
 800ae5c:	bf00      	nop
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae6e:	2180      	movs	r1, #128	; 0x80
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f001 fa6a 	bl	800c34a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae76:	2100      	movs	r1, #0
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f001 fa66 	bl	800c34a <USBD_LL_StallEP>
}
 800ae7e:	bf00      	nop
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b086      	sub	sp, #24
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	60f8      	str	r0, [r7, #12]
 800ae8e:	60b9      	str	r1, [r7, #8]
 800ae90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ae92:	2300      	movs	r3, #0
 800ae94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d036      	beq.n	800af0a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aea0:	6938      	ldr	r0, [r7, #16]
 800aea2:	f000 f836 	bl	800af12 <USBD_GetLen>
 800aea6:	4603      	mov	r3, r0
 800aea8:	3301      	adds	r3, #1
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	005b      	lsls	r3, r3, #1
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aeb4:	7dfb      	ldrb	r3, [r7, #23]
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	4413      	add	r3, r2
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	7812      	ldrb	r2, [r2, #0]
 800aebe:	701a      	strb	r2, [r3, #0]
  idx++;
 800aec0:	7dfb      	ldrb	r3, [r7, #23]
 800aec2:	3301      	adds	r3, #1
 800aec4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aec6:	7dfb      	ldrb	r3, [r7, #23]
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	4413      	add	r3, r2
 800aecc:	2203      	movs	r2, #3
 800aece:	701a      	strb	r2, [r3, #0]
  idx++;
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
 800aed2:	3301      	adds	r3, #1
 800aed4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aed6:	e013      	b.n	800af00 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	4413      	add	r3, r2
 800aede:	693a      	ldr	r2, [r7, #16]
 800aee0:	7812      	ldrb	r2, [r2, #0]
 800aee2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	3301      	adds	r3, #1
 800aee8:	613b      	str	r3, [r7, #16]
    idx++;
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
 800aeec:	3301      	adds	r3, #1
 800aeee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aef0:	7dfb      	ldrb	r3, [r7, #23]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	4413      	add	r3, r2
 800aef6:	2200      	movs	r2, #0
 800aef8:	701a      	strb	r2, [r3, #0]
    idx++;
 800aefa:	7dfb      	ldrb	r3, [r7, #23]
 800aefc:	3301      	adds	r3, #1
 800aefe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d1e7      	bne.n	800aed8 <USBD_GetString+0x52>
 800af08:	e000      	b.n	800af0c <USBD_GetString+0x86>
    return;
 800af0a:	bf00      	nop
  }
}
 800af0c:	3718      	adds	r7, #24
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af12:	b480      	push	{r7}
 800af14:	b085      	sub	sp, #20
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af1a:	2300      	movs	r3, #0
 800af1c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800af22:	e005      	b.n	800af30 <USBD_GetLen+0x1e>
  {
    len++;
 800af24:	7bfb      	ldrb	r3, [r7, #15]
 800af26:	3301      	adds	r3, #1
 800af28:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	3301      	adds	r3, #1
 800af2e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1f5      	bne.n	800af24 <USBD_GetLen+0x12>
  }

  return len;
 800af38:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3714      	adds	r7, #20
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	60f8      	str	r0, [r7, #12]
 800af4e:	60b9      	str	r1, [r7, #8]
 800af50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2202      	movs	r2, #2
 800af56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	2100      	movs	r1, #0
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f001 fa51 	bl	800c414 <USBD_LL_Transmit>

  return USBD_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	2100      	movs	r1, #0
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f001 fa40 	bl	800c414 <USBD_LL_Transmit>

  return USBD_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	60f8      	str	r0, [r7, #12]
 800afa6:	60b9      	str	r1, [r7, #8]
 800afa8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2203      	movs	r2, #3
 800afae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	2100      	movs	r1, #0
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f001 fa38 	bl	800c43e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	68ba      	ldr	r2, [r7, #8]
 800afe8:	2100      	movs	r1, #0
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f001 fa27 	bl	800c43e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b082      	sub	sp, #8
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2204      	movs	r2, #4
 800b006:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b00a:	2300      	movs	r3, #0
 800b00c:	2200      	movs	r2, #0
 800b00e:	2100      	movs	r1, #0
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f001 f9ff 	bl	800c414 <USBD_LL_Transmit>

  return USBD_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2205      	movs	r2, #5
 800b02c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b030:	2300      	movs	r3, #0
 800b032:	2200      	movs	r2, #0
 800b034:	2100      	movs	r1, #0
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f001 fa01 	bl	800c43e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <arm_fir_decimate_init_q15>:
  uint16_t numTaps,
  uint8_t M,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b086      	sub	sp, #24
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	60f8      	str	r0, [r7, #12]
 800b04e:	607b      	str	r3, [r7, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	817b      	strh	r3, [r7, #10]
 800b054:	4613      	mov	r3, r2
 800b056:	727b      	strb	r3, [r7, #9]

  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 800b058:	7a7a      	ldrb	r2, [r7, #9]
 800b05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b060:	fb02 f201 	mul.w	r2, r2, r1
 800b064:	1a9b      	subs	r3, r3, r2
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <arm_fir_decimate_init_q15+0x2a>
  {
    /* Set status as ARM_MATH_LENGTH_ERROR */
    status = ARM_MATH_LENGTH_ERROR;
 800b06a:	23fe      	movs	r3, #254	; 0xfe
 800b06c:	75fb      	strb	r3, [r7, #23]
 800b06e:	e019      	b.n	800b0a4 <arm_fir_decimate_init_q15+0x5e>
  }
  else
  {
    /* Assign filter taps */
    S->numTaps = numTaps;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	897a      	ldrh	r2, [r7, #10]
 800b074:	805a      	strh	r2, [r3, #2]

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	605a      	str	r2, [r3, #4]

    /* Clear the state buffer.  The size of buffer is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(q15_t));
 800b07c:	897a      	ldrh	r2, [r7, #10]
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	4413      	add	r3, r2
 800b082:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b086:	3b01      	subs	r3, #1
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	461a      	mov	r2, r3
 800b08c:	2100      	movs	r1, #0
 800b08e:	6a38      	ldr	r0, [r7, #32]
 800b090:	f003 fa33 	bl	800e4fa <memset>

    /* Assign state pointer */
    S->pState = pState;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6a3a      	ldr	r2, [r7, #32]
 800b098:	609a      	str	r2, [r3, #8]

    /* Assign Decimation factor */
    S->M = M;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	7a7a      	ldrb	r2, [r7, #9]
 800b09e:	701a      	strb	r2, [r3, #0]

    status = ARM_MATH_SUCCESS;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 800b0a4:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3718      	adds	r7, #24
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <arm_fir_decimate_q15>:
void arm_fir_decimate_q15(
  const arm_fir_decimate_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 800b0b0:	b490      	push	{r4, r7}
 800b0b2:	b0d8      	sub	sp, #352	; 0x160
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	f107 040c 	add.w	r4, r7, #12
 800b0ba:	6020      	str	r0, [r4, #0]
 800b0bc:	f107 0008 	add.w	r0, r7, #8
 800b0c0:	6001      	str	r1, [r0, #0]
 800b0c2:	1d39      	adds	r1, r7, #4
 800b0c4:	600a      	str	r2, [r1, #0]
 800b0c6:	463a      	mov	r2, r7
 800b0c8:	6013      	str	r3, [r2, #0]
  q15_t *pState = S->pState;                     /* State pointer */
 800b0ca:	f107 030c 	add.w	r3, r7, #12
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 800b0d4:	f107 030c 	add.w	r3, r7, #12
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  q31_t x0, x1, c0, c1;                          /* Temporary variables to hold state and coefficient values */
  q63_t sum0;                                    /* Accumulators */
  q63_t acc0, acc1;
  q15_t *px0, *px1;
  uint32_t blkCntN3;
  uint32_t numTaps = S->numTaps;                 /* Number of taps */
 800b0e0:	f107 030c 	add.w	r3, r7, #12
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	885b      	ldrh	r3, [r3, #2]
 800b0e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  uint32_t i, blkCnt, tapCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 800b0ec:	f107 030c 	add.w	r3, r7, #12
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	463b      	mov	r3, r7
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c


  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = S->pState + (numTaps - 1U);
 800b102:	f107 030c 	add.w	r3, r7, #12
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	689a      	ldr	r2, [r3, #8]
 800b10a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b10e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b112:	3b01      	subs	r3, #1
 800b114:	005b      	lsls	r3, r3, #1
 800b116:	4413      	add	r3, r2
 800b118:	66bb      	str	r3, [r7, #104]	; 0x68


  /* Total number of output samples to be computed */
  blkCnt = outBlockSize / 2;
 800b11a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b11e:	085b      	lsrs	r3, r3, #1
 800b120:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  blkCntN3 = outBlockSize - (2 * blkCnt);
 800b124:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144


  while (blkCnt > 0U)
 800b134:	e20c      	b.n	800b550 <arm_fir_decimate_q15+0x4a0>
  {
    /* Copy decimation factor number of new input samples into the state buffer */
    i = 2 * S->M;
 800b136:	f107 030c 	add.w	r3, r7, #12
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	005b      	lsls	r3, r3, #1
 800b140:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    do
    {
      *pStateCurnt++ = *pSrc++;
 800b144:	f107 0308 	add.w	r3, r7, #8
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	f107 0308 	add.w	r3, r7, #8
 800b14e:	1c91      	adds	r1, r2, #2
 800b150:	6019      	str	r1, [r3, #0]
 800b152:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b154:	1c99      	adds	r1, r3, #2
 800b156:	66b9      	str	r1, [r7, #104]	; 0x68
 800b158:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b15c:	801a      	strh	r2, [r3, #0]

    } while (--i);
 800b15e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b162:	3b01      	subs	r3, #1
 800b164:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800b168:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1e9      	bne.n	800b144 <arm_fir_decimate_q15+0x94>

    /* Set accumulator to zero */
    acc0 = 0;
 800b170:	f04f 0300 	mov.w	r3, #0
 800b174:	f04f 0400 	mov.w	r4, #0
 800b178:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800b17c:	e9c2 3400 	strd	r3, r4, [r2]
    acc1 = 0;
 800b180:	f04f 0300 	mov.w	r3, #0
 800b184:	f04f 0400 	mov.w	r4, #0
 800b188:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b18c:	e9c2 3400 	strd	r3, r4, [r2]

    /* Initialize state pointer */
    px0 = pState;
 800b190:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b192:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b196:	601a      	str	r2, [r3, #0]

    px1 = pState + S->M;
 800b198:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b19a:	f107 030c 	add.w	r3, r7, #12
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	005b      	lsls	r3, r3, #1
 800b1a4:	441a      	add	r2, r3
 800b1a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b1aa:	601a      	str	r2, [r3, #0]


    /* Initialize coeff pointer */
    pb = pCoeffs;
 800b1ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b1b0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800b1b4:	601a      	str	r2, [r3, #0]

    /* Loop unrolling.  Process 4 taps at a time. */
    tapCnt = numTaps >> 2;
 800b1b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b1ba:	089b      	lsrs	r3, r3, #2
 800b1bc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Loop over the number of taps.  Unroll by a factor of 4.
     ** Repeat until we've computed numTaps-4 coefficients. */
    while (tapCnt > 0U)
 800b1c0:	e0ec      	b.n	800b39c <arm_fir_decimate_q15+0x2ec>
    {
      /* Read the Read b[numTaps-1] and b[numTaps-2]  coefficients */
      c0 = *__SIMD32(pb)++;
 800b1c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b1c6:	6813      	ldr	r3, [r2, #0]
 800b1c8:	1d19      	adds	r1, r3, #4
 800b1ca:	6011      	str	r1, [r2, #0]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

      /* Read x[n-numTaps-1] and x[n-numTaps-2]sample */
      x0 = *__SIMD32(px0)++;
 800b1d2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800b1d6:	6813      	ldr	r3, [r2, #0]
 800b1d8:	1d19      	adds	r1, r3, #4
 800b1da:	6011      	str	r1, [r2, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      x1 = *__SIMD32(px1)++;
 800b1e2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b1e6:	6813      	ldr	r3, [r2, #0]
 800b1e8:	1d19      	adds	r1, r3, #4
 800b1ea:	6011      	str	r1, [r2, #0]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

      /* Perform the multiply-accumulate */
      acc0 = __SMLALD(x0, c0, acc0);
 800b1f2:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b1f6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b1fa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800b1fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b202:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800b206:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800b20a:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;
 800b20e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b212:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800b216:	e9c2 3400 	strd	r3, r4, [r2]

#ifndef __ARMEB__   /* Little endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800b21a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b22a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b22e:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800b232:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b236:	600a      	str	r2, [r1, #0]
 800b238:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b23c:	6053      	str	r3, [r2, #4]
#else               /* Big endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[1]), "=r" (llr.w32[0]): "r" (op1), "r" (op2) , "0" (llr.w32[1]), "1" (llr.w32[0]) );
#endif

  return(llr.w64);
 800b23e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b242:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b246:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800b24a:	e9c2 3400 	strd	r3, r4, [r2]

      acc1 = __SMLALD(x1, c0, acc1);
 800b24e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800b252:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b256:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b25a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b25e:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800b262:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800b266:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
  llr.w64 = acc;
 800b26a:	f107 0220 	add.w	r2, r7, #32
 800b26e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800b272:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800b276:	f107 0320 	add.w	r3, r7, #32
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	f107 0320 	add.w	r3, r7, #32
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800b286:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800b28a:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800b28e:	f107 0120 	add.w	r1, r7, #32
 800b292:	600a      	str	r2, [r1, #0]
 800b294:	f107 0220 	add.w	r2, r7, #32
 800b298:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800b29a:	f107 0320 	add.w	r3, r7, #32
 800b29e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b2a2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b2a6:	e9c2 3400 	strd	r3, r4, [r2]

      /* Read the b[numTaps-3] and b[numTaps-4] coefficient */
      c0 = *__SIMD32(pb)++;
 800b2aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b2ae:	6813      	ldr	r3, [r2, #0]
 800b2b0:	1d19      	adds	r1, r3, #4
 800b2b2:	6011      	str	r1, [r2, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

      /* Read x[n-numTaps-2] and x[n-numTaps-3] sample */
      x0 = *__SIMD32(px0)++;
 800b2ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800b2be:	6813      	ldr	r3, [r2, #0]
 800b2c0:	1d19      	adds	r1, r3, #4
 800b2c2:	6011      	str	r1, [r2, #0]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      x1 = *__SIMD32(px1)++;
 800b2ca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b2ce:	6813      	ldr	r3, [r2, #0]
 800b2d0:	1d19      	adds	r1, r3, #4
 800b2d2:	6011      	str	r1, [r2, #0]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

      /* Perform the multiply-accumulate */
      acc0 = __SMLALD(x0, c0, acc0);
 800b2da:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b2de:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b2e2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800b2e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b2ea:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800b2ee:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800b2f2:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
  llr.w64 = acc;
 800b2f6:	f107 0218 	add.w	r2, r7, #24
 800b2fa:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800b2fe:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800b302:	f107 0318 	add.w	r3, r7, #24
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	f107 0318 	add.w	r3, r7, #24
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800b312:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800b316:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800b31a:	f107 0118 	add.w	r1, r7, #24
 800b31e:	600a      	str	r2, [r1, #0]
 800b320:	f107 0218 	add.w	r2, r7, #24
 800b324:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800b326:	f107 0318 	add.w	r3, r7, #24
 800b32a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b32e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800b332:	e9c2 3400 	strd	r3, r4, [r2]

      acc1 = __SMLALD(x1, c0, acc1);
 800b336:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800b33a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b33e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b342:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b346:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800b34a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800b34e:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
  llr.w64 = acc;
 800b352:	f107 0210 	add.w	r2, r7, #16
 800b356:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800b35a:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800b35e:	f107 0310 	add.w	r3, r7, #16
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	f107 0310 	add.w	r3, r7, #16
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800b36e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800b372:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800b376:	f107 0110 	add.w	r1, r7, #16
 800b37a:	600a      	str	r2, [r1, #0]
 800b37c:	f107 0210 	add.w	r2, r7, #16
 800b380:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800b382:	f107 0310 	add.w	r3, r7, #16
 800b386:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b38a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b38e:	e9c2 3400 	strd	r3, r4, [r2]

      /* Decrement the loop counter */
      tapCnt--;
 800b392:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b396:	3b01      	subs	r3, #1
 800b398:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    while (tapCnt > 0U)
 800b39c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	f47f af0e 	bne.w	800b1c2 <arm_fir_decimate_q15+0x112>
    }

    /* If the filter length is not a multiple of 4, compute the remaining filter taps */
    tapCnt = numTaps % 0x4U;
 800b3a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b3aa:	f003 0303 	and.w	r3, r3, #3
 800b3ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    while (tapCnt > 0U)
 800b3b2:	e081      	b.n	800b4b8 <arm_fir_decimate_q15+0x408>
    {
      /* Read coefficients */
      c0 = *pb++;
 800b3b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	1c99      	adds	r1, r3, #2
 800b3bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b3c0:	6011      	str	r1, [r2, #0]
 800b3c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

      /* Fetch 1 state variable */
      x0 = *px0++;
 800b3ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	1c99      	adds	r1, r3, #2
 800b3d2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800b3d6:	6011      	str	r1, [r2, #0]
 800b3d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      x1 = *px1++;
 800b3e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	1c99      	adds	r1, r3, #2
 800b3e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b3ec:	6011      	str	r1, [r2, #0]
 800b3ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

      /* Perform the multiply-accumulate */
      acc0 = __SMLALD(x0, c0, acc0);
 800b3f6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b3fa:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b3fe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800b402:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b406:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800b40a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b40e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
  llr.w64 = acc;
 800b412:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b416:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800b41a:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800b41e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800b42e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b432:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800b436:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b43a:	600a      	str	r2, [r1, #0]
 800b43c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b440:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800b442:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b446:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b44a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800b44e:	e9c2 3400 	strd	r3, r4, [r2]
      acc1 = __SMLALD(x1, c0, acc1);
 800b452:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800b456:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b45a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b45e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b462:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 800b466:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800b46a:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
  llr.w64 = acc;
 800b46e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b472:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800b476:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800b47a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800b48a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800b48e:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800b492:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800b496:	600a      	str	r2, [r1, #0]
 800b498:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b49c:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800b49e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b4a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4a6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b4aa:	e9c2 3400 	strd	r3, r4, [r2]

      /* Decrement the loop counter */
      tapCnt--;
 800b4ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    while (tapCnt > 0U)
 800b4b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f47f af79 	bne.w	800b3b4 <arm_fir_decimate_q15+0x304>
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M * 2;
 800b4c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4c4:	f107 020c 	add.w	r2, r7, #12
 800b4c8:	6812      	ldr	r2, [r2, #0]
 800b4ca:	7812      	ldrb	r2, [r2, #0]
 800b4cc:	0092      	lsls	r2, r2, #2
 800b4ce:	4413      	add	r3, r2
 800b4d0:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Store filter output, smlad returns the values in 2.14 format */
    /* so downsacle by 15 to get output in 1.15 */
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 800b4d2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800b4d6:	e9d3 1200 	ldrd	r1, r2, [r3]
 800b4da:	f04f 0300 	mov.w	r3, #0
 800b4de:	f04f 0400 	mov.w	r4, #0
 800b4e2:	0bcb      	lsrs	r3, r1, #15
 800b4e4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800b4e8:	13d4      	asrs	r4, r2, #15
 800b4ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b4ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f2:	f303 030f 	ssat	r3, #16, r3
 800b4f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b4fa:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800b4fe:	1d3b      	adds	r3, r7, #4
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	1d3a      	adds	r2, r7, #4
 800b504:	1c99      	adds	r1, r3, #2
 800b506:	6011      	str	r1, [r2, #0]
 800b508:	b202      	sxth	r2, r0
 800b50a:	801a      	strh	r2, [r3, #0]
    *pDst++ = (q15_t) (__SSAT((acc1 >> 15), 16));
 800b50c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b510:	e9d3 1200 	ldrd	r1, r2, [r3]
 800b514:	f04f 0300 	mov.w	r3, #0
 800b518:	f04f 0400 	mov.w	r4, #0
 800b51c:	0bcb      	lsrs	r3, r1, #15
 800b51e:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800b522:	13d4      	asrs	r4, r2, #15
 800b524:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b52c:	f303 030f 	ssat	r3, #16, r3
 800b530:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b534:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800b538:	1d3b      	adds	r3, r7, #4
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	1d3a      	adds	r2, r7, #4
 800b53e:	1c99      	adds	r1, r3, #2
 800b540:	6011      	str	r1, [r2, #0]
 800b542:	b202      	sxth	r2, r0
 800b544:	801a      	strh	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 800b546:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800b54a:	3b01      	subs	r3, #1
 800b54c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  while (blkCnt > 0U)
 800b550:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800b554:	2b00      	cmp	r3, #0
 800b556:	f47f adee 	bne.w	800b136 <arm_fir_decimate_q15+0x86>
  }



  while (blkCntN3 > 0U)
 800b55a:	e12c      	b.n	800b7b6 <arm_fir_decimate_q15+0x706>
  {
    /* Copy decimation factor number of new input samples into the state buffer */
    i = S->M;
 800b55c:	f107 030c 	add.w	r3, r7, #12
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    do
    {
      *pStateCurnt++ = *pSrc++;
 800b568:	f107 0308 	add.w	r3, r7, #8
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	f107 0308 	add.w	r3, r7, #8
 800b572:	1c91      	adds	r1, r2, #2
 800b574:	6019      	str	r1, [r3, #0]
 800b576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b578:	1c99      	adds	r1, r3, #2
 800b57a:	66b9      	str	r1, [r7, #104]	; 0x68
 800b57c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b580:	801a      	strh	r2, [r3, #0]

    } while (--i);
 800b582:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b586:	3b01      	subs	r3, #1
 800b588:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800b58c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1e9      	bne.n	800b568 <arm_fir_decimate_q15+0x4b8>

    /*Set sum to zero */
    sum0 = 0;
 800b594:	f04f 0300 	mov.w	r3, #0
 800b598:	f04f 0400 	mov.w	r4, #0
 800b59c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b5a0:	e9c2 3400 	strd	r3, r4, [r2]

    /* Initialize state pointer */
    px = pState;
 800b5a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5a6:	667b      	str	r3, [r7, #100]	; 0x64

    /* Initialize coeff pointer */
    pb = pCoeffs;
 800b5a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b5ac:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800b5b0:	601a      	str	r2, [r3, #0]

    /* Loop unrolling.  Process 4 taps at a time. */
    tapCnt = numTaps >> 2;
 800b5b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b5b6:	089b      	lsrs	r3, r3, #2
 800b5b8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Loop over the number of taps.  Unroll by a factor of 4.
     ** Repeat until we've computed numTaps-4 coefficients. */
    while (tapCnt > 0U)
 800b5bc:	e080      	b.n	800b6c0 <arm_fir_decimate_q15+0x610>
    {
      /* Read the Read b[numTaps-1] and b[numTaps-2]  coefficients */
      c0 = *__SIMD32(pb)++;
 800b5be:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b5c2:	6813      	ldr	r3, [r2, #0]
 800b5c4:	1d19      	adds	r1, r3, #4
 800b5c6:	6011      	str	r1, [r2, #0]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

      /* Read x[n-numTaps-1] and x[n-numTaps-2]sample */
      x0 = *__SIMD32(px)++;
 800b5ce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800b5d2:	6813      	ldr	r3, [r2, #0]
 800b5d4:	1d19      	adds	r1, r3, #4
 800b5d6:	6011      	str	r1, [r2, #0]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      /* Read the b[numTaps-3] and b[numTaps-4] coefficient */
      c1 = *__SIMD32(pb)++;
 800b5de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b5e2:	6813      	ldr	r3, [r2, #0]
 800b5e4:	1d19      	adds	r1, r3, #4
 800b5e6:	6011      	str	r1, [r2, #0]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

      /* Perform the multiply-accumulate */
      sum0 = __SMLALD(x0, c0, sum0);
 800b5ee:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b5f2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b5f6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800b5fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5fe:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800b602:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b606:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
  llr.w64 = acc;
 800b60a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b60e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800b612:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800b616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800b626:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800b62a:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800b62e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b632:	600a      	str	r2, [r1, #0]
 800b634:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b638:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800b63a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b63e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b642:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b646:	e9c2 3400 	strd	r3, r4, [r2]

      /* Read x[n-numTaps-2] and x[n-numTaps-3] sample */
      x0 = *__SIMD32(px)++;
 800b64a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800b64e:	6813      	ldr	r3, [r2, #0]
 800b650:	1d19      	adds	r1, r3, #4
 800b652:	6011      	str	r1, [r2, #0]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      /* Perform the multiply-accumulate */
      sum0 = __SMLALD(x0, c1, sum0);
 800b65a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b65e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800b662:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800b666:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b66a:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800b66e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800b672:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
  llr.w64 = acc;
 800b676:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b67a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800b67e:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800b682:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800b692:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800b696:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800b69a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b69e:	600a      	str	r2, [r1, #0]
 800b6a0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b6a4:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800b6a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b6aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b6ae:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b6b2:	e9c2 3400 	strd	r3, r4, [r2]

      /* Decrement the loop counter */
      tapCnt--;
 800b6b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    while (tapCnt > 0U)
 800b6c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f47f af7a 	bne.w	800b5be <arm_fir_decimate_q15+0x50e>
    }

    /* If the filter length is not a multiple of 4, compute the remaining filter taps */
    tapCnt = numTaps % 0x4U;
 800b6ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b6ce:	f003 0303 	and.w	r3, r3, #3
 800b6d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    while (tapCnt > 0U)
 800b6d6:	e040      	b.n	800b75a <arm_fir_decimate_q15+0x6aa>
    {
      /* Read coefficients */
      c0 = *pb++;
 800b6d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	1c99      	adds	r1, r3, #2
 800b6e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b6e4:	6011      	str	r1, [r2, #0]
 800b6e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

      /* Fetch 1 state variable */
      x0 = *px++;
 800b6ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6f0:	1c9a      	adds	r2, r3, #2
 800b6f2:	667a      	str	r2, [r7, #100]	; 0x64
 800b6f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      /* Perform the multiply-accumulate */
      sum0 = __SMLALD(x0, c0, sum0);
 800b6fc:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b700:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b704:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800b708:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b70c:	67f9      	str	r1, [r7, #124]	; 0x7c
 800b70e:	67ba      	str	r2, [r7, #120]	; 0x78
 800b710:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
  llr.w64 = acc;
 800b714:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b718:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800b71c:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800b720:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b72e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b730:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800b734:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800b738:	600a      	str	r2, [r1, #0]
 800b73a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b73e:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800b740:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b744:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b748:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800b74c:	e9c2 3400 	strd	r3, r4, [r2]

      /* Decrement the loop counter */
      tapCnt--;
 800b750:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b754:	3b01      	subs	r3, #1
 800b756:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    while (tapCnt > 0U)
 800b75a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1ba      	bne.n	800b6d8 <arm_fir_decimate_q15+0x628>
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 800b762:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b764:	f107 030c 	add.w	r3, r7, #12
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	005b      	lsls	r3, r3, #1
 800b76e:	4413      	add	r3, r2
 800b770:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Store filter output, smlad returns the values in 2.14 format */
    /* so downsacle by 15 to get output in 1.15 */
    *pDst++ = (q15_t) (__SSAT((sum0 >> 15), 16));
 800b772:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800b776:	e9d3 1200 	ldrd	r1, r2, [r3]
 800b77a:	f04f 0300 	mov.w	r3, #0
 800b77e:	f04f 0400 	mov.w	r4, #0
 800b782:	0bcb      	lsrs	r3, r1, #15
 800b784:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800b788:	13d4      	asrs	r4, r2, #15
 800b78a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b78e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b792:	f303 030f 	ssat	r3, #16, r3
 800b796:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b79a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800b79e:	1d3b      	adds	r3, r7, #4
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	1d3a      	adds	r2, r7, #4
 800b7a4:	1c99      	adds	r1, r3, #2
 800b7a6:	6011      	str	r1, [r2, #0]
 800b7a8:	b202      	sxth	r2, r0
 800b7aa:	801a      	strh	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCntN3--;
 800b7ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  while (blkCntN3 > 0U)
 800b7b6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f47f aece 	bne.w	800b55c <arm_fir_decimate_q15+0x4ac>
  /* Processing is complete.
   ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.
   ** This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 800b7c0:	f107 030c 	add.w	r3, r7, #12
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	66bb      	str	r3, [r7, #104]	; 0x68

  i = (numTaps - 1U) >> 2U;
 800b7ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	089b      	lsrs	r3, r3, #2
 800b7d2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

  /* copy data */
  while (i > 0U)
 800b7d6:	e01c      	b.n	800b812 <arm_fir_decimate_q15+0x762>
  {
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
 800b7d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	1d11      	adds	r1, r2, #4
 800b7e0:	6019      	str	r1, [r3, #0]
 800b7e2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800b7e6:	680b      	ldr	r3, [r1, #0]
 800b7e8:	1d18      	adds	r0, r3, #4
 800b7ea:	6008      	str	r0, [r1, #0]
 800b7ec:	6812      	ldr	r2, [r2, #0]
 800b7ee:	601a      	str	r2, [r3, #0]
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
 800b7f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	1d11      	adds	r1, r2, #4
 800b7f8:	6019      	str	r1, [r3, #0]
 800b7fa:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800b7fe:	680b      	ldr	r3, [r1, #0]
 800b800:	1d18      	adds	r0, r3, #4
 800b802:	6008      	str	r0, [r1, #0]
 800b804:	6812      	ldr	r2, [r2, #0]
 800b806:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    i--;
 800b808:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b80c:	3b01      	subs	r3, #1
 800b80e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  while (i > 0U)
 800b812:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1de      	bne.n	800b7d8 <arm_fir_decimate_q15+0x728>
  }

  i = (numTaps - 1U) % 0x04U;
 800b81a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b81e:	3b01      	subs	r3, #1
 800b820:	f003 0303 	and.w	r3, r3, #3
 800b824:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

  /* copy data */
  while (i > 0U)
 800b828:	e00d      	b.n	800b846 <arm_fir_decimate_q15+0x796>
  {
    *pStateCurnt++ = *pState++;
 800b82a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b82c:	1c93      	adds	r3, r2, #2
 800b82e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b830:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b832:	1c99      	adds	r1, r3, #2
 800b834:	66b9      	str	r1, [r7, #104]	; 0x68
 800b836:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b83a:	801a      	strh	r2, [r3, #0]

    /* Decrement the loop counter */
    i--;
 800b83c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b840:	3b01      	subs	r3, #1
 800b842:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  while (i > 0U)
 800b846:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1ed      	bne.n	800b82a <arm_fir_decimate_q15+0x77a>
  }
}
 800b84e:	bf00      	nop
 800b850:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800b854:	46bd      	mov	sp, r7
 800b856:	bc90      	pop	{r4, r7}
 800b858:	4770      	bx	lr

0800b85a <CCA02M1_AUDIO_IN_HalfTransfer_CallBack>:
* @brief  Half Transfer user callback, called by BSP functions.
* @param  None
* @retval None
*/
void CCA02M1_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{  
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  AudioProcess();
 800b862:	f000 f80f 	bl	800b884 <AudioProcess>
}
 800b866:	bf00      	nop
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <CCA02M1_AUDIO_IN_TransferComplete_CallBack>:
* @brief  Transfer Complete user callback, called by BSP functions.
* @param  None
* @retval None
*/
void CCA02M1_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{  
 800b86e:	b580      	push	{r7, lr}
 800b870:	b082      	sub	sp, #8
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
  AudioProcess();
 800b876:	f000 f805 	bl	800b884 <AudioProcess>
}
 800b87a:	bf00      	nop
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
	...

0800b884 <AudioProcess>:
extern int abc;
int i;
int j = 0;

void AudioProcess(void)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	af00      	add	r7, sp, #0
	if(abc<9600)
 800b888:	4b1c      	ldr	r3, [pc, #112]	; (800b8fc <AudioProcess+0x78>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800b890:	da32      	bge.n	800b8f8 <AudioProcess+0x74>
	{
		j=0;
 800b892:	4b1b      	ldr	r3, [pc, #108]	; (800b900 <AudioProcess+0x7c>)
 800b894:	2200      	movs	r2, #0
 800b896:	601a      	str	r2, [r3, #0]
		CCA02M1_AUDIO_IN_PDMToPCM(CCA02M1_AUDIO_INSTANCE,(uint16_t * )PDM_Buffer,PCM_Buffer);
 800b898:	4a1a      	ldr	r2, [pc, #104]	; (800b904 <AudioProcess+0x80>)
 800b89a:	491b      	ldr	r1, [pc, #108]	; (800b908 <AudioProcess+0x84>)
 800b89c:	2000      	movs	r0, #0
 800b89e:	f7f5 fca1 	bl	80011e4 <CCA02M1_AUDIO_IN_PDMToPCM>
		for (i = abc;i<abc+96;i++)
 800b8a2:	4b16      	ldr	r3, [pc, #88]	; (800b8fc <AudioProcess+0x78>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a19      	ldr	r2, [pc, #100]	; (800b90c <AudioProcess+0x88>)
 800b8a8:	6013      	str	r3, [r2, #0]
 800b8aa:	e014      	b.n	800b8d6 <AudioProcess+0x52>
		{
			* (data+i) = (uint16_t * )(PCM_Buffer+j);
 800b8ac:	4b14      	ldr	r3, [pc, #80]	; (800b900 <AudioProcess+0x7c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	005a      	lsls	r2, r3, #1
 800b8b2:	4b16      	ldr	r3, [pc, #88]	; (800b90c <AudioProcess+0x88>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4915      	ldr	r1, [pc, #84]	; (800b910 <AudioProcess+0x8c>)
 800b8ba:	440b      	add	r3, r1
 800b8bc:	4911      	ldr	r1, [pc, #68]	; (800b904 <AudioProcess+0x80>)
 800b8be:	440a      	add	r2, r1
 800b8c0:	601a      	str	r2, [r3, #0]
			j++;
 800b8c2:	4b0f      	ldr	r3, [pc, #60]	; (800b900 <AudioProcess+0x7c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	4a0d      	ldr	r2, [pc, #52]	; (800b900 <AudioProcess+0x7c>)
 800b8ca:	6013      	str	r3, [r2, #0]
		for (i = abc;i<abc+96;i++)
 800b8cc:	4b0f      	ldr	r3, [pc, #60]	; (800b90c <AudioProcess+0x88>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	4a0e      	ldr	r2, [pc, #56]	; (800b90c <AudioProcess+0x88>)
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	4b09      	ldr	r3, [pc, #36]	; (800b8fc <AudioProcess+0x78>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800b8de:	4b0b      	ldr	r3, [pc, #44]	; (800b90c <AudioProcess+0x88>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	dce2      	bgt.n	800b8ac <AudioProcess+0x28>
		}
		Send_Audio_to_USB((int16_t *)PCM_Buffer, (AUDIO_IN_SAMPLING_FREQUENCY/1000)*AUDIO_IN_CHANNELS * N_MS );
 800b8e6:	2160      	movs	r1, #96	; 0x60
 800b8e8:	4806      	ldr	r0, [pc, #24]	; (800b904 <AudioProcess+0x80>)
 800b8ea:	f000 fb35 	bl	800bf58 <Send_Audio_to_USB>
		abc+=96;
 800b8ee:	4b03      	ldr	r3, [pc, #12]	; (800b8fc <AudioProcess+0x78>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3360      	adds	r3, #96	; 0x60
 800b8f4:	4a01      	ldr	r2, [pc, #4]	; (800b8fc <AudioProcess+0x78>)
 800b8f6:	6013      	str	r3, [r2, #0]
	}
}
 800b8f8:	bf00      	nop
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	20001a6c 	.word	0x20001a6c
 800b900:	20001a68 	.word	0x20001a68
 800b904:	20001adc 	.word	0x20001adc
 800b908:	20001ba0 	.word	0x20001ba0
 800b90c:	20001b9c 	.word	0x20001b9c
 800b910:	20002470 	.word	0x20002470

0800b914 <Init_Acquisition_Peripherals>:
* 		  User can add his own code here to perform some DSP or audio analysis.
* @param  none
* @retval None
*/
void Init_Acquisition_Peripherals(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{  
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
  MicParams.BitsPerSample = 16;
 800b920:	4b0b      	ldr	r3, [pc, #44]	; (800b950 <Init_Acquisition_Peripherals+0x3c>)
 800b922:	2210      	movs	r2, #16
 800b924:	609a      	str	r2, [r3, #8]
  MicParams.ChannelsNbr = ChnlNbrIn;
 800b926:	4a0a      	ldr	r2, [pc, #40]	; (800b950 <Init_Acquisition_Peripherals+0x3c>)
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	60d3      	str	r3, [r2, #12]
  MicParams.Device = AUDIO_IN_DIGITAL_MIC;
 800b92c:	4b08      	ldr	r3, [pc, #32]	; (800b950 <Init_Acquisition_Peripherals+0x3c>)
 800b92e:	22f0      	movs	r2, #240	; 0xf0
 800b930:	601a      	str	r2, [r3, #0]
  MicParams.SampleRate = AudioFreq;
 800b932:	4a07      	ldr	r2, [pc, #28]	; (800b950 <Init_Acquisition_Peripherals+0x3c>)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6053      	str	r3, [r2, #4]
  MicParams.Volume = AUDIO_VOLUME_INPUT;
 800b938:	4b05      	ldr	r3, [pc, #20]	; (800b950 <Init_Acquisition_Peripherals+0x3c>)
 800b93a:	2240      	movs	r2, #64	; 0x40
 800b93c:	611a      	str	r2, [r3, #16]
  
  CCA02M1_AUDIO_IN_Init(CCA02M1_AUDIO_INSTANCE, &MicParams);  
 800b93e:	4904      	ldr	r1, [pc, #16]	; (800b950 <Init_Acquisition_Peripherals+0x3c>)
 800b940:	2000      	movs	r0, #0
 800b942:	f7f5 f841 	bl	80009c8 <CCA02M1_AUDIO_IN_Init>
}
 800b946:	bf00      	nop
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	20001ac8 	.word	0x20001ac8

0800b954 <Start_Acquisition>:
* 		  User can add his own code here to perform some DSP or audio analysis.
* @param  none
* @retval None
*/
void Start_Acquisition(void)
{  
 800b954:	b580      	push	{r7, lr}
 800b956:	af00      	add	r7, sp, #0
  CCA02M1_AUDIO_IN_Record(CCA02M1_AUDIO_INSTANCE, (uint8_t *) PDM_Buffer, AUDIO_IN_BUFFER_SIZE);
 800b958:	2260      	movs	r2, #96	; 0x60
 800b95a:	4903      	ldr	r1, [pc, #12]	; (800b968 <Start_Acquisition+0x14>)
 800b95c:	2000      	movs	r0, #0
 800b95e:	f7f5 fcc5 	bl	80012ec <CCA02M1_AUDIO_IN_Record>
}
 800b962:	bf00      	nop
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	20001ba0 	.word	0x20001ba0

0800b96c <SystemClock_Config>:
* @brief  System Clock Configuration
* @param  None
* @retval None
*/
void SystemClock_Config(void)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b094      	sub	sp, #80	; 0x50
 800b970:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 800b972:	2300      	movs	r3, #0
 800b974:	607b      	str	r3, [r7, #4]
 800b976:	4b24      	ldr	r3, [pc, #144]	; (800ba08 <SystemClock_Config+0x9c>)
 800b978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97a:	4a23      	ldr	r2, [pc, #140]	; (800ba08 <SystemClock_Config+0x9c>)
 800b97c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b980:	6413      	str	r3, [r2, #64]	; 0x40
 800b982:	4b21      	ldr	r3, [pc, #132]	; (800ba08 <SystemClock_Config+0x9c>)
 800b984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b98a:	607b      	str	r3, [r7, #4]
 800b98c:	687b      	ldr	r3, [r7, #4]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
  clocked below the maximum system frequency, to update the voltage scaling value 
  regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);  
 800b98e:	2300      	movs	r3, #0
 800b990:	603b      	str	r3, [r7, #0]
 800b992:	4b1e      	ldr	r3, [pc, #120]	; (800ba0c <SystemClock_Config+0xa0>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b99a:	4a1c      	ldr	r2, [pc, #112]	; (800ba0c <SystemClock_Config+0xa0>)
 800b99c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9a0:	6013      	str	r3, [r2, #0]
 800b9a2:	4b1a      	ldr	r3, [pc, #104]	; (800ba0c <SystemClock_Config+0xa0>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b9aa:	603b      	str	r3, [r7, #0]
 800b9ac:	683b      	ldr	r3, [r7, #0]
  
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b9b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b9b6:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b9bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b9c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 8;
 800b9c2:	2308      	movs	r3, #8
 800b9c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 336;
 800b9c6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800b9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800b9cc:	2304      	movs	r3, #4
 800b9ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800b9d0:	2307      	movs	r3, #7
 800b9d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b9d4:	f107 0308 	add.w	r3, r7, #8
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7f9 fe07 	bl	80055ec <HAL_RCC_OscConfig>
  
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800b9de:	230d      	movs	r3, #13
 800b9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b9e2:	2302      	movs	r3, #2
 800b9e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b9ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800b9f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b9f8:	2102      	movs	r1, #2
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7f8 fd2e 	bl	800445c <HAL_RCC_ClockConfig>
}
 800ba00:	bf00      	nop
 800ba02:	3750      	adds	r7, #80	; 0x50
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	40023800 	.word	0x40023800
 800ba0c:	40007000 	.word	0x40007000

0800ba10 <__io_putchar>:
/**
* @}
*/
# include <stdio.h>
int __io_putchar(int ch)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
	uint8_t c=ch;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 100);
 800ba1e:	f107 010f 	add.w	r1, r7, #15
 800ba22:	2364      	movs	r3, #100	; 0x64
 800ba24:	2201      	movs	r2, #1
 800ba26:	4804      	ldr	r0, [pc, #16]	; (800ba38 <__io_putchar+0x28>)
 800ba28:	f7fb fbb5 	bl	8007196 <HAL_UART_Transmit>
	return ch;
 800ba2c:	687b      	ldr	r3, [r7, #4]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	2000bad0 	.word	0x2000bad0

0800ba3c <main>:
* @brief  Main program
* @param  None
* @retval None
*/
int main(void)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
  /* STM32F4xx HAL library initialization:
  - Configure the Flash prefetch, instruction and Data caches
  - Configure the Systick to generate an interrupt each 1 msec
  - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 800ba42:	f7f6 f901 	bl	8001c48 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800ba46:	f7ff ff91 	bl	800b96c <SystemClock_Config>
  /* Initialize USB descriptor basing on channels number and sampling frequency */
  USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_IN_CHANNELS);
 800ba4a:	2202      	movs	r2, #2
 800ba4c:	f64b 3180 	movw	r1, #48000	; 0xbb80
 800ba50:	4823      	ldr	r0, [pc, #140]	; (800bae0 <main+0xa4>)
 800ba52:	f7fd fecd 	bl	80097f0 <USBD_AUDIO_Init_Microphone_Descriptor>
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
 800ba56:	2200      	movs	r2, #0
 800ba58:	4922      	ldr	r1, [pc, #136]	; (800bae4 <main+0xa8>)
 800ba5a:	4821      	ldr	r0, [pc, #132]	; (800bae0 <main+0xa4>)
 800ba5c:	f7fe f9ee 	bl	8009e3c <USBD_Init>
  /* Add Supported Class */
  USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
 800ba60:	4921      	ldr	r1, [pc, #132]	; (800bae8 <main+0xac>)
 800ba62:	481f      	ldr	r0, [pc, #124]	; (800bae0 <main+0xa4>)
 800ba64:	f7fe fa20 	bl	8009ea8 <USBD_RegisterClass>
  /* Add Interface callbacks for AUDIO Class */
  USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
 800ba68:	4920      	ldr	r1, [pc, #128]	; (800baec <main+0xb0>)
 800ba6a:	481d      	ldr	r0, [pc, #116]	; (800bae0 <main+0xa4>)
 800ba6c:	f7fd feac 	bl	80097c8 <USBD_AUDIO_RegisterInterface>
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 800ba70:	481b      	ldr	r0, [pc, #108]	; (800bae0 <main+0xa4>)
 800ba72:	f7fe fa3a 	bl	8009eea <USBD_Start>

  MX_USART1_UART_Init();
 800ba76:	f000 f935 	bl	800bce4 <MX_USART1_UART_Init>
//    }
//      printf("%X\r\n",et.l);

  /* Start audio acquisition and streaming */
#ifdef DISABLE_USB_DRIVEN_ACQUISITION
  Init_Acquisition_Peripherals(AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_IN_CHANNELS, 0);
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	2102      	movs	r1, #2
 800ba7e:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800ba82:	f7ff ff47 	bl	800b914 <Init_Acquisition_Peripherals>
  Start_Acquisition();
 800ba86:	f7ff ff65 	bl	800b954 <Start_Acquisition>
#endif
  while (1)
  {
	  if (abc == 9600)
 800ba8a:	4b19      	ldr	r3, [pc, #100]	; (800baf0 <main+0xb4>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800ba92:	d1fa      	bne.n	800ba8a <main+0x4e>
	  {
		  for(i=0;i<9600;i++)
 800ba94:	4b17      	ldr	r3, [pc, #92]	; (800baf4 <main+0xb8>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	601a      	str	r2, [r3, #0]
 800ba9a:	e016      	b.n	800baca <main+0x8e>
		  {
			  st.sixteen = *data[i];
 800ba9c:	4b15      	ldr	r3, [pc, #84]	; (800baf4 <main+0xb8>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a15      	ldr	r2, [pc, #84]	; (800baf8 <main+0xbc>)
 800baa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baa6:	881b      	ldrh	r3, [r3, #0]
 800baa8:	80bb      	strh	r3, [r7, #4]
			  printf("%d %x%x\r\n",i,st.eight[1],st.eight[0]);
 800baaa:	4b12      	ldr	r3, [pc, #72]	; (800baf4 <main+0xb8>)
 800baac:	6819      	ldr	r1, [r3, #0]
 800baae:	797b      	ldrb	r3, [r7, #5]
 800bab0:	461a      	mov	r2, r3
 800bab2:	793b      	ldrb	r3, [r7, #4]
 800bab4:	4811      	ldr	r0, [pc, #68]	; (800bafc <main+0xc0>)
 800bab6:	f002 fdd1 	bl	800e65c <iprintf>
			  HAL_Delay(10);
 800baba:	200a      	movs	r0, #10
 800babc:	f7f6 f93e 	bl	8001d3c <HAL_Delay>
		  for(i=0;i<9600;i++)
 800bac0:	4b0c      	ldr	r3, [pc, #48]	; (800baf4 <main+0xb8>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	3301      	adds	r3, #1
 800bac6:	4a0b      	ldr	r2, [pc, #44]	; (800baf4 <main+0xb8>)
 800bac8:	6013      	str	r3, [r2, #0]
 800baca:	4b0a      	ldr	r3, [pc, #40]	; (800baf4 <main+0xb8>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800bad2:	dbe3      	blt.n	800ba9c <main+0x60>
		  }
		  abc++;
 800bad4:	4b06      	ldr	r3, [pc, #24]	; (800baf0 <main+0xb4>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3301      	adds	r3, #1
 800bada:	4a05      	ldr	r2, [pc, #20]	; (800baf0 <main+0xb4>)
 800badc:	6013      	str	r3, [r2, #0]
	  if (abc == 9600)
 800bade:	e7d4      	b.n	800ba8a <main+0x4e>
 800bae0:	200021a0 	.word	0x200021a0
 800bae4:	20000618 	.word	0x20000618
 800bae8:	200005ac 	.word	0x200005ac
 800baec:	200005f4 	.word	0x200005f4
 800baf0:	20001a6c 	.word	0x20001a6c
 800baf4:	20001b9c 	.word	0x20001b9c
 800baf8:	20002470 	.word	0x20002470
 800bafc:	0800fd44 	.word	0x0800fd44

0800bb00 <Error_Handler>:
#endif
/**
* @}
*/
void Error_Handler(void)
{
 800bb00:	b480      	push	{r7}
 800bb02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800bb04:	bf00      	nop
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	af00      	add	r7, sp, #0
}
 800bb12:	bf00      	nop
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800bb20:	e7fe      	b.n	800bb20 <HardFault_Handler+0x4>

0800bb22 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800bb22:	b480      	push	{r7}
 800bb24:	af00      	add	r7, sp, #0
}
 800bb26:	bf00      	nop
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800bb30:	b480      	push	{r7}
 800bb32:	af00      	add	r7, sp, #0
}
 800bb34:	bf00      	nop
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr

0800bb3e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800bb3e:	b480      	push	{r7}
 800bb40:	af00      	add	r7, sp, #0
}
 800bb42:	bf00      	nop
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800bb50:	f7f6 f8d4 	bl	8001cfc <HAL_IncTick>
}
 800bb54:	bf00      	nop
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB Handler.
  * @param  None
  * @retval None
  */
void USB_IRQHandler(void)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 800bb5c:	4802      	ldr	r0, [pc, #8]	; (800bb68 <OTG_FS_IRQHandler+0x10>)
 800bb5e:	f7f7 fbe4 	bl	800332a <HAL_PCD_IRQHandler>
}
 800bb62:	bf00      	nop
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	2000bb10 	.word	0x2000bb10

0800bb6c <DMA1_Stream3_IRQHandler>:
  * @brief  This function handles DMA Stream interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_I2S_IRQHandler(void)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 800bb70:	4b03      	ldr	r3, [pc, #12]	; (800bb80 <DMA1_Stream3_IRQHandler+0x14>)
 800bb72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7f6 fb79 	bl	800226c <HAL_DMA_IRQHandler>
}
 800bb7a:	bf00      	nop
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	20001a7c 	.word	0x20001a7c

0800bb84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b086      	sub	sp, #24
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bb90:	2300      	movs	r3, #0
 800bb92:	617b      	str	r3, [r7, #20]
 800bb94:	e00a      	b.n	800bbac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800bb96:	f3af 8000 	nop.w
 800bb9a:	4601      	mov	r1, r0
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	1c5a      	adds	r2, r3, #1
 800bba0:	60ba      	str	r2, [r7, #8]
 800bba2:	b2ca      	uxtb	r2, r1
 800bba4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	617b      	str	r3, [r7, #20]
 800bbac:	697a      	ldr	r2, [r7, #20]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	dbf0      	blt.n	800bb96 <_read+0x12>
	}

return len;
 800bbb4:	687b      	ldr	r3, [r7, #4]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3718      	adds	r7, #24
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b086      	sub	sp, #24
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	60f8      	str	r0, [r7, #12]
 800bbc6:	60b9      	str	r1, [r7, #8]
 800bbc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bbca:	2300      	movs	r3, #0
 800bbcc:	617b      	str	r3, [r7, #20]
 800bbce:	e009      	b.n	800bbe4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	1c5a      	adds	r2, r3, #1
 800bbd4:	60ba      	str	r2, [r7, #8]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7ff ff19 	bl	800ba10 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	617b      	str	r3, [r7, #20]
 800bbe4:	697a      	ldr	r2, [r7, #20]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	dbf1      	blt.n	800bbd0 <_write+0x12>
	}
	return len;
 800bbec:	687b      	ldr	r3, [r7, #4]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3718      	adds	r7, #24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <_close>:

int _close(int file)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b083      	sub	sp, #12
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
	return -1;
 800bbfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	370c      	adds	r7, #12
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bc0e:	b480      	push	{r7}
 800bc10:	b083      	sub	sp, #12
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bc1e:	605a      	str	r2, [r3, #4]
	return 0;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	370c      	adds	r7, #12
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <_isatty>:

int _isatty(int file)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b083      	sub	sp, #12
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
	return 1;
 800bc36:	2301      	movs	r3, #1
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	607a      	str	r2, [r7, #4]
	return 0;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
	...

0800bc60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800bc68:	4b11      	ldr	r3, [pc, #68]	; (800bcb0 <_sbrk+0x50>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d102      	bne.n	800bc76 <_sbrk+0x16>
		heap_end = &end;
 800bc70:	4b0f      	ldr	r3, [pc, #60]	; (800bcb0 <_sbrk+0x50>)
 800bc72:	4a10      	ldr	r2, [pc, #64]	; (800bcb4 <_sbrk+0x54>)
 800bc74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800bc76:	4b0e      	ldr	r3, [pc, #56]	; (800bcb0 <_sbrk+0x50>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800bc7c:	4b0c      	ldr	r3, [pc, #48]	; (800bcb0 <_sbrk+0x50>)
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4413      	add	r3, r2
 800bc84:	466a      	mov	r2, sp
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d907      	bls.n	800bc9a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800bc8a:	f002 fbf1 	bl	800e470 <__errno>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	230c      	movs	r3, #12
 800bc92:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800bc94:	f04f 33ff 	mov.w	r3, #4294967295
 800bc98:	e006      	b.n	800bca8 <_sbrk+0x48>
	}

	heap_end += incr;
 800bc9a:	4b05      	ldr	r3, [pc, #20]	; (800bcb0 <_sbrk+0x50>)
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4413      	add	r3, r2
 800bca2:	4a03      	ldr	r2, [pc, #12]	; (800bcb0 <_sbrk+0x50>)
 800bca4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800bca6:	68fb      	ldr	r3, [r7, #12]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	20001a70 	.word	0x20001a70
 800bcb4:	2000bfe8 	.word	0x2000bfe8

0800bcb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bcbc:	4b08      	ldr	r3, [pc, #32]	; (800bce0 <SystemInit+0x28>)
 800bcbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcc2:	4a07      	ldr	r2, [pc, #28]	; (800bce0 <SystemInit+0x28>)
 800bcc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bcc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bccc:	4b04      	ldr	r3, [pc, #16]	; (800bce0 <SystemInit+0x28>)
 800bcce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bcd2:	609a      	str	r2, [r3, #8]
#endif
}
 800bcd4:	bf00      	nop
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	e000ed00 	.word	0xe000ed00

0800bce4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800bce8:	4b15      	ldr	r3, [pc, #84]	; (800bd40 <MX_USART1_UART_Init+0x5c>)
 800bcea:	4a16      	ldr	r2, [pc, #88]	; (800bd44 <MX_USART1_UART_Init+0x60>)
 800bcec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800bcee:	4b14      	ldr	r3, [pc, #80]	; (800bd40 <MX_USART1_UART_Init+0x5c>)
 800bcf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800bcf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800bcf6:	4b12      	ldr	r3, [pc, #72]	; (800bd40 <MX_USART1_UART_Init+0x5c>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800bcfc:	4b10      	ldr	r3, [pc, #64]	; (800bd40 <MX_USART1_UART_Init+0x5c>)
 800bcfe:	2200      	movs	r2, #0
 800bd00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800bd02:	4b0f      	ldr	r3, [pc, #60]	; (800bd40 <MX_USART1_UART_Init+0x5c>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800bd08:	4b0d      	ldr	r3, [pc, #52]	; (800bd40 <MX_USART1_UART_Init+0x5c>)
 800bd0a:	220c      	movs	r2, #12
 800bd0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bd0e:	4b0c      	ldr	r3, [pc, #48]	; (800bd40 <MX_USART1_UART_Init+0x5c>)
 800bd10:	2200      	movs	r2, #0
 800bd12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800bd14:	4b0a      	ldr	r3, [pc, #40]	; (800bd40 <MX_USART1_UART_Init+0x5c>)
 800bd16:	2200      	movs	r2, #0
 800bd18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800bd1a:	4809      	ldr	r0, [pc, #36]	; (800bd40 <MX_USART1_UART_Init+0x5c>)
 800bd1c:	f7fb f9ee 	bl	80070fc <HAL_UART_Init>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d001      	beq.n	800bd2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800bd26:	f7ff feeb 	bl	800bb00 <Error_Handler>
  }

  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 800bd2a:	4b05      	ldr	r3, [pc, #20]	; (800bd40 <MX_USART1_UART_Init+0x5c>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68da      	ldr	r2, [r3, #12]
 800bd30:	4b03      	ldr	r3, [pc, #12]	; (800bd40 <MX_USART1_UART_Init+0x5c>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f042 0220 	orr.w	r2, r2, #32
 800bd38:	60da      	str	r2, [r3, #12]

}
 800bd3a:	bf00      	nop
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	2000bad0 	.word	0x2000bad0
 800bd44:	40011000 	.word	0x40011000

0800bd48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b08a      	sub	sp, #40	; 0x28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd50:	f107 0314 	add.w	r3, r7, #20
 800bd54:	2200      	movs	r2, #0
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	605a      	str	r2, [r3, #4]
 800bd5a:	609a      	str	r2, [r3, #8]
 800bd5c:	60da      	str	r2, [r3, #12]
 800bd5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a35      	ldr	r2, [pc, #212]	; (800be3c <HAL_UART_MspInit+0xf4>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d164      	bne.n	800be34 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	613b      	str	r3, [r7, #16]
 800bd6e:	4b34      	ldr	r3, [pc, #208]	; (800be40 <HAL_UART_MspInit+0xf8>)
 800bd70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd72:	4a33      	ldr	r2, [pc, #204]	; (800be40 <HAL_UART_MspInit+0xf8>)
 800bd74:	f043 0310 	orr.w	r3, r3, #16
 800bd78:	6453      	str	r3, [r2, #68]	; 0x44
 800bd7a:	4b31      	ldr	r3, [pc, #196]	; (800be40 <HAL_UART_MspInit+0xf8>)
 800bd7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd7e:	f003 0310 	and.w	r3, r3, #16
 800bd82:	613b      	str	r3, [r7, #16]
 800bd84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd86:	2300      	movs	r3, #0
 800bd88:	60fb      	str	r3, [r7, #12]
 800bd8a:	4b2d      	ldr	r3, [pc, #180]	; (800be40 <HAL_UART_MspInit+0xf8>)
 800bd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8e:	4a2c      	ldr	r2, [pc, #176]	; (800be40 <HAL_UART_MspInit+0xf8>)
 800bd90:	f043 0301 	orr.w	r3, r3, #1
 800bd94:	6313      	str	r3, [r2, #48]	; 0x30
 800bd96:	4b2a      	ldr	r3, [pc, #168]	; (800be40 <HAL_UART_MspInit+0xf8>)
 800bd98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	60fb      	str	r3, [r7, #12]
 800bda0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800bda2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800bda6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bda8:	2302      	movs	r3, #2
 800bdaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bdac:	2301      	movs	r3, #1
 800bdae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bdb4:	2307      	movs	r3, #7
 800bdb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bdb8:	f107 0314 	add.w	r3, r7, #20
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	4821      	ldr	r0, [pc, #132]	; (800be44 <HAL_UART_MspInit+0xfc>)
 800bdc0:	f7f6 fcbc 	bl	800273c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800bdc4:	4b20      	ldr	r3, [pc, #128]	; (800be48 <HAL_UART_MspInit+0x100>)
 800bdc6:	4a21      	ldr	r2, [pc, #132]	; (800be4c <HAL_UART_MspInit+0x104>)
 800bdc8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800bdca:	4b1f      	ldr	r3, [pc, #124]	; (800be48 <HAL_UART_MspInit+0x100>)
 800bdcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bdd0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bdd2:	4b1d      	ldr	r3, [pc, #116]	; (800be48 <HAL_UART_MspInit+0x100>)
 800bdd4:	2240      	movs	r2, #64	; 0x40
 800bdd6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bdd8:	4b1b      	ldr	r3, [pc, #108]	; (800be48 <HAL_UART_MspInit+0x100>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800bdde:	4b1a      	ldr	r3, [pc, #104]	; (800be48 <HAL_UART_MspInit+0x100>)
 800bde0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bde4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bde6:	4b18      	ldr	r3, [pc, #96]	; (800be48 <HAL_UART_MspInit+0x100>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bdec:	4b16      	ldr	r3, [pc, #88]	; (800be48 <HAL_UART_MspInit+0x100>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800bdf2:	4b15      	ldr	r3, [pc, #84]	; (800be48 <HAL_UART_MspInit+0x100>)
 800bdf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bdf8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800bdfa:	4b13      	ldr	r3, [pc, #76]	; (800be48 <HAL_UART_MspInit+0x100>)
 800bdfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800be00:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800be02:	4b11      	ldr	r3, [pc, #68]	; (800be48 <HAL_UART_MspInit+0x100>)
 800be04:	2200      	movs	r2, #0
 800be06:	625a      	str	r2, [r3, #36]	; 0x24
    /*存储器突发传输 16个节拍*/
//    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
//    /*外设突发传输 1个节拍*/
//    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800be08:	480f      	ldr	r0, [pc, #60]	; (800be48 <HAL_UART_MspInit+0x100>)
 800be0a:	f7f6 f8cb 	bl	8001fa4 <HAL_DMA_Init>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d001      	beq.n	800be18 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800be14:	f7ff fe74 	bl	800bb00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4a0b      	ldr	r2, [pc, #44]	; (800be48 <HAL_UART_MspInit+0x100>)
 800be1c:	631a      	str	r2, [r3, #48]	; 0x30
 800be1e:	4a0a      	ldr	r2, [pc, #40]	; (800be48 <HAL_UART_MspInit+0x100>)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800be24:	2200      	movs	r2, #0
 800be26:	2100      	movs	r1, #0
 800be28:	2025      	movs	r0, #37	; 0x25
 800be2a:	f7f6 f884 	bl	8001f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800be2e:	2025      	movs	r0, #37	; 0x25
 800be30:	f7f6 f89d 	bl	8001f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800be34:	bf00      	nop
 800be36:	3728      	adds	r7, #40	; 0x28
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	40011000 	.word	0x40011000
 800be40:	40023800 	.word	0x40023800
 800be44:	40020000 	.word	0x40020000
 800be48:	2000ba70 	.word	0x2000ba70
 800be4c:	400264b8 	.word	0x400264b8

0800be50 <Audio_Init>:
* @param  BitRes: desired bit resolution
* @param  ChnlNbr: number of channel to be configured
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_Init(uint32_t  AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
#ifndef DISABLE_USB_DRIVEN_ACQUISITION 
  return CCA02M1_AUDIO_IN_Init(CCA02M1_AUDIO_INSTANCE, &MicParams);
#else
  return BSP_ERROR_NONE;
 800be5c:	2300      	movs	r3, #0
#endif
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3714      	adds	r7, #20
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <Audio_DeInit>:
* @brief  De-Initializes the AUDIO media low layer.      
* @param  options: Reserved for future use
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_DeInit(uint32_t options)
{
 800be6a:	b480      	push	{r7}
 800be6c:	b083      	sub	sp, #12
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
  return BSP_ERROR_NONE;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <Audio_Record>:
/**
* @brief  Start audio recording engine
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_Record(void)
{
 800be80:	b480      	push	{r7}
 800be82:	af00      	add	r7, sp, #0
#ifndef DISABLE_USB_DRIVEN_ACQUISITION  
  return CCA02M1_AUDIO_IN_Record(CCA02M1_AUDIO_INSTANCE, (uint8_t *) PDM_Buffer, 0);
#else
  return BSP_ERROR_NONE;
 800be84:	2300      	movs	r3, #0
#endif
}
 800be86:	4618      	mov	r0, r3
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <Audio_VolumeCtl>:
* @brief  Controls AUDIO Volume.             
* @param  vol: Volume level
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_VolumeCtl(int16_t Volume)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	4603      	mov	r3, r0
 800be98:	80fb      	strh	r3, [r7, #6]
  /* Call low layer volume setting function */
  uint32_t j, mic_instance;
  
  j = 0;
 800be9a:	2300      	movs	r3, #0
 800be9c:	60fb      	str	r3, [r7, #12]
  /* Find the setting nearest to the desired setting */
  while(j<64 &&
 800be9e:	e002      	b.n	800bea6 <Audio_VolumeCtl+0x16>
        abs(Volume-vol_table[j]) > abs(Volume-vol_table[j+1])) {
          j++;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	3301      	adds	r3, #1
 800bea4:	60fb      	str	r3, [r7, #12]
  while(j<64 &&
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2b3f      	cmp	r3, #63	; 0x3f
 800beaa:	d817      	bhi.n	800bedc <Audio_VolumeCtl+0x4c>
        abs(Volume-vol_table[j]) > abs(Volume-vol_table[j+1])) {
 800beac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800beb0:	4910      	ldr	r1, [pc, #64]	; (800bef4 <Audio_VolumeCtl+0x64>)
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800beb8:	1a9b      	subs	r3, r3, r2
 800beba:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800bebe:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800bec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bec6:	68f9      	ldr	r1, [r7, #12]
 800bec8:	3101      	adds	r1, #1
 800beca:	480a      	ldr	r0, [pc, #40]	; (800bef4 <Audio_VolumeCtl+0x64>)
 800becc:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800bed0:	1a5b      	subs	r3, r3, r1
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	bfb8      	it	lt
 800bed6:	425b      	neglt	r3, r3
  while(j<64 &&
 800bed8:	429a      	cmp	r2, r3
 800beda:	dce1      	bgt.n	800bea0 <Audio_VolumeCtl+0x10>
        }
  mic_instance = 0;
 800bedc:	2300      	movs	r3, #0
 800bede:	60bb      	str	r3, [r7, #8]
  /* Now do the volume adjustment */
  return CCA02M1_AUDIO_IN_SetVolume(mic_instance, j);  
 800bee0:	68f9      	ldr	r1, [r7, #12]
 800bee2:	68b8      	ldr	r0, [r7, #8]
 800bee4:	f7f5 fa80 	bl	80013e8 <CCA02M1_AUDIO_IN_SetVolume>
 800bee8:	4603      	mov	r3, r0
 800beea:	b25b      	sxtb	r3, r3
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	0800fe44 	.word	0x0800fe44

0800bef8 <Audio_MuteCtl>:
* @brief  Controls AUDIO Mute.              
* @param  cmd: Command opcode
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_MuteCtl(uint8_t cmd)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	4603      	mov	r3, r0
 800bf00:	71fb      	strb	r3, [r7, #7]
  return BSP_ERROR_NONE;
 800bf02:	2300      	movs	r3, #0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <Audio_Stop>:
* @brief  Stops audio acquisition
* @param  none
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_Stop(void)
{  
 800bf10:	b480      	push	{r7}
 800bf12:	af00      	add	r7, sp, #0
#ifndef DISABLE_USB_DRIVEN_ACQUISITION  
  return CCA02M1_AUDIO_IN_Stop(CCA02M1_AUDIO_INSTANCE);  
#else
  return BSP_ERROR_NONE;
 800bf14:	2300      	movs	r3, #0
#endif
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <Audio_Pause>:
* @param  none
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/

static int8_t Audio_Pause(void)
{
 800bf20:	b480      	push	{r7}
 800bf22:	af00      	add	r7, sp, #0
  return 0;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <Audio_Resume>:
* @brief  Resumes audio acquisition
* @param  none
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_Resume(void)
{  
 800bf30:	b480      	push	{r7}
 800bf32:	af00      	add	r7, sp, #0
  return BSP_ERROR_NONE;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <Audio_CommandMgr>:
* @param  None
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/

static int8_t Audio_CommandMgr(uint8_t cmd)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	4603      	mov	r3, r0
 800bf48:	71fb      	strb	r3, [r7, #7]
  return BSP_ERROR_NONE;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <Send_Audio_to_USB>:
* @note Depending on the calling frequency, a coherent amount of samples must be passed to
*       the function. E.g.: assuming a Sampling frequency of 16 KHz and 1 channel,
*       you can pass 16 PCM samples if the function is called each millisecond,
*       32 samples if called every 2 milliseconds and so on.
*/
void Send_Audio_to_USB(int16_t * audioData, uint16_t PCMSamples){
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	460b      	mov	r3, r1
 800bf62:	807b      	strh	r3, [r7, #2]
  
  USBD_AUDIO_Data_Transfer(&hUSBDDevice, (int16_t *)audioData, PCMSamples);
 800bf64:	887b      	ldrh	r3, [r7, #2]
 800bf66:	461a      	mov	r2, r3
 800bf68:	6879      	ldr	r1, [r7, #4]
 800bf6a:	4803      	ldr	r0, [pc, #12]	; (800bf78 <Send_Audio_to_USB+0x20>)
 800bf6c:	f7fd fb5e 	bl	800962c <USBD_AUDIO_Data_Transfer>
}
 800bf70:	bf00      	nop
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	200021a0 	.word	0x200021a0

0800bf7c <__NVIC_SetPriority>:
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	4603      	mov	r3, r0
 800bf84:	6039      	str	r1, [r7, #0]
 800bf86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	db0a      	blt.n	800bfa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	490c      	ldr	r1, [pc, #48]	; (800bfc8 <__NVIC_SetPriority+0x4c>)
 800bf96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf9a:	0112      	lsls	r2, r2, #4
 800bf9c:	b2d2      	uxtb	r2, r2
 800bf9e:	440b      	add	r3, r1
 800bfa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bfa4:	e00a      	b.n	800bfbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	4908      	ldr	r1, [pc, #32]	; (800bfcc <__NVIC_SetPriority+0x50>)
 800bfac:	79fb      	ldrb	r3, [r7, #7]
 800bfae:	f003 030f 	and.w	r3, r3, #15
 800bfb2:	3b04      	subs	r3, #4
 800bfb4:	0112      	lsls	r2, r2, #4
 800bfb6:	b2d2      	uxtb	r2, r2
 800bfb8:	440b      	add	r3, r1
 800bfba:	761a      	strb	r2, [r3, #24]
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	e000e100 	.word	0xe000e100
 800bfcc:	e000ed00 	.word	0xe000ed00

0800bfd0 <HAL_PCD_MspInit>:
* @brief  Initializes the PCD MSP.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b08a      	sub	sp, #40	; 0x28
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  /* Note: On STM32F401-Discovery board only USB OTG FS core is supported. */
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hpcd->Instance == USB_OTG_FS)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfe0:	d13a      	bne.n	800c058 <HAL_PCD_MspInit+0x88>
  {
    /* Configure USB FS GPIOs */
    __GPIOA_CLK_ENABLE();
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	613b      	str	r3, [r7, #16]
 800bfe6:	4b1e      	ldr	r3, [pc, #120]	; (800c060 <HAL_PCD_MspInit+0x90>)
 800bfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfea:	4a1d      	ldr	r2, [pc, #116]	; (800c060 <HAL_PCD_MspInit+0x90>)
 800bfec:	f043 0301 	orr.w	r3, r3, #1
 800bff0:	6313      	str	r3, [r2, #48]	; 0x30
 800bff2:	4b1b      	ldr	r3, [pc, #108]	; (800c060 <HAL_PCD_MspInit+0x90>)
 800bff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff6:	f003 0301 	and.w	r3, r3, #1
 800bffa:	613b      	str	r3, [r7, #16]
 800bffc:	693b      	ldr	r3, [r7, #16]
    
    /* Configure DM DP Pins */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800bffe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c004:	2303      	movs	r3, #3
 800c006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c008:	2302      	movs	r3, #2
 800c00a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c00c:	2300      	movs	r3, #0
 800c00e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c010:	230a      	movs	r3, #10
 800c012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800c014:	f107 0314 	add.w	r3, r7, #20
 800c018:	4619      	mov	r1, r3
 800c01a:	4812      	ldr	r0, [pc, #72]	; (800c064 <HAL_PCD_MspInit+0x94>)
 800c01c:	f7f6 fb8e 	bl	800273c <HAL_GPIO_Init>
    
    /* Enable USB FS Clocks */ 
    __USB_OTG_FS_CLK_ENABLE();
 800c020:	4b0f      	ldr	r3, [pc, #60]	; (800c060 <HAL_PCD_MspInit+0x90>)
 800c022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c024:	4a0e      	ldr	r2, [pc, #56]	; (800c060 <HAL_PCD_MspInit+0x90>)
 800c026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c02a:	6353      	str	r3, [r2, #52]	; 0x34
 800c02c:	2300      	movs	r3, #0
 800c02e:	60fb      	str	r3, [r7, #12]
 800c030:	4b0b      	ldr	r3, [pc, #44]	; (800c060 <HAL_PCD_MspInit+0x90>)
 800c032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c034:	4a0a      	ldr	r2, [pc, #40]	; (800c060 <HAL_PCD_MspInit+0x90>)
 800c036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c03a:	6453      	str	r3, [r2, #68]	; 0x44
 800c03c:	4b08      	ldr	r3, [pc, #32]	; (800c060 <HAL_PCD_MspInit+0x90>)
 800c03e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c044:	60fb      	str	r3, [r7, #12]
 800c046:	68fb      	ldr	r3, [r7, #12]
    
    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c048:	2200      	movs	r2, #0
 800c04a:	2105      	movs	r1, #5
 800c04c:	2043      	movs	r0, #67	; 0x43
 800c04e:	f7f5 ff72 	bl	8001f36 <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c052:	2043      	movs	r0, #67	; 0x43
 800c054:	f7f5 ff8b 	bl	8001f6e <HAL_NVIC_EnableIRQ>
  } 
}
 800c058:	bf00      	nop
 800c05a:	3728      	adds	r7, #40	; 0x28
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	40023800 	.word	0x40023800
 800c064:	40020000 	.word	0x40020000

0800c068 <HAL_PCD_SetupStageCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c07c:	4619      	mov	r1, r3
 800c07e:	4610      	mov	r0, r2
 800c080:	f7fd ff7e 	bl	8009f80 <USBD_LL_SetupStage>
}
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <HAL_PCD_DataOutStageCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	460b      	mov	r3, r1
 800c096:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c09e:	78fa      	ldrb	r2, [r7, #3]
 800c0a0:	6879      	ldr	r1, [r7, #4]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	00db      	lsls	r3, r3, #3
 800c0a6:	1a9b      	subs	r3, r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	440b      	add	r3, r1
 800c0ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	78fb      	ldrb	r3, [r7, #3]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	f7fd ffb6 	bl	800a026 <USBD_LL_DataOutStage>
}
 800c0ba:	bf00      	nop
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <HAL_PCD_DataInStageCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b082      	sub	sp, #8
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c0d4:	78fa      	ldrb	r2, [r7, #3]
 800c0d6:	6879      	ldr	r1, [r7, #4]
 800c0d8:	4613      	mov	r3, r2
 800c0da:	00db      	lsls	r3, r3, #3
 800c0dc:	1a9b      	subs	r3, r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	440b      	add	r3, r1
 800c0e2:	3348      	adds	r3, #72	; 0x48
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	78fb      	ldrb	r3, [r7, #3]
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	f7fd ffff 	bl	800a0ec <USBD_LL_DataInStage>
} 
 800c0ee:	bf00      	nop
 800c0f0:	3708      	adds	r7, #8
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <HAL_PCD_SOFCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b082      	sub	sp, #8
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c104:	4618      	mov	r0, r3
 800c106:	f7fe f903 	bl	800a310 <USBD_LL_SOF>
}
 800c10a:	bf00      	nop
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <HAL_PCD_ResetCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800c112:	b580      	push	{r7, lr}
 800c114:	b084      	sub	sp, #16
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c11a:	2301      	movs	r3, #1
 800c11c:	73fb      	strb	r3, [r7, #15]
  
  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d002      	beq.n	800c12c <HAL_PCD_ResetCallback+0x1a>
 800c126:	2b02      	cmp	r3, #2
 800c128:	d003      	beq.n	800c132 <HAL_PCD_ResetCallback+0x20>
 800c12a:	e005      	b.n	800c138 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 800c12c:	2300      	movs	r3, #0
 800c12e:	73fb      	strb	r3, [r7, #15]
    break;
 800c130:	e005      	b.n	800c13e <HAL_PCD_ResetCallback+0x2c>
    
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 800c132:	2301      	movs	r3, #1
 800c134:	73fb      	strb	r3, [r7, #15]
    break;
 800c136:	e002      	b.n	800c13e <HAL_PCD_ResetCallback+0x2c>
    
  default:
    speed = USBD_SPEED_FULL;
 800c138:	2301      	movs	r3, #1
 800c13a:	73fb      	strb	r3, [r7, #15]
    break;
 800c13c:	bf00      	nop
  }
  USBD_LL_SetSpeed(hpcd->pData, speed);  
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c144:	7bfa      	ldrb	r2, [r7, #15]
 800c146:	4611      	mov	r1, r2
 800c148:	4618      	mov	r0, r3
 800c14a:	f7fe f8a6 	bl	800a29a <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset(hpcd->pData);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c154:	4618      	mov	r0, r3
 800c156:	f7fe f85f 	bl	800a218 <USBD_LL_Reset>
}
 800c15a:	bf00      	nop
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <HAL_PCD_SuspendCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b082      	sub	sp, #8
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c170:	4618      	mov	r0, r3
 800c172:	f7fe f8a2 	bl	800a2ba <USBD_LL_Suspend>
}
 800c176:	bf00      	nop
 800c178:	3708      	adds	r7, #8
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <HAL_PCD_ResumeCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b082      	sub	sp, #8
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7fe f8a9 	bl	800a2e4 <USBD_LL_Resume>
}
 800c192:	bf00      	nop
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <HAL_PCD_ISOOUTIncompleteCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b082      	sub	sp, #8
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1ac:	78fa      	ldrb	r2, [r7, #3]
 800c1ae:	4611      	mov	r1, r2
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7fe f8d4 	bl	800a35e <USBD_LL_IsoOUTIncomplete>
}
 800c1b6:	bf00      	nop
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <HAL_PCD_ISOINIncompleteCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b082      	sub	sp, #8
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1d0:	78fa      	ldrb	r2, [r7, #3]
 800c1d2:	4611      	mov	r1, r2
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fe f8b5 	bl	800a344 <USBD_LL_IsoINIncomplete>
}
 800c1da:	bf00      	nop
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <HAL_PCD_ConnectCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b082      	sub	sp, #8
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fe f8c1 	bl	800a378 <USBD_LL_DevConnected>
}
 800c1f6:	bf00      	nop
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <HAL_PCD_DisconnectCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b082      	sub	sp, #8
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fe f8be 	bl	800a38e <USBD_LL_DevDisconnected>
}
 800c212:	bf00      	nop
 800c214:	3708      	adds	r7, #8
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
	...

0800c21c <USBD_LL_Init>:
*         Initialize the Low Level portion of the Device driver.
* @param  pdev: Device handle
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  /* Change Systick prioity */
  NVIC_SetPriority (SysTick_IRQn, 0);  
 800c224:	2100      	movs	r1, #0
 800c226:	f04f 30ff 	mov.w	r0, #4294967295
 800c22a:	f7ff fea7 	bl	800bf7c <__NVIC_SetPriority>
  
  /*Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 800c22e:	4b1e      	ldr	r3, [pc, #120]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c230:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c234:	601a      	str	r2, [r3, #0]
  hpcd.Init.dev_endpoints = 3; 
 800c236:	4b1c      	ldr	r3, [pc, #112]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c238:	2203      	movs	r2, #3
 800c23a:	605a      	str	r2, [r3, #4]
  hpcd.Init.use_dedicated_ep1 = 0;
 800c23c:	4b1a      	ldr	r3, [pc, #104]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c23e:	2200      	movs	r2, #0
 800c240:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;  
 800c242:	4b19      	ldr	r3, [pc, #100]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c244:	2240      	movs	r2, #64	; 0x40
 800c246:	615a      	str	r2, [r3, #20]
  hpcd.Init.dma_enable = 0;
 800c248:	4b17      	ldr	r3, [pc, #92]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	611a      	str	r2, [r3, #16]
  hpcd.Init.low_power_enable = 0;
 800c24e:	4b16      	ldr	r3, [pc, #88]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c250:	2200      	movs	r2, #0
 800c252:	621a      	str	r2, [r3, #32]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED; 
 800c254:	4b14      	ldr	r3, [pc, #80]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c256:	2202      	movs	r2, #2
 800c258:	619a      	str	r2, [r3, #24]
  hpcd.Init.Sof_enable = 0;
 800c25a:	4b13      	ldr	r3, [pc, #76]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c25c:	2200      	movs	r2, #0
 800c25e:	61da      	str	r2, [r3, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800c260:	4b11      	ldr	r3, [pc, #68]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c262:	2202      	movs	r2, #2
 800c264:	60da      	str	r2, [r3, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 800c266:	4b10      	ldr	r3, [pc, #64]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c268:	2200      	movs	r2, #0
 800c26a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 800c26c:	4a0e      	ldr	r2, [pc, #56]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a0c      	ldr	r2, [pc, #48]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c278:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  /*Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 800c27c:	480a      	ldr	r0, [pc, #40]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c27e:	f7f6 fefd 	bl	800307c <HAL_PCD_Init>
  
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 800c282:	2180      	movs	r1, #128	; 0x80
 800c284:	4808      	ldr	r0, [pc, #32]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c286:	f7f8 f8a8 	bl	80043da <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 800c28a:	2240      	movs	r2, #64	; 0x40
 800c28c:	2100      	movs	r1, #0
 800c28e:	4806      	ldr	r0, [pc, #24]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c290:	f7f8 f85c 	bl	800434c <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x64);
 800c294:	2264      	movs	r2, #100	; 0x64
 800c296:	2101      	movs	r1, #1
 800c298:	4803      	ldr	r0, [pc, #12]	; (800c2a8 <USBD_LL_Init+0x8c>)
 800c29a:	f7f8 f857 	bl	800434c <HAL_PCDEx_SetTxFiFo>

  
  return USBD_OK;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	2000bb10 	.word	0x2000bb10

0800c2ac <USBD_LL_Start>:
*         Start the Low Level portion of the Device driver.
* @param  pdev: Device handle
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7f7 f802 	bl	80032c4 <HAL_PCD_Start>
  return USBD_OK; 
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <USBD_LL_OpenEP>:
*/
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                     uint8_t  ep_addr,                                      
                                     uint8_t  ep_type,
                                     uint16_t ep_mps)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b082      	sub	sp, #8
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
 800c2d2:	4608      	mov	r0, r1
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	4603      	mov	r3, r0
 800c2da:	70fb      	strb	r3, [r7, #3]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	70bb      	strb	r3, [r7, #2]
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData, 
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c2ea:	78bb      	ldrb	r3, [r7, #2]
 800c2ec:	883a      	ldrh	r2, [r7, #0]
 800c2ee:	78f9      	ldrb	r1, [r7, #3]
 800c2f0:	f7f7 fc1f 	bl	8003b32 <HAL_PCD_EP_Open>
                  ep_addr, 
                  ep_mps, 
                  ep_type);
  
  return USBD_OK; 
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3708      	adds	r7, #8
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <USBD_LL_CloseEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b082      	sub	sp, #8
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	460b      	mov	r3, r1
 800c308:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c310:	78fa      	ldrb	r2, [r7, #3]
 800c312:	4611      	mov	r1, r2
 800c314:	4618      	mov	r0, r3
 800c316:	f7f7 fc74 	bl	8003c02 <HAL_PCD_EP_Close>
  return USBD_OK; 
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3708      	adds	r7, #8
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <USBD_LL_FlushEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_FlushEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b082      	sub	sp, #8
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	460b      	mov	r3, r1
 800c32e:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c336:	78fa      	ldrb	r2, [r7, #3]
 800c338:	4611      	mov	r1, r2
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7f7 fdfa 	bl	8003f34 <HAL_PCD_EP_Flush>
  return USBD_OK; 
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <USBD_LL_StallEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b082      	sub	sp, #8
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
 800c352:	460b      	mov	r3, r1
 800c354:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c35c:	78fa      	ldrb	r2, [r7, #3]
 800c35e:	4611      	mov	r1, r2
 800c360:	4618      	mov	r0, r3
 800c362:	f7f7 fd2d 	bl	8003dc0 <HAL_PCD_EP_SetStall>
  return USBD_OK; 
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <USBD_LL_ClearStallEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	460b      	mov	r3, r1
 800c37a:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c382:	78fa      	ldrb	r2, [r7, #3]
 800c384:	4611      	mov	r1, r2
 800c386:	4618      	mov	r0, r3
 800c388:	f7f7 fd7e 	bl	8003e88 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3708      	adds	r7, #8
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <USBD_LL_IsStallEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval Stall (1: yes, 0: No)
*/
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800c396:	b480      	push	{r7}
 800c398:	b085      	sub	sp, #20
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
 800c39e:	460b      	mov	r3, r1
 800c3a0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData; 
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3a8:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800c3aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	da0b      	bge.n	800c3ca <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800c3b2:	78fb      	ldrb	r3, [r7, #3]
 800c3b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3b8:	68f9      	ldr	r1, [r7, #12]
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	00db      	lsls	r3, r3, #3
 800c3be:	1a9b      	subs	r3, r3, r2
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	440b      	add	r3, r1
 800c3c4:	333e      	adds	r3, #62	; 0x3e
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	e00b      	b.n	800c3e2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800c3ca:	78fb      	ldrb	r3, [r7, #3]
 800c3cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3d0:	68f9      	ldr	r1, [r7, #12]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	00db      	lsls	r3, r3, #3
 800c3d6:	1a9b      	subs	r3, r3, r2
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	440b      	add	r3, r1
 800c3dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c3e0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3714      	adds	r7, #20
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr

0800c3ee <USBD_LL_SetUSBAddress>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b082      	sub	sp, #8
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c400:	78fa      	ldrb	r2, [r7, #3]
 800c402:	4611      	mov	r1, r2
 800c404:	4618      	mov	r0, r3
 800c406:	f7f7 fb6f 	bl	8003ae8 <HAL_PCD_SetAddress>
  return USBD_OK; 
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <USBD_LL_Transmit>:
*/
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint32_t  size)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	607a      	str	r2, [r7, #4]
 800c41e:	603b      	str	r3, [r7, #0]
 800c420:	460b      	mov	r3, r1
 800c422:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c42a:	7af9      	ldrb	r1, [r7, #11]
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	f7f7 fc7c 	bl	8003d2c <HAL_PCD_EP_Transmit>
  return USBD_OK;   
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <USBD_LL_PrepareReceive>:
*/
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint32_t  size)
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b084      	sub	sp, #16
 800c442:	af00      	add	r7, sp, #0
 800c444:	60f8      	str	r0, [r7, #12]
 800c446:	607a      	str	r2, [r7, #4]
 800c448:	603b      	str	r3, [r7, #0]
 800c44a:	460b      	mov	r3, r1
 800c44c:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c454:	7af9      	ldrb	r1, [r7, #11]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	f7f7 fc1c 	bl	8003c96 <HAL_PCD_EP_Receive>
  return USBD_OK;   
 800c45e:	2300      	movs	r3, #0
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <USBD_AUDIO_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	4603      	mov	r3, r0
 800c470:	6039      	str	r1, [r7, #0]
 800c472:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(hUSBDDeviceDesc);
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	2212      	movs	r2, #18
 800c478:	801a      	strh	r2, [r3, #0]
  return hUSBDDeviceDesc;
 800c47a:	4b03      	ldr	r3, [pc, #12]	; (800c488 <USBD_AUDIO_DeviceDescriptor+0x20>)
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	20000634 	.word	0x20000634

0800c48c <USBD_AUDIO_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	4603      	mov	r3, r0
 800c494:	6039      	str	r1, [r7, #0]
 800c496:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);  
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	2204      	movs	r2, #4
 800c49c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c49e:	4b03      	ldr	r3, [pc, #12]	; (800c4ac <USBD_AUDIO_LangIDStrDescriptor+0x20>)
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr
 800c4ac:	20000648 	.word	0x20000648

0800c4b0 <USBD_AUDIO_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	6039      	str	r1, [r7, #0]
 800c4ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4bc:	79fb      	ldrb	r3, [r7, #7]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d105      	bne.n	800c4ce <USBD_AUDIO_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800c4c2:	683a      	ldr	r2, [r7, #0]
 800c4c4:	4907      	ldr	r1, [pc, #28]	; (800c4e4 <USBD_AUDIO_ProductStrDescriptor+0x34>)
 800c4c6:	4808      	ldr	r0, [pc, #32]	; (800c4e8 <USBD_AUDIO_ProductStrDescriptor+0x38>)
 800c4c8:	f7fe fcdd 	bl	800ae86 <USBD_GetString>
 800c4cc:	e004      	b.n	800c4d8 <USBD_AUDIO_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	4904      	ldr	r1, [pc, #16]	; (800c4e4 <USBD_AUDIO_ProductStrDescriptor+0x34>)
 800c4d2:	4806      	ldr	r0, [pc, #24]	; (800c4ec <USBD_AUDIO_ProductStrDescriptor+0x3c>)
 800c4d4:	f7fe fcd7 	bl	800ae86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4d8:	4b02      	ldr	r3, [pc, #8]	; (800c4e4 <USBD_AUDIO_ProductStrDescriptor+0x34>)
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	2000bf18 	.word	0x2000bf18
 800c4e8:	0800fd50 	.word	0x0800fd50
 800c4ec:	0800fd74 	.word	0x0800fd74

0800c4f0 <USBD_AUDIO_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	6039      	str	r1, [r7, #0]
 800c4fa:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c4fc:	683a      	ldr	r2, [r7, #0]
 800c4fe:	4904      	ldr	r1, [pc, #16]	; (800c510 <USBD_AUDIO_ManufacturerStrDescriptor+0x20>)
 800c500:	4804      	ldr	r0, [pc, #16]	; (800c514 <USBD_AUDIO_ManufacturerStrDescriptor+0x24>)
 800c502:	f7fe fcc0 	bl	800ae86 <USBD_GetString>
  return USBD_StrDesc;
 800c506:	4b02      	ldr	r3, [pc, #8]	; (800c510 <USBD_AUDIO_ManufacturerStrDescriptor+0x20>)
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	2000bf18 	.word	0x2000bf18
 800c514:	0800fd98 	.word	0x0800fd98

0800c518 <USBD_AUDIO_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	4603      	mov	r3, r0
 800c520:	6039      	str	r1, [r7, #0]
 800c522:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c524:	79fb      	ldrb	r3, [r7, #7]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d105      	bne.n	800c536 <USBD_AUDIO_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 800c52a:	683a      	ldr	r2, [r7, #0]
 800c52c:	4907      	ldr	r1, [pc, #28]	; (800c54c <USBD_AUDIO_SerialStrDescriptor+0x34>)
 800c52e:	4808      	ldr	r0, [pc, #32]	; (800c550 <USBD_AUDIO_SerialStrDescriptor+0x38>)
 800c530:	f7fe fca9 	bl	800ae86 <USBD_GetString>
 800c534:	e004      	b.n	800c540 <USBD_AUDIO_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 800c536:	683a      	ldr	r2, [r7, #0]
 800c538:	4904      	ldr	r1, [pc, #16]	; (800c54c <USBD_AUDIO_SerialStrDescriptor+0x34>)
 800c53a:	4806      	ldr	r0, [pc, #24]	; (800c554 <USBD_AUDIO_SerialStrDescriptor+0x3c>)
 800c53c:	f7fe fca3 	bl	800ae86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c540:	4b02      	ldr	r3, [pc, #8]	; (800c54c <USBD_AUDIO_SerialStrDescriptor+0x34>)
}
 800c542:	4618      	mov	r0, r3
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	2000bf18 	.word	0x2000bf18
 800c550:	0800fdac 	.word	0x0800fdac
 800c554:	0800fdbc 	.word	0x0800fdbc

0800c558 <USBD_AUDIO_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	4603      	mov	r3, r0
 800c560:	6039      	str	r1, [r7, #0]
 800c562:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c564:	79fb      	ldrb	r3, [r7, #7]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d105      	bne.n	800c576 <USBD_AUDIO_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800c56a:	683a      	ldr	r2, [r7, #0]
 800c56c:	4907      	ldr	r1, [pc, #28]	; (800c58c <USBD_AUDIO_ConfigStrDescriptor+0x34>)
 800c56e:	4808      	ldr	r0, [pc, #32]	; (800c590 <USBD_AUDIO_ConfigStrDescriptor+0x38>)
 800c570:	f7fe fc89 	bl	800ae86 <USBD_GetString>
 800c574:	e004      	b.n	800c580 <USBD_AUDIO_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800c576:	683a      	ldr	r2, [r7, #0]
 800c578:	4904      	ldr	r1, [pc, #16]	; (800c58c <USBD_AUDIO_ConfigStrDescriptor+0x34>)
 800c57a:	4805      	ldr	r0, [pc, #20]	; (800c590 <USBD_AUDIO_ConfigStrDescriptor+0x38>)
 800c57c:	f7fe fc83 	bl	800ae86 <USBD_GetString>
  }
  return USBD_StrDesc;  
 800c580:	4b02      	ldr	r3, [pc, #8]	; (800c58c <USBD_AUDIO_ConfigStrDescriptor+0x34>)
}
 800c582:	4618      	mov	r0, r3
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	2000bf18 	.word	0x2000bf18
 800c590:	0800fdcc 	.word	0x0800fdcc

0800c594 <USBD_AUDIO_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	4603      	mov	r3, r0
 800c59c:	6039      	str	r1, [r7, #0]
 800c59e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5a0:	79fb      	ldrb	r3, [r7, #7]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d105      	bne.n	800c5b2 <USBD_AUDIO_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	4907      	ldr	r1, [pc, #28]	; (800c5c8 <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
 800c5aa:	4808      	ldr	r0, [pc, #32]	; (800c5cc <USBD_AUDIO_InterfaceStrDescriptor+0x38>)
 800c5ac:	f7fe fc6b 	bl	800ae86 <USBD_GetString>
 800c5b0:	e004      	b.n	800c5bc <USBD_AUDIO_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	4904      	ldr	r1, [pc, #16]	; (800c5c8 <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
 800c5b6:	4805      	ldr	r0, [pc, #20]	; (800c5cc <USBD_AUDIO_InterfaceStrDescriptor+0x38>)
 800c5b8:	f7fe fc65 	bl	800ae86 <USBD_GetString>
  }
  return USBD_StrDesc;  
 800c5bc:	4b02      	ldr	r3, [pc, #8]	; (800c5c8 <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	2000bf18 	.word	0x2000bf18
 800c5cc:	0800fddc 	.word	0x0800fddc

0800c5d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800c5d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c608 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c5d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c5d6:	e003      	b.n	800c5e0 <LoopCopyDataInit>

0800c5d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c5d8:	4b0c      	ldr	r3, [pc, #48]	; (800c60c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c5da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c5dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c5de:	3104      	adds	r1, #4

0800c5e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c5e0:	480b      	ldr	r0, [pc, #44]	; (800c610 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c5e2:	4b0c      	ldr	r3, [pc, #48]	; (800c614 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c5e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c5e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c5e8:	d3f6      	bcc.n	800c5d8 <CopyDataInit>
  ldr  r2, =_sbss
 800c5ea:	4a0b      	ldr	r2, [pc, #44]	; (800c618 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c5ec:	e002      	b.n	800c5f4 <LoopFillZerobss>

0800c5ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c5ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c5f0:	f842 3b04 	str.w	r3, [r2], #4

0800c5f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c5f4:	4b09      	ldr	r3, [pc, #36]	; (800c61c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c5f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c5f8:	d3f9      	bcc.n	800c5ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c5fa:	f7ff fb5d 	bl	800bcb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c5fe:	f001 ff3d 	bl	800e47c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c602:	f7ff fa1b 	bl	800ba3c <main>
  bx  lr    
 800c606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c608:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c60c:	0800ff94 	.word	0x0800ff94
  ldr  r0, =_sdata
 800c610:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c614:	200006b4 	.word	0x200006b4
  ldr  r2, =_sbss
 800c618:	200006b4 	.word	0x200006b4
  ldr  r3, = _ebss
 800c61c:	2000bfe4 	.word	0x2000bfe4

0800c620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c620:	e7fe      	b.n	800c620 <ADC_IRQHandler>
	...

0800c624 <D16_GENERIC>:
 800c624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c628:	b089      	sub	sp, #36	; 0x24
 800c62a:	68d4      	ldr	r4, [r2, #12]
 800c62c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c62e:	6993      	ldr	r3, [r2, #24]
 800c630:	9407      	str	r4, [sp, #28]
 800c632:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c634:	9306      	str	r3, [sp, #24]
 800c636:	9402      	str	r4, [sp, #8]
 800c638:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800c63c:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800c640:	69d3      	ldr	r3, [r2, #28]
 800c642:	6896      	ldr	r6, [r2, #8]
 800c644:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c646:	9103      	str	r1, [sp, #12]
 800c648:	2d00      	cmp	r5, #0
 800c64a:	d066      	beq.n	800c71a <D16_GENERIC+0xf6>
 800c64c:	f004 0510 	and.w	r5, r4, #16
 800c650:	f004 0420 	and.w	r4, r4, #32
 800c654:	9504      	str	r5, [sp, #16]
 800c656:	4938      	ldr	r1, [pc, #224]	; (800c738 <D16_GENERIC+0x114>)
 800c658:	9405      	str	r4, [sp, #20]
 800c65a:	f04f 0e00 	mov.w	lr, #0
 800c65e:	4635      	mov	r5, r6
 800c660:	e04f      	b.n	800c702 <D16_GENERIC+0xde>
 800c662:	5d87      	ldrb	r7, [r0, r6]
 800c664:	7804      	ldrb	r4, [r0, #0]
 800c666:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c66a:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800c66e:	b2e6      	uxtb	r6, r4
 800c670:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800c674:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800c678:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800c67c:	4433      	add	r3, r6
 800c67e:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800c682:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800c686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c68a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800c68e:	0aa3      	lsrs	r3, r4, #10
 800c690:	4c2a      	ldr	r4, [pc, #168]	; (800c73c <D16_GENERIC+0x118>)
 800c692:	fb26 5404 	smlad	r4, r6, r4, r5
 800c696:	4d2a      	ldr	r5, [pc, #168]	; (800c740 <D16_GENERIC+0x11c>)
 800c698:	fb26 f505 	smuad	r5, r6, r5
 800c69c:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800c6a0:	eb04 080a 	add.w	r8, r4, sl
 800c6a4:	eba8 080b 	sub.w	r8, r8, fp
 800c6a8:	4646      	mov	r6, r8
 800c6aa:	17f7      	asrs	r7, r6, #31
 800c6ac:	e9cd 6700 	strd	r6, r7, [sp]
 800c6b0:	9e04      	ldr	r6, [sp, #16]
 800c6b2:	f10e 0c01 	add.w	ip, lr, #1
 800c6b6:	b16e      	cbz	r6, 800c6d4 <D16_GENERIC+0xb0>
 800c6b8:	6a16      	ldr	r6, [r2, #32]
 800c6ba:	9f01      	ldr	r7, [sp, #4]
 800c6bc:	fba8 8906 	umull	r8, r9, r8, r6
 800c6c0:	fb06 9907 	mla	r9, r6, r7, r9
 800c6c4:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800c6c8:	f149 0900 	adc.w	r9, r9, #0
 800c6cc:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800c6d0:	46a3      	mov	fp, r4
 800c6d2:	4654      	mov	r4, sl
 800c6d4:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800c6d6:	9f02      	ldr	r7, [sp, #8]
 800c6d8:	0424      	lsls	r4, r4, #16
 800c6da:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c6de:	f04f 0900 	mov.w	r9, #0
 800c6e2:	fb0e fe06 	mul.w	lr, lr, r6
 800c6e6:	fbc7 8904 	smlal	r8, r9, r7, r4
 800c6ea:	9e03      	ldr	r6, [sp, #12]
 800c6ec:	464f      	mov	r7, r9
 800c6ee:	10bc      	asrs	r4, r7, #2
 800c6f0:	f304 040f 	ssat	r4, #16, r4
 800c6f4:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800c6f8:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800c6fa:	fa1f fe8c 	uxth.w	lr, ip
 800c6fe:	4574      	cmp	r4, lr
 800c700:	d90a      	bls.n	800c718 <D16_GENERIC+0xf4>
 800c702:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800c704:	2c01      	cmp	r4, #1
 800c706:	b2e6      	uxtb	r6, r4
 800c708:	d1ab      	bne.n	800c662 <D16_GENERIC+0x3e>
 800c70a:	9e05      	ldr	r6, [sp, #20]
 800c70c:	f850 4b02 	ldr.w	r4, [r0], #2
 800c710:	2e00      	cmp	r6, #0
 800c712:	d0ac      	beq.n	800c66e <D16_GENERIC+0x4a>
 800c714:	ba64      	rev16	r4, r4
 800c716:	e7aa      	b.n	800c66e <D16_GENERIC+0x4a>
 800c718:	462e      	mov	r6, r5
 800c71a:	9907      	ldr	r1, [sp, #28]
 800c71c:	61d3      	str	r3, [r2, #28]
 800c71e:	9b06      	ldr	r3, [sp, #24]
 800c720:	6096      	str	r6, [r2, #8]
 800c722:	2000      	movs	r0, #0
 800c724:	60d1      	str	r1, [r2, #12]
 800c726:	f8c2 a010 	str.w	sl, [r2, #16]
 800c72a:	f8c2 b014 	str.w	fp, [r2, #20]
 800c72e:	6193      	str	r3, [r2, #24]
 800c730:	b009      	add	sp, #36	; 0x24
 800c732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c736:	bf00      	nop
 800c738:	20000000 	.word	0x20000000
 800c73c:	00030001 	.word	0x00030001
 800c740:	00010003 	.word	0x00010003

0800c744 <D24_GENERIC>:
 800c744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c748:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800c74a:	6993      	ldr	r3, [r2, #24]
 800c74c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800c74e:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800c752:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800c756:	6894      	ldr	r4, [r2, #8]
 800c758:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800c75c:	b089      	sub	sp, #36	; 0x24
 800c75e:	9307      	str	r3, [sp, #28]
 800c760:	9503      	str	r5, [sp, #12]
 800c762:	69d3      	ldr	r3, [r2, #28]
 800c764:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c766:	9104      	str	r1, [sp, #16]
 800c768:	2e00      	cmp	r6, #0
 800c76a:	f000 8096 	beq.w	800c89a <D24_GENERIC+0x156>
 800c76e:	f005 0610 	and.w	r6, r5, #16
 800c772:	f005 0520 	and.w	r5, r5, #32
 800c776:	4954      	ldr	r1, [pc, #336]	; (800c8c8 <D24_GENERIC+0x184>)
 800c778:	9605      	str	r6, [sp, #20]
 800c77a:	9506      	str	r5, [sp, #24]
 800c77c:	f04f 0e00 	mov.w	lr, #0
 800c780:	f8cd 9008 	str.w	r9, [sp, #8]
 800c784:	e06a      	b.n	800c85c <D24_GENERIC+0x118>
 800c786:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800c78a:	f810 8007 	ldrb.w	r8, [r0, r7]
 800c78e:	f890 c000 	ldrb.w	ip, [r0]
 800c792:	042d      	lsls	r5, r5, #16
 800c794:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c798:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800c79c:	44ac      	add	ip, r5
 800c79e:	4438      	add	r0, r7
 800c7a0:	fa5f f68c 	uxtb.w	r6, ip
 800c7a4:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800c7a8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800c7ac:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800c7b0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c7b4:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800c7b8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800c7bc:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800c7c0:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800c7c4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c7c8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800c7cc:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800c7d0:	4d3e      	ldr	r5, [pc, #248]	; (800c8cc <D24_GENERIC+0x188>)
 800c7d2:	fb26 b705 	smlad	r7, r6, r5, fp
 800c7d6:	4d3e      	ldr	r5, [pc, #248]	; (800c8d0 <D24_GENERIC+0x18c>)
 800c7d8:	fb26 4b05 	smlad	fp, r6, r5, r4
 800c7dc:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800c7e0:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800c7e4:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800c7e8:	2401      	movs	r4, #1
 800c7ea:	fb26 f604 	smuad	r6, r6, r4
 800c7ee:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800c7f2:	9f02      	ldr	r7, [sp, #8]
 800c7f4:	eb0e 0c04 	add.w	ip, lr, r4
 800c7f8:	eb08 0406 	add.w	r4, r8, r6
 800c7fc:	eb05 060a 	add.w	r6, r5, sl
 800c800:	1bf6      	subs	r6, r6, r7
 800c802:	4637      	mov	r7, r6
 800c804:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800c808:	e9cd 7800 	strd	r7, r8, [sp]
 800c80c:	9f05      	ldr	r7, [sp, #20]
 800c80e:	b177      	cbz	r7, 800c82e <D24_GENERIC+0xea>
 800c810:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800c814:	9502      	str	r5, [sp, #8]
 800c816:	fba6 9a08 	umull	r9, sl, r6, r8
 800c81a:	9e01      	ldr	r6, [sp, #4]
 800c81c:	fb08 aa06 	mla	sl, r8, r6, sl
 800c820:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800c824:	f14a 0700 	adc.w	r7, sl, #0
 800c828:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800c82c:	4655      	mov	r5, sl
 800c82e:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800c830:	9f03      	ldr	r7, [sp, #12]
 800c832:	03ad      	lsls	r5, r5, #14
 800c834:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c838:	f04f 0900 	mov.w	r9, #0
 800c83c:	fb0e fe06 	mul.w	lr, lr, r6
 800c840:	fbc7 8905 	smlal	r8, r9, r7, r5
 800c844:	9e04      	ldr	r6, [sp, #16]
 800c846:	464f      	mov	r7, r9
 800c848:	10bd      	asrs	r5, r7, #2
 800c84a:	f305 050f 	ssat	r5, #16, r5
 800c84e:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800c852:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c854:	fa1f fe8c 	uxth.w	lr, ip
 800c858:	4575      	cmp	r5, lr
 800c85a:	d91c      	bls.n	800c896 <D24_GENERIC+0x152>
 800c85c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800c85e:	b2ef      	uxtb	r7, r5
 800c860:	2d01      	cmp	r5, #1
 800c862:	b23e      	sxth	r6, r7
 800c864:	d18f      	bne.n	800c786 <D24_GENERIC+0x42>
 800c866:	9d06      	ldr	r5, [sp, #24]
 800c868:	b15d      	cbz	r5, 800c882 <D24_GENERIC+0x13e>
 800c86a:	f01e 0f01 	tst.w	lr, #1
 800c86e:	d122      	bne.n	800c8b6 <D24_GENERIC+0x172>
 800c870:	7805      	ldrb	r5, [r0, #0]
 800c872:	78c7      	ldrb	r7, [r0, #3]
 800c874:	7846      	ldrb	r6, [r0, #1]
 800c876:	022d      	lsls	r5, r5, #8
 800c878:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800c87c:	44b4      	add	ip, r6
 800c87e:	3002      	adds	r0, #2
 800c880:	e78e      	b.n	800c7a0 <D24_GENERIC+0x5c>
 800c882:	7846      	ldrb	r6, [r0, #1]
 800c884:	f890 c002 	ldrb.w	ip, [r0, #2]
 800c888:	f810 5b03 	ldrb.w	r5, [r0], #3
 800c88c:	0236      	lsls	r6, r6, #8
 800c88e:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800c892:	44ac      	add	ip, r5
 800c894:	e784      	b.n	800c7a0 <D24_GENERIC+0x5c>
 800c896:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c89a:	61d3      	str	r3, [r2, #28]
 800c89c:	9b07      	ldr	r3, [sp, #28]
 800c89e:	6094      	str	r4, [r2, #8]
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	f8c2 b00c 	str.w	fp, [r2, #12]
 800c8a6:	f8c2 a010 	str.w	sl, [r2, #16]
 800c8aa:	f8c2 9014 	str.w	r9, [r2, #20]
 800c8ae:	6193      	str	r3, [r2, #24]
 800c8b0:	b009      	add	sp, #36	; 0x24
 800c8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b6:	78c5      	ldrb	r5, [r0, #3]
 800c8b8:	7887      	ldrb	r7, [r0, #2]
 800c8ba:	f810 6b04 	ldrb.w	r6, [r0], #4
 800c8be:	022d      	lsls	r5, r5, #8
 800c8c0:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800c8c4:	44b4      	add	ip, r6
 800c8c6:	e76b      	b.n	800c7a0 <D24_GENERIC+0x5c>
 800c8c8:	20000000 	.word	0x20000000
 800c8cc:	00030001 	.word	0x00030001
 800c8d0:	00060007 	.word	0x00060007

0800c8d4 <D32_GENERIC>:
 800c8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c8da:	6993      	ldr	r3, [r2, #24]
 800c8dc:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c8de:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800c8e2:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800c8e6:	69d6      	ldr	r6, [r2, #28]
 800c8e8:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800c8ec:	b089      	sub	sp, #36	; 0x24
 800c8ee:	9307      	str	r3, [sp, #28]
 800c8f0:	9403      	str	r4, [sp, #12]
 800c8f2:	6893      	ldr	r3, [r2, #8]
 800c8f4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c8f6:	9104      	str	r1, [sp, #16]
 800c8f8:	2d00      	cmp	r5, #0
 800c8fa:	f000 809f 	beq.w	800ca3c <D32_GENERIC+0x168>
 800c8fe:	f004 0510 	and.w	r5, r4, #16
 800c902:	f004 0420 	and.w	r4, r4, #32
 800c906:	9505      	str	r5, [sp, #20]
 800c908:	4953      	ldr	r1, [pc, #332]	; (800ca58 <D32_GENERIC+0x184>)
 800c90a:	9406      	str	r4, [sp, #24]
 800c90c:	f04f 0c00 	mov.w	ip, #0
 800c910:	f8cd 9008 	str.w	r9, [sp, #8]
 800c914:	461d      	mov	r5, r3
 800c916:	4617      	mov	r7, r2
 800c918:	e077      	b.n	800ca0a <D32_GENERIC+0x136>
 800c91a:	f818 3003 	ldrb.w	r3, [r8, r3]
 800c91e:	f810 800e 	ldrb.w	r8, [r0, lr]
 800c922:	f810 e002 	ldrb.w	lr, [r0, r2]
 800c926:	7800      	ldrb	r0, [r0, #0]
 800c928:	041b      	lsls	r3, r3, #16
 800c92a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800c92e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800c932:	4403      	add	r3, r0
 800c934:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800c938:	b2dc      	uxtb	r4, r3
 800c93a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c93e:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800c942:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800c946:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c94a:	0e1b      	lsrs	r3, r3, #24
 800c94c:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800c950:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800c954:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c958:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800c95c:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800c960:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800c964:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800c968:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c96c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c970:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c974:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800c978:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c97c:	4b37      	ldr	r3, [pc, #220]	; (800ca5c <D32_GENERIC+0x188>)
 800c97e:	fb22 b403 	smlad	r4, r2, r3, fp
 800c982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c986:	fb2e 4803 	smlad	r8, lr, r3, r4
 800c98a:	4b35      	ldr	r3, [pc, #212]	; (800ca60 <D32_GENERIC+0x18c>)
 800c98c:	fb22 5503 	smlad	r5, r2, r3, r5
 800c990:	4b34      	ldr	r3, [pc, #208]	; (800ca64 <D32_GENERIC+0x190>)
 800c992:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800c996:	2301      	movs	r3, #1
 800c998:	fb22 f203 	smuad	r2, r2, r3
 800c99c:	4b32      	ldr	r3, [pc, #200]	; (800ca68 <D32_GENERIC+0x194>)
 800c99e:	fb2e 2503 	smlad	r5, lr, r3, r2
 800c9a2:	9b02      	ldr	r3, [sp, #8]
 800c9a4:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800c9a8:	eb04 080a 	add.w	r8, r4, sl
 800c9ac:	eba8 0803 	sub.w	r8, r8, r3
 800c9b0:	4642      	mov	r2, r8
 800c9b2:	17d3      	asrs	r3, r2, #31
 800c9b4:	e9cd 2300 	strd	r2, r3, [sp]
 800c9b8:	9b05      	ldr	r3, [sp, #20]
 800c9ba:	f10c 0e01 	add.w	lr, ip, #1
 800c9be:	b16b      	cbz	r3, 800c9dc <D32_GENERIC+0x108>
 800c9c0:	6a3a      	ldr	r2, [r7, #32]
 800c9c2:	9b01      	ldr	r3, [sp, #4]
 800c9c4:	9402      	str	r4, [sp, #8]
 800c9c6:	fba8 8902 	umull	r8, r9, r8, r2
 800c9ca:	fb02 9903 	mla	r9, r2, r3, r9
 800c9ce:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800c9d2:	f149 0900 	adc.w	r9, r9, #0
 800c9d6:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800c9da:	4654      	mov	r4, sl
 800c9dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9de:	9a04      	ldr	r2, [sp, #16]
 800c9e0:	fb0c fc03 	mul.w	ip, ip, r3
 800c9e4:	9b03      	ldr	r3, [sp, #12]
 800c9e6:	0364      	lsls	r4, r4, #13
 800c9e8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c9ec:	f04f 0900 	mov.w	r9, #0
 800c9f0:	fbc3 8904 	smlal	r8, r9, r3, r4
 800c9f4:	464b      	mov	r3, r9
 800c9f6:	109b      	asrs	r3, r3, #2
 800c9f8:	f303 030f 	ssat	r3, #16, r3
 800c9fc:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800ca00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ca02:	fa1f fc8e 	uxth.w	ip, lr
 800ca06:	4563      	cmp	r3, ip
 800ca08:	d914      	bls.n	800ca34 <D32_GENERIC+0x160>
 800ca0a:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800ca0c:	b2e2      	uxtb	r2, r4
 800ca0e:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800ca12:	eb00 080e 	add.w	r8, r0, lr
 800ca16:	4253      	negs	r3, r2
 800ca18:	2c01      	cmp	r4, #1
 800ca1a:	eb08 0403 	add.w	r4, r8, r3
 800ca1e:	f47f af7c 	bne.w	800c91a <D32_GENERIC+0x46>
 800ca22:	1d02      	adds	r2, r0, #4
 800ca24:	6803      	ldr	r3, [r0, #0]
 800ca26:	9806      	ldr	r0, [sp, #24]
 800ca28:	b110      	cbz	r0, 800ca30 <D32_GENERIC+0x15c>
 800ca2a:	ba5b      	rev16	r3, r3
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	e783      	b.n	800c938 <D32_GENERIC+0x64>
 800ca30:	4610      	mov	r0, r2
 800ca32:	e781      	b.n	800c938 <D32_GENERIC+0x64>
 800ca34:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800ca38:	462b      	mov	r3, r5
 800ca3a:	463a      	mov	r2, r7
 800ca3c:	6093      	str	r3, [r2, #8]
 800ca3e:	9b07      	ldr	r3, [sp, #28]
 800ca40:	f8c2 b00c 	str.w	fp, [r2, #12]
 800ca44:	2000      	movs	r0, #0
 800ca46:	61d6      	str	r6, [r2, #28]
 800ca48:	f8c2 a010 	str.w	sl, [r2, #16]
 800ca4c:	f8c2 9014 	str.w	r9, [r2, #20]
 800ca50:	6193      	str	r3, [r2, #24]
 800ca52:	b009      	add	sp, #36	; 0x24
 800ca54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca58:	20000000 	.word	0x20000000
 800ca5c:	00060003 	.word	0x00060003
 800ca60:	000a000c 	.word	0x000a000c
 800ca64:	000c000a 	.word	0x000c000a
 800ca68:	00030006 	.word	0x00030006

0800ca6c <D48_GENERIC>:
 800ca6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca70:	b089      	sub	sp, #36	; 0x24
 800ca72:	6953      	ldr	r3, [r2, #20]
 800ca74:	68d4      	ldr	r4, [r2, #12]
 800ca76:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ca78:	9302      	str	r3, [sp, #8]
 800ca7a:	9400      	str	r4, [sp, #0]
 800ca7c:	6993      	ldr	r3, [r2, #24]
 800ca7e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800ca80:	9307      	str	r3, [sp, #28]
 800ca82:	9403      	str	r4, [sp, #12]
 800ca84:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800ca88:	69d6      	ldr	r6, [r2, #28]
 800ca8a:	6893      	ldr	r3, [r2, #8]
 800ca8c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ca8e:	9104      	str	r1, [sp, #16]
 800ca90:	2d00      	cmp	r5, #0
 800ca92:	f000 80c5 	beq.w	800cc20 <D48_GENERIC+0x1b4>
 800ca96:	f004 0510 	and.w	r5, r4, #16
 800ca9a:	f004 0420 	and.w	r4, r4, #32
 800ca9e:	4967      	ldr	r1, [pc, #412]	; (800cc3c <D48_GENERIC+0x1d0>)
 800caa0:	9505      	str	r5, [sp, #20]
 800caa2:	9406      	str	r4, [sp, #24]
 800caa4:	f04f 0c00 	mov.w	ip, #0
 800caa8:	4657      	mov	r7, sl
 800caaa:	9301      	str	r3, [sp, #4]
 800caac:	e09c      	b.n	800cbe8 <D48_GENERIC+0x17c>
 800caae:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800cab2:	f810 b009 	ldrb.w	fp, [r0, r9]
 800cab6:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800caba:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800cabe:	7800      	ldrb	r0, [r0, #0]
 800cac0:	0424      	lsls	r4, r4, #16
 800cac2:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800cac6:	f818 4005 	ldrb.w	r4, [r8, r5]
 800caca:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800cace:	44a8      	add	r8, r5
 800cad0:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800cad4:	eb0b 0500 	add.w	r5, fp, r0
 800cad8:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800cadc:	fa5f f885 	uxtb.w	r8, r5
 800cae0:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800cae4:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800cae8:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800caec:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800caf0:	0e2d      	lsrs	r5, r5, #24
 800caf2:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800caf6:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800cafa:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800cafe:	b2e6      	uxtb	r6, r4
 800cb00:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800cb04:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800cb08:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800cb0c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800cb10:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800cb14:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800cb18:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800cb1c:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800cb20:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800cb24:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800cb28:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800cb2c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800cb30:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800cb34:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800cb38:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800cb3c:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800cb40:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800cb44:	4c3e      	ldr	r4, [pc, #248]	; (800cc40 <D48_GENERIC+0x1d4>)
 800cb46:	9d00      	ldr	r5, [sp, #0]
 800cb48:	fb2a 5404 	smlad	r4, sl, r4, r5
 800cb4c:	4d3d      	ldr	r5, [pc, #244]	; (800cc44 <D48_GENERIC+0x1d8>)
 800cb4e:	fb28 4405 	smlad	r4, r8, r5, r4
 800cb52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cb56:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800cb5a:	4c3b      	ldr	r4, [pc, #236]	; (800cc48 <D48_GENERIC+0x1dc>)
 800cb5c:	9b01      	ldr	r3, [sp, #4]
 800cb5e:	fb2a 3304 	smlad	r3, sl, r4, r3
 800cb62:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800cb66:	fb28 3304 	smlad	r3, r8, r4, r3
 800cb6a:	4c38      	ldr	r4, [pc, #224]	; (800cc4c <D48_GENERIC+0x1e0>)
 800cb6c:	fb2e 3304 	smlad	r3, lr, r4, r3
 800cb70:	2501      	movs	r5, #1
 800cb72:	9300      	str	r3, [sp, #0]
 800cb74:	fb2a fa05 	smuad	sl, sl, r5
 800cb78:	4b35      	ldr	r3, [pc, #212]	; (800cc50 <D48_GENERIC+0x1e4>)
 800cb7a:	fb28 a803 	smlad	r8, r8, r3, sl
 800cb7e:	4b35      	ldr	r3, [pc, #212]	; (800cc54 <D48_GENERIC+0x1e8>)
 800cb80:	fb2e 8303 	smlad	r3, lr, r3, r8
 800cb84:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800cb88:	9301      	str	r3, [sp, #4]
 800cb8a:	9b02      	ldr	r3, [sp, #8]
 800cb8c:	eb04 0807 	add.w	r8, r4, r7
 800cb90:	eba8 0803 	sub.w	r8, r8, r3
 800cb94:	9b05      	ldr	r3, [sp, #20]
 800cb96:	4465      	add	r5, ip
 800cb98:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800cb9c:	b163      	cbz	r3, 800cbb8 <D48_GENERIC+0x14c>
 800cb9e:	6a17      	ldr	r7, [r2, #32]
 800cba0:	9402      	str	r4, [sp, #8]
 800cba2:	fba8 8907 	umull	r8, r9, r8, r7
 800cba6:	fb07 990b 	mla	r9, r7, fp, r9
 800cbaa:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800cbae:	f149 0900 	adc.w	r9, r9, #0
 800cbb2:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800cbb6:	463c      	mov	r4, r7
 800cbb8:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800cbbc:	9b03      	ldr	r3, [sp, #12]
 800cbbe:	02e4      	lsls	r4, r4, #11
 800cbc0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800cbc4:	f04f 0900 	mov.w	r9, #0
 800cbc8:	fb0c fc0e 	mul.w	ip, ip, lr
 800cbcc:	fbc3 8904 	smlal	r8, r9, r3, r4
 800cbd0:	9b04      	ldr	r3, [sp, #16]
 800cbd2:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800cbd6:	f304 040f 	ssat	r4, #16, r4
 800cbda:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800cbde:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800cbe0:	fa1f fc85 	uxth.w	ip, r5
 800cbe4:	4564      	cmp	r4, ip
 800cbe6:	d919      	bls.n	800cc1c <D48_GENERIC+0x1b0>
 800cbe8:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800cbea:	fa5f fe84 	uxtb.w	lr, r4
 800cbee:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800cbf2:	f1ce 0500 	rsb	r5, lr, #0
 800cbf6:	eb00 0b09 	add.w	fp, r0, r9
 800cbfa:	eb0b 0a05 	add.w	sl, fp, r5
 800cbfe:	2c01      	cmp	r4, #1
 800cc00:	eb0a 0809 	add.w	r8, sl, r9
 800cc04:	f47f af53 	bne.w	800caae <D48_GENERIC+0x42>
 800cc08:	9b06      	ldr	r3, [sp, #24]
 800cc0a:	6805      	ldr	r5, [r0, #0]
 800cc0c:	6844      	ldr	r4, [r0, #4]
 800cc0e:	3006      	adds	r0, #6
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f43f af63 	beq.w	800cadc <D48_GENERIC+0x70>
 800cc16:	ba6d      	rev16	r5, r5
 800cc18:	ba64      	rev16	r4, r4
 800cc1a:	e75f      	b.n	800cadc <D48_GENERIC+0x70>
 800cc1c:	9b01      	ldr	r3, [sp, #4]
 800cc1e:	46ba      	mov	sl, r7
 800cc20:	6093      	str	r3, [r2, #8]
 800cc22:	9b00      	ldr	r3, [sp, #0]
 800cc24:	60d3      	str	r3, [r2, #12]
 800cc26:	9b02      	ldr	r3, [sp, #8]
 800cc28:	6153      	str	r3, [r2, #20]
 800cc2a:	9b07      	ldr	r3, [sp, #28]
 800cc2c:	61d6      	str	r6, [r2, #28]
 800cc2e:	2000      	movs	r0, #0
 800cc30:	f8c2 a010 	str.w	sl, [r2, #16]
 800cc34:	6193      	str	r3, [r2, #24]
 800cc36:	b009      	add	sp, #36	; 0x24
 800cc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc3c:	20000000 	.word	0x20000000
 800cc40:	000f000a 	.word	0x000f000a
 800cc44:	00060003 	.word	0x00060003
 800cc48:	00150019 	.word	0x00150019
 800cc4c:	00190015 	.word	0x00190015
 800cc50:	00030006 	.word	0x00030006
 800cc54:	000a000f 	.word	0x000a000f

0800cc58 <D64_GENERIC>:
 800cc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5c:	b089      	sub	sp, #36	; 0x24
 800cc5e:	6913      	ldr	r3, [r2, #16]
 800cc60:	6895      	ldr	r5, [r2, #8]
 800cc62:	9303      	str	r3, [sp, #12]
 800cc64:	9501      	str	r5, [sp, #4]
 800cc66:	6953      	ldr	r3, [r2, #20]
 800cc68:	68d5      	ldr	r5, [r2, #12]
 800cc6a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800cc6c:	9304      	str	r3, [sp, #16]
 800cc6e:	9500      	str	r5, [sp, #0]
 800cc70:	6993      	ldr	r3, [r2, #24]
 800cc72:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800cc74:	9307      	str	r3, [sp, #28]
 800cc76:	9505      	str	r5, [sp, #20]
 800cc78:	69d3      	ldr	r3, [r2, #28]
 800cc7a:	9106      	str	r1, [sp, #24]
 800cc7c:	2c00      	cmp	r4, #0
 800cc7e:	f000 80d9 	beq.w	800ce34 <D64_GENERIC+0x1dc>
 800cc82:	6a11      	ldr	r1, [r2, #32]
 800cc84:	9102      	str	r1, [sp, #8]
 800cc86:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800ce74 <D64_GENERIC+0x21c>
 800cc8a:	f04f 0c00 	mov.w	ip, #0
 800cc8e:	4681      	mov	r9, r0
 800cc90:	e0c1      	b.n	800ce16 <D64_GENERIC+0x1be>
 800cc92:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800cc96:	4274      	negs	r4, r6
 800cc98:	eb09 0708 	add.w	r7, r9, r8
 800cc9c:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800cca0:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800cca4:	5d38      	ldrb	r0, [r7, r4]
 800cca6:	5d29      	ldrb	r1, [r5, r4]
 800cca8:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800ccac:	f819 a008 	ldrb.w	sl, [r9, r8]
 800ccb0:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800ccb4:	f899 7000 	ldrb.w	r7, [r9]
 800ccb8:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800ccbc:	4425      	add	r5, r4
 800ccbe:	0409      	lsls	r1, r1, #16
 800ccc0:	0400      	lsls	r0, r0, #16
 800ccc2:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800ccc6:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800ccca:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800ccce:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800ccd2:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800ccd6:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800ccda:	4459      	add	r1, fp
 800ccdc:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800cce0:	4438      	add	r0, r7
 800cce2:	b2c5      	uxtb	r5, r0
 800cce4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800cce8:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800ccec:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800ccf0:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800ccf4:	0e00      	lsrs	r0, r0, #24
 800ccf6:	eb03 0806 	add.w	r8, r3, r6
 800ccfa:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800ccfe:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800cd02:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800cd06:	b2c8      	uxtb	r0, r1
 800cd08:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800cd0c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800cd10:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800cd14:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800cd18:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800cd1c:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800cd20:	0e09      	lsrs	r1, r1, #24
 800cd22:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800cd26:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800cd2a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800cd2e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800cd32:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800cd36:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800cd3a:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800cd3e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800cd42:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800cd46:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800cd4a:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800cd4e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800cd52:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800cd56:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800cd5a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800cd5e:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800cd62:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800cd66:	0a8b      	lsrs	r3, r1, #10
 800cd68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800cd6c:	4939      	ldr	r1, [pc, #228]	; (800ce54 <D64_GENERIC+0x1fc>)
 800cd6e:	9c00      	ldr	r4, [sp, #0]
 800cd70:	fb28 4101 	smlad	r1, r8, r1, r4
 800cd74:	4c38      	ldr	r4, [pc, #224]	; (800ce58 <D64_GENERIC+0x200>)
 800cd76:	fb27 1104 	smlad	r1, r7, r4, r1
 800cd7a:	4c38      	ldr	r4, [pc, #224]	; (800ce5c <D64_GENERIC+0x204>)
 800cd7c:	fb20 1104 	smlad	r1, r0, r4, r1
 800cd80:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800cd84:	fb2a 1106 	smlad	r1, sl, r6, r1
 800cd88:	4c35      	ldr	r4, [pc, #212]	; (800ce60 <D64_GENERIC+0x208>)
 800cd8a:	9d01      	ldr	r5, [sp, #4]
 800cd8c:	fb28 5404 	smlad	r4, r8, r4, r5
 800cd90:	4d33      	ldr	r5, [pc, #204]	; (800ce60 <D64_GENERIC+0x208>)
 800cd92:	fb2a 4415 	smladx	r4, sl, r5, r4
 800cd96:	4d33      	ldr	r5, [pc, #204]	; (800ce64 <D64_GENERIC+0x20c>)
 800cd98:	fb27 4405 	smlad	r4, r7, r5, r4
 800cd9c:	fb20 4415 	smladx	r4, r0, r5, r4
 800cda0:	2501      	movs	r5, #1
 800cda2:	9400      	str	r4, [sp, #0]
 800cda4:	fb28 f805 	smuad	r8, r8, r5
 800cda8:	4c2f      	ldr	r4, [pc, #188]	; (800ce68 <D64_GENERIC+0x210>)
 800cdaa:	fb27 8704 	smlad	r7, r7, r4, r8
 800cdae:	4c2f      	ldr	r4, [pc, #188]	; (800ce6c <D64_GENERIC+0x214>)
 800cdb0:	fb20 7004 	smlad	r0, r0, r4, r7
 800cdb4:	4c2e      	ldr	r4, [pc, #184]	; (800ce70 <D64_GENERIC+0x218>)
 800cdb6:	fb2a 0004 	smlad	r0, sl, r4, r0
 800cdba:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800cdbe:	9902      	ldr	r1, [sp, #8]
 800cdc0:	9001      	str	r0, [sp, #4]
 800cdc2:	b189      	cbz	r1, 800cde8 <D64_GENERIC+0x190>
 800cdc4:	9803      	ldr	r0, [sp, #12]
 800cdc6:	9c04      	ldr	r4, [sp, #16]
 800cdc8:	9604      	str	r6, [sp, #16]
 800cdca:	4430      	add	r0, r6
 800cdcc:	1b00      	subs	r0, r0, r4
 800cdce:	17c5      	asrs	r5, r0, #31
 800cdd0:	460f      	mov	r7, r1
 800cdd2:	fba0 0101 	umull	r0, r1, r0, r1
 800cdd6:	fb07 1105 	mla	r1, r7, r5, r1
 800cdda:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800cdde:	f141 0100 	adc.w	r1, r1, #0
 800cde2:	0049      	lsls	r1, r1, #1
 800cde4:	9103      	str	r1, [sp, #12]
 800cde6:	460e      	mov	r6, r1
 800cde8:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800cdea:	9905      	ldr	r1, [sp, #20]
 800cdec:	9806      	ldr	r0, [sp, #24]
 800cdee:	02b6      	lsls	r6, r6, #10
 800cdf0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800cdf4:	f04f 0800 	mov.w	r8, #0
 800cdf8:	fb0c f404 	mul.w	r4, ip, r4
 800cdfc:	fbc1 7806 	smlal	r7, r8, r1, r6
 800ce00:	4641      	mov	r1, r8
 800ce02:	1089      	asrs	r1, r1, #2
 800ce04:	f301 010f 	ssat	r1, #16, r1
 800ce08:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800ce0c:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800ce0e:	f10c 0c01 	add.w	ip, ip, #1
 800ce12:	4561      	cmp	r1, ip
 800ce14:	dd0e      	ble.n	800ce34 <D64_GENERIC+0x1dc>
 800ce16:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800ce18:	2e01      	cmp	r6, #1
 800ce1a:	f47f af3a 	bne.w	800cc92 <D64_GENERIC+0x3a>
 800ce1e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800ce20:	06b4      	lsls	r4, r6, #26
 800ce22:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ce26:	f109 0908 	add.w	r9, r9, #8
 800ce2a:	f57f af5a 	bpl.w	800cce2 <D64_GENERIC+0x8a>
 800ce2e:	ba40      	rev16	r0, r0
 800ce30:	ba49      	rev16	r1, r1
 800ce32:	e756      	b.n	800cce2 <D64_GENERIC+0x8a>
 800ce34:	61d3      	str	r3, [r2, #28]
 800ce36:	9b03      	ldr	r3, [sp, #12]
 800ce38:	9901      	ldr	r1, [sp, #4]
 800ce3a:	6113      	str	r3, [r2, #16]
 800ce3c:	9b04      	ldr	r3, [sp, #16]
 800ce3e:	6091      	str	r1, [r2, #8]
 800ce40:	6153      	str	r3, [r2, #20]
 800ce42:	9900      	ldr	r1, [sp, #0]
 800ce44:	9b07      	ldr	r3, [sp, #28]
 800ce46:	60d1      	str	r1, [r2, #12]
 800ce48:	2000      	movs	r0, #0
 800ce4a:	6193      	str	r3, [r2, #24]
 800ce4c:	b009      	add	sp, #36	; 0x24
 800ce4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce52:	bf00      	nop
 800ce54:	001c0015 	.word	0x001c0015
 800ce58:	000f000a 	.word	0x000f000a
 800ce5c:	00060003 	.word	0x00060003
 800ce60:	0024002a 	.word	0x0024002a
 800ce64:	002e0030 	.word	0x002e0030
 800ce68:	00030006 	.word	0x00030006
 800ce6c:	000a000f 	.word	0x000a000f
 800ce70:	0015001c 	.word	0x0015001c
 800ce74:	20000000 	.word	0x20000000

0800ce78 <D80_GENERIC>:
 800ce78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce7c:	b08b      	sub	sp, #44	; 0x2c
 800ce7e:	6914      	ldr	r4, [r2, #16]
 800ce80:	9404      	str	r4, [sp, #16]
 800ce82:	6954      	ldr	r4, [r2, #20]
 800ce84:	9405      	str	r4, [sp, #20]
 800ce86:	6994      	ldr	r4, [r2, #24]
 800ce88:	9409      	str	r4, [sp, #36]	; 0x24
 800ce8a:	6894      	ldr	r4, [r2, #8]
 800ce8c:	9402      	str	r4, [sp, #8]
 800ce8e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800ce90:	68d4      	ldr	r4, [r2, #12]
 800ce92:	9401      	str	r4, [sp, #4]
 800ce94:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800ce96:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800ce9a:	9406      	str	r4, [sp, #24]
 800ce9c:	9107      	str	r1, [sp, #28]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f000 810f 	beq.w	800d0c2 <D80_GENERIC+0x24a>
 800cea4:	6a13      	ldr	r3, [r2, #32]
 800cea6:	9308      	str	r3, [sp, #32]
 800cea8:	2300      	movs	r3, #0
 800ceaa:	9200      	str	r2, [sp, #0]
 800ceac:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800d114 <D80_GENERIC+0x29c>
 800ceb0:	f8cd b00c 	str.w	fp, [sp, #12]
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	e0ed      	b.n	800d094 <D80_GENERIC+0x21c>
 800ceb8:	fa5f fc8c 	uxtb.w	ip, ip
 800cebc:	fa0f f48c 	sxth.w	r4, ip
 800cec0:	0066      	lsls	r6, r4, #1
 800cec2:	eb06 0804 	add.w	r8, r6, r4
 800cec6:	f1cc 0500 	rsb	r5, ip, #0
 800ceca:	eb00 0108 	add.w	r1, r0, r8
 800cece:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ced2:	194b      	adds	r3, r1, r5
 800ced4:	5d49      	ldrb	r1, [r1, r5]
 800ced6:	f810 a008 	ldrb.w	sl, [r0, r8]
 800ceda:	f813 b004 	ldrb.w	fp, [r3, r4]
 800cede:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800cee2:	f890 8000 	ldrb.w	r8, [r0]
 800cee6:	eb03 0e04 	add.w	lr, r3, r4
 800ceea:	eb0e 0705 	add.w	r7, lr, r5
 800ceee:	0409      	lsls	r1, r1, #16
 800cef0:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800cef4:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800cef8:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800cefc:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800cf00:	eb0a 0004 	add.w	r0, sl, r4
 800cf04:	041b      	lsls	r3, r3, #16
 800cf06:	f81a a004 	ldrb.w	sl, [sl, r4]
 800cf0a:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800cf0e:	5d44      	ldrb	r4, [r0, r5]
 800cf10:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800cf14:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800cf18:	4428      	add	r0, r5
 800cf1a:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800cf1e:	4441      	add	r1, r8
 800cf20:	4430      	add	r0, r6
 800cf22:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800cf26:	441f      	add	r7, r3
 800cf28:	b2cd      	uxtb	r5, r1
 800cf2a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800cf2e:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800cf32:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800cf36:	9b03      	ldr	r3, [sp, #12]
 800cf38:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800cf3c:	0e09      	lsrs	r1, r1, #24
 800cf3e:	4433      	add	r3, r6
 800cf40:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800cf44:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800cf48:	b2fd      	uxtb	r5, r7
 800cf4a:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800cf4e:	469b      	mov	fp, r3
 800cf50:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800cf54:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800cf58:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800cf5c:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800cf60:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800cf64:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800cf68:	0e3b      	lsrs	r3, r7, #24
 800cf6a:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800cf6e:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800cf72:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cf76:	fa5f fe84 	uxtb.w	lr, r4
 800cf7a:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800cf7e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800cf82:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800cf86:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800cf8a:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800cf8e:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800cf92:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800cf96:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800cf9a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800cf9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cfa2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800cfa6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800cfaa:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800cfae:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800cfb2:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800cfb6:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800cfba:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800cfbe:	0aa3      	lsrs	r3, r4, #10
 800cfc0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800cfc4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800cfc8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800cfcc:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800cfd0:	9303      	str	r3, [sp, #12]
 800cfd2:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800cfd6:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800cfda:	4b42      	ldr	r3, [pc, #264]	; (800d0e4 <D80_GENERIC+0x26c>)
 800cfdc:	9901      	ldr	r1, [sp, #4]
 800cfde:	fb2b 1303 	smlad	r3, fp, r3, r1
 800cfe2:	4941      	ldr	r1, [pc, #260]	; (800d0e8 <D80_GENERIC+0x270>)
 800cfe4:	fb28 3301 	smlad	r3, r8, r1, r3
 800cfe8:	4940      	ldr	r1, [pc, #256]	; (800d0ec <D80_GENERIC+0x274>)
 800cfea:	fb2c 3301 	smlad	r3, ip, r1, r3
 800cfee:	4940      	ldr	r1, [pc, #256]	; (800d0f0 <D80_GENERIC+0x278>)
 800cff0:	fb27 3301 	smlad	r3, r7, r1, r3
 800cff4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800cff8:	fb2e 3301 	smlad	r3, lr, r1, r3
 800cffc:	493d      	ldr	r1, [pc, #244]	; (800d0f4 <D80_GENERIC+0x27c>)
 800cffe:	9c02      	ldr	r4, [sp, #8]
 800d000:	fb2b 4401 	smlad	r4, fp, r1, r4
 800d004:	493c      	ldr	r1, [pc, #240]	; (800d0f8 <D80_GENERIC+0x280>)
 800d006:	fb28 4401 	smlad	r4, r8, r1, r4
 800d00a:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800d00e:	fb2c 4101 	smlad	r1, ip, r1, r4
 800d012:	4c3a      	ldr	r4, [pc, #232]	; (800d0fc <D80_GENERIC+0x284>)
 800d014:	fb27 1104 	smlad	r1, r7, r4, r1
 800d018:	4c39      	ldr	r4, [pc, #228]	; (800d100 <D80_GENERIC+0x288>)
 800d01a:	fb2e 1104 	smlad	r1, lr, r4, r1
 800d01e:	9101      	str	r1, [sp, #4]
 800d020:	2101      	movs	r1, #1
 800d022:	fb2b fb01 	smuad	fp, fp, r1
 800d026:	4937      	ldr	r1, [pc, #220]	; (800d104 <D80_GENERIC+0x28c>)
 800d028:	fb28 b801 	smlad	r8, r8, r1, fp
 800d02c:	4d36      	ldr	r5, [pc, #216]	; (800d108 <D80_GENERIC+0x290>)
 800d02e:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800d032:	4d36      	ldr	r5, [pc, #216]	; (800d10c <D80_GENERIC+0x294>)
 800d034:	fb27 c705 	smlad	r7, r7, r5, ip
 800d038:	4d35      	ldr	r5, [pc, #212]	; (800d110 <D80_GENERIC+0x298>)
 800d03a:	fb2e 7105 	smlad	r1, lr, r5, r7
 800d03e:	9102      	str	r1, [sp, #8]
 800d040:	9908      	ldr	r1, [sp, #32]
 800d042:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800d046:	b181      	cbz	r1, 800d06a <D80_GENERIC+0x1f2>
 800d048:	9c04      	ldr	r4, [sp, #16]
 800d04a:	9d05      	ldr	r5, [sp, #20]
 800d04c:	9305      	str	r3, [sp, #20]
 800d04e:	441c      	add	r4, r3
 800d050:	1b64      	subs	r4, r4, r5
 800d052:	17e7      	asrs	r7, r4, #31
 800d054:	fba4 4501 	umull	r4, r5, r4, r1
 800d058:	fb01 5507 	mla	r5, r1, r7, r5
 800d05c:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800d060:	f145 0500 	adc.w	r5, r5, #0
 800d064:	0069      	lsls	r1, r5, #1
 800d066:	9104      	str	r1, [sp, #16]
 800d068:	460b      	mov	r3, r1
 800d06a:	9e00      	ldr	r6, [sp, #0]
 800d06c:	9f06      	ldr	r7, [sp, #24]
 800d06e:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800d070:	025b      	lsls	r3, r3, #9
 800d072:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d076:	2500      	movs	r5, #0
 800d078:	fb02 f101 	mul.w	r1, r2, r1
 800d07c:	fbc7 4503 	smlal	r4, r5, r7, r3
 800d080:	9c07      	ldr	r4, [sp, #28]
 800d082:	10ab      	asrs	r3, r5, #2
 800d084:	f303 030f 	ssat	r3, #16, r3
 800d088:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800d08c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800d08e:	3201      	adds	r2, #1
 800d090:	4293      	cmp	r3, r2
 800d092:	dd13      	ble.n	800d0bc <D80_GENERIC+0x244>
 800d094:	9b00      	ldr	r3, [sp, #0]
 800d096:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800d09a:	f1bc 0f01 	cmp.w	ip, #1
 800d09e:	f47f af0b 	bne.w	800ceb8 <D80_GENERIC+0x40>
 800d0a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0a4:	6884      	ldr	r4, [r0, #8]
 800d0a6:	069b      	lsls	r3, r3, #26
 800d0a8:	e890 0082 	ldmia.w	r0, {r1, r7}
 800d0ac:	f100 000a 	add.w	r0, r0, #10
 800d0b0:	f57f af3a 	bpl.w	800cf28 <D80_GENERIC+0xb0>
 800d0b4:	ba49      	rev16	r1, r1
 800d0b6:	ba7f      	rev16	r7, r7
 800d0b8:	ba64      	rev16	r4, r4
 800d0ba:	e735      	b.n	800cf28 <D80_GENERIC+0xb0>
 800d0bc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d0c0:	4632      	mov	r2, r6
 800d0c2:	9b02      	ldr	r3, [sp, #8]
 800d0c4:	6093      	str	r3, [r2, #8]
 800d0c6:	9b01      	ldr	r3, [sp, #4]
 800d0c8:	60d3      	str	r3, [r2, #12]
 800d0ca:	9b04      	ldr	r3, [sp, #16]
 800d0cc:	6113      	str	r3, [r2, #16]
 800d0ce:	9b05      	ldr	r3, [sp, #20]
 800d0d0:	6153      	str	r3, [r2, #20]
 800d0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0d4:	f8c2 b01c 	str.w	fp, [r2, #28]
 800d0d8:	2000      	movs	r0, #0
 800d0da:	6193      	str	r3, [r2, #24]
 800d0dc:	b00b      	add	sp, #44	; 0x2c
 800d0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e2:	bf00      	nop
 800d0e4:	002d0024 	.word	0x002d0024
 800d0e8:	001c0015 	.word	0x001c0015
 800d0ec:	000f000a 	.word	0x000f000a
 800d0f0:	00060003 	.word	0x00060003
 800d0f4:	0037003f 	.word	0x0037003f
 800d0f8:	00450049 	.word	0x00450049
 800d0fc:	00490045 	.word	0x00490045
 800d100:	003f0037 	.word	0x003f0037
 800d104:	00030006 	.word	0x00030006
 800d108:	000a000f 	.word	0x000a000f
 800d10c:	0015001c 	.word	0x0015001c
 800d110:	0024002d 	.word	0x0024002d
 800d114:	20000000 	.word	0x20000000

0800d118 <D128_GENERIC>:
 800d118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d11c:	b093      	sub	sp, #76	; 0x4c
 800d11e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d120:	9005      	str	r0, [sp, #20]
 800d122:	4610      	mov	r0, r2
 800d124:	9201      	str	r2, [sp, #4]
 800d126:	6912      	ldr	r2, [r2, #16]
 800d128:	920c      	str	r2, [sp, #48]	; 0x30
 800d12a:	4602      	mov	r2, r0
 800d12c:	6940      	ldr	r0, [r0, #20]
 800d12e:	900d      	str	r0, [sp, #52]	; 0x34
 800d130:	4610      	mov	r0, r2
 800d132:	4614      	mov	r4, r2
 800d134:	6992      	ldr	r2, [r2, #24]
 800d136:	9211      	str	r2, [sp, #68]	; 0x44
 800d138:	69c2      	ldr	r2, [r0, #28]
 800d13a:	9202      	str	r2, [sp, #8]
 800d13c:	68e2      	ldr	r2, [r4, #12]
 800d13e:	6880      	ldr	r0, [r0, #8]
 800d140:	9203      	str	r2, [sp, #12]
 800d142:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d144:	9004      	str	r0, [sp, #16]
 800d146:	920e      	str	r2, [sp, #56]	; 0x38
 800d148:	910f      	str	r1, [sp, #60]	; 0x3c
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f000 819b 	beq.w	800d486 <D128_GENERIC+0x36e>
 800d150:	6a23      	ldr	r3, [r4, #32]
 800d152:	9310      	str	r3, [sp, #64]	; 0x40
 800d154:	2300      	movs	r3, #0
 800d156:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800d500 <D128_GENERIC+0x3e8>
 800d15a:	9306      	str	r3, [sp, #24]
 800d15c:	e17a      	b.n	800d454 <D128_GENERIC+0x33c>
 800d15e:	b2d2      	uxtb	r2, r2
 800d160:	9d05      	ldr	r5, [sp, #20]
 800d162:	b214      	sxth	r4, r2
 800d164:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800d168:	4250      	negs	r0, r2
 800d16a:	eb05 010a 	add.w	r1, r5, sl
 800d16e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d172:	eb01 0800 	add.w	r8, r1, r0
 800d176:	eb0b 0c04 	add.w	ip, fp, r4
 800d17a:	eb08 070c 	add.w	r7, r8, ip
 800d17e:	183b      	adds	r3, r7, r0
 800d180:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800d184:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800d188:	eb0e 0604 	add.w	r6, lr, r4
 800d18c:	9307      	str	r3, [sp, #28]
 800d18e:	1833      	adds	r3, r6, r0
 800d190:	9305      	str	r3, [sp, #20]
 800d192:	462b      	mov	r3, r5
 800d194:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800d198:	f8cd a020 	str.w	sl, [sp, #32]
 800d19c:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800d1a0:	f813 c002 	ldrb.w	ip, [r3, r2]
 800d1a4:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800d1a8:	5c3a      	ldrb	r2, [r7, r0]
 800d1aa:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800d1ae:	781f      	ldrb	r7, [r3, #0]
 800d1b0:	9b07      	ldr	r3, [sp, #28]
 800d1b2:	9d05      	ldr	r5, [sp, #20]
 800d1b4:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800d1b8:	5c09      	ldrb	r1, [r1, r0]
 800d1ba:	9709      	str	r7, [sp, #36]	; 0x24
 800d1bc:	9307      	str	r3, [sp, #28]
 800d1be:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800d1c2:	5c33      	ldrb	r3, [r6, r0]
 800d1c4:	0412      	lsls	r2, r2, #16
 800d1c6:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800d1ca:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800d1ce:	9d08      	ldr	r5, [sp, #32]
 800d1d0:	eb06 0a04 	add.w	sl, r6, r4
 800d1d4:	0409      	lsls	r1, r1, #16
 800d1d6:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800d1da:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800d1de:	5d36      	ldrb	r6, [r6, r4]
 800d1e0:	9c05      	ldr	r4, [sp, #20]
 800d1e2:	042d      	lsls	r5, r5, #16
 800d1e4:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800d1e8:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800d1ec:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800d1f0:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800d1f4:	eb0a 0c00 	add.w	ip, sl, r0
 800d1f8:	041b      	lsls	r3, r3, #16
 800d1fa:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800d1fe:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800d202:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800d206:	9d07      	ldr	r5, [sp, #28]
 800d208:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800d20c:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800d210:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d212:	4458      	add	r0, fp
 800d214:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800d218:	9005      	str	r0, [sp, #20]
 800d21a:	4439      	add	r1, r7
 800d21c:	442a      	add	r2, r5
 800d21e:	44b2      	add	sl, r6
 800d220:	1918      	adds	r0, r3, r4
 800d222:	b2cb      	uxtb	r3, r1
 800d224:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d228:	9e02      	ldr	r6, [sp, #8]
 800d22a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d22e:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800d232:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800d236:	441e      	add	r6, r3
 800d238:	0e09      	lsrs	r1, r1, #24
 800d23a:	4633      	mov	r3, r6
 800d23c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d240:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800d244:	b2d4      	uxtb	r4, r2
 800d246:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800d24a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d24e:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800d252:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d256:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d25a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800d25e:	0e12      	lsrs	r2, r2, #24
 800d260:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800d264:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800d268:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d26c:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800d270:	9702      	str	r7, [sp, #8]
 800d272:	b2c2      	uxtb	r2, r0
 800d274:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800d278:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800d27c:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800d280:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800d284:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800d288:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800d28c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d290:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800d294:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800d298:	0e00      	lsrs	r0, r0, #24
 800d29a:	fa5f f68a 	uxtb.w	r6, sl
 800d29e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2a4:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800d2a8:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800d2ac:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800d2b0:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800d2b4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d2b8:	950a      	str	r5, [sp, #40]	; 0x28
 800d2ba:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800d2be:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800d2c2:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800d2c6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d2ca:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800d2ce:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d2d2:	920b      	str	r2, [sp, #44]	; 0x2c
 800d2d4:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800d2d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2da:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800d2de:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d2e2:	9307      	str	r3, [sp, #28]
 800d2e4:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800d2e8:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800d2ec:	9b02      	ldr	r3, [sp, #8]
 800d2ee:	f8cd c008 	str.w	ip, [sp, #8]
 800d2f2:	4694      	mov	ip, r2
 800d2f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2f6:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800d2fa:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800d2fe:	9a02      	ldr	r2, [sp, #8]
 800d300:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d304:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800d308:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d30c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d30e:	f8cd a020 	str.w	sl, [sp, #32]
 800d312:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d316:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800d31a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d31e:	9b07      	ldr	r3, [sp, #28]
 800d320:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d324:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800d328:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800d32c:	9a08      	ldr	r2, [sp, #32]
 800d32e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d336:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d33a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d33e:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800d342:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800d346:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d34a:	0a96      	lsrs	r6, r2, #10
 800d34c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d350:	9602      	str	r6, [sp, #8]
 800d352:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800d356:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800d35a:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800d35e:	4e53      	ldr	r6, [pc, #332]	; (800d4ac <D128_GENERIC+0x394>)
 800d360:	9f03      	ldr	r7, [sp, #12]
 800d362:	fb2c 7606 	smlad	r6, ip, r6, r7
 800d366:	4f52      	ldr	r7, [pc, #328]	; (800d4b0 <D128_GENERIC+0x398>)
 800d368:	fb2a 6607 	smlad	r6, sl, r7, r6
 800d36c:	4f51      	ldr	r7, [pc, #324]	; (800d4b4 <D128_GENERIC+0x39c>)
 800d36e:	fb21 6607 	smlad	r6, r1, r7, r6
 800d372:	4f51      	ldr	r7, [pc, #324]	; (800d4b8 <D128_GENERIC+0x3a0>)
 800d374:	fb24 6607 	smlad	r6, r4, r7, r6
 800d378:	4f50      	ldr	r7, [pc, #320]	; (800d4bc <D128_GENERIC+0x3a4>)
 800d37a:	fb28 6607 	smlad	r6, r8, r7, r6
 800d37e:	4f50      	ldr	r7, [pc, #320]	; (800d4c0 <D128_GENERIC+0x3a8>)
 800d380:	fb20 6607 	smlad	r6, r0, r7, r6
 800d384:	4f4f      	ldr	r7, [pc, #316]	; (800d4c4 <D128_GENERIC+0x3ac>)
 800d386:	fb23 6607 	smlad	r6, r3, r7, r6
 800d38a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800d38e:	fb25 6607 	smlad	r6, r5, r7, r6
 800d392:	4f4d      	ldr	r7, [pc, #308]	; (800d4c8 <D128_GENERIC+0x3b0>)
 800d394:	9a04      	ldr	r2, [sp, #16]
 800d396:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800d39a:	4a4c      	ldr	r2, [pc, #304]	; (800d4cc <D128_GENERIC+0x3b4>)
 800d39c:	fb2a ee02 	smlad	lr, sl, r2, lr
 800d3a0:	4f4b      	ldr	r7, [pc, #300]	; (800d4d0 <D128_GENERIC+0x3b8>)
 800d3a2:	fb21 ee07 	smlad	lr, r1, r7, lr
 800d3a6:	4f4b      	ldr	r7, [pc, #300]	; (800d4d4 <D128_GENERIC+0x3bc>)
 800d3a8:	fb24 ee07 	smlad	lr, r4, r7, lr
 800d3ac:	4f4a      	ldr	r7, [pc, #296]	; (800d4d8 <D128_GENERIC+0x3c0>)
 800d3ae:	fb28 ee07 	smlad	lr, r8, r7, lr
 800d3b2:	4f4a      	ldr	r7, [pc, #296]	; (800d4dc <D128_GENERIC+0x3c4>)
 800d3b4:	fb20 ee07 	smlad	lr, r0, r7, lr
 800d3b8:	4f49      	ldr	r7, [pc, #292]	; (800d4e0 <D128_GENERIC+0x3c8>)
 800d3ba:	fb23 e707 	smlad	r7, r3, r7, lr
 800d3be:	f8df e144 	ldr.w	lr, [pc, #324]	; 800d504 <D128_GENERIC+0x3ec>
 800d3c2:	fb25 720e 	smlad	r2, r5, lr, r7
 800d3c6:	f04f 0b01 	mov.w	fp, #1
 800d3ca:	9203      	str	r2, [sp, #12]
 800d3cc:	fb2c fb0b 	smuad	fp, ip, fp
 800d3d0:	4f44      	ldr	r7, [pc, #272]	; (800d4e4 <D128_GENERIC+0x3cc>)
 800d3d2:	fb2a ba07 	smlad	sl, sl, r7, fp
 800d3d6:	4f44      	ldr	r7, [pc, #272]	; (800d4e8 <D128_GENERIC+0x3d0>)
 800d3d8:	fb21 aa07 	smlad	sl, r1, r7, sl
 800d3dc:	4f43      	ldr	r7, [pc, #268]	; (800d4ec <D128_GENERIC+0x3d4>)
 800d3de:	fb24 aa07 	smlad	sl, r4, r7, sl
 800d3e2:	4f43      	ldr	r7, [pc, #268]	; (800d4f0 <D128_GENERIC+0x3d8>)
 800d3e4:	fb28 a707 	smlad	r7, r8, r7, sl
 800d3e8:	4a42      	ldr	r2, [pc, #264]	; (800d4f4 <D128_GENERIC+0x3dc>)
 800d3ea:	fb20 7702 	smlad	r7, r0, r2, r7
 800d3ee:	4a42      	ldr	r2, [pc, #264]	; (800d4f8 <D128_GENERIC+0x3e0>)
 800d3f0:	fb23 7702 	smlad	r7, r3, r2, r7
 800d3f4:	4b41      	ldr	r3, [pc, #260]	; (800d4fc <D128_GENERIC+0x3e4>)
 800d3f6:	fb25 7303 	smlad	r3, r5, r3, r7
 800d3fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d3fc:	9304      	str	r3, [sp, #16]
 800d3fe:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800d402:	b185      	cbz	r5, 800d426 <D128_GENERIC+0x30e>
 800d404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d406:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d408:	960d      	str	r6, [sp, #52]	; 0x34
 800d40a:	4432      	add	r2, r6
 800d40c:	1a52      	subs	r2, r2, r1
 800d40e:	17d1      	asrs	r1, r2, #31
 800d410:	fba2 2305 	umull	r2, r3, r2, r5
 800d414:	fb05 3301 	mla	r3, r5, r1, r3
 800d418:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800d41c:	f143 0300 	adc.w	r3, r3, #0
 800d420:	005b      	lsls	r3, r3, #1
 800d422:	930c      	str	r3, [sp, #48]	; 0x30
 800d424:	461e      	mov	r6, r3
 800d426:	9801      	ldr	r0, [sp, #4]
 800d428:	9c06      	ldr	r4, [sp, #24]
 800d42a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800d42c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d42e:	01f6      	lsls	r6, r6, #7
 800d430:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d434:	2300      	movs	r3, #0
 800d436:	fbc5 2306 	smlal	r2, r3, r5, r6
 800d43a:	fb04 f101 	mul.w	r1, r4, r1
 800d43e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d440:	109b      	asrs	r3, r3, #2
 800d442:	f303 030f 	ssat	r3, #16, r3
 800d446:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800d44a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800d44c:	1c62      	adds	r2, r4, #1
 800d44e:	4293      	cmp	r3, r2
 800d450:	9206      	str	r2, [sp, #24]
 800d452:	dd18      	ble.n	800d486 <D128_GENERIC+0x36e>
 800d454:	9b01      	ldr	r3, [sp, #4]
 800d456:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d458:	2a01      	cmp	r2, #1
 800d45a:	f47f ae80 	bne.w	800d15e <D128_GENERIC+0x46>
 800d45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d460:	9d05      	ldr	r5, [sp, #20]
 800d462:	069b      	lsls	r3, r3, #26
 800d464:	6829      	ldr	r1, [r5, #0]
 800d466:	686a      	ldr	r2, [r5, #4]
 800d468:	68a8      	ldr	r0, [r5, #8]
 800d46a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800d46e:	f105 0410 	add.w	r4, r5, #16
 800d472:	d506      	bpl.n	800d482 <D128_GENERIC+0x36a>
 800d474:	ba49      	rev16	r1, r1
 800d476:	ba52      	rev16	r2, r2
 800d478:	ba40      	rev16	r0, r0
 800d47a:	fa9a fa9a 	rev16.w	sl, sl
 800d47e:	9405      	str	r4, [sp, #20]
 800d480:	e6cf      	b.n	800d222 <D128_GENERIC+0x10a>
 800d482:	9405      	str	r4, [sp, #20]
 800d484:	e6cd      	b.n	800d222 <D128_GENERIC+0x10a>
 800d486:	9a01      	ldr	r2, [sp, #4]
 800d488:	9904      	ldr	r1, [sp, #16]
 800d48a:	6091      	str	r1, [r2, #8]
 800d48c:	9903      	ldr	r1, [sp, #12]
 800d48e:	60d1      	str	r1, [r2, #12]
 800d490:	9b02      	ldr	r3, [sp, #8]
 800d492:	61d3      	str	r3, [r2, #28]
 800d494:	4611      	mov	r1, r2
 800d496:	4613      	mov	r3, r2
 800d498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d49a:	610a      	str	r2, [r1, #16]
 800d49c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d49e:	6159      	str	r1, [r3, #20]
 800d4a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d4a2:	6199      	str	r1, [r3, #24]
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	b013      	add	sp, #76	; 0x4c
 800d4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ac:	00780069 	.word	0x00780069
 800d4b0:	005b004e 	.word	0x005b004e
 800d4b4:	00420037 	.word	0x00420037
 800d4b8:	002d0024 	.word	0x002d0024
 800d4bc:	001c0015 	.word	0x001c0015
 800d4c0:	000f000a 	.word	0x000f000a
 800d4c4:	00060003 	.word	0x00060003
 800d4c8:	00880096 	.word	0x00880096
 800d4cc:	00a200ac 	.word	0x00a200ac
 800d4d0:	00b400ba 	.word	0x00b400ba
 800d4d4:	00be00c0 	.word	0x00be00c0
 800d4d8:	00c000be 	.word	0x00c000be
 800d4dc:	00ba00b4 	.word	0x00ba00b4
 800d4e0:	00ac00a2 	.word	0x00ac00a2
 800d4e4:	00030006 	.word	0x00030006
 800d4e8:	000a000f 	.word	0x000a000f
 800d4ec:	0015001c 	.word	0x0015001c
 800d4f0:	0024002d 	.word	0x0024002d
 800d4f4:	00370042 	.word	0x00370042
 800d4f8:	004e005b 	.word	0x004e005b
 800d4fc:	00690078 	.word	0x00690078
 800d500:	20000000 	.word	0x20000000
 800d504:	00960088 	.word	0x00960088

0800d508 <D16_1CH_HTONS_VOL_HP>:
 800d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d50c:	4691      	mov	r9, r2
 800d50e:	b083      	sub	sp, #12
 800d510:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800d512:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800d516:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800d51a:	9300      	str	r3, [sp, #0]
 800d51c:	4680      	mov	r8, r0
 800d51e:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800d522:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d526:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d52a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800d52e:	9401      	str	r4, [sp, #4]
 800d530:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800d534:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800d538:	2a00      	cmp	r2, #0
 800d53a:	d04e      	beq.n	800d5da <D16_1CH_HTONS_VOL_HP+0xd2>
 800d53c:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800d5e8 <D16_1CH_HTONS_VOL_HP+0xe0>
 800d540:	1e8c      	subs	r4, r1, #2
 800d542:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800d546:	f858 2b02 	ldr.w	r2, [r8], #2
 800d54a:	ba52      	rev16	r2, r2
 800d54c:	b2d6      	uxtb	r6, r2
 800d54e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d552:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800d556:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800d55a:	4413      	add	r3, r2
 800d55c:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800d560:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800d564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d56c:	0a93      	lsrs	r3, r2, #10
 800d56e:	4a1c      	ldr	r2, [pc, #112]	; (800d5e0 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800d570:	fb21 5202 	smlad	r2, r1, r2, r5
 800d574:	4d1b      	ldr	r5, [pc, #108]	; (800d5e4 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800d576:	fb21 f505 	smuad	r5, r1, r5
 800d57a:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800d57e:	4410      	add	r0, r2
 800d580:	1bc0      	subs	r0, r0, r7
 800d582:	17c7      	asrs	r7, r0, #31
 800d584:	fba0 010e 	umull	r0, r1, r0, lr
 800d588:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800d58c:	fb0e 1107 	mla	r1, lr, r7, r1
 800d590:	f141 0100 	adc.w	r1, r1, #0
 800d594:	0448      	lsls	r0, r1, #17
 800d596:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d59a:	2700      	movs	r7, #0
 800d59c:	fbc0 670a 	smlal	r6, r7, r0, sl
 800d5a0:	45d8      	cmp	r8, fp
 800d5a2:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800d5a6:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800d5aa:	4617      	mov	r7, r2
 800d5ac:	f301 010f 	ssat	r1, #16, r1
 800d5b0:	f824 1f02 	strh.w	r1, [r4, #2]!
 800d5b4:	d1c7      	bne.n	800d546 <D16_1CH_HTONS_VOL_HP+0x3e>
 800d5b6:	9901      	ldr	r1, [sp, #4]
 800d5b8:	f8c9 301c 	str.w	r3, [r9, #28]
 800d5bc:	9b00      	ldr	r3, [sp, #0]
 800d5be:	f8c9 0010 	str.w	r0, [r9, #16]
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	f8c9 5008 	str.w	r5, [r9, #8]
 800d5c8:	f8c9 100c 	str.w	r1, [r9, #12]
 800d5cc:	f8c9 2014 	str.w	r2, [r9, #20]
 800d5d0:	f8c9 3018 	str.w	r3, [r9, #24]
 800d5d4:	b003      	add	sp, #12
 800d5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5da:	463a      	mov	r2, r7
 800d5dc:	4621      	mov	r1, r4
 800d5de:	e7eb      	b.n	800d5b8 <D16_1CH_HTONS_VOL_HP+0xb0>
 800d5e0:	00030001 	.word	0x00030001
 800d5e4:	00010003 	.word	0x00010003
 800d5e8:	20000000 	.word	0x20000000

0800d5ec <D24_1CH_HTONS_VOL_HP>:
 800d5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f0:	b089      	sub	sp, #36	; 0x24
 800d5f2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d5f4:	6996      	ldr	r6, [r2, #24]
 800d5f6:	9304      	str	r3, [sp, #16]
 800d5f8:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800d5fa:	9207      	str	r2, [sp, #28]
 800d5fc:	6915      	ldr	r5, [r2, #16]
 800d5fe:	6954      	ldr	r4, [r2, #20]
 800d600:	9606      	str	r6, [sp, #24]
 800d602:	6893      	ldr	r3, [r2, #8]
 800d604:	69d6      	ldr	r6, [r2, #28]
 800d606:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800d60a:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800d60e:	9a04      	ldr	r2, [sp, #16]
 800d610:	9705      	str	r7, [sp, #20]
 800d612:	2a00      	cmp	r2, #0
 800d614:	d07e      	beq.n	800d714 <D24_1CH_HTONS_VOL_HP+0x128>
 800d616:	f1a1 0b02 	sub.w	fp, r1, #2
 800d61a:	2700      	movs	r7, #0
 800d61c:	46a8      	mov	r8, r5
 800d61e:	f8cd b004 	str.w	fp, [sp, #4]
 800d622:	4655      	mov	r5, sl
 800d624:	46e3      	mov	fp, ip
 800d626:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800d720 <D24_1CH_HTONS_VOL_HP+0x134>
 800d62a:	46ba      	mov	sl, r7
 800d62c:	469c      	mov	ip, r3
 800d62e:	e055      	b.n	800d6dc <D24_1CH_HTONS_VOL_HP+0xf0>
 800d630:	7802      	ldrb	r2, [r0, #0]
 800d632:	78c3      	ldrb	r3, [r0, #3]
 800d634:	7841      	ldrb	r1, [r0, #1]
 800d636:	0212      	lsls	r2, r2, #8
 800d638:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800d63c:	440b      	add	r3, r1
 800d63e:	3002      	adds	r0, #2
 800d640:	b2d9      	uxtb	r1, r3
 800d642:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d646:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800d64a:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800d64e:	0c1b      	lsrs	r3, r3, #16
 800d650:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800d654:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800d658:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800d65c:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800d660:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800d664:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800d668:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800d66c:	4a2a      	ldr	r2, [pc, #168]	; (800d718 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800d66e:	fb23 b102 	smlad	r1, r3, r2, fp
 800d672:	4a2a      	ldr	r2, [pc, #168]	; (800d71c <D24_1CH_HTONS_VOL_HP+0x130>)
 800d674:	fb23 cb02 	smlad	fp, r3, r2, ip
 800d678:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800d67c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800d680:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800d684:	2201      	movs	r2, #1
 800d686:	fb23 f702 	smuad	r7, r3, r2
 800d68a:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800d68e:	eb01 0208 	add.w	r2, r1, r8
 800d692:	1b12      	subs	r2, r2, r4
 800d694:	17d4      	asrs	r4, r2, #31
 800d696:	fba2 2305 	umull	r2, r3, r2, r5
 800d69a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800d69e:	fb05 3304 	mla	r3, r5, r4, r3
 800d6a2:	f143 0300 	adc.w	r3, r3, #0
 800d6a6:	9c05      	ldr	r4, [sp, #20]
 800d6a8:	03da      	lsls	r2, r3, #15
 800d6aa:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d6ae:	f04f 0900 	mov.w	r9, #0
 800d6b2:	fbc4 8902 	smlal	r8, r9, r4, r2
 800d6b6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d6ba:	9a01      	ldr	r2, [sp, #4]
 800d6bc:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800d6c0:	9b03      	ldr	r3, [sp, #12]
 800d6c2:	109b      	asrs	r3, r3, #2
 800d6c4:	f303 030f 	ssat	r3, #16, r3
 800d6c8:	f822 3f02 	strh.w	r3, [r2, #2]!
 800d6cc:	9b04      	ldr	r3, [sp, #16]
 800d6ce:	9201      	str	r2, [sp, #4]
 800d6d0:	f10a 0a01 	add.w	sl, sl, #1
 800d6d4:	459a      	cmp	sl, r3
 800d6d6:	44bc      	add	ip, r7
 800d6d8:	460c      	mov	r4, r1
 800d6da:	d00b      	beq.n	800d6f4 <D24_1CH_HTONS_VOL_HP+0x108>
 800d6dc:	f01a 0f01 	tst.w	sl, #1
 800d6e0:	d0a6      	beq.n	800d630 <D24_1CH_HTONS_VOL_HP+0x44>
 800d6e2:	78c2      	ldrb	r2, [r0, #3]
 800d6e4:	7883      	ldrb	r3, [r0, #2]
 800d6e6:	f810 1b04 	ldrb.w	r1, [r0], #4
 800d6ea:	0212      	lsls	r2, r2, #8
 800d6ec:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800d6f0:	440b      	add	r3, r1
 800d6f2:	e7a5      	b.n	800d640 <D24_1CH_HTONS_VOL_HP+0x54>
 800d6f4:	4663      	mov	r3, ip
 800d6f6:	4645      	mov	r5, r8
 800d6f8:	46dc      	mov	ip, fp
 800d6fa:	9807      	ldr	r0, [sp, #28]
 800d6fc:	6141      	str	r1, [r0, #20]
 800d6fe:	9906      	ldr	r1, [sp, #24]
 800d700:	6083      	str	r3, [r0, #8]
 800d702:	f8c0 c00c 	str.w	ip, [r0, #12]
 800d706:	61c6      	str	r6, [r0, #28]
 800d708:	6105      	str	r5, [r0, #16]
 800d70a:	6181      	str	r1, [r0, #24]
 800d70c:	2000      	movs	r0, #0
 800d70e:	b009      	add	sp, #36	; 0x24
 800d710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d714:	4621      	mov	r1, r4
 800d716:	e7f0      	b.n	800d6fa <D24_1CH_HTONS_VOL_HP+0x10e>
 800d718:	00030001 	.word	0x00030001
 800d71c:	00060007 	.word	0x00060007
 800d720:	20000000 	.word	0x20000000

0800d724 <D32_1CH_HTONS_VOL_HP>:
 800d724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d728:	4692      	mov	sl, r2
 800d72a:	b087      	sub	sp, #28
 800d72c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800d72e:	f8da 3018 	ldr.w	r3, [sl, #24]
 800d732:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800d736:	9304      	str	r3, [sp, #16]
 800d738:	f8da 4010 	ldr.w	r4, [sl, #16]
 800d73c:	f8da 8014 	ldr.w	r8, [sl, #20]
 800d740:	f8da 601c 	ldr.w	r6, [sl, #28]
 800d744:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d748:	f8da e00c 	ldr.w	lr, [sl, #12]
 800d74c:	9501      	str	r5, [sp, #4]
 800d74e:	f8da c020 	ldr.w	ip, [sl, #32]
 800d752:	2a00      	cmp	r2, #0
 800d754:	d07b      	beq.n	800d84e <D32_1CH_HTONS_VOL_HP+0x12a>
 800d756:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d75a:	4f3e      	ldr	r7, [pc, #248]	; (800d854 <D32_1CH_HTONS_VOL_HP+0x130>)
 800d75c:	f8cd c00c 	str.w	ip, [sp, #12]
 800d760:	9202      	str	r2, [sp, #8]
 800d762:	460d      	mov	r5, r1
 800d764:	46a1      	mov	r9, r4
 800d766:	4684      	mov	ip, r0
 800d768:	f8cd a014 	str.w	sl, [sp, #20]
 800d76c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d770:	ba49      	rev16	r1, r1
 800d772:	b2c8      	uxtb	r0, r1
 800d774:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800d778:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800d77c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800d780:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800d784:	0e09      	lsrs	r1, r1, #24
 800d786:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800d78a:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800d78e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800d792:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800d796:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800d79a:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800d79e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d7a2:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800d7a6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d7aa:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d7ae:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800d7b2:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800d7b6:	4a28      	ldr	r2, [pc, #160]	; (800d858 <D32_1CH_HTONS_VOL_HP+0x134>)
 800d7b8:	fb20 e202 	smlad	r2, r0, r2, lr
 800d7bc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d7c0:	fb2a 2101 	smlad	r1, sl, r1, r2
 800d7c4:	4a25      	ldr	r2, [pc, #148]	; (800d85c <D32_1CH_HTONS_VOL_HP+0x138>)
 800d7c6:	fb20 3302 	smlad	r3, r0, r2, r3
 800d7ca:	4a25      	ldr	r2, [pc, #148]	; (800d860 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800d7cc:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	fb20 f003 	smuad	r0, r0, r3
 800d7d6:	4b23      	ldr	r3, [pc, #140]	; (800d864 <D32_1CH_HTONS_VOL_HP+0x140>)
 800d7d8:	fb2a 0303 	smlad	r3, sl, r3, r0
 800d7dc:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800d7e0:	9c03      	ldr	r4, [sp, #12]
 800d7e2:	eb02 0009 	add.w	r0, r2, r9
 800d7e6:	eba0 0008 	sub.w	r0, r0, r8
 800d7ea:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800d7ee:	fba0 0104 	umull	r0, r1, r0, r4
 800d7f2:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800d7f6:	fb04 110b 	mla	r1, r4, fp, r1
 800d7fa:	f141 0100 	adc.w	r1, r1, #0
 800d7fe:	9c01      	ldr	r4, [sp, #4]
 800d800:	0388      	lsls	r0, r1, #14
 800d802:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d806:	f04f 0900 	mov.w	r9, #0
 800d80a:	fbc0 8904 	smlal	r8, r9, r0, r4
 800d80e:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800d812:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800d816:	f300 000f 	ssat	r0, #16, r0
 800d81a:	9902      	ldr	r1, [sp, #8]
 800d81c:	f825 0b02 	strh.w	r0, [r5], #2
 800d820:	428d      	cmp	r5, r1
 800d822:	4690      	mov	r8, r2
 800d824:	d1a2      	bne.n	800d76c <D32_1CH_HTONS_VOL_HP+0x48>
 800d826:	f8dd a014 	ldr.w	sl, [sp, #20]
 800d82a:	464c      	mov	r4, r9
 800d82c:	f8ca 3008 	str.w	r3, [sl, #8]
 800d830:	9b04      	ldr	r3, [sp, #16]
 800d832:	f8ca e00c 	str.w	lr, [sl, #12]
 800d836:	2000      	movs	r0, #0
 800d838:	f8ca 601c 	str.w	r6, [sl, #28]
 800d83c:	f8ca 4010 	str.w	r4, [sl, #16]
 800d840:	f8ca 2014 	str.w	r2, [sl, #20]
 800d844:	f8ca 3018 	str.w	r3, [sl, #24]
 800d848:	b007      	add	sp, #28
 800d84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84e:	4642      	mov	r2, r8
 800d850:	e7ec      	b.n	800d82c <D32_1CH_HTONS_VOL_HP+0x108>
 800d852:	bf00      	nop
 800d854:	20000000 	.word	0x20000000
 800d858:	00060003 	.word	0x00060003
 800d85c:	000a000c 	.word	0x000a000c
 800d860:	000c000a 	.word	0x000c000a
 800d864:	00030006 	.word	0x00030006

0800d868 <D48_1CH_HTONS_VOL_HP>:
 800d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86c:	4613      	mov	r3, r2
 800d86e:	461c      	mov	r4, r3
 800d870:	b087      	sub	sp, #28
 800d872:	4625      	mov	r5, r4
 800d874:	4626      	mov	r6, r4
 800d876:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800d878:	9205      	str	r2, [sp, #20]
 800d87a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800d87c:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800d880:	9501      	str	r5, [sp, #4]
 800d882:	4680      	mov	r8, r0
 800d884:	6a35      	ldr	r5, [r6, #32]
 800d886:	6918      	ldr	r0, [r3, #16]
 800d888:	699b      	ldr	r3, [r3, #24]
 800d88a:	9304      	str	r3, [sp, #16]
 800d88c:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800d890:	68a3      	ldr	r3, [r4, #8]
 800d892:	9502      	str	r5, [sp, #8]
 800d894:	68e4      	ldr	r4, [r4, #12]
 800d896:	2a00      	cmp	r2, #0
 800d898:	f000 808c 	beq.w	800d9b4 <D48_1CH_HTONS_VOL_HP+0x14c>
 800d89c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d8a0:	4d45      	ldr	r5, [pc, #276]	; (800d9b8 <D48_1CH_HTONS_VOL_HP+0x150>)
 800d8a2:	9203      	str	r2, [sp, #12]
 800d8a4:	468c      	mov	ip, r1
 800d8a6:	e898 0044 	ldmia.w	r8, {r2, r6}
 800d8aa:	f108 0806 	add.w	r8, r8, #6
 800d8ae:	ba52      	rev16	r2, r2
 800d8b0:	ba76      	rev16	r6, r6
 800d8b2:	b2d7      	uxtb	r7, r2
 800d8b4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d8b8:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800d8bc:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800d8c0:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800d8c4:	0e12      	lsrs	r2, r2, #24
 800d8c6:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800d8ca:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800d8ce:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800d8d2:	fa5f fb86 	uxtb.w	fp, r6
 800d8d6:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800d8da:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800d8de:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800d8e2:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800d8e6:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800d8ea:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800d8ee:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800d8f2:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800d8f6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d8fa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d8fe:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800d902:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d906:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d90a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d90e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800d912:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800d916:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800d91a:	4a28      	ldr	r2, [pc, #160]	; (800d9bc <D48_1CH_HTONS_VOL_HP+0x154>)
 800d91c:	fb2a 4202 	smlad	r2, sl, r2, r4
 800d920:	4927      	ldr	r1, [pc, #156]	; (800d9c0 <D48_1CH_HTONS_VOL_HP+0x158>)
 800d922:	fb27 2201 	smlad	r2, r7, r1, r2
 800d926:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d92a:	fb26 2201 	smlad	r2, r6, r1, r2
 800d92e:	4925      	ldr	r1, [pc, #148]	; (800d9c4 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800d930:	fb2a 3401 	smlad	r4, sl, r1, r3
 800d934:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800d938:	fb27 4403 	smlad	r4, r7, r3, r4
 800d93c:	4b22      	ldr	r3, [pc, #136]	; (800d9c8 <D48_1CH_HTONS_VOL_HP+0x160>)
 800d93e:	fb26 4403 	smlad	r4, r6, r3, r4
 800d942:	2101      	movs	r1, #1
 800d944:	fb2a fa01 	smuad	sl, sl, r1
 800d948:	4b20      	ldr	r3, [pc, #128]	; (800d9cc <D48_1CH_HTONS_VOL_HP+0x164>)
 800d94a:	fb27 a703 	smlad	r7, r7, r3, sl
 800d94e:	4b20      	ldr	r3, [pc, #128]	; (800d9d0 <D48_1CH_HTONS_VOL_HP+0x168>)
 800d950:	fb26 7303 	smlad	r3, r6, r3, r7
 800d954:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800d958:	9e02      	ldr	r6, [sp, #8]
 800d95a:	9f01      	ldr	r7, [sp, #4]
 800d95c:	4410      	add	r0, r2
 800d95e:	eba0 0009 	sub.w	r0, r0, r9
 800d962:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800d966:	fba0 0106 	umull	r0, r1, r0, r6
 800d96a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800d96e:	fb06 110a 	mla	r1, r6, sl, r1
 800d972:	f141 0100 	adc.w	r1, r1, #0
 800d976:	0308      	lsls	r0, r1, #12
 800d978:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800d97c:	f04f 0a00 	mov.w	sl, #0
 800d980:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800d984:	4657      	mov	r7, sl
 800d986:	10b8      	asrs	r0, r7, #2
 800d988:	f300 000f 	ssat	r0, #16, r0
 800d98c:	f82c 0b02 	strh.w	r0, [ip], #2
 800d990:	0048      	lsls	r0, r1, #1
 800d992:	9903      	ldr	r1, [sp, #12]
 800d994:	458c      	cmp	ip, r1
 800d996:	4691      	mov	r9, r2
 800d998:	d185      	bne.n	800d8a6 <D48_1CH_HTONS_VOL_HP+0x3e>
 800d99a:	9d05      	ldr	r5, [sp, #20]
 800d99c:	616a      	str	r2, [r5, #20]
 800d99e:	9a04      	ldr	r2, [sp, #16]
 800d9a0:	6128      	str	r0, [r5, #16]
 800d9a2:	2000      	movs	r0, #0
 800d9a4:	60ab      	str	r3, [r5, #8]
 800d9a6:	60ec      	str	r4, [r5, #12]
 800d9a8:	f8c5 e01c 	str.w	lr, [r5, #28]
 800d9ac:	61aa      	str	r2, [r5, #24]
 800d9ae:	b007      	add	sp, #28
 800d9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9b4:	464a      	mov	r2, r9
 800d9b6:	e7f0      	b.n	800d99a <D48_1CH_HTONS_VOL_HP+0x132>
 800d9b8:	20000000 	.word	0x20000000
 800d9bc:	000f000a 	.word	0x000f000a
 800d9c0:	00060003 	.word	0x00060003
 800d9c4:	00150019 	.word	0x00150019
 800d9c8:	00190015 	.word	0x00190015
 800d9cc:	00030006 	.word	0x00030006
 800d9d0:	000a000f 	.word	0x000a000f

0800d9d4 <D64_1CH_HTONS_VOL_HP>:
 800d9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d8:	b089      	sub	sp, #36	; 0x24
 800d9da:	4614      	mov	r4, r2
 800d9dc:	9207      	str	r2, [sp, #28]
 800d9de:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d9e0:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800d9e4:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800d9e8:	6992      	ldr	r2, [r2, #24]
 800d9ea:	9206      	str	r2, [sp, #24]
 800d9ec:	68e2      	ldr	r2, [r4, #12]
 800d9ee:	9201      	str	r2, [sp, #4]
 800d9f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d9f2:	9203      	str	r2, [sp, #12]
 800d9f4:	6a22      	ldr	r2, [r4, #32]
 800d9f6:	69e5      	ldr	r5, [r4, #28]
 800d9f8:	68a6      	ldr	r6, [r4, #8]
 800d9fa:	9204      	str	r2, [sp, #16]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	f000 80b0 	beq.w	800db62 <D64_1CH_HTONS_VOL_HP+0x18e>
 800da02:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800da06:	4f58      	ldr	r7, [pc, #352]	; (800db68 <D64_1CH_HTONS_VOL_HP+0x194>)
 800da08:	9305      	str	r3, [sp, #20]
 800da0a:	9102      	str	r1, [sp, #8]
 800da0c:	f850 2b08 	ldr.w	r2, [r0], #8
 800da10:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800da14:	ba52      	rev16	r2, r2
 800da16:	fa93 f993 	rev16.w	r9, r3
 800da1a:	b2d4      	uxtb	r4, r2
 800da1c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800da20:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800da24:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800da28:	9901      	ldr	r1, [sp, #4]
 800da2a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800da2e:	0e12      	lsrs	r2, r2, #24
 800da30:	44ab      	add	fp, r5
 800da32:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800da36:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800da3a:	fa5f f289 	uxtb.w	r2, r9
 800da3e:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800da42:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800da46:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800da4a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800da4e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800da52:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800da56:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800da5a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800da5e:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800da62:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800da66:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800da6a:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800da6e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800da72:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800da76:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800da7a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800da7e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800da82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da86:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800da8a:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800da8e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800da92:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800da96:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800da9a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800da9e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800daa2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800daa6:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800daaa:	4b30      	ldr	r3, [pc, #192]	; (800db6c <D64_1CH_HTONS_VOL_HP+0x198>)
 800daac:	fb2b 1303 	smlad	r3, fp, r3, r1
 800dab0:	492f      	ldr	r1, [pc, #188]	; (800db70 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800dab2:	fb24 3301 	smlad	r3, r4, r1, r3
 800dab6:	492f      	ldr	r1, [pc, #188]	; (800db74 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800dab8:	fb22 3301 	smlad	r3, r2, r1, r3
 800dabc:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800dac0:	fb2e 390a 	smlad	r9, lr, sl, r3
 800dac4:	4b2c      	ldr	r3, [pc, #176]	; (800db78 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800dac6:	fb2b 6603 	smlad	r6, fp, r3, r6
 800daca:	fb2e 6613 	smladx	r6, lr, r3, r6
 800dace:	4b2b      	ldr	r3, [pc, #172]	; (800db7c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800dad0:	fb24 6603 	smlad	r6, r4, r3, r6
 800dad4:	fb22 6313 	smladx	r3, r2, r3, r6
 800dad8:	f04f 0a01 	mov.w	sl, #1
 800dadc:	9301      	str	r3, [sp, #4]
 800dade:	fb2b fb0a 	smuad	fp, fp, sl
 800dae2:	4b27      	ldr	r3, [pc, #156]	; (800db80 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800dae4:	fb24 ba03 	smlad	sl, r4, r3, fp
 800dae8:	4b26      	ldr	r3, [pc, #152]	; (800db84 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800daea:	fb22 a203 	smlad	r2, r2, r3, sl
 800daee:	4b26      	ldr	r3, [pc, #152]	; (800db88 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800daf0:	fb2e 2603 	smlad	r6, lr, r3, r2
 800daf4:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800daf8:	eb0a 020c 	add.w	r2, sl, ip
 800dafc:	9c04      	ldr	r4, [sp, #16]
 800dafe:	9903      	ldr	r1, [sp, #12]
 800db00:	eba2 0208 	sub.w	r2, r2, r8
 800db04:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800db08:	fba2 2304 	umull	r2, r3, r2, r4
 800db0c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800db10:	fb04 3309 	mla	r3, r4, r9, r3
 800db14:	f143 0300 	adc.w	r3, r3, #0
 800db18:	02da      	lsls	r2, r3, #11
 800db1a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800db1e:	f04f 0900 	mov.w	r9, #0
 800db22:	fbc1 8902 	smlal	r8, r9, r1, r2
 800db26:	9902      	ldr	r1, [sp, #8]
 800db28:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800db2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800db30:	f302 020f 	ssat	r2, #16, r2
 800db34:	9b05      	ldr	r3, [sp, #20]
 800db36:	f821 2b02 	strh.w	r2, [r1], #2
 800db3a:	4299      	cmp	r1, r3
 800db3c:	9102      	str	r1, [sp, #8]
 800db3e:	46d0      	mov	r8, sl
 800db40:	f47f af64 	bne.w	800da0c <D64_1CH_HTONS_VOL_HP+0x38>
 800db44:	9a07      	ldr	r2, [sp, #28]
 800db46:	9901      	ldr	r1, [sp, #4]
 800db48:	60d1      	str	r1, [r2, #12]
 800db4a:	9906      	ldr	r1, [sp, #24]
 800db4c:	6096      	str	r6, [r2, #8]
 800db4e:	2000      	movs	r0, #0
 800db50:	61d5      	str	r5, [r2, #28]
 800db52:	f8c2 c010 	str.w	ip, [r2, #16]
 800db56:	f8c2 a014 	str.w	sl, [r2, #20]
 800db5a:	6191      	str	r1, [r2, #24]
 800db5c:	b009      	add	sp, #36	; 0x24
 800db5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db62:	46c2      	mov	sl, r8
 800db64:	4622      	mov	r2, r4
 800db66:	e7ee      	b.n	800db46 <D64_1CH_HTONS_VOL_HP+0x172>
 800db68:	20000000 	.word	0x20000000
 800db6c:	001c0015 	.word	0x001c0015
 800db70:	000f000a 	.word	0x000f000a
 800db74:	00060003 	.word	0x00060003
 800db78:	0024002a 	.word	0x0024002a
 800db7c:	002e0030 	.word	0x002e0030
 800db80:	00030006 	.word	0x00030006
 800db84:	000a000f 	.word	0x000a000f
 800db88:	0015001c 	.word	0x0015001c

0800db8c <D80_1CH_HTONS_VOL_HP>:
 800db8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db90:	4613      	mov	r3, r2
 800db92:	b089      	sub	sp, #36	; 0x24
 800db94:	4686      	mov	lr, r0
 800db96:	6918      	ldr	r0, [r3, #16]
 800db98:	9000      	str	r0, [sp, #0]
 800db9a:	4618      	mov	r0, r3
 800db9c:	461c      	mov	r4, r3
 800db9e:	695b      	ldr	r3, [r3, #20]
 800dba0:	9302      	str	r3, [sp, #8]
 800dba2:	6983      	ldr	r3, [r0, #24]
 800dba4:	9306      	str	r3, [sp, #24]
 800dba6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800dbaa:	69c3      	ldr	r3, [r0, #28]
 800dbac:	68c0      	ldr	r0, [r0, #12]
 800dbae:	9207      	str	r2, [sp, #28]
 800dbb0:	9001      	str	r0, [sp, #4]
 800dbb2:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800dbb4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800dbb6:	9003      	str	r0, [sp, #12]
 800dbb8:	6a20      	ldr	r0, [r4, #32]
 800dbba:	9004      	str	r0, [sp, #16]
 800dbbc:	2a00      	cmp	r2, #0
 800dbbe:	f000 80d2 	beq.w	800dd66 <D80_1CH_HTONS_VOL_HP+0x1da>
 800dbc2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800dbc6:	4869      	ldr	r0, [pc, #420]	; (800dd6c <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800dbc8:	9205      	str	r2, [sp, #20]
 800dbca:	461c      	mov	r4, r3
 800dbcc:	f8de 5000 	ldr.w	r5, [lr]
 800dbd0:	f8de 2004 	ldr.w	r2, [lr, #4]
 800dbd4:	f8de 3008 	ldr.w	r3, [lr, #8]
 800dbd8:	f10e 0e0a 	add.w	lr, lr, #10
 800dbdc:	ba6d      	rev16	r5, r5
 800dbde:	ba52      	rev16	r2, r2
 800dbe0:	fa93 fb93 	rev16.w	fp, r3
 800dbe4:	b2ee      	uxtb	r6, r5
 800dbe6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800dbea:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800dbee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800dbf2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800dbf6:	eb04 0a07 	add.w	sl, r4, r7
 800dbfa:	0e2d      	lsrs	r5, r5, #24
 800dbfc:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800dc00:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800dc04:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800dc08:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800dc0c:	b2d5      	uxtb	r5, r2
 800dc0e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800dc12:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800dc16:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800dc1a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800dc1e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800dc22:	0e12      	lsrs	r2, r2, #24
 800dc24:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800dc28:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800dc2c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800dc30:	fa5f f48b 	uxtb.w	r4, fp
 800dc34:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800dc38:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800dc3c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800dc40:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800dc44:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800dc48:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800dc4c:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800dc50:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800dc54:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800dc58:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800dc5c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800dc60:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800dc64:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800dc68:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800dc6c:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800dc70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc74:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800dc78:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800dc7c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800dc80:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800dc84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800dc88:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800dc8c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800dc90:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800dc94:	4d36      	ldr	r5, [pc, #216]	; (800dd70 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800dc96:	9f01      	ldr	r7, [sp, #4]
 800dc98:	fb23 7505 	smlad	r5, r3, r5, r7
 800dc9c:	4f35      	ldr	r7, [pc, #212]	; (800dd74 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800dc9e:	fb29 5507 	smlad	r5, r9, r7, r5
 800dca2:	4f35      	ldr	r7, [pc, #212]	; (800dd78 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800dca4:	fb28 5507 	smlad	r5, r8, r7, r5
 800dca8:	4f34      	ldr	r7, [pc, #208]	; (800dd7c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800dcaa:	fb22 5507 	smlad	r5, r2, r7, r5
 800dcae:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800dcb2:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800dcb6:	4d32      	ldr	r5, [pc, #200]	; (800dd80 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800dcb8:	fb23 cc05 	smlad	ip, r3, r5, ip
 800dcbc:	4d31      	ldr	r5, [pc, #196]	; (800dd84 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800dcbe:	fb29 cc05 	smlad	ip, r9, r5, ip
 800dcc2:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800dcc6:	fb28 c505 	smlad	r5, r8, r5, ip
 800dcca:	4f2f      	ldr	r7, [pc, #188]	; (800dd88 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800dccc:	fb22 5507 	smlad	r5, r2, r7, r5
 800dcd0:	4f2e      	ldr	r7, [pc, #184]	; (800dd8c <D80_1CH_HTONS_VOL_HP+0x200>)
 800dcd2:	fb26 5507 	smlad	r5, r6, r7, r5
 800dcd6:	f04f 0a01 	mov.w	sl, #1
 800dcda:	9501      	str	r5, [sp, #4]
 800dcdc:	fb23 fa0a 	smuad	sl, r3, sl
 800dce0:	4b2b      	ldr	r3, [pc, #172]	; (800dd90 <D80_1CH_HTONS_VOL_HP+0x204>)
 800dce2:	fb29 a903 	smlad	r9, r9, r3, sl
 800dce6:	4d2b      	ldr	r5, [pc, #172]	; (800dd94 <D80_1CH_HTONS_VOL_HP+0x208>)
 800dce8:	fb28 9805 	smlad	r8, r8, r5, r9
 800dcec:	4d2a      	ldr	r5, [pc, #168]	; (800dd98 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800dcee:	fb22 8205 	smlad	r2, r2, r5, r8
 800dcf2:	4b2a      	ldr	r3, [pc, #168]	; (800dd9c <D80_1CH_HTONS_VOL_HP+0x210>)
 800dcf4:	fb26 2c03 	smlad	ip, r6, r3, r2
 800dcf8:	9b00      	ldr	r3, [sp, #0]
 800dcfa:	9d04      	ldr	r5, [sp, #16]
 800dcfc:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800dd00:	4453      	add	r3, sl
 800dd02:	461a      	mov	r2, r3
 800dd04:	9b02      	ldr	r3, [sp, #8]
 800dd06:	f8cd a008 	str.w	sl, [sp, #8]
 800dd0a:	1ad2      	subs	r2, r2, r3
 800dd0c:	17d7      	asrs	r7, r2, #31
 800dd0e:	fba2 2305 	umull	r2, r3, r2, r5
 800dd12:	fb05 3307 	mla	r3, r5, r7, r3
 800dd16:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800dd1a:	f143 0300 	adc.w	r3, r3, #0
 800dd1e:	9d03      	ldr	r5, [sp, #12]
 800dd20:	029a      	lsls	r2, r3, #10
 800dd22:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dd26:	2700      	movs	r7, #0
 800dd28:	005b      	lsls	r3, r3, #1
 800dd2a:	fbc5 6702 	smlal	r6, r7, r5, r2
 800dd2e:	10ba      	asrs	r2, r7, #2
 800dd30:	9300      	str	r3, [sp, #0]
 800dd32:	f302 020f 	ssat	r2, #16, r2
 800dd36:	9b05      	ldr	r3, [sp, #20]
 800dd38:	f821 2b02 	strh.w	r2, [r1], #2
 800dd3c:	4299      	cmp	r1, r3
 800dd3e:	f47f af45 	bne.w	800dbcc <D80_1CH_HTONS_VOL_HP+0x40>
 800dd42:	4623      	mov	r3, r4
 800dd44:	9907      	ldr	r1, [sp, #28]
 800dd46:	9801      	ldr	r0, [sp, #4]
 800dd48:	60c8      	str	r0, [r1, #12]
 800dd4a:	9a00      	ldr	r2, [sp, #0]
 800dd4c:	f8c1 c008 	str.w	ip, [r1, #8]
 800dd50:	4608      	mov	r0, r1
 800dd52:	61cb      	str	r3, [r1, #28]
 800dd54:	610a      	str	r2, [r1, #16]
 800dd56:	f8c1 a014 	str.w	sl, [r1, #20]
 800dd5a:	9906      	ldr	r1, [sp, #24]
 800dd5c:	6181      	str	r1, [r0, #24]
 800dd5e:	2000      	movs	r0, #0
 800dd60:	b009      	add	sp, #36	; 0x24
 800dd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd66:	f8dd a008 	ldr.w	sl, [sp, #8]
 800dd6a:	e7eb      	b.n	800dd44 <D80_1CH_HTONS_VOL_HP+0x1b8>
 800dd6c:	20000000 	.word	0x20000000
 800dd70:	002d0024 	.word	0x002d0024
 800dd74:	001c0015 	.word	0x001c0015
 800dd78:	000f000a 	.word	0x000f000a
 800dd7c:	00060003 	.word	0x00060003
 800dd80:	0037003f 	.word	0x0037003f
 800dd84:	00450049 	.word	0x00450049
 800dd88:	00490045 	.word	0x00490045
 800dd8c:	003f0037 	.word	0x003f0037
 800dd90:	00030006 	.word	0x00030006
 800dd94:	000a000f 	.word	0x000a000f
 800dd98:	0015001c 	.word	0x0015001c
 800dd9c:	0024002d 	.word	0x0024002d

0800dda0 <D128_1CH_HTONS_VOL_HP>:
 800dda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda4:	b093      	sub	sp, #76	; 0x4c
 800dda6:	4614      	mov	r4, r2
 800dda8:	9211      	str	r2, [sp, #68]	; 0x44
 800ddaa:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800ddac:	6912      	ldr	r2, [r2, #16]
 800ddae:	9203      	str	r2, [sp, #12]
 800ddb0:	4622      	mov	r2, r4
 800ddb2:	4615      	mov	r5, r2
 800ddb4:	6964      	ldr	r4, [r4, #20]
 800ddb6:	9406      	str	r4, [sp, #24]
 800ddb8:	4614      	mov	r4, r2
 800ddba:	6992      	ldr	r2, [r2, #24]
 800ddbc:	9210      	str	r2, [sp, #64]	; 0x40
 800ddbe:	68ea      	ldr	r2, [r5, #12]
 800ddc0:	9204      	str	r2, [sp, #16]
 800ddc2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800ddc4:	69e6      	ldr	r6, [r4, #28]
 800ddc6:	920d      	str	r2, [sp, #52]	; 0x34
 800ddc8:	68a4      	ldr	r4, [r4, #8]
 800ddca:	6a2a      	ldr	r2, [r5, #32]
 800ddcc:	9405      	str	r4, [sp, #20]
 800ddce:	920e      	str	r2, [sp, #56]	; 0x38
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f000 8145 	beq.w	800e060 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800ddd6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800ddda:	930f      	str	r3, [sp, #60]	; 0x3c
 800dddc:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800e0bc <D128_1CH_HTONS_VOL_HP+0x31c>
 800dde0:	9107      	str	r1, [sp, #28]
 800dde2:	f100 0310 	add.w	r3, r0, #16
 800dde6:	4699      	mov	r9, r3
 800dde8:	f1a9 0110 	sub.w	r1, r9, #16
 800ddec:	c90e      	ldmia	r1, {r1, r2, r3}
 800ddee:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800ddf2:	ba49      	rev16	r1, r1
 800ddf4:	ba52      	rev16	r2, r2
 800ddf6:	ba5b      	rev16	r3, r3
 800ddf8:	fa90 fa90 	rev16.w	sl, r0
 800ddfc:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800de00:	b2cc      	uxtb	r4, r1
 800de02:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800de06:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800de0a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800de0e:	0e09      	lsrs	r1, r1, #24
 800de10:	4426      	add	r6, r4
 800de12:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800de16:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800de1a:	b2d0      	uxtb	r0, r2
 800de1c:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800de20:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800de24:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800de28:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800de2c:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800de30:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800de34:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800de38:	0e12      	lsrs	r2, r2, #24
 800de3a:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800de3e:	9701      	str	r7, [sp, #4]
 800de40:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800de44:	4627      	mov	r7, r4
 800de46:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800de4a:	9702      	str	r7, [sp, #8]
 800de4c:	b2da      	uxtb	r2, r3
 800de4e:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800de52:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800de56:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800de5a:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800de5e:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800de62:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800de66:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800de6a:	0e1b      	lsrs	r3, r3, #24
 800de6c:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800de70:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800de74:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800de78:	fa5f f38a 	uxtb.w	r3, sl
 800de7c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800de80:	960a      	str	r6, [sp, #40]	; 0x28
 800de82:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800de86:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800de8a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800de8e:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800de92:	950b      	str	r5, [sp, #44]	; 0x2c
 800de94:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800de98:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800de9c:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800dea0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800dea4:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800dea8:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800deac:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800deb0:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800deb4:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800deb8:	9308      	str	r3, [sp, #32]
 800deba:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800debe:	9b01      	ldr	r3, [sp, #4]
 800dec0:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800dec4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800dec8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800decc:	9b02      	ldr	r3, [sp, #8]
 800dece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ded2:	9302      	str	r3, [sp, #8]
 800ded4:	9b08      	ldr	r3, [sp, #32]
 800ded6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800deda:	9308      	str	r3, [sp, #32]
 800dedc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dede:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800dee2:	950c      	str	r5, [sp, #48]	; 0x30
 800dee4:	461d      	mov	r5, r3
 800dee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dee8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800deec:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800def0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800def4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800def8:	9301      	str	r3, [sp, #4]
 800defa:	9b02      	ldr	r3, [sp, #8]
 800defc:	9202      	str	r2, [sp, #8]
 800defe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800df02:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800df06:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800df0a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800df0e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800df12:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800df16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800df1a:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800df1e:	9b08      	ldr	r3, [sp, #32]
 800df20:	9f01      	ldr	r7, [sp, #4]
 800df22:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800df26:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800df2a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800df2e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800df32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800df36:	46be      	mov	lr, r7
 800df38:	0a96      	lsrs	r6, r2, #10
 800df3a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800df3e:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800df42:	4f49      	ldr	r7, [pc, #292]	; (800e068 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800df44:	9a04      	ldr	r2, [sp, #16]
 800df46:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800df4a:	4a48      	ldr	r2, [pc, #288]	; (800e06c <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800df4c:	fb2a ee02 	smlad	lr, sl, r2, lr
 800df50:	4a47      	ldr	r2, [pc, #284]	; (800e070 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800df52:	fb21 ee02 	smlad	lr, r1, r2, lr
 800df56:	4a47      	ldr	r2, [pc, #284]	; (800e074 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800df58:	fb24 ee02 	smlad	lr, r4, r2, lr
 800df5c:	4a46      	ldr	r2, [pc, #280]	; (800e078 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800df5e:	9f02      	ldr	r7, [sp, #8]
 800df60:	fb27 ee02 	smlad	lr, r7, r2, lr
 800df64:	4a45      	ldr	r2, [pc, #276]	; (800e07c <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800df66:	fb20 ee02 	smlad	lr, r0, r2, lr
 800df6a:	4a45      	ldr	r2, [pc, #276]	; (800e080 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800df6c:	fb23 e702 	smlad	r7, r3, r2, lr
 800df70:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800df74:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800df78:	9f01      	ldr	r7, [sp, #4]
 800df7a:	4a42      	ldr	r2, [pc, #264]	; (800e084 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800df7c:	46bc      	mov	ip, r7
 800df7e:	9f05      	ldr	r7, [sp, #20]
 800df80:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800df84:	4a40      	ldr	r2, [pc, #256]	; (800e088 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800df86:	fb2a cc02 	smlad	ip, sl, r2, ip
 800df8a:	4f40      	ldr	r7, [pc, #256]	; (800e08c <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800df8c:	fb21 cc07 	smlad	ip, r1, r7, ip
 800df90:	4f3f      	ldr	r7, [pc, #252]	; (800e090 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800df92:	fb24 cc07 	smlad	ip, r4, r7, ip
 800df96:	4f3f      	ldr	r7, [pc, #252]	; (800e094 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800df98:	9a02      	ldr	r2, [sp, #8]
 800df9a:	fb22 cc07 	smlad	ip, r2, r7, ip
 800df9e:	4f3e      	ldr	r7, [pc, #248]	; (800e098 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800dfa0:	fb20 cc07 	smlad	ip, r0, r7, ip
 800dfa4:	4f3d      	ldr	r7, [pc, #244]	; (800e09c <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800dfa6:	fb23 c707 	smlad	r7, r3, r7, ip
 800dfaa:	f8df c114 	ldr.w	ip, [pc, #276]	; 800e0c0 <D128_1CH_HTONS_VOL_HP+0x320>
 800dfae:	fb25 720c 	smlad	r2, r5, ip, r7
 800dfb2:	f04f 0b01 	mov.w	fp, #1
 800dfb6:	9204      	str	r2, [sp, #16]
 800dfb8:	9f01      	ldr	r7, [sp, #4]
 800dfba:	fb27 fb0b 	smuad	fp, r7, fp
 800dfbe:	4f38      	ldr	r7, [pc, #224]	; (800e0a0 <D128_1CH_HTONS_VOL_HP+0x300>)
 800dfc0:	fb2a ba07 	smlad	sl, sl, r7, fp
 800dfc4:	4f37      	ldr	r7, [pc, #220]	; (800e0a4 <D128_1CH_HTONS_VOL_HP+0x304>)
 800dfc6:	fb21 aa07 	smlad	sl, r1, r7, sl
 800dfca:	4f37      	ldr	r7, [pc, #220]	; (800e0a8 <D128_1CH_HTONS_VOL_HP+0x308>)
 800dfcc:	fb24 aa07 	smlad	sl, r4, r7, sl
 800dfd0:	4f36      	ldr	r7, [pc, #216]	; (800e0ac <D128_1CH_HTONS_VOL_HP+0x30c>)
 800dfd2:	9a02      	ldr	r2, [sp, #8]
 800dfd4:	fb22 a707 	smlad	r7, r2, r7, sl
 800dfd8:	4a35      	ldr	r2, [pc, #212]	; (800e0b0 <D128_1CH_HTONS_VOL_HP+0x310>)
 800dfda:	fb20 7702 	smlad	r7, r0, r2, r7
 800dfde:	4a35      	ldr	r2, [pc, #212]	; (800e0b4 <D128_1CH_HTONS_VOL_HP+0x314>)
 800dfe0:	fb23 7702 	smlad	r7, r3, r2, r7
 800dfe4:	4b34      	ldr	r3, [pc, #208]	; (800e0b8 <D128_1CH_HTONS_VOL_HP+0x318>)
 800dfe6:	fb25 7303 	smlad	r3, r5, r3, r7
 800dfea:	9305      	str	r3, [sp, #20]
 800dfec:	9b03      	ldr	r3, [sp, #12]
 800dfee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800dff0:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800dff4:	4473      	add	r3, lr
 800dff6:	461a      	mov	r2, r3
 800dff8:	9b06      	ldr	r3, [sp, #24]
 800dffa:	f8cd e018 	str.w	lr, [sp, #24]
 800dffe:	1ad2      	subs	r2, r2, r3
 800e000:	17d1      	asrs	r1, r2, #31
 800e002:	fba2 2304 	umull	r2, r3, r2, r4
 800e006:	fb04 3301 	mla	r3, r4, r1, r3
 800e00a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800e00e:	f143 0300 	adc.w	r3, r3, #0
 800e012:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e014:	021a      	lsls	r2, r3, #8
 800e016:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e01a:	2100      	movs	r1, #0
 800e01c:	fbc4 0102 	smlal	r0, r1, r4, r2
 800e020:	108a      	asrs	r2, r1, #2
 800e022:	9907      	ldr	r1, [sp, #28]
 800e024:	f302 020f 	ssat	r2, #16, r2
 800e028:	005b      	lsls	r3, r3, #1
 800e02a:	f821 2b02 	strh.w	r2, [r1], #2
 800e02e:	9303      	str	r3, [sp, #12]
 800e030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e032:	9107      	str	r1, [sp, #28]
 800e034:	4299      	cmp	r1, r3
 800e036:	f109 0910 	add.w	r9, r9, #16
 800e03a:	f47f aed5 	bne.w	800dde8 <D128_1CH_HTONS_VOL_HP+0x48>
 800e03e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e040:	9905      	ldr	r1, [sp, #20]
 800e042:	6091      	str	r1, [r2, #8]
 800e044:	9904      	ldr	r1, [sp, #16]
 800e046:	60d1      	str	r1, [r2, #12]
 800e048:	4613      	mov	r3, r2
 800e04a:	61d6      	str	r6, [r2, #28]
 800e04c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e04e:	9a03      	ldr	r2, [sp, #12]
 800e050:	611a      	str	r2, [r3, #16]
 800e052:	2000      	movs	r0, #0
 800e054:	f8c3 e014 	str.w	lr, [r3, #20]
 800e058:	6199      	str	r1, [r3, #24]
 800e05a:	b013      	add	sp, #76	; 0x4c
 800e05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e060:	f8dd e018 	ldr.w	lr, [sp, #24]
 800e064:	e7eb      	b.n	800e03e <D128_1CH_HTONS_VOL_HP+0x29e>
 800e066:	bf00      	nop
 800e068:	00780069 	.word	0x00780069
 800e06c:	005b004e 	.word	0x005b004e
 800e070:	00420037 	.word	0x00420037
 800e074:	002d0024 	.word	0x002d0024
 800e078:	001c0015 	.word	0x001c0015
 800e07c:	000f000a 	.word	0x000f000a
 800e080:	00060003 	.word	0x00060003
 800e084:	00880096 	.word	0x00880096
 800e088:	00a200ac 	.word	0x00a200ac
 800e08c:	00b400ba 	.word	0x00b400ba
 800e090:	00be00c0 	.word	0x00be00c0
 800e094:	00c000be 	.word	0x00c000be
 800e098:	00ba00b4 	.word	0x00ba00b4
 800e09c:	00ac00a2 	.word	0x00ac00a2
 800e0a0:	00030006 	.word	0x00030006
 800e0a4:	000a000f 	.word	0x000a000f
 800e0a8:	0015001c 	.word	0x0015001c
 800e0ac:	0024002d 	.word	0x0024002d
 800e0b0:	00370042 	.word	0x00370042
 800e0b4:	004e005b 	.word	0x004e005b
 800e0b8:	00690078 	.word	0x00690078
 800e0bc:	20000000 	.word	0x20000000
 800e0c0:	00960088 	.word	0x00960088

0800e0c4 <PDM_Filter_Init>:
 800e0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0c6:	2240      	movs	r2, #64	; 0x40
 800e0c8:	4604      	mov	r4, r0
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	300c      	adds	r0, #12
 800e0ce:	f000 fa14 	bl	800e4fa <memset>
 800e0d2:	493b      	ldr	r1, [pc, #236]	; (800e1c0 <PDM_Filter_Init+0xfc>)
 800e0d4:	483b      	ldr	r0, [pc, #236]	; (800e1c4 <PDM_Filter_Init+0x100>)
 800e0d6:	f000 f98d 	bl	800e3f4 <CRC_Lock>
 800e0da:	8822      	ldrh	r2, [r4, #0]
 800e0dc:	8963      	ldrh	r3, [r4, #10]
 800e0de:	4938      	ldr	r1, [pc, #224]	; (800e1c0 <PDM_Filter_Init+0xfc>)
 800e0e0:	8925      	ldrh	r5, [r4, #8]
 800e0e2:	86a3      	strh	r3, [r4, #52]	; 0x34
 800e0e4:	2801      	cmp	r0, #1
 800e0e6:	f04f 0300 	mov.w	r3, #0
 800e0ea:	bf18      	it	ne
 800e0ec:	2100      	movne	r1, #0
 800e0ee:	2a01      	cmp	r2, #1
 800e0f0:	6461      	str	r1, [r4, #68]	; 0x44
 800e0f2:	86e5      	strh	r5, [r4, #54]	; 0x36
 800e0f4:	61a3      	str	r3, [r4, #24]
 800e0f6:	6123      	str	r3, [r4, #16]
 800e0f8:	6163      	str	r3, [r4, #20]
 800e0fa:	60e3      	str	r3, [r4, #12]
 800e0fc:	6263      	str	r3, [r4, #36]	; 0x24
 800e0fe:	61e3      	str	r3, [r4, #28]
 800e100:	6223      	str	r3, [r4, #32]
 800e102:	6423      	str	r3, [r4, #64]	; 0x40
 800e104:	d918      	bls.n	800e138 <PDM_Filter_Init+0x74>
 800e106:	2003      	movs	r0, #3
 800e108:	2302      	movs	r3, #2
 800e10a:	8862      	ldrh	r2, [r4, #2]
 800e10c:	2a01      	cmp	r2, #1
 800e10e:	d91d      	bls.n	800e14c <PDM_Filter_Init+0x88>
 800e110:	2140      	movs	r1, #64	; 0x40
 800e112:	2300      	movs	r3, #0
 800e114:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e116:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800e11a:	6862      	ldr	r2, [r4, #4]
 800e11c:	bf04      	itt	eq
 800e11e:	6421      	streq	r1, [r4, #64]	; 0x40
 800e120:	460b      	moveq	r3, r1
 800e122:	b11a      	cbz	r2, 800e12c <PDM_Filter_Init+0x68>
 800e124:	f043 0310 	orr.w	r3, r3, #16
 800e128:	6423      	str	r3, [r4, #64]	; 0x40
 800e12a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800e12c:	2200      	movs	r2, #0
 800e12e:	8722      	strh	r2, [r4, #56]	; 0x38
 800e130:	b908      	cbnz	r0, 800e136 <PDM_Filter_Init+0x72>
 800e132:	3380      	adds	r3, #128	; 0x80
 800e134:	6423      	str	r3, [r4, #64]	; 0x40
 800e136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e138:	4d23      	ldr	r5, [pc, #140]	; (800e1c8 <PDM_Filter_Init+0x104>)
 800e13a:	d010      	beq.n	800e15e <PDM_Filter_Init+0x9a>
 800e13c:	782a      	ldrb	r2, [r5, #0]
 800e13e:	2a01      	cmp	r2, #1
 800e140:	d027      	beq.n	800e192 <PDM_Filter_Init+0xce>
 800e142:	8862      	ldrh	r2, [r4, #2]
 800e144:	2a01      	cmp	r2, #1
 800e146:	f04f 0001 	mov.w	r0, #1
 800e14a:	d8e1      	bhi.n	800e110 <PDM_Filter_Init+0x4c>
 800e14c:	d001      	beq.n	800e152 <PDM_Filter_Init+0x8e>
 800e14e:	4618      	mov	r0, r3
 800e150:	e7de      	b.n	800e110 <PDM_Filter_Init+0x4c>
 800e152:	2220      	movs	r2, #32
 800e154:	4618      	mov	r0, r3
 800e156:	6422      	str	r2, [r4, #64]	; 0x40
 800e158:	4613      	mov	r3, r2
 800e15a:	2160      	movs	r1, #96	; 0x60
 800e15c:	e7da      	b.n	800e114 <PDM_Filter_Init+0x50>
 800e15e:	7829      	ldrb	r1, [r5, #0]
 800e160:	2900      	cmp	r1, #0
 800e162:	d1ee      	bne.n	800e142 <PDM_Filter_Init+0x7e>
 800e164:	4919      	ldr	r1, [pc, #100]	; (800e1cc <PDM_Filter_Init+0x108>)
 800e166:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800e1d4 <PDM_Filter_Init+0x110>
 800e16a:	4f19      	ldr	r7, [pc, #100]	; (800e1d0 <PDM_Filter_Init+0x10c>)
 800e16c:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800e170:	684a      	ldr	r2, [r1, #4]
 800e172:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800e176:	ea02 0007 	and.w	r0, r2, r7
 800e17a:	4303      	orrs	r3, r0
 800e17c:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e180:	4413      	add	r3, r2
 800e182:	f841 3f04 	str.w	r3, [r1, #4]!
 800e186:	428e      	cmp	r6, r1
 800e188:	d1f2      	bne.n	800e170 <PDM_Filter_Init+0xac>
 800e18a:	2001      	movs	r0, #1
 800e18c:	7028      	strb	r0, [r5, #0]
 800e18e:	2300      	movs	r3, #0
 800e190:	e7bb      	b.n	800e10a <PDM_Filter_Init+0x46>
 800e192:	490e      	ldr	r1, [pc, #56]	; (800e1cc <PDM_Filter_Init+0x108>)
 800e194:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800e1d4 <PDM_Filter_Init+0x110>
 800e198:	4f0d      	ldr	r7, [pc, #52]	; (800e1d0 <PDM_Filter_Init+0x10c>)
 800e19a:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800e19e:	684a      	ldr	r2, [r1, #4]
 800e1a0:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800e1a4:	ea02 0007 	and.w	r0, r2, r7
 800e1a8:	4303      	orrs	r3, r0
 800e1aa:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e1ae:	4413      	add	r3, r2
 800e1b0:	f841 3f04 	str.w	r3, [r1, #4]!
 800e1b4:	428e      	cmp	r6, r1
 800e1b6:	d1f2      	bne.n	800e19e <PDM_Filter_Init+0xda>
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	702b      	strb	r3, [r5, #0]
 800e1bc:	e7c1      	b.n	800e142 <PDM_Filter_Init+0x7e>
 800e1be:	bf00      	nop
 800e1c0:	b5e8b5cd 	.word	0xb5e8b5cd
 800e1c4:	f407a5c2 	.word	0xf407a5c2
 800e1c8:	200006d0 	.word	0x200006d0
 800e1cc:	1ffffffc 	.word	0x1ffffffc
 800e1d0:	000ffc00 	.word	0x000ffc00
 800e1d4:	3ff00000 	.word	0x3ff00000

0800e1d8 <PDM_Filter_setConfig>:
 800e1d8:	4b66      	ldr	r3, [pc, #408]	; (800e374 <PDM_Filter_setConfig+0x19c>)
 800e1da:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d001      	beq.n	800e1e4 <PDM_Filter_setConfig+0xc>
 800e1e0:	2004      	movs	r0, #4
 800e1e2:	4770      	bx	lr
 800e1e4:	b530      	push	{r4, r5, lr}
 800e1e6:	880a      	ldrh	r2, [r1, #0]
 800e1e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e1ea:	ed2d 8b04 	vpush	{d8-d9}
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	460d      	mov	r5, r1
 800e1f2:	1e51      	subs	r1, r2, #1
 800e1f4:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800e1f8:	2906      	cmp	r1, #6
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	6420      	str	r0, [r4, #64]	; 0x40
 800e1fe:	d91a      	bls.n	800e236 <PDM_Filter_setConfig+0x5e>
 800e200:	2008      	movs	r0, #8
 800e202:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800e206:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e20a:	4299      	cmp	r1, r3
 800e20c:	d07e      	beq.n	800e30c <PDM_Filter_setConfig+0x134>
 800e20e:	f113 0f0c 	cmn.w	r3, #12
 800e212:	da2a      	bge.n	800e26a <PDM_Filter_setConfig+0x92>
 800e214:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800e218:	3040      	adds	r0, #64	; 0x40
 800e21a:	80ab      	strh	r3, [r5, #4]
 800e21c:	8622      	strh	r2, [r4, #48]	; 0x30
 800e21e:	886b      	ldrh	r3, [r5, #2]
 800e220:	8663      	strh	r3, [r4, #50]	; 0x32
 800e222:	b920      	cbnz	r0, 800e22e <PDM_Filter_setConfig+0x56>
 800e224:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e22a:	6423      	str	r3, [r4, #64]	; 0x40
 800e22c:	2000      	movs	r0, #0
 800e22e:	b003      	add	sp, #12
 800e230:	ecbd 8b04 	vpop	{d8-d9}
 800e234:	bd30      	pop	{r4, r5, pc}
 800e236:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800e238:	4291      	cmp	r1, r2
 800e23a:	d06c      	beq.n	800e316 <PDM_Filter_setConfig+0x13e>
 800e23c:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800e240:	f023 0301 	bic.w	r3, r3, #1
 800e244:	4313      	orrs	r3, r2
 800e246:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800e24a:	6423      	str	r3, [r4, #64]	; 0x40
 800e24c:	2970      	cmp	r1, #112	; 0x70
 800e24e:	f003 030f 	and.w	r3, r3, #15
 800e252:	f103 33ff 	add.w	r3, r3, #4294967295
 800e256:	d066      	beq.n	800e326 <PDM_Filter_setConfig+0x14e>
 800e258:	2b06      	cmp	r3, #6
 800e25a:	f200 8089 	bhi.w	800e370 <PDM_Filter_setConfig+0x198>
 800e25e:	e8df f003 	tbb	[pc, r3]
 800e262:	4f52      	.short	0x4f52
 800e264:	3d43494c 	.word	0x3d43494c
 800e268:	46          	.byte	0x46
 800e269:	00          	.byte	0x00
 800e26a:	2b33      	cmp	r3, #51	; 0x33
 800e26c:	dc32      	bgt.n	800e2d4 <PDM_Filter_setConfig+0xfc>
 800e26e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e270:	f002 020f 	and.w	r2, r2, #15
 800e274:	3a01      	subs	r2, #1
 800e276:	2a06      	cmp	r2, #6
 800e278:	d872      	bhi.n	800e360 <PDM_Filter_setConfig+0x188>
 800e27a:	493f      	ldr	r1, [pc, #252]	; (800e378 <PDM_Filter_setConfig+0x1a0>)
 800e27c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e280:	ed92 9a00 	vldr	s18, [r2]
 800e284:	ed92 8a07 	vldr	s16, [r2, #28]
 800e288:	9001      	str	r0, [sp, #4]
 800e28a:	ee07 3a90 	vmov	s15, r3
 800e28e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e292:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800e296:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800e29a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e29e:	f001 f83f 	bl	800f320 <powf>
 800e2a2:	eddf 0a36 	vldr	s1, [pc, #216]	; 800e37c <PDM_Filter_setConfig+0x1a4>
 800e2a6:	eef0 8a40 	vmov.f32	s17, s0
 800e2aa:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800e2ae:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800e2b2:	f001 f835 	bl	800f320 <powf>
 800e2b6:	ee28 8a28 	vmul.f32	s16, s16, s17
 800e2ba:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e2be:	f001 f809 	bl	800f2d4 <roundf>
 800e2c2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800e2c6:	88ab      	ldrh	r3, [r5, #4]
 800e2c8:	882a      	ldrh	r2, [r5, #0]
 800e2ca:	9801      	ldr	r0, [sp, #4]
 800e2cc:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800e2d0:	8723      	strh	r3, [r4, #56]	; 0x38
 800e2d2:	e7a3      	b.n	800e21c <PDM_Filter_setConfig+0x44>
 800e2d4:	2333      	movs	r3, #51	; 0x33
 800e2d6:	3040      	adds	r0, #64	; 0x40
 800e2d8:	80ab      	strh	r3, [r5, #4]
 800e2da:	e79f      	b.n	800e21c <PDM_Filter_setConfig+0x44>
 800e2dc:	4b28      	ldr	r3, [pc, #160]	; (800e380 <PDM_Filter_setConfig+0x1a8>)
 800e2de:	64a3      	str	r3, [r4, #72]	; 0x48
 800e2e0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	e792      	b.n	800e20e <PDM_Filter_setConfig+0x36>
 800e2e8:	4b26      	ldr	r3, [pc, #152]	; (800e384 <PDM_Filter_setConfig+0x1ac>)
 800e2ea:	64a3      	str	r3, [r4, #72]	; 0x48
 800e2ec:	e7f8      	b.n	800e2e0 <PDM_Filter_setConfig+0x108>
 800e2ee:	4b26      	ldr	r3, [pc, #152]	; (800e388 <PDM_Filter_setConfig+0x1b0>)
 800e2f0:	64a3      	str	r3, [r4, #72]	; 0x48
 800e2f2:	e7f5      	b.n	800e2e0 <PDM_Filter_setConfig+0x108>
 800e2f4:	4b25      	ldr	r3, [pc, #148]	; (800e38c <PDM_Filter_setConfig+0x1b4>)
 800e2f6:	64a3      	str	r3, [r4, #72]	; 0x48
 800e2f8:	e7f2      	b.n	800e2e0 <PDM_Filter_setConfig+0x108>
 800e2fa:	4b25      	ldr	r3, [pc, #148]	; (800e390 <PDM_Filter_setConfig+0x1b8>)
 800e2fc:	64a3      	str	r3, [r4, #72]	; 0x48
 800e2fe:	e7ef      	b.n	800e2e0 <PDM_Filter_setConfig+0x108>
 800e300:	4b24      	ldr	r3, [pc, #144]	; (800e394 <PDM_Filter_setConfig+0x1bc>)
 800e302:	64a3      	str	r3, [r4, #72]	; 0x48
 800e304:	e7ec      	b.n	800e2e0 <PDM_Filter_setConfig+0x108>
 800e306:	4b24      	ldr	r3, [pc, #144]	; (800e398 <PDM_Filter_setConfig+0x1c0>)
 800e308:	64a3      	str	r3, [r4, #72]	; 0x48
 800e30a:	e7e9      	b.n	800e2e0 <PDM_Filter_setConfig+0x108>
 800e30c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800e30e:	4291      	cmp	r1, r2
 800e310:	f47f af7d 	bne.w	800e20e <PDM_Filter_setConfig+0x36>
 800e314:	e783      	b.n	800e21e <PDM_Filter_setConfig+0x46>
 800e316:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e31a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800e31e:	4299      	cmp	r1, r3
 800e320:	d023      	beq.n	800e36a <PDM_Filter_setConfig+0x192>
 800e322:	2000      	movs	r0, #0
 800e324:	e773      	b.n	800e20e <PDM_Filter_setConfig+0x36>
 800e326:	2b06      	cmp	r3, #6
 800e328:	d822      	bhi.n	800e370 <PDM_Filter_setConfig+0x198>
 800e32a:	e8df f003 	tbb	[pc, r3]
 800e32e:	1316      	.short	0x1316
 800e330:	070a0d10 	.word	0x070a0d10
 800e334:	04          	.byte	0x04
 800e335:	00          	.byte	0x00
 800e336:	4b19      	ldr	r3, [pc, #100]	; (800e39c <PDM_Filter_setConfig+0x1c4>)
 800e338:	64a3      	str	r3, [r4, #72]	; 0x48
 800e33a:	e7d1      	b.n	800e2e0 <PDM_Filter_setConfig+0x108>
 800e33c:	4b18      	ldr	r3, [pc, #96]	; (800e3a0 <PDM_Filter_setConfig+0x1c8>)
 800e33e:	64a3      	str	r3, [r4, #72]	; 0x48
 800e340:	e7ce      	b.n	800e2e0 <PDM_Filter_setConfig+0x108>
 800e342:	4b18      	ldr	r3, [pc, #96]	; (800e3a4 <PDM_Filter_setConfig+0x1cc>)
 800e344:	64a3      	str	r3, [r4, #72]	; 0x48
 800e346:	e7cb      	b.n	800e2e0 <PDM_Filter_setConfig+0x108>
 800e348:	4b17      	ldr	r3, [pc, #92]	; (800e3a8 <PDM_Filter_setConfig+0x1d0>)
 800e34a:	64a3      	str	r3, [r4, #72]	; 0x48
 800e34c:	e7c8      	b.n	800e2e0 <PDM_Filter_setConfig+0x108>
 800e34e:	4b17      	ldr	r3, [pc, #92]	; (800e3ac <PDM_Filter_setConfig+0x1d4>)
 800e350:	64a3      	str	r3, [r4, #72]	; 0x48
 800e352:	e7c5      	b.n	800e2e0 <PDM_Filter_setConfig+0x108>
 800e354:	4b16      	ldr	r3, [pc, #88]	; (800e3b0 <PDM_Filter_setConfig+0x1d8>)
 800e356:	64a3      	str	r3, [r4, #72]	; 0x48
 800e358:	e7c2      	b.n	800e2e0 <PDM_Filter_setConfig+0x108>
 800e35a:	4b16      	ldr	r3, [pc, #88]	; (800e3b4 <PDM_Filter_setConfig+0x1dc>)
 800e35c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e35e:	e7bf      	b.n	800e2e0 <PDM_Filter_setConfig+0x108>
 800e360:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800e3b8 <PDM_Filter_setConfig+0x1e0>
 800e364:	eeb0 9a48 	vmov.f32	s18, s16
 800e368:	e78e      	b.n	800e288 <PDM_Filter_setConfig+0xb0>
 800e36a:	886b      	ldrh	r3, [r5, #2]
 800e36c:	8663      	strh	r3, [r4, #50]	; 0x32
 800e36e:	e759      	b.n	800e224 <PDM_Filter_setConfig+0x4c>
 800e370:	2000      	movs	r0, #0
 800e372:	e746      	b.n	800e202 <PDM_Filter_setConfig+0x2a>
 800e374:	b5e8b5cd 	.word	0xb5e8b5cd
 800e378:	0800fdec 	.word	0x0800fdec
 800e37c:	42000000 	.word	0x42000000
 800e380:	0800c745 	.word	0x0800c745
 800e384:	0800c625 	.word	0x0800c625
 800e388:	0800c8d5 	.word	0x0800c8d5
 800e38c:	0800d119 	.word	0x0800d119
 800e390:	0800ce79 	.word	0x0800ce79
 800e394:	0800cc59 	.word	0x0800cc59
 800e398:	0800ca6d 	.word	0x0800ca6d
 800e39c:	0800d725 	.word	0x0800d725
 800e3a0:	0800d5ed 	.word	0x0800d5ed
 800e3a4:	0800d509 	.word	0x0800d509
 800e3a8:	0800dda1 	.word	0x0800dda1
 800e3ac:	0800db8d 	.word	0x0800db8d
 800e3b0:	0800d9d5 	.word	0x0800d9d5
 800e3b4:	0800d869 	.word	0x0800d869
 800e3b8:	00000000 	.word	0x00000000

0800e3bc <PDM_Filter>:
 800e3bc:	b410      	push	{r4}
 800e3be:	4b0c      	ldr	r3, [pc, #48]	; (800e3f0 <PDM_Filter+0x34>)
 800e3c0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800e3c2:	429c      	cmp	r4, r3
 800e3c4:	d003      	beq.n	800e3ce <PDM_Filter+0x12>
 800e3c6:	2004      	movs	r0, #4
 800e3c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3cc:	4770      	bx	lr
 800e3ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e3d0:	05dc      	lsls	r4, r3, #23
 800e3d2:	d407      	bmi.n	800e3e4 <PDM_Filter+0x28>
 800e3d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e3d8:	bf14      	ite	ne
 800e3da:	2020      	movne	r0, #32
 800e3dc:	2030      	moveq	r0, #48	; 0x30
 800e3de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3e2:	4770      	bx	lr
 800e3e4:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800e3e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3ea:	320c      	adds	r2, #12
 800e3ec:	4718      	bx	r3
 800e3ee:	bf00      	nop
 800e3f0:	b5e8b5cd 	.word	0xb5e8b5cd

0800e3f4 <CRC_Lock>:
 800e3f4:	4a17      	ldr	r2, [pc, #92]	; (800e454 <CRC_Lock+0x60>)
 800e3f6:	6813      	ldr	r3, [r2, #0]
 800e3f8:	b410      	push	{r4}
 800e3fa:	f023 0301 	bic.w	r3, r3, #1
 800e3fe:	4c16      	ldr	r4, [pc, #88]	; (800e458 <CRC_Lock+0x64>)
 800e400:	6013      	str	r3, [r2, #0]
 800e402:	6823      	ldr	r3, [r4, #0]
 800e404:	b933      	cbnz	r3, 800e414 <CRC_Lock+0x20>
 800e406:	4b15      	ldr	r3, [pc, #84]	; (800e45c <CRC_Lock+0x68>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e40e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e412:	d00f      	beq.n	800e434 <CRC_Lock+0x40>
 800e414:	4a12      	ldr	r2, [pc, #72]	; (800e460 <CRC_Lock+0x6c>)
 800e416:	2301      	movs	r3, #1
 800e418:	6013      	str	r3, [r2, #0]
 800e41a:	6813      	ldr	r3, [r2, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d1fc      	bne.n	800e41a <CRC_Lock+0x26>
 800e420:	4b10      	ldr	r3, [pc, #64]	; (800e464 <CRC_Lock+0x70>)
 800e422:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e426:	6018      	str	r0, [r3, #0]
 800e428:	6818      	ldr	r0, [r3, #0]
 800e42a:	1a08      	subs	r0, r1, r0
 800e42c:	fab0 f080 	clz	r0, r0
 800e430:	0940      	lsrs	r0, r0, #5
 800e432:	4770      	bx	lr
 800e434:	4a0c      	ldr	r2, [pc, #48]	; (800e468 <CRC_Lock+0x74>)
 800e436:	2301      	movs	r3, #1
 800e438:	6013      	str	r3, [r2, #0]
 800e43a:	6813      	ldr	r3, [r2, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d1fc      	bne.n	800e43a <CRC_Lock+0x46>
 800e440:	4b0a      	ldr	r3, [pc, #40]	; (800e46c <CRC_Lock+0x78>)
 800e442:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e446:	6018      	str	r0, [r3, #0]
 800e448:	6818      	ldr	r0, [r3, #0]
 800e44a:	1a40      	subs	r0, r0, r1
 800e44c:	fab0 f080 	clz	r0, r0
 800e450:	0940      	lsrs	r0, r0, #5
 800e452:	4770      	bx	lr
 800e454:	e0002000 	.word	0xe0002000
 800e458:	e0042000 	.word	0xe0042000
 800e45c:	5c001000 	.word	0x5c001000
 800e460:	40023008 	.word	0x40023008
 800e464:	40023000 	.word	0x40023000
 800e468:	58024c08 	.word	0x58024c08
 800e46c:	58024c00 	.word	0x58024c00

0800e470 <__errno>:
 800e470:	4b01      	ldr	r3, [pc, #4]	; (800e478 <__errno+0x8>)
 800e472:	6818      	ldr	r0, [r3, #0]
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	2000064c 	.word	0x2000064c

0800e47c <__libc_init_array>:
 800e47c:	b570      	push	{r4, r5, r6, lr}
 800e47e:	4e0d      	ldr	r6, [pc, #52]	; (800e4b4 <__libc_init_array+0x38>)
 800e480:	4c0d      	ldr	r4, [pc, #52]	; (800e4b8 <__libc_init_array+0x3c>)
 800e482:	1ba4      	subs	r4, r4, r6
 800e484:	10a4      	asrs	r4, r4, #2
 800e486:	2500      	movs	r5, #0
 800e488:	42a5      	cmp	r5, r4
 800e48a:	d109      	bne.n	800e4a0 <__libc_init_array+0x24>
 800e48c:	4e0b      	ldr	r6, [pc, #44]	; (800e4bc <__libc_init_array+0x40>)
 800e48e:	4c0c      	ldr	r4, [pc, #48]	; (800e4c0 <__libc_init_array+0x44>)
 800e490:	f001 fc4c 	bl	800fd2c <_init>
 800e494:	1ba4      	subs	r4, r4, r6
 800e496:	10a4      	asrs	r4, r4, #2
 800e498:	2500      	movs	r5, #0
 800e49a:	42a5      	cmp	r5, r4
 800e49c:	d105      	bne.n	800e4aa <__libc_init_array+0x2e>
 800e49e:	bd70      	pop	{r4, r5, r6, pc}
 800e4a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e4a4:	4798      	blx	r3
 800e4a6:	3501      	adds	r5, #1
 800e4a8:	e7ee      	b.n	800e488 <__libc_init_array+0xc>
 800e4aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e4ae:	4798      	blx	r3
 800e4b0:	3501      	adds	r5, #1
 800e4b2:	e7f2      	b.n	800e49a <__libc_init_array+0x1e>
 800e4b4:	0800ff8c 	.word	0x0800ff8c
 800e4b8:	0800ff8c 	.word	0x0800ff8c
 800e4bc:	0800ff8c 	.word	0x0800ff8c
 800e4c0:	0800ff90 	.word	0x0800ff90

0800e4c4 <malloc>:
 800e4c4:	4b02      	ldr	r3, [pc, #8]	; (800e4d0 <malloc+0xc>)
 800e4c6:	4601      	mov	r1, r0
 800e4c8:	6818      	ldr	r0, [r3, #0]
 800e4ca:	f000 b86d 	b.w	800e5a8 <_malloc_r>
 800e4ce:	bf00      	nop
 800e4d0:	2000064c 	.word	0x2000064c

0800e4d4 <free>:
 800e4d4:	4b02      	ldr	r3, [pc, #8]	; (800e4e0 <free+0xc>)
 800e4d6:	4601      	mov	r1, r0
 800e4d8:	6818      	ldr	r0, [r3, #0]
 800e4da:	f000 b817 	b.w	800e50c <_free_r>
 800e4de:	bf00      	nop
 800e4e0:	2000064c 	.word	0x2000064c

0800e4e4 <memcpy>:
 800e4e4:	b510      	push	{r4, lr}
 800e4e6:	1e43      	subs	r3, r0, #1
 800e4e8:	440a      	add	r2, r1
 800e4ea:	4291      	cmp	r1, r2
 800e4ec:	d100      	bne.n	800e4f0 <memcpy+0xc>
 800e4ee:	bd10      	pop	{r4, pc}
 800e4f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4f8:	e7f7      	b.n	800e4ea <memcpy+0x6>

0800e4fa <memset>:
 800e4fa:	4402      	add	r2, r0
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d100      	bne.n	800e504 <memset+0xa>
 800e502:	4770      	bx	lr
 800e504:	f803 1b01 	strb.w	r1, [r3], #1
 800e508:	e7f9      	b.n	800e4fe <memset+0x4>
	...

0800e50c <_free_r>:
 800e50c:	b538      	push	{r3, r4, r5, lr}
 800e50e:	4605      	mov	r5, r0
 800e510:	2900      	cmp	r1, #0
 800e512:	d045      	beq.n	800e5a0 <_free_r+0x94>
 800e514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e518:	1f0c      	subs	r4, r1, #4
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	bfb8      	it	lt
 800e51e:	18e4      	addlt	r4, r4, r3
 800e520:	f000 f98e 	bl	800e840 <__malloc_lock>
 800e524:	4a1f      	ldr	r2, [pc, #124]	; (800e5a4 <_free_r+0x98>)
 800e526:	6813      	ldr	r3, [r2, #0]
 800e528:	4610      	mov	r0, r2
 800e52a:	b933      	cbnz	r3, 800e53a <_free_r+0x2e>
 800e52c:	6063      	str	r3, [r4, #4]
 800e52e:	6014      	str	r4, [r2, #0]
 800e530:	4628      	mov	r0, r5
 800e532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e536:	f000 b984 	b.w	800e842 <__malloc_unlock>
 800e53a:	42a3      	cmp	r3, r4
 800e53c:	d90c      	bls.n	800e558 <_free_r+0x4c>
 800e53e:	6821      	ldr	r1, [r4, #0]
 800e540:	1862      	adds	r2, r4, r1
 800e542:	4293      	cmp	r3, r2
 800e544:	bf04      	itt	eq
 800e546:	681a      	ldreq	r2, [r3, #0]
 800e548:	685b      	ldreq	r3, [r3, #4]
 800e54a:	6063      	str	r3, [r4, #4]
 800e54c:	bf04      	itt	eq
 800e54e:	1852      	addeq	r2, r2, r1
 800e550:	6022      	streq	r2, [r4, #0]
 800e552:	6004      	str	r4, [r0, #0]
 800e554:	e7ec      	b.n	800e530 <_free_r+0x24>
 800e556:	4613      	mov	r3, r2
 800e558:	685a      	ldr	r2, [r3, #4]
 800e55a:	b10a      	cbz	r2, 800e560 <_free_r+0x54>
 800e55c:	42a2      	cmp	r2, r4
 800e55e:	d9fa      	bls.n	800e556 <_free_r+0x4a>
 800e560:	6819      	ldr	r1, [r3, #0]
 800e562:	1858      	adds	r0, r3, r1
 800e564:	42a0      	cmp	r0, r4
 800e566:	d10b      	bne.n	800e580 <_free_r+0x74>
 800e568:	6820      	ldr	r0, [r4, #0]
 800e56a:	4401      	add	r1, r0
 800e56c:	1858      	adds	r0, r3, r1
 800e56e:	4282      	cmp	r2, r0
 800e570:	6019      	str	r1, [r3, #0]
 800e572:	d1dd      	bne.n	800e530 <_free_r+0x24>
 800e574:	6810      	ldr	r0, [r2, #0]
 800e576:	6852      	ldr	r2, [r2, #4]
 800e578:	605a      	str	r2, [r3, #4]
 800e57a:	4401      	add	r1, r0
 800e57c:	6019      	str	r1, [r3, #0]
 800e57e:	e7d7      	b.n	800e530 <_free_r+0x24>
 800e580:	d902      	bls.n	800e588 <_free_r+0x7c>
 800e582:	230c      	movs	r3, #12
 800e584:	602b      	str	r3, [r5, #0]
 800e586:	e7d3      	b.n	800e530 <_free_r+0x24>
 800e588:	6820      	ldr	r0, [r4, #0]
 800e58a:	1821      	adds	r1, r4, r0
 800e58c:	428a      	cmp	r2, r1
 800e58e:	bf04      	itt	eq
 800e590:	6811      	ldreq	r1, [r2, #0]
 800e592:	6852      	ldreq	r2, [r2, #4]
 800e594:	6062      	str	r2, [r4, #4]
 800e596:	bf04      	itt	eq
 800e598:	1809      	addeq	r1, r1, r0
 800e59a:	6021      	streq	r1, [r4, #0]
 800e59c:	605c      	str	r4, [r3, #4]
 800e59e:	e7c7      	b.n	800e530 <_free_r+0x24>
 800e5a0:	bd38      	pop	{r3, r4, r5, pc}
 800e5a2:	bf00      	nop
 800e5a4:	20001a74 	.word	0x20001a74

0800e5a8 <_malloc_r>:
 800e5a8:	b570      	push	{r4, r5, r6, lr}
 800e5aa:	1ccd      	adds	r5, r1, #3
 800e5ac:	f025 0503 	bic.w	r5, r5, #3
 800e5b0:	3508      	adds	r5, #8
 800e5b2:	2d0c      	cmp	r5, #12
 800e5b4:	bf38      	it	cc
 800e5b6:	250c      	movcc	r5, #12
 800e5b8:	2d00      	cmp	r5, #0
 800e5ba:	4606      	mov	r6, r0
 800e5bc:	db01      	blt.n	800e5c2 <_malloc_r+0x1a>
 800e5be:	42a9      	cmp	r1, r5
 800e5c0:	d903      	bls.n	800e5ca <_malloc_r+0x22>
 800e5c2:	230c      	movs	r3, #12
 800e5c4:	6033      	str	r3, [r6, #0]
 800e5c6:	2000      	movs	r0, #0
 800e5c8:	bd70      	pop	{r4, r5, r6, pc}
 800e5ca:	f000 f939 	bl	800e840 <__malloc_lock>
 800e5ce:	4a21      	ldr	r2, [pc, #132]	; (800e654 <_malloc_r+0xac>)
 800e5d0:	6814      	ldr	r4, [r2, #0]
 800e5d2:	4621      	mov	r1, r4
 800e5d4:	b991      	cbnz	r1, 800e5fc <_malloc_r+0x54>
 800e5d6:	4c20      	ldr	r4, [pc, #128]	; (800e658 <_malloc_r+0xb0>)
 800e5d8:	6823      	ldr	r3, [r4, #0]
 800e5da:	b91b      	cbnz	r3, 800e5e4 <_malloc_r+0x3c>
 800e5dc:	4630      	mov	r0, r6
 800e5de:	f000 f855 	bl	800e68c <_sbrk_r>
 800e5e2:	6020      	str	r0, [r4, #0]
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	f000 f850 	bl	800e68c <_sbrk_r>
 800e5ec:	1c43      	adds	r3, r0, #1
 800e5ee:	d124      	bne.n	800e63a <_malloc_r+0x92>
 800e5f0:	230c      	movs	r3, #12
 800e5f2:	6033      	str	r3, [r6, #0]
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	f000 f924 	bl	800e842 <__malloc_unlock>
 800e5fa:	e7e4      	b.n	800e5c6 <_malloc_r+0x1e>
 800e5fc:	680b      	ldr	r3, [r1, #0]
 800e5fe:	1b5b      	subs	r3, r3, r5
 800e600:	d418      	bmi.n	800e634 <_malloc_r+0x8c>
 800e602:	2b0b      	cmp	r3, #11
 800e604:	d90f      	bls.n	800e626 <_malloc_r+0x7e>
 800e606:	600b      	str	r3, [r1, #0]
 800e608:	50cd      	str	r5, [r1, r3]
 800e60a:	18cc      	adds	r4, r1, r3
 800e60c:	4630      	mov	r0, r6
 800e60e:	f000 f918 	bl	800e842 <__malloc_unlock>
 800e612:	f104 000b 	add.w	r0, r4, #11
 800e616:	1d23      	adds	r3, r4, #4
 800e618:	f020 0007 	bic.w	r0, r0, #7
 800e61c:	1ac3      	subs	r3, r0, r3
 800e61e:	d0d3      	beq.n	800e5c8 <_malloc_r+0x20>
 800e620:	425a      	negs	r2, r3
 800e622:	50e2      	str	r2, [r4, r3]
 800e624:	e7d0      	b.n	800e5c8 <_malloc_r+0x20>
 800e626:	428c      	cmp	r4, r1
 800e628:	684b      	ldr	r3, [r1, #4]
 800e62a:	bf16      	itet	ne
 800e62c:	6063      	strne	r3, [r4, #4]
 800e62e:	6013      	streq	r3, [r2, #0]
 800e630:	460c      	movne	r4, r1
 800e632:	e7eb      	b.n	800e60c <_malloc_r+0x64>
 800e634:	460c      	mov	r4, r1
 800e636:	6849      	ldr	r1, [r1, #4]
 800e638:	e7cc      	b.n	800e5d4 <_malloc_r+0x2c>
 800e63a:	1cc4      	adds	r4, r0, #3
 800e63c:	f024 0403 	bic.w	r4, r4, #3
 800e640:	42a0      	cmp	r0, r4
 800e642:	d005      	beq.n	800e650 <_malloc_r+0xa8>
 800e644:	1a21      	subs	r1, r4, r0
 800e646:	4630      	mov	r0, r6
 800e648:	f000 f820 	bl	800e68c <_sbrk_r>
 800e64c:	3001      	adds	r0, #1
 800e64e:	d0cf      	beq.n	800e5f0 <_malloc_r+0x48>
 800e650:	6025      	str	r5, [r4, #0]
 800e652:	e7db      	b.n	800e60c <_malloc_r+0x64>
 800e654:	20001a74 	.word	0x20001a74
 800e658:	20001a78 	.word	0x20001a78

0800e65c <iprintf>:
 800e65c:	b40f      	push	{r0, r1, r2, r3}
 800e65e:	4b0a      	ldr	r3, [pc, #40]	; (800e688 <iprintf+0x2c>)
 800e660:	b513      	push	{r0, r1, r4, lr}
 800e662:	681c      	ldr	r4, [r3, #0]
 800e664:	b124      	cbz	r4, 800e670 <iprintf+0x14>
 800e666:	69a3      	ldr	r3, [r4, #24]
 800e668:	b913      	cbnz	r3, 800e670 <iprintf+0x14>
 800e66a:	4620      	mov	r0, r4
 800e66c:	f000 f85e 	bl	800e72c <__sinit>
 800e670:	ab05      	add	r3, sp, #20
 800e672:	9a04      	ldr	r2, [sp, #16]
 800e674:	68a1      	ldr	r1, [r4, #8]
 800e676:	9301      	str	r3, [sp, #4]
 800e678:	4620      	mov	r0, r4
 800e67a:	f000 f90d 	bl	800e898 <_vfiprintf_r>
 800e67e:	b002      	add	sp, #8
 800e680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e684:	b004      	add	sp, #16
 800e686:	4770      	bx	lr
 800e688:	2000064c 	.word	0x2000064c

0800e68c <_sbrk_r>:
 800e68c:	b538      	push	{r3, r4, r5, lr}
 800e68e:	4c06      	ldr	r4, [pc, #24]	; (800e6a8 <_sbrk_r+0x1c>)
 800e690:	2300      	movs	r3, #0
 800e692:	4605      	mov	r5, r0
 800e694:	4608      	mov	r0, r1
 800e696:	6023      	str	r3, [r4, #0]
 800e698:	f7fd fae2 	bl	800bc60 <_sbrk>
 800e69c:	1c43      	adds	r3, r0, #1
 800e69e:	d102      	bne.n	800e6a6 <_sbrk_r+0x1a>
 800e6a0:	6823      	ldr	r3, [r4, #0]
 800e6a2:	b103      	cbz	r3, 800e6a6 <_sbrk_r+0x1a>
 800e6a4:	602b      	str	r3, [r5, #0]
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
 800e6a8:	2000bfe0 	.word	0x2000bfe0

0800e6ac <std>:
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	b510      	push	{r4, lr}
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	e9c0 3300 	strd	r3, r3, [r0]
 800e6b6:	6083      	str	r3, [r0, #8]
 800e6b8:	8181      	strh	r1, [r0, #12]
 800e6ba:	6643      	str	r3, [r0, #100]	; 0x64
 800e6bc:	81c2      	strh	r2, [r0, #14]
 800e6be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e6c2:	6183      	str	r3, [r0, #24]
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	2208      	movs	r2, #8
 800e6c8:	305c      	adds	r0, #92	; 0x5c
 800e6ca:	f7ff ff16 	bl	800e4fa <memset>
 800e6ce:	4b05      	ldr	r3, [pc, #20]	; (800e6e4 <std+0x38>)
 800e6d0:	6263      	str	r3, [r4, #36]	; 0x24
 800e6d2:	4b05      	ldr	r3, [pc, #20]	; (800e6e8 <std+0x3c>)
 800e6d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e6d6:	4b05      	ldr	r3, [pc, #20]	; (800e6ec <std+0x40>)
 800e6d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e6da:	4b05      	ldr	r3, [pc, #20]	; (800e6f0 <std+0x44>)
 800e6dc:	6224      	str	r4, [r4, #32]
 800e6de:	6323      	str	r3, [r4, #48]	; 0x30
 800e6e0:	bd10      	pop	{r4, pc}
 800e6e2:	bf00      	nop
 800e6e4:	0800edd5 	.word	0x0800edd5
 800e6e8:	0800edf7 	.word	0x0800edf7
 800e6ec:	0800ee2f 	.word	0x0800ee2f
 800e6f0:	0800ee53 	.word	0x0800ee53

0800e6f4 <_cleanup_r>:
 800e6f4:	4901      	ldr	r1, [pc, #4]	; (800e6fc <_cleanup_r+0x8>)
 800e6f6:	f000 b885 	b.w	800e804 <_fwalk_reent>
 800e6fa:	bf00      	nop
 800e6fc:	0800f12d 	.word	0x0800f12d

0800e700 <__sfmoreglue>:
 800e700:	b570      	push	{r4, r5, r6, lr}
 800e702:	1e4a      	subs	r2, r1, #1
 800e704:	2568      	movs	r5, #104	; 0x68
 800e706:	4355      	muls	r5, r2
 800e708:	460e      	mov	r6, r1
 800e70a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e70e:	f7ff ff4b 	bl	800e5a8 <_malloc_r>
 800e712:	4604      	mov	r4, r0
 800e714:	b140      	cbz	r0, 800e728 <__sfmoreglue+0x28>
 800e716:	2100      	movs	r1, #0
 800e718:	e9c0 1600 	strd	r1, r6, [r0]
 800e71c:	300c      	adds	r0, #12
 800e71e:	60a0      	str	r0, [r4, #8]
 800e720:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e724:	f7ff fee9 	bl	800e4fa <memset>
 800e728:	4620      	mov	r0, r4
 800e72a:	bd70      	pop	{r4, r5, r6, pc}

0800e72c <__sinit>:
 800e72c:	6983      	ldr	r3, [r0, #24]
 800e72e:	b510      	push	{r4, lr}
 800e730:	4604      	mov	r4, r0
 800e732:	bb33      	cbnz	r3, 800e782 <__sinit+0x56>
 800e734:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e738:	6503      	str	r3, [r0, #80]	; 0x50
 800e73a:	4b12      	ldr	r3, [pc, #72]	; (800e784 <__sinit+0x58>)
 800e73c:	4a12      	ldr	r2, [pc, #72]	; (800e788 <__sinit+0x5c>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6282      	str	r2, [r0, #40]	; 0x28
 800e742:	4298      	cmp	r0, r3
 800e744:	bf04      	itt	eq
 800e746:	2301      	moveq	r3, #1
 800e748:	6183      	streq	r3, [r0, #24]
 800e74a:	f000 f81f 	bl	800e78c <__sfp>
 800e74e:	6060      	str	r0, [r4, #4]
 800e750:	4620      	mov	r0, r4
 800e752:	f000 f81b 	bl	800e78c <__sfp>
 800e756:	60a0      	str	r0, [r4, #8]
 800e758:	4620      	mov	r0, r4
 800e75a:	f000 f817 	bl	800e78c <__sfp>
 800e75e:	2200      	movs	r2, #0
 800e760:	60e0      	str	r0, [r4, #12]
 800e762:	2104      	movs	r1, #4
 800e764:	6860      	ldr	r0, [r4, #4]
 800e766:	f7ff ffa1 	bl	800e6ac <std>
 800e76a:	2201      	movs	r2, #1
 800e76c:	2109      	movs	r1, #9
 800e76e:	68a0      	ldr	r0, [r4, #8]
 800e770:	f7ff ff9c 	bl	800e6ac <std>
 800e774:	2202      	movs	r2, #2
 800e776:	2112      	movs	r1, #18
 800e778:	68e0      	ldr	r0, [r4, #12]
 800e77a:	f7ff ff97 	bl	800e6ac <std>
 800e77e:	2301      	movs	r3, #1
 800e780:	61a3      	str	r3, [r4, #24]
 800e782:	bd10      	pop	{r4, pc}
 800e784:	0800fec8 	.word	0x0800fec8
 800e788:	0800e6f5 	.word	0x0800e6f5

0800e78c <__sfp>:
 800e78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e78e:	4b1b      	ldr	r3, [pc, #108]	; (800e7fc <__sfp+0x70>)
 800e790:	681e      	ldr	r6, [r3, #0]
 800e792:	69b3      	ldr	r3, [r6, #24]
 800e794:	4607      	mov	r7, r0
 800e796:	b913      	cbnz	r3, 800e79e <__sfp+0x12>
 800e798:	4630      	mov	r0, r6
 800e79a:	f7ff ffc7 	bl	800e72c <__sinit>
 800e79e:	3648      	adds	r6, #72	; 0x48
 800e7a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e7a4:	3b01      	subs	r3, #1
 800e7a6:	d503      	bpl.n	800e7b0 <__sfp+0x24>
 800e7a8:	6833      	ldr	r3, [r6, #0]
 800e7aa:	b133      	cbz	r3, 800e7ba <__sfp+0x2e>
 800e7ac:	6836      	ldr	r6, [r6, #0]
 800e7ae:	e7f7      	b.n	800e7a0 <__sfp+0x14>
 800e7b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e7b4:	b16d      	cbz	r5, 800e7d2 <__sfp+0x46>
 800e7b6:	3468      	adds	r4, #104	; 0x68
 800e7b8:	e7f4      	b.n	800e7a4 <__sfp+0x18>
 800e7ba:	2104      	movs	r1, #4
 800e7bc:	4638      	mov	r0, r7
 800e7be:	f7ff ff9f 	bl	800e700 <__sfmoreglue>
 800e7c2:	6030      	str	r0, [r6, #0]
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d1f1      	bne.n	800e7ac <__sfp+0x20>
 800e7c8:	230c      	movs	r3, #12
 800e7ca:	603b      	str	r3, [r7, #0]
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7d2:	4b0b      	ldr	r3, [pc, #44]	; (800e800 <__sfp+0x74>)
 800e7d4:	6665      	str	r5, [r4, #100]	; 0x64
 800e7d6:	e9c4 5500 	strd	r5, r5, [r4]
 800e7da:	60a5      	str	r5, [r4, #8]
 800e7dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e7e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e7e4:	2208      	movs	r2, #8
 800e7e6:	4629      	mov	r1, r5
 800e7e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e7ec:	f7ff fe85 	bl	800e4fa <memset>
 800e7f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e7f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e7f8:	e7e9      	b.n	800e7ce <__sfp+0x42>
 800e7fa:	bf00      	nop
 800e7fc:	0800fec8 	.word	0x0800fec8
 800e800:	ffff0001 	.word	0xffff0001

0800e804 <_fwalk_reent>:
 800e804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e808:	4680      	mov	r8, r0
 800e80a:	4689      	mov	r9, r1
 800e80c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e810:	2600      	movs	r6, #0
 800e812:	b914      	cbnz	r4, 800e81a <_fwalk_reent+0x16>
 800e814:	4630      	mov	r0, r6
 800e816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e81a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e81e:	3f01      	subs	r7, #1
 800e820:	d501      	bpl.n	800e826 <_fwalk_reent+0x22>
 800e822:	6824      	ldr	r4, [r4, #0]
 800e824:	e7f5      	b.n	800e812 <_fwalk_reent+0xe>
 800e826:	89ab      	ldrh	r3, [r5, #12]
 800e828:	2b01      	cmp	r3, #1
 800e82a:	d907      	bls.n	800e83c <_fwalk_reent+0x38>
 800e82c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e830:	3301      	adds	r3, #1
 800e832:	d003      	beq.n	800e83c <_fwalk_reent+0x38>
 800e834:	4629      	mov	r1, r5
 800e836:	4640      	mov	r0, r8
 800e838:	47c8      	blx	r9
 800e83a:	4306      	orrs	r6, r0
 800e83c:	3568      	adds	r5, #104	; 0x68
 800e83e:	e7ee      	b.n	800e81e <_fwalk_reent+0x1a>

0800e840 <__malloc_lock>:
 800e840:	4770      	bx	lr

0800e842 <__malloc_unlock>:
 800e842:	4770      	bx	lr

0800e844 <__sfputc_r>:
 800e844:	6893      	ldr	r3, [r2, #8]
 800e846:	3b01      	subs	r3, #1
 800e848:	2b00      	cmp	r3, #0
 800e84a:	b410      	push	{r4}
 800e84c:	6093      	str	r3, [r2, #8]
 800e84e:	da08      	bge.n	800e862 <__sfputc_r+0x1e>
 800e850:	6994      	ldr	r4, [r2, #24]
 800e852:	42a3      	cmp	r3, r4
 800e854:	db01      	blt.n	800e85a <__sfputc_r+0x16>
 800e856:	290a      	cmp	r1, #10
 800e858:	d103      	bne.n	800e862 <__sfputc_r+0x1e>
 800e85a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e85e:	f000 bafd 	b.w	800ee5c <__swbuf_r>
 800e862:	6813      	ldr	r3, [r2, #0]
 800e864:	1c58      	adds	r0, r3, #1
 800e866:	6010      	str	r0, [r2, #0]
 800e868:	7019      	strb	r1, [r3, #0]
 800e86a:	4608      	mov	r0, r1
 800e86c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e870:	4770      	bx	lr

0800e872 <__sfputs_r>:
 800e872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e874:	4606      	mov	r6, r0
 800e876:	460f      	mov	r7, r1
 800e878:	4614      	mov	r4, r2
 800e87a:	18d5      	adds	r5, r2, r3
 800e87c:	42ac      	cmp	r4, r5
 800e87e:	d101      	bne.n	800e884 <__sfputs_r+0x12>
 800e880:	2000      	movs	r0, #0
 800e882:	e007      	b.n	800e894 <__sfputs_r+0x22>
 800e884:	463a      	mov	r2, r7
 800e886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e88a:	4630      	mov	r0, r6
 800e88c:	f7ff ffda 	bl	800e844 <__sfputc_r>
 800e890:	1c43      	adds	r3, r0, #1
 800e892:	d1f3      	bne.n	800e87c <__sfputs_r+0xa>
 800e894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e898 <_vfiprintf_r>:
 800e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e89c:	460c      	mov	r4, r1
 800e89e:	b09d      	sub	sp, #116	; 0x74
 800e8a0:	4617      	mov	r7, r2
 800e8a2:	461d      	mov	r5, r3
 800e8a4:	4606      	mov	r6, r0
 800e8a6:	b118      	cbz	r0, 800e8b0 <_vfiprintf_r+0x18>
 800e8a8:	6983      	ldr	r3, [r0, #24]
 800e8aa:	b90b      	cbnz	r3, 800e8b0 <_vfiprintf_r+0x18>
 800e8ac:	f7ff ff3e 	bl	800e72c <__sinit>
 800e8b0:	4b7c      	ldr	r3, [pc, #496]	; (800eaa4 <_vfiprintf_r+0x20c>)
 800e8b2:	429c      	cmp	r4, r3
 800e8b4:	d158      	bne.n	800e968 <_vfiprintf_r+0xd0>
 800e8b6:	6874      	ldr	r4, [r6, #4]
 800e8b8:	89a3      	ldrh	r3, [r4, #12]
 800e8ba:	0718      	lsls	r0, r3, #28
 800e8bc:	d55e      	bpl.n	800e97c <_vfiprintf_r+0xe4>
 800e8be:	6923      	ldr	r3, [r4, #16]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d05b      	beq.n	800e97c <_vfiprintf_r+0xe4>
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8c8:	2320      	movs	r3, #32
 800e8ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8ce:	2330      	movs	r3, #48	; 0x30
 800e8d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8d4:	9503      	str	r5, [sp, #12]
 800e8d6:	f04f 0b01 	mov.w	fp, #1
 800e8da:	46b8      	mov	r8, r7
 800e8dc:	4645      	mov	r5, r8
 800e8de:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e8e2:	b10b      	cbz	r3, 800e8e8 <_vfiprintf_r+0x50>
 800e8e4:	2b25      	cmp	r3, #37	; 0x25
 800e8e6:	d154      	bne.n	800e992 <_vfiprintf_r+0xfa>
 800e8e8:	ebb8 0a07 	subs.w	sl, r8, r7
 800e8ec:	d00b      	beq.n	800e906 <_vfiprintf_r+0x6e>
 800e8ee:	4653      	mov	r3, sl
 800e8f0:	463a      	mov	r2, r7
 800e8f2:	4621      	mov	r1, r4
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	f7ff ffbc 	bl	800e872 <__sfputs_r>
 800e8fa:	3001      	adds	r0, #1
 800e8fc:	f000 80c2 	beq.w	800ea84 <_vfiprintf_r+0x1ec>
 800e900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e902:	4453      	add	r3, sl
 800e904:	9309      	str	r3, [sp, #36]	; 0x24
 800e906:	f898 3000 	ldrb.w	r3, [r8]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f000 80ba 	beq.w	800ea84 <_vfiprintf_r+0x1ec>
 800e910:	2300      	movs	r3, #0
 800e912:	f04f 32ff 	mov.w	r2, #4294967295
 800e916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e91a:	9304      	str	r3, [sp, #16]
 800e91c:	9307      	str	r3, [sp, #28]
 800e91e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e922:	931a      	str	r3, [sp, #104]	; 0x68
 800e924:	46a8      	mov	r8, r5
 800e926:	2205      	movs	r2, #5
 800e928:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e92c:	485e      	ldr	r0, [pc, #376]	; (800eaa8 <_vfiprintf_r+0x210>)
 800e92e:	f7f1 fc6f 	bl	8000210 <memchr>
 800e932:	9b04      	ldr	r3, [sp, #16]
 800e934:	bb78      	cbnz	r0, 800e996 <_vfiprintf_r+0xfe>
 800e936:	06d9      	lsls	r1, r3, #27
 800e938:	bf44      	itt	mi
 800e93a:	2220      	movmi	r2, #32
 800e93c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e940:	071a      	lsls	r2, r3, #28
 800e942:	bf44      	itt	mi
 800e944:	222b      	movmi	r2, #43	; 0x2b
 800e946:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e94a:	782a      	ldrb	r2, [r5, #0]
 800e94c:	2a2a      	cmp	r2, #42	; 0x2a
 800e94e:	d02a      	beq.n	800e9a6 <_vfiprintf_r+0x10e>
 800e950:	9a07      	ldr	r2, [sp, #28]
 800e952:	46a8      	mov	r8, r5
 800e954:	2000      	movs	r0, #0
 800e956:	250a      	movs	r5, #10
 800e958:	4641      	mov	r1, r8
 800e95a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e95e:	3b30      	subs	r3, #48	; 0x30
 800e960:	2b09      	cmp	r3, #9
 800e962:	d969      	bls.n	800ea38 <_vfiprintf_r+0x1a0>
 800e964:	b360      	cbz	r0, 800e9c0 <_vfiprintf_r+0x128>
 800e966:	e024      	b.n	800e9b2 <_vfiprintf_r+0x11a>
 800e968:	4b50      	ldr	r3, [pc, #320]	; (800eaac <_vfiprintf_r+0x214>)
 800e96a:	429c      	cmp	r4, r3
 800e96c:	d101      	bne.n	800e972 <_vfiprintf_r+0xda>
 800e96e:	68b4      	ldr	r4, [r6, #8]
 800e970:	e7a2      	b.n	800e8b8 <_vfiprintf_r+0x20>
 800e972:	4b4f      	ldr	r3, [pc, #316]	; (800eab0 <_vfiprintf_r+0x218>)
 800e974:	429c      	cmp	r4, r3
 800e976:	bf08      	it	eq
 800e978:	68f4      	ldreq	r4, [r6, #12]
 800e97a:	e79d      	b.n	800e8b8 <_vfiprintf_r+0x20>
 800e97c:	4621      	mov	r1, r4
 800e97e:	4630      	mov	r0, r6
 800e980:	f000 fad0 	bl	800ef24 <__swsetup_r>
 800e984:	2800      	cmp	r0, #0
 800e986:	d09d      	beq.n	800e8c4 <_vfiprintf_r+0x2c>
 800e988:	f04f 30ff 	mov.w	r0, #4294967295
 800e98c:	b01d      	add	sp, #116	; 0x74
 800e98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e992:	46a8      	mov	r8, r5
 800e994:	e7a2      	b.n	800e8dc <_vfiprintf_r+0x44>
 800e996:	4a44      	ldr	r2, [pc, #272]	; (800eaa8 <_vfiprintf_r+0x210>)
 800e998:	1a80      	subs	r0, r0, r2
 800e99a:	fa0b f000 	lsl.w	r0, fp, r0
 800e99e:	4318      	orrs	r0, r3
 800e9a0:	9004      	str	r0, [sp, #16]
 800e9a2:	4645      	mov	r5, r8
 800e9a4:	e7be      	b.n	800e924 <_vfiprintf_r+0x8c>
 800e9a6:	9a03      	ldr	r2, [sp, #12]
 800e9a8:	1d11      	adds	r1, r2, #4
 800e9aa:	6812      	ldr	r2, [r2, #0]
 800e9ac:	9103      	str	r1, [sp, #12]
 800e9ae:	2a00      	cmp	r2, #0
 800e9b0:	db01      	blt.n	800e9b6 <_vfiprintf_r+0x11e>
 800e9b2:	9207      	str	r2, [sp, #28]
 800e9b4:	e004      	b.n	800e9c0 <_vfiprintf_r+0x128>
 800e9b6:	4252      	negs	r2, r2
 800e9b8:	f043 0302 	orr.w	r3, r3, #2
 800e9bc:	9207      	str	r2, [sp, #28]
 800e9be:	9304      	str	r3, [sp, #16]
 800e9c0:	f898 3000 	ldrb.w	r3, [r8]
 800e9c4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9c6:	d10e      	bne.n	800e9e6 <_vfiprintf_r+0x14e>
 800e9c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e9cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e9ce:	d138      	bne.n	800ea42 <_vfiprintf_r+0x1aa>
 800e9d0:	9b03      	ldr	r3, [sp, #12]
 800e9d2:	1d1a      	adds	r2, r3, #4
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	9203      	str	r2, [sp, #12]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	bfb8      	it	lt
 800e9dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9e0:	f108 0802 	add.w	r8, r8, #2
 800e9e4:	9305      	str	r3, [sp, #20]
 800e9e6:	4d33      	ldr	r5, [pc, #204]	; (800eab4 <_vfiprintf_r+0x21c>)
 800e9e8:	f898 1000 	ldrb.w	r1, [r8]
 800e9ec:	2203      	movs	r2, #3
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	f7f1 fc0e 	bl	8000210 <memchr>
 800e9f4:	b140      	cbz	r0, 800ea08 <_vfiprintf_r+0x170>
 800e9f6:	2340      	movs	r3, #64	; 0x40
 800e9f8:	1b40      	subs	r0, r0, r5
 800e9fa:	fa03 f000 	lsl.w	r0, r3, r0
 800e9fe:	9b04      	ldr	r3, [sp, #16]
 800ea00:	4303      	orrs	r3, r0
 800ea02:	f108 0801 	add.w	r8, r8, #1
 800ea06:	9304      	str	r3, [sp, #16]
 800ea08:	f898 1000 	ldrb.w	r1, [r8]
 800ea0c:	482a      	ldr	r0, [pc, #168]	; (800eab8 <_vfiprintf_r+0x220>)
 800ea0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea12:	2206      	movs	r2, #6
 800ea14:	f108 0701 	add.w	r7, r8, #1
 800ea18:	f7f1 fbfa 	bl	8000210 <memchr>
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	d037      	beq.n	800ea90 <_vfiprintf_r+0x1f8>
 800ea20:	4b26      	ldr	r3, [pc, #152]	; (800eabc <_vfiprintf_r+0x224>)
 800ea22:	bb1b      	cbnz	r3, 800ea6c <_vfiprintf_r+0x1d4>
 800ea24:	9b03      	ldr	r3, [sp, #12]
 800ea26:	3307      	adds	r3, #7
 800ea28:	f023 0307 	bic.w	r3, r3, #7
 800ea2c:	3308      	adds	r3, #8
 800ea2e:	9303      	str	r3, [sp, #12]
 800ea30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea32:	444b      	add	r3, r9
 800ea34:	9309      	str	r3, [sp, #36]	; 0x24
 800ea36:	e750      	b.n	800e8da <_vfiprintf_r+0x42>
 800ea38:	fb05 3202 	mla	r2, r5, r2, r3
 800ea3c:	2001      	movs	r0, #1
 800ea3e:	4688      	mov	r8, r1
 800ea40:	e78a      	b.n	800e958 <_vfiprintf_r+0xc0>
 800ea42:	2300      	movs	r3, #0
 800ea44:	f108 0801 	add.w	r8, r8, #1
 800ea48:	9305      	str	r3, [sp, #20]
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	250a      	movs	r5, #10
 800ea4e:	4640      	mov	r0, r8
 800ea50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea54:	3a30      	subs	r2, #48	; 0x30
 800ea56:	2a09      	cmp	r2, #9
 800ea58:	d903      	bls.n	800ea62 <_vfiprintf_r+0x1ca>
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d0c3      	beq.n	800e9e6 <_vfiprintf_r+0x14e>
 800ea5e:	9105      	str	r1, [sp, #20]
 800ea60:	e7c1      	b.n	800e9e6 <_vfiprintf_r+0x14e>
 800ea62:	fb05 2101 	mla	r1, r5, r1, r2
 800ea66:	2301      	movs	r3, #1
 800ea68:	4680      	mov	r8, r0
 800ea6a:	e7f0      	b.n	800ea4e <_vfiprintf_r+0x1b6>
 800ea6c:	ab03      	add	r3, sp, #12
 800ea6e:	9300      	str	r3, [sp, #0]
 800ea70:	4622      	mov	r2, r4
 800ea72:	4b13      	ldr	r3, [pc, #76]	; (800eac0 <_vfiprintf_r+0x228>)
 800ea74:	a904      	add	r1, sp, #16
 800ea76:	4630      	mov	r0, r6
 800ea78:	f3af 8000 	nop.w
 800ea7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ea80:	4681      	mov	r9, r0
 800ea82:	d1d5      	bne.n	800ea30 <_vfiprintf_r+0x198>
 800ea84:	89a3      	ldrh	r3, [r4, #12]
 800ea86:	065b      	lsls	r3, r3, #25
 800ea88:	f53f af7e 	bmi.w	800e988 <_vfiprintf_r+0xf0>
 800ea8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea8e:	e77d      	b.n	800e98c <_vfiprintf_r+0xf4>
 800ea90:	ab03      	add	r3, sp, #12
 800ea92:	9300      	str	r3, [sp, #0]
 800ea94:	4622      	mov	r2, r4
 800ea96:	4b0a      	ldr	r3, [pc, #40]	; (800eac0 <_vfiprintf_r+0x228>)
 800ea98:	a904      	add	r1, sp, #16
 800ea9a:	4630      	mov	r0, r6
 800ea9c:	f000 f888 	bl	800ebb0 <_printf_i>
 800eaa0:	e7ec      	b.n	800ea7c <_vfiprintf_r+0x1e4>
 800eaa2:	bf00      	nop
 800eaa4:	0800feec 	.word	0x0800feec
 800eaa8:	0800ff2c 	.word	0x0800ff2c
 800eaac:	0800ff0c 	.word	0x0800ff0c
 800eab0:	0800fecc 	.word	0x0800fecc
 800eab4:	0800ff32 	.word	0x0800ff32
 800eab8:	0800ff36 	.word	0x0800ff36
 800eabc:	00000000 	.word	0x00000000
 800eac0:	0800e873 	.word	0x0800e873

0800eac4 <_printf_common>:
 800eac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eac8:	4691      	mov	r9, r2
 800eaca:	461f      	mov	r7, r3
 800eacc:	688a      	ldr	r2, [r1, #8]
 800eace:	690b      	ldr	r3, [r1, #16]
 800ead0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ead4:	4293      	cmp	r3, r2
 800ead6:	bfb8      	it	lt
 800ead8:	4613      	movlt	r3, r2
 800eada:	f8c9 3000 	str.w	r3, [r9]
 800eade:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eae2:	4606      	mov	r6, r0
 800eae4:	460c      	mov	r4, r1
 800eae6:	b112      	cbz	r2, 800eaee <_printf_common+0x2a>
 800eae8:	3301      	adds	r3, #1
 800eaea:	f8c9 3000 	str.w	r3, [r9]
 800eaee:	6823      	ldr	r3, [r4, #0]
 800eaf0:	0699      	lsls	r1, r3, #26
 800eaf2:	bf42      	ittt	mi
 800eaf4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800eaf8:	3302      	addmi	r3, #2
 800eafa:	f8c9 3000 	strmi.w	r3, [r9]
 800eafe:	6825      	ldr	r5, [r4, #0]
 800eb00:	f015 0506 	ands.w	r5, r5, #6
 800eb04:	d107      	bne.n	800eb16 <_printf_common+0x52>
 800eb06:	f104 0a19 	add.w	sl, r4, #25
 800eb0a:	68e3      	ldr	r3, [r4, #12]
 800eb0c:	f8d9 2000 	ldr.w	r2, [r9]
 800eb10:	1a9b      	subs	r3, r3, r2
 800eb12:	42ab      	cmp	r3, r5
 800eb14:	dc28      	bgt.n	800eb68 <_printf_common+0xa4>
 800eb16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800eb1a:	6822      	ldr	r2, [r4, #0]
 800eb1c:	3300      	adds	r3, #0
 800eb1e:	bf18      	it	ne
 800eb20:	2301      	movne	r3, #1
 800eb22:	0692      	lsls	r2, r2, #26
 800eb24:	d42d      	bmi.n	800eb82 <_printf_common+0xbe>
 800eb26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb2a:	4639      	mov	r1, r7
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	47c0      	blx	r8
 800eb30:	3001      	adds	r0, #1
 800eb32:	d020      	beq.n	800eb76 <_printf_common+0xb2>
 800eb34:	6823      	ldr	r3, [r4, #0]
 800eb36:	68e5      	ldr	r5, [r4, #12]
 800eb38:	f8d9 2000 	ldr.w	r2, [r9]
 800eb3c:	f003 0306 	and.w	r3, r3, #6
 800eb40:	2b04      	cmp	r3, #4
 800eb42:	bf08      	it	eq
 800eb44:	1aad      	subeq	r5, r5, r2
 800eb46:	68a3      	ldr	r3, [r4, #8]
 800eb48:	6922      	ldr	r2, [r4, #16]
 800eb4a:	bf0c      	ite	eq
 800eb4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb50:	2500      	movne	r5, #0
 800eb52:	4293      	cmp	r3, r2
 800eb54:	bfc4      	itt	gt
 800eb56:	1a9b      	subgt	r3, r3, r2
 800eb58:	18ed      	addgt	r5, r5, r3
 800eb5a:	f04f 0900 	mov.w	r9, #0
 800eb5e:	341a      	adds	r4, #26
 800eb60:	454d      	cmp	r5, r9
 800eb62:	d11a      	bne.n	800eb9a <_printf_common+0xd6>
 800eb64:	2000      	movs	r0, #0
 800eb66:	e008      	b.n	800eb7a <_printf_common+0xb6>
 800eb68:	2301      	movs	r3, #1
 800eb6a:	4652      	mov	r2, sl
 800eb6c:	4639      	mov	r1, r7
 800eb6e:	4630      	mov	r0, r6
 800eb70:	47c0      	blx	r8
 800eb72:	3001      	adds	r0, #1
 800eb74:	d103      	bne.n	800eb7e <_printf_common+0xba>
 800eb76:	f04f 30ff 	mov.w	r0, #4294967295
 800eb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb7e:	3501      	adds	r5, #1
 800eb80:	e7c3      	b.n	800eb0a <_printf_common+0x46>
 800eb82:	18e1      	adds	r1, r4, r3
 800eb84:	1c5a      	adds	r2, r3, #1
 800eb86:	2030      	movs	r0, #48	; 0x30
 800eb88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb8c:	4422      	add	r2, r4
 800eb8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb96:	3302      	adds	r3, #2
 800eb98:	e7c5      	b.n	800eb26 <_printf_common+0x62>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	4622      	mov	r2, r4
 800eb9e:	4639      	mov	r1, r7
 800eba0:	4630      	mov	r0, r6
 800eba2:	47c0      	blx	r8
 800eba4:	3001      	adds	r0, #1
 800eba6:	d0e6      	beq.n	800eb76 <_printf_common+0xb2>
 800eba8:	f109 0901 	add.w	r9, r9, #1
 800ebac:	e7d8      	b.n	800eb60 <_printf_common+0x9c>
	...

0800ebb0 <_printf_i>:
 800ebb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebb4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ebb8:	460c      	mov	r4, r1
 800ebba:	7e09      	ldrb	r1, [r1, #24]
 800ebbc:	b085      	sub	sp, #20
 800ebbe:	296e      	cmp	r1, #110	; 0x6e
 800ebc0:	4617      	mov	r7, r2
 800ebc2:	4606      	mov	r6, r0
 800ebc4:	4698      	mov	r8, r3
 800ebc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ebc8:	f000 80b3 	beq.w	800ed32 <_printf_i+0x182>
 800ebcc:	d822      	bhi.n	800ec14 <_printf_i+0x64>
 800ebce:	2963      	cmp	r1, #99	; 0x63
 800ebd0:	d036      	beq.n	800ec40 <_printf_i+0x90>
 800ebd2:	d80a      	bhi.n	800ebea <_printf_i+0x3a>
 800ebd4:	2900      	cmp	r1, #0
 800ebd6:	f000 80b9 	beq.w	800ed4c <_printf_i+0x19c>
 800ebda:	2958      	cmp	r1, #88	; 0x58
 800ebdc:	f000 8083 	beq.w	800ece6 <_printf_i+0x136>
 800ebe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebe4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ebe8:	e032      	b.n	800ec50 <_printf_i+0xa0>
 800ebea:	2964      	cmp	r1, #100	; 0x64
 800ebec:	d001      	beq.n	800ebf2 <_printf_i+0x42>
 800ebee:	2969      	cmp	r1, #105	; 0x69
 800ebf0:	d1f6      	bne.n	800ebe0 <_printf_i+0x30>
 800ebf2:	6820      	ldr	r0, [r4, #0]
 800ebf4:	6813      	ldr	r3, [r2, #0]
 800ebf6:	0605      	lsls	r5, r0, #24
 800ebf8:	f103 0104 	add.w	r1, r3, #4
 800ebfc:	d52a      	bpl.n	800ec54 <_printf_i+0xa4>
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	6011      	str	r1, [r2, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	da03      	bge.n	800ec0e <_printf_i+0x5e>
 800ec06:	222d      	movs	r2, #45	; 0x2d
 800ec08:	425b      	negs	r3, r3
 800ec0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ec0e:	486f      	ldr	r0, [pc, #444]	; (800edcc <_printf_i+0x21c>)
 800ec10:	220a      	movs	r2, #10
 800ec12:	e039      	b.n	800ec88 <_printf_i+0xd8>
 800ec14:	2973      	cmp	r1, #115	; 0x73
 800ec16:	f000 809d 	beq.w	800ed54 <_printf_i+0x1a4>
 800ec1a:	d808      	bhi.n	800ec2e <_printf_i+0x7e>
 800ec1c:	296f      	cmp	r1, #111	; 0x6f
 800ec1e:	d020      	beq.n	800ec62 <_printf_i+0xb2>
 800ec20:	2970      	cmp	r1, #112	; 0x70
 800ec22:	d1dd      	bne.n	800ebe0 <_printf_i+0x30>
 800ec24:	6823      	ldr	r3, [r4, #0]
 800ec26:	f043 0320 	orr.w	r3, r3, #32
 800ec2a:	6023      	str	r3, [r4, #0]
 800ec2c:	e003      	b.n	800ec36 <_printf_i+0x86>
 800ec2e:	2975      	cmp	r1, #117	; 0x75
 800ec30:	d017      	beq.n	800ec62 <_printf_i+0xb2>
 800ec32:	2978      	cmp	r1, #120	; 0x78
 800ec34:	d1d4      	bne.n	800ebe0 <_printf_i+0x30>
 800ec36:	2378      	movs	r3, #120	; 0x78
 800ec38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec3c:	4864      	ldr	r0, [pc, #400]	; (800edd0 <_printf_i+0x220>)
 800ec3e:	e055      	b.n	800ecec <_printf_i+0x13c>
 800ec40:	6813      	ldr	r3, [r2, #0]
 800ec42:	1d19      	adds	r1, r3, #4
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	6011      	str	r1, [r2, #0]
 800ec48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec50:	2301      	movs	r3, #1
 800ec52:	e08c      	b.n	800ed6e <_printf_i+0x1be>
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	6011      	str	r1, [r2, #0]
 800ec58:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ec5c:	bf18      	it	ne
 800ec5e:	b21b      	sxthne	r3, r3
 800ec60:	e7cf      	b.n	800ec02 <_printf_i+0x52>
 800ec62:	6813      	ldr	r3, [r2, #0]
 800ec64:	6825      	ldr	r5, [r4, #0]
 800ec66:	1d18      	adds	r0, r3, #4
 800ec68:	6010      	str	r0, [r2, #0]
 800ec6a:	0628      	lsls	r0, r5, #24
 800ec6c:	d501      	bpl.n	800ec72 <_printf_i+0xc2>
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	e002      	b.n	800ec78 <_printf_i+0xc8>
 800ec72:	0668      	lsls	r0, r5, #25
 800ec74:	d5fb      	bpl.n	800ec6e <_printf_i+0xbe>
 800ec76:	881b      	ldrh	r3, [r3, #0]
 800ec78:	4854      	ldr	r0, [pc, #336]	; (800edcc <_printf_i+0x21c>)
 800ec7a:	296f      	cmp	r1, #111	; 0x6f
 800ec7c:	bf14      	ite	ne
 800ec7e:	220a      	movne	r2, #10
 800ec80:	2208      	moveq	r2, #8
 800ec82:	2100      	movs	r1, #0
 800ec84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec88:	6865      	ldr	r5, [r4, #4]
 800ec8a:	60a5      	str	r5, [r4, #8]
 800ec8c:	2d00      	cmp	r5, #0
 800ec8e:	f2c0 8095 	blt.w	800edbc <_printf_i+0x20c>
 800ec92:	6821      	ldr	r1, [r4, #0]
 800ec94:	f021 0104 	bic.w	r1, r1, #4
 800ec98:	6021      	str	r1, [r4, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d13d      	bne.n	800ed1a <_printf_i+0x16a>
 800ec9e:	2d00      	cmp	r5, #0
 800eca0:	f040 808e 	bne.w	800edc0 <_printf_i+0x210>
 800eca4:	4665      	mov	r5, ip
 800eca6:	2a08      	cmp	r2, #8
 800eca8:	d10b      	bne.n	800ecc2 <_printf_i+0x112>
 800ecaa:	6823      	ldr	r3, [r4, #0]
 800ecac:	07db      	lsls	r3, r3, #31
 800ecae:	d508      	bpl.n	800ecc2 <_printf_i+0x112>
 800ecb0:	6923      	ldr	r3, [r4, #16]
 800ecb2:	6862      	ldr	r2, [r4, #4]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	bfde      	ittt	le
 800ecb8:	2330      	movle	r3, #48	; 0x30
 800ecba:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ecbe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ecc2:	ebac 0305 	sub.w	r3, ip, r5
 800ecc6:	6123      	str	r3, [r4, #16]
 800ecc8:	f8cd 8000 	str.w	r8, [sp]
 800eccc:	463b      	mov	r3, r7
 800ecce:	aa03      	add	r2, sp, #12
 800ecd0:	4621      	mov	r1, r4
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	f7ff fef6 	bl	800eac4 <_printf_common>
 800ecd8:	3001      	adds	r0, #1
 800ecda:	d14d      	bne.n	800ed78 <_printf_i+0x1c8>
 800ecdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ece0:	b005      	add	sp, #20
 800ece2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ece6:	4839      	ldr	r0, [pc, #228]	; (800edcc <_printf_i+0x21c>)
 800ece8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ecec:	6813      	ldr	r3, [r2, #0]
 800ecee:	6821      	ldr	r1, [r4, #0]
 800ecf0:	1d1d      	adds	r5, r3, #4
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	6015      	str	r5, [r2, #0]
 800ecf6:	060a      	lsls	r2, r1, #24
 800ecf8:	d50b      	bpl.n	800ed12 <_printf_i+0x162>
 800ecfa:	07ca      	lsls	r2, r1, #31
 800ecfc:	bf44      	itt	mi
 800ecfe:	f041 0120 	orrmi.w	r1, r1, #32
 800ed02:	6021      	strmi	r1, [r4, #0]
 800ed04:	b91b      	cbnz	r3, 800ed0e <_printf_i+0x15e>
 800ed06:	6822      	ldr	r2, [r4, #0]
 800ed08:	f022 0220 	bic.w	r2, r2, #32
 800ed0c:	6022      	str	r2, [r4, #0]
 800ed0e:	2210      	movs	r2, #16
 800ed10:	e7b7      	b.n	800ec82 <_printf_i+0xd2>
 800ed12:	064d      	lsls	r5, r1, #25
 800ed14:	bf48      	it	mi
 800ed16:	b29b      	uxthmi	r3, r3
 800ed18:	e7ef      	b.n	800ecfa <_printf_i+0x14a>
 800ed1a:	4665      	mov	r5, ip
 800ed1c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed20:	fb02 3311 	mls	r3, r2, r1, r3
 800ed24:	5cc3      	ldrb	r3, [r0, r3]
 800ed26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	2900      	cmp	r1, #0
 800ed2e:	d1f5      	bne.n	800ed1c <_printf_i+0x16c>
 800ed30:	e7b9      	b.n	800eca6 <_printf_i+0xf6>
 800ed32:	6813      	ldr	r3, [r2, #0]
 800ed34:	6825      	ldr	r5, [r4, #0]
 800ed36:	6961      	ldr	r1, [r4, #20]
 800ed38:	1d18      	adds	r0, r3, #4
 800ed3a:	6010      	str	r0, [r2, #0]
 800ed3c:	0628      	lsls	r0, r5, #24
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	d501      	bpl.n	800ed46 <_printf_i+0x196>
 800ed42:	6019      	str	r1, [r3, #0]
 800ed44:	e002      	b.n	800ed4c <_printf_i+0x19c>
 800ed46:	066a      	lsls	r2, r5, #25
 800ed48:	d5fb      	bpl.n	800ed42 <_printf_i+0x192>
 800ed4a:	8019      	strh	r1, [r3, #0]
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	6123      	str	r3, [r4, #16]
 800ed50:	4665      	mov	r5, ip
 800ed52:	e7b9      	b.n	800ecc8 <_printf_i+0x118>
 800ed54:	6813      	ldr	r3, [r2, #0]
 800ed56:	1d19      	adds	r1, r3, #4
 800ed58:	6011      	str	r1, [r2, #0]
 800ed5a:	681d      	ldr	r5, [r3, #0]
 800ed5c:	6862      	ldr	r2, [r4, #4]
 800ed5e:	2100      	movs	r1, #0
 800ed60:	4628      	mov	r0, r5
 800ed62:	f7f1 fa55 	bl	8000210 <memchr>
 800ed66:	b108      	cbz	r0, 800ed6c <_printf_i+0x1bc>
 800ed68:	1b40      	subs	r0, r0, r5
 800ed6a:	6060      	str	r0, [r4, #4]
 800ed6c:	6863      	ldr	r3, [r4, #4]
 800ed6e:	6123      	str	r3, [r4, #16]
 800ed70:	2300      	movs	r3, #0
 800ed72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed76:	e7a7      	b.n	800ecc8 <_printf_i+0x118>
 800ed78:	6923      	ldr	r3, [r4, #16]
 800ed7a:	462a      	mov	r2, r5
 800ed7c:	4639      	mov	r1, r7
 800ed7e:	4630      	mov	r0, r6
 800ed80:	47c0      	blx	r8
 800ed82:	3001      	adds	r0, #1
 800ed84:	d0aa      	beq.n	800ecdc <_printf_i+0x12c>
 800ed86:	6823      	ldr	r3, [r4, #0]
 800ed88:	079b      	lsls	r3, r3, #30
 800ed8a:	d413      	bmi.n	800edb4 <_printf_i+0x204>
 800ed8c:	68e0      	ldr	r0, [r4, #12]
 800ed8e:	9b03      	ldr	r3, [sp, #12]
 800ed90:	4298      	cmp	r0, r3
 800ed92:	bfb8      	it	lt
 800ed94:	4618      	movlt	r0, r3
 800ed96:	e7a3      	b.n	800ece0 <_printf_i+0x130>
 800ed98:	2301      	movs	r3, #1
 800ed9a:	464a      	mov	r2, r9
 800ed9c:	4639      	mov	r1, r7
 800ed9e:	4630      	mov	r0, r6
 800eda0:	47c0      	blx	r8
 800eda2:	3001      	adds	r0, #1
 800eda4:	d09a      	beq.n	800ecdc <_printf_i+0x12c>
 800eda6:	3501      	adds	r5, #1
 800eda8:	68e3      	ldr	r3, [r4, #12]
 800edaa:	9a03      	ldr	r2, [sp, #12]
 800edac:	1a9b      	subs	r3, r3, r2
 800edae:	42ab      	cmp	r3, r5
 800edb0:	dcf2      	bgt.n	800ed98 <_printf_i+0x1e8>
 800edb2:	e7eb      	b.n	800ed8c <_printf_i+0x1dc>
 800edb4:	2500      	movs	r5, #0
 800edb6:	f104 0919 	add.w	r9, r4, #25
 800edba:	e7f5      	b.n	800eda8 <_printf_i+0x1f8>
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d1ac      	bne.n	800ed1a <_printf_i+0x16a>
 800edc0:	7803      	ldrb	r3, [r0, #0]
 800edc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800edc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edca:	e76c      	b.n	800eca6 <_printf_i+0xf6>
 800edcc:	0800ff3d 	.word	0x0800ff3d
 800edd0:	0800ff4e 	.word	0x0800ff4e

0800edd4 <__sread>:
 800edd4:	b510      	push	{r4, lr}
 800edd6:	460c      	mov	r4, r1
 800edd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eddc:	f000 fa46 	bl	800f26c <_read_r>
 800ede0:	2800      	cmp	r0, #0
 800ede2:	bfab      	itete	ge
 800ede4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ede6:	89a3      	ldrhlt	r3, [r4, #12]
 800ede8:	181b      	addge	r3, r3, r0
 800edea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800edee:	bfac      	ite	ge
 800edf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800edf2:	81a3      	strhlt	r3, [r4, #12]
 800edf4:	bd10      	pop	{r4, pc}

0800edf6 <__swrite>:
 800edf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edfa:	461f      	mov	r7, r3
 800edfc:	898b      	ldrh	r3, [r1, #12]
 800edfe:	05db      	lsls	r3, r3, #23
 800ee00:	4605      	mov	r5, r0
 800ee02:	460c      	mov	r4, r1
 800ee04:	4616      	mov	r6, r2
 800ee06:	d505      	bpl.n	800ee14 <__swrite+0x1e>
 800ee08:	2302      	movs	r3, #2
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee10:	f000 f9b6 	bl	800f180 <_lseek_r>
 800ee14:	89a3      	ldrh	r3, [r4, #12]
 800ee16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee1e:	81a3      	strh	r3, [r4, #12]
 800ee20:	4632      	mov	r2, r6
 800ee22:	463b      	mov	r3, r7
 800ee24:	4628      	mov	r0, r5
 800ee26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee2a:	f000 b869 	b.w	800ef00 <_write_r>

0800ee2e <__sseek>:
 800ee2e:	b510      	push	{r4, lr}
 800ee30:	460c      	mov	r4, r1
 800ee32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee36:	f000 f9a3 	bl	800f180 <_lseek_r>
 800ee3a:	1c43      	adds	r3, r0, #1
 800ee3c:	89a3      	ldrh	r3, [r4, #12]
 800ee3e:	bf15      	itete	ne
 800ee40:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee4a:	81a3      	strheq	r3, [r4, #12]
 800ee4c:	bf18      	it	ne
 800ee4e:	81a3      	strhne	r3, [r4, #12]
 800ee50:	bd10      	pop	{r4, pc}

0800ee52 <__sclose>:
 800ee52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee56:	f000 b8d3 	b.w	800f000 <_close_r>
	...

0800ee5c <__swbuf_r>:
 800ee5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee5e:	460e      	mov	r6, r1
 800ee60:	4614      	mov	r4, r2
 800ee62:	4605      	mov	r5, r0
 800ee64:	b118      	cbz	r0, 800ee6e <__swbuf_r+0x12>
 800ee66:	6983      	ldr	r3, [r0, #24]
 800ee68:	b90b      	cbnz	r3, 800ee6e <__swbuf_r+0x12>
 800ee6a:	f7ff fc5f 	bl	800e72c <__sinit>
 800ee6e:	4b21      	ldr	r3, [pc, #132]	; (800eef4 <__swbuf_r+0x98>)
 800ee70:	429c      	cmp	r4, r3
 800ee72:	d12a      	bne.n	800eeca <__swbuf_r+0x6e>
 800ee74:	686c      	ldr	r4, [r5, #4]
 800ee76:	69a3      	ldr	r3, [r4, #24]
 800ee78:	60a3      	str	r3, [r4, #8]
 800ee7a:	89a3      	ldrh	r3, [r4, #12]
 800ee7c:	071a      	lsls	r2, r3, #28
 800ee7e:	d52e      	bpl.n	800eede <__swbuf_r+0x82>
 800ee80:	6923      	ldr	r3, [r4, #16]
 800ee82:	b363      	cbz	r3, 800eede <__swbuf_r+0x82>
 800ee84:	6923      	ldr	r3, [r4, #16]
 800ee86:	6820      	ldr	r0, [r4, #0]
 800ee88:	1ac0      	subs	r0, r0, r3
 800ee8a:	6963      	ldr	r3, [r4, #20]
 800ee8c:	b2f6      	uxtb	r6, r6
 800ee8e:	4283      	cmp	r3, r0
 800ee90:	4637      	mov	r7, r6
 800ee92:	dc04      	bgt.n	800ee9e <__swbuf_r+0x42>
 800ee94:	4621      	mov	r1, r4
 800ee96:	4628      	mov	r0, r5
 800ee98:	f000 f948 	bl	800f12c <_fflush_r>
 800ee9c:	bb28      	cbnz	r0, 800eeea <__swbuf_r+0x8e>
 800ee9e:	68a3      	ldr	r3, [r4, #8]
 800eea0:	3b01      	subs	r3, #1
 800eea2:	60a3      	str	r3, [r4, #8]
 800eea4:	6823      	ldr	r3, [r4, #0]
 800eea6:	1c5a      	adds	r2, r3, #1
 800eea8:	6022      	str	r2, [r4, #0]
 800eeaa:	701e      	strb	r6, [r3, #0]
 800eeac:	6963      	ldr	r3, [r4, #20]
 800eeae:	3001      	adds	r0, #1
 800eeb0:	4283      	cmp	r3, r0
 800eeb2:	d004      	beq.n	800eebe <__swbuf_r+0x62>
 800eeb4:	89a3      	ldrh	r3, [r4, #12]
 800eeb6:	07db      	lsls	r3, r3, #31
 800eeb8:	d519      	bpl.n	800eeee <__swbuf_r+0x92>
 800eeba:	2e0a      	cmp	r6, #10
 800eebc:	d117      	bne.n	800eeee <__swbuf_r+0x92>
 800eebe:	4621      	mov	r1, r4
 800eec0:	4628      	mov	r0, r5
 800eec2:	f000 f933 	bl	800f12c <_fflush_r>
 800eec6:	b190      	cbz	r0, 800eeee <__swbuf_r+0x92>
 800eec8:	e00f      	b.n	800eeea <__swbuf_r+0x8e>
 800eeca:	4b0b      	ldr	r3, [pc, #44]	; (800eef8 <__swbuf_r+0x9c>)
 800eecc:	429c      	cmp	r4, r3
 800eece:	d101      	bne.n	800eed4 <__swbuf_r+0x78>
 800eed0:	68ac      	ldr	r4, [r5, #8]
 800eed2:	e7d0      	b.n	800ee76 <__swbuf_r+0x1a>
 800eed4:	4b09      	ldr	r3, [pc, #36]	; (800eefc <__swbuf_r+0xa0>)
 800eed6:	429c      	cmp	r4, r3
 800eed8:	bf08      	it	eq
 800eeda:	68ec      	ldreq	r4, [r5, #12]
 800eedc:	e7cb      	b.n	800ee76 <__swbuf_r+0x1a>
 800eede:	4621      	mov	r1, r4
 800eee0:	4628      	mov	r0, r5
 800eee2:	f000 f81f 	bl	800ef24 <__swsetup_r>
 800eee6:	2800      	cmp	r0, #0
 800eee8:	d0cc      	beq.n	800ee84 <__swbuf_r+0x28>
 800eeea:	f04f 37ff 	mov.w	r7, #4294967295
 800eeee:	4638      	mov	r0, r7
 800eef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eef2:	bf00      	nop
 800eef4:	0800feec 	.word	0x0800feec
 800eef8:	0800ff0c 	.word	0x0800ff0c
 800eefc:	0800fecc 	.word	0x0800fecc

0800ef00 <_write_r>:
 800ef00:	b538      	push	{r3, r4, r5, lr}
 800ef02:	4c07      	ldr	r4, [pc, #28]	; (800ef20 <_write_r+0x20>)
 800ef04:	4605      	mov	r5, r0
 800ef06:	4608      	mov	r0, r1
 800ef08:	4611      	mov	r1, r2
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	6022      	str	r2, [r4, #0]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	f7fc fe55 	bl	800bbbe <_write>
 800ef14:	1c43      	adds	r3, r0, #1
 800ef16:	d102      	bne.n	800ef1e <_write_r+0x1e>
 800ef18:	6823      	ldr	r3, [r4, #0]
 800ef1a:	b103      	cbz	r3, 800ef1e <_write_r+0x1e>
 800ef1c:	602b      	str	r3, [r5, #0]
 800ef1e:	bd38      	pop	{r3, r4, r5, pc}
 800ef20:	2000bfe0 	.word	0x2000bfe0

0800ef24 <__swsetup_r>:
 800ef24:	4b32      	ldr	r3, [pc, #200]	; (800eff0 <__swsetup_r+0xcc>)
 800ef26:	b570      	push	{r4, r5, r6, lr}
 800ef28:	681d      	ldr	r5, [r3, #0]
 800ef2a:	4606      	mov	r6, r0
 800ef2c:	460c      	mov	r4, r1
 800ef2e:	b125      	cbz	r5, 800ef3a <__swsetup_r+0x16>
 800ef30:	69ab      	ldr	r3, [r5, #24]
 800ef32:	b913      	cbnz	r3, 800ef3a <__swsetup_r+0x16>
 800ef34:	4628      	mov	r0, r5
 800ef36:	f7ff fbf9 	bl	800e72c <__sinit>
 800ef3a:	4b2e      	ldr	r3, [pc, #184]	; (800eff4 <__swsetup_r+0xd0>)
 800ef3c:	429c      	cmp	r4, r3
 800ef3e:	d10f      	bne.n	800ef60 <__swsetup_r+0x3c>
 800ef40:	686c      	ldr	r4, [r5, #4]
 800ef42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	0715      	lsls	r5, r2, #28
 800ef4a:	d42c      	bmi.n	800efa6 <__swsetup_r+0x82>
 800ef4c:	06d0      	lsls	r0, r2, #27
 800ef4e:	d411      	bmi.n	800ef74 <__swsetup_r+0x50>
 800ef50:	2209      	movs	r2, #9
 800ef52:	6032      	str	r2, [r6, #0]
 800ef54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef58:	81a3      	strh	r3, [r4, #12]
 800ef5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef5e:	e03e      	b.n	800efde <__swsetup_r+0xba>
 800ef60:	4b25      	ldr	r3, [pc, #148]	; (800eff8 <__swsetup_r+0xd4>)
 800ef62:	429c      	cmp	r4, r3
 800ef64:	d101      	bne.n	800ef6a <__swsetup_r+0x46>
 800ef66:	68ac      	ldr	r4, [r5, #8]
 800ef68:	e7eb      	b.n	800ef42 <__swsetup_r+0x1e>
 800ef6a:	4b24      	ldr	r3, [pc, #144]	; (800effc <__swsetup_r+0xd8>)
 800ef6c:	429c      	cmp	r4, r3
 800ef6e:	bf08      	it	eq
 800ef70:	68ec      	ldreq	r4, [r5, #12]
 800ef72:	e7e6      	b.n	800ef42 <__swsetup_r+0x1e>
 800ef74:	0751      	lsls	r1, r2, #29
 800ef76:	d512      	bpl.n	800ef9e <__swsetup_r+0x7a>
 800ef78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef7a:	b141      	cbz	r1, 800ef8e <__swsetup_r+0x6a>
 800ef7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef80:	4299      	cmp	r1, r3
 800ef82:	d002      	beq.n	800ef8a <__swsetup_r+0x66>
 800ef84:	4630      	mov	r0, r6
 800ef86:	f7ff fac1 	bl	800e50c <_free_r>
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	6363      	str	r3, [r4, #52]	; 0x34
 800ef8e:	89a3      	ldrh	r3, [r4, #12]
 800ef90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef94:	81a3      	strh	r3, [r4, #12]
 800ef96:	2300      	movs	r3, #0
 800ef98:	6063      	str	r3, [r4, #4]
 800ef9a:	6923      	ldr	r3, [r4, #16]
 800ef9c:	6023      	str	r3, [r4, #0]
 800ef9e:	89a3      	ldrh	r3, [r4, #12]
 800efa0:	f043 0308 	orr.w	r3, r3, #8
 800efa4:	81a3      	strh	r3, [r4, #12]
 800efa6:	6923      	ldr	r3, [r4, #16]
 800efa8:	b94b      	cbnz	r3, 800efbe <__swsetup_r+0x9a>
 800efaa:	89a3      	ldrh	r3, [r4, #12]
 800efac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800efb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800efb4:	d003      	beq.n	800efbe <__swsetup_r+0x9a>
 800efb6:	4621      	mov	r1, r4
 800efb8:	4630      	mov	r0, r6
 800efba:	f000 f917 	bl	800f1ec <__smakebuf_r>
 800efbe:	89a2      	ldrh	r2, [r4, #12]
 800efc0:	f012 0301 	ands.w	r3, r2, #1
 800efc4:	d00c      	beq.n	800efe0 <__swsetup_r+0xbc>
 800efc6:	2300      	movs	r3, #0
 800efc8:	60a3      	str	r3, [r4, #8]
 800efca:	6963      	ldr	r3, [r4, #20]
 800efcc:	425b      	negs	r3, r3
 800efce:	61a3      	str	r3, [r4, #24]
 800efd0:	6923      	ldr	r3, [r4, #16]
 800efd2:	b953      	cbnz	r3, 800efea <__swsetup_r+0xc6>
 800efd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efd8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800efdc:	d1ba      	bne.n	800ef54 <__swsetup_r+0x30>
 800efde:	bd70      	pop	{r4, r5, r6, pc}
 800efe0:	0792      	lsls	r2, r2, #30
 800efe2:	bf58      	it	pl
 800efe4:	6963      	ldrpl	r3, [r4, #20]
 800efe6:	60a3      	str	r3, [r4, #8]
 800efe8:	e7f2      	b.n	800efd0 <__swsetup_r+0xac>
 800efea:	2000      	movs	r0, #0
 800efec:	e7f7      	b.n	800efde <__swsetup_r+0xba>
 800efee:	bf00      	nop
 800eff0:	2000064c 	.word	0x2000064c
 800eff4:	0800feec 	.word	0x0800feec
 800eff8:	0800ff0c 	.word	0x0800ff0c
 800effc:	0800fecc 	.word	0x0800fecc

0800f000 <_close_r>:
 800f000:	b538      	push	{r3, r4, r5, lr}
 800f002:	4c06      	ldr	r4, [pc, #24]	; (800f01c <_close_r+0x1c>)
 800f004:	2300      	movs	r3, #0
 800f006:	4605      	mov	r5, r0
 800f008:	4608      	mov	r0, r1
 800f00a:	6023      	str	r3, [r4, #0]
 800f00c:	f7fc fdf3 	bl	800bbf6 <_close>
 800f010:	1c43      	adds	r3, r0, #1
 800f012:	d102      	bne.n	800f01a <_close_r+0x1a>
 800f014:	6823      	ldr	r3, [r4, #0]
 800f016:	b103      	cbz	r3, 800f01a <_close_r+0x1a>
 800f018:	602b      	str	r3, [r5, #0]
 800f01a:	bd38      	pop	{r3, r4, r5, pc}
 800f01c:	2000bfe0 	.word	0x2000bfe0

0800f020 <__sflush_r>:
 800f020:	898a      	ldrh	r2, [r1, #12]
 800f022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f026:	4605      	mov	r5, r0
 800f028:	0710      	lsls	r0, r2, #28
 800f02a:	460c      	mov	r4, r1
 800f02c:	d458      	bmi.n	800f0e0 <__sflush_r+0xc0>
 800f02e:	684b      	ldr	r3, [r1, #4]
 800f030:	2b00      	cmp	r3, #0
 800f032:	dc05      	bgt.n	800f040 <__sflush_r+0x20>
 800f034:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f036:	2b00      	cmp	r3, #0
 800f038:	dc02      	bgt.n	800f040 <__sflush_r+0x20>
 800f03a:	2000      	movs	r0, #0
 800f03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f042:	2e00      	cmp	r6, #0
 800f044:	d0f9      	beq.n	800f03a <__sflush_r+0x1a>
 800f046:	2300      	movs	r3, #0
 800f048:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f04c:	682f      	ldr	r7, [r5, #0]
 800f04e:	6a21      	ldr	r1, [r4, #32]
 800f050:	602b      	str	r3, [r5, #0]
 800f052:	d032      	beq.n	800f0ba <__sflush_r+0x9a>
 800f054:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f056:	89a3      	ldrh	r3, [r4, #12]
 800f058:	075a      	lsls	r2, r3, #29
 800f05a:	d505      	bpl.n	800f068 <__sflush_r+0x48>
 800f05c:	6863      	ldr	r3, [r4, #4]
 800f05e:	1ac0      	subs	r0, r0, r3
 800f060:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f062:	b10b      	cbz	r3, 800f068 <__sflush_r+0x48>
 800f064:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f066:	1ac0      	subs	r0, r0, r3
 800f068:	2300      	movs	r3, #0
 800f06a:	4602      	mov	r2, r0
 800f06c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f06e:	6a21      	ldr	r1, [r4, #32]
 800f070:	4628      	mov	r0, r5
 800f072:	47b0      	blx	r6
 800f074:	1c43      	adds	r3, r0, #1
 800f076:	89a3      	ldrh	r3, [r4, #12]
 800f078:	d106      	bne.n	800f088 <__sflush_r+0x68>
 800f07a:	6829      	ldr	r1, [r5, #0]
 800f07c:	291d      	cmp	r1, #29
 800f07e:	d848      	bhi.n	800f112 <__sflush_r+0xf2>
 800f080:	4a29      	ldr	r2, [pc, #164]	; (800f128 <__sflush_r+0x108>)
 800f082:	40ca      	lsrs	r2, r1
 800f084:	07d6      	lsls	r6, r2, #31
 800f086:	d544      	bpl.n	800f112 <__sflush_r+0xf2>
 800f088:	2200      	movs	r2, #0
 800f08a:	6062      	str	r2, [r4, #4]
 800f08c:	04d9      	lsls	r1, r3, #19
 800f08e:	6922      	ldr	r2, [r4, #16]
 800f090:	6022      	str	r2, [r4, #0]
 800f092:	d504      	bpl.n	800f09e <__sflush_r+0x7e>
 800f094:	1c42      	adds	r2, r0, #1
 800f096:	d101      	bne.n	800f09c <__sflush_r+0x7c>
 800f098:	682b      	ldr	r3, [r5, #0]
 800f09a:	b903      	cbnz	r3, 800f09e <__sflush_r+0x7e>
 800f09c:	6560      	str	r0, [r4, #84]	; 0x54
 800f09e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0a0:	602f      	str	r7, [r5, #0]
 800f0a2:	2900      	cmp	r1, #0
 800f0a4:	d0c9      	beq.n	800f03a <__sflush_r+0x1a>
 800f0a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0aa:	4299      	cmp	r1, r3
 800f0ac:	d002      	beq.n	800f0b4 <__sflush_r+0x94>
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	f7ff fa2c 	bl	800e50c <_free_r>
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	6360      	str	r0, [r4, #52]	; 0x34
 800f0b8:	e7c0      	b.n	800f03c <__sflush_r+0x1c>
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	4628      	mov	r0, r5
 800f0be:	47b0      	blx	r6
 800f0c0:	1c41      	adds	r1, r0, #1
 800f0c2:	d1c8      	bne.n	800f056 <__sflush_r+0x36>
 800f0c4:	682b      	ldr	r3, [r5, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d0c5      	beq.n	800f056 <__sflush_r+0x36>
 800f0ca:	2b1d      	cmp	r3, #29
 800f0cc:	d001      	beq.n	800f0d2 <__sflush_r+0xb2>
 800f0ce:	2b16      	cmp	r3, #22
 800f0d0:	d101      	bne.n	800f0d6 <__sflush_r+0xb6>
 800f0d2:	602f      	str	r7, [r5, #0]
 800f0d4:	e7b1      	b.n	800f03a <__sflush_r+0x1a>
 800f0d6:	89a3      	ldrh	r3, [r4, #12]
 800f0d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0dc:	81a3      	strh	r3, [r4, #12]
 800f0de:	e7ad      	b.n	800f03c <__sflush_r+0x1c>
 800f0e0:	690f      	ldr	r7, [r1, #16]
 800f0e2:	2f00      	cmp	r7, #0
 800f0e4:	d0a9      	beq.n	800f03a <__sflush_r+0x1a>
 800f0e6:	0793      	lsls	r3, r2, #30
 800f0e8:	680e      	ldr	r6, [r1, #0]
 800f0ea:	bf08      	it	eq
 800f0ec:	694b      	ldreq	r3, [r1, #20]
 800f0ee:	600f      	str	r7, [r1, #0]
 800f0f0:	bf18      	it	ne
 800f0f2:	2300      	movne	r3, #0
 800f0f4:	eba6 0807 	sub.w	r8, r6, r7
 800f0f8:	608b      	str	r3, [r1, #8]
 800f0fa:	f1b8 0f00 	cmp.w	r8, #0
 800f0fe:	dd9c      	ble.n	800f03a <__sflush_r+0x1a>
 800f100:	4643      	mov	r3, r8
 800f102:	463a      	mov	r2, r7
 800f104:	6a21      	ldr	r1, [r4, #32]
 800f106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f108:	4628      	mov	r0, r5
 800f10a:	47b0      	blx	r6
 800f10c:	2800      	cmp	r0, #0
 800f10e:	dc06      	bgt.n	800f11e <__sflush_r+0xfe>
 800f110:	89a3      	ldrh	r3, [r4, #12]
 800f112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f116:	81a3      	strh	r3, [r4, #12]
 800f118:	f04f 30ff 	mov.w	r0, #4294967295
 800f11c:	e78e      	b.n	800f03c <__sflush_r+0x1c>
 800f11e:	4407      	add	r7, r0
 800f120:	eba8 0800 	sub.w	r8, r8, r0
 800f124:	e7e9      	b.n	800f0fa <__sflush_r+0xda>
 800f126:	bf00      	nop
 800f128:	20400001 	.word	0x20400001

0800f12c <_fflush_r>:
 800f12c:	b538      	push	{r3, r4, r5, lr}
 800f12e:	690b      	ldr	r3, [r1, #16]
 800f130:	4605      	mov	r5, r0
 800f132:	460c      	mov	r4, r1
 800f134:	b1db      	cbz	r3, 800f16e <_fflush_r+0x42>
 800f136:	b118      	cbz	r0, 800f140 <_fflush_r+0x14>
 800f138:	6983      	ldr	r3, [r0, #24]
 800f13a:	b90b      	cbnz	r3, 800f140 <_fflush_r+0x14>
 800f13c:	f7ff faf6 	bl	800e72c <__sinit>
 800f140:	4b0c      	ldr	r3, [pc, #48]	; (800f174 <_fflush_r+0x48>)
 800f142:	429c      	cmp	r4, r3
 800f144:	d109      	bne.n	800f15a <_fflush_r+0x2e>
 800f146:	686c      	ldr	r4, [r5, #4]
 800f148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f14c:	b17b      	cbz	r3, 800f16e <_fflush_r+0x42>
 800f14e:	4621      	mov	r1, r4
 800f150:	4628      	mov	r0, r5
 800f152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f156:	f7ff bf63 	b.w	800f020 <__sflush_r>
 800f15a:	4b07      	ldr	r3, [pc, #28]	; (800f178 <_fflush_r+0x4c>)
 800f15c:	429c      	cmp	r4, r3
 800f15e:	d101      	bne.n	800f164 <_fflush_r+0x38>
 800f160:	68ac      	ldr	r4, [r5, #8]
 800f162:	e7f1      	b.n	800f148 <_fflush_r+0x1c>
 800f164:	4b05      	ldr	r3, [pc, #20]	; (800f17c <_fflush_r+0x50>)
 800f166:	429c      	cmp	r4, r3
 800f168:	bf08      	it	eq
 800f16a:	68ec      	ldreq	r4, [r5, #12]
 800f16c:	e7ec      	b.n	800f148 <_fflush_r+0x1c>
 800f16e:	2000      	movs	r0, #0
 800f170:	bd38      	pop	{r3, r4, r5, pc}
 800f172:	bf00      	nop
 800f174:	0800feec 	.word	0x0800feec
 800f178:	0800ff0c 	.word	0x0800ff0c
 800f17c:	0800fecc 	.word	0x0800fecc

0800f180 <_lseek_r>:
 800f180:	b538      	push	{r3, r4, r5, lr}
 800f182:	4c07      	ldr	r4, [pc, #28]	; (800f1a0 <_lseek_r+0x20>)
 800f184:	4605      	mov	r5, r0
 800f186:	4608      	mov	r0, r1
 800f188:	4611      	mov	r1, r2
 800f18a:	2200      	movs	r2, #0
 800f18c:	6022      	str	r2, [r4, #0]
 800f18e:	461a      	mov	r2, r3
 800f190:	f7fc fd58 	bl	800bc44 <_lseek>
 800f194:	1c43      	adds	r3, r0, #1
 800f196:	d102      	bne.n	800f19e <_lseek_r+0x1e>
 800f198:	6823      	ldr	r3, [r4, #0]
 800f19a:	b103      	cbz	r3, 800f19e <_lseek_r+0x1e>
 800f19c:	602b      	str	r3, [r5, #0]
 800f19e:	bd38      	pop	{r3, r4, r5, pc}
 800f1a0:	2000bfe0 	.word	0x2000bfe0

0800f1a4 <__swhatbuf_r>:
 800f1a4:	b570      	push	{r4, r5, r6, lr}
 800f1a6:	460e      	mov	r6, r1
 800f1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1ac:	2900      	cmp	r1, #0
 800f1ae:	b096      	sub	sp, #88	; 0x58
 800f1b0:	4614      	mov	r4, r2
 800f1b2:	461d      	mov	r5, r3
 800f1b4:	da07      	bge.n	800f1c6 <__swhatbuf_r+0x22>
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	602b      	str	r3, [r5, #0]
 800f1ba:	89b3      	ldrh	r3, [r6, #12]
 800f1bc:	061a      	lsls	r2, r3, #24
 800f1be:	d410      	bmi.n	800f1e2 <__swhatbuf_r+0x3e>
 800f1c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1c4:	e00e      	b.n	800f1e4 <__swhatbuf_r+0x40>
 800f1c6:	466a      	mov	r2, sp
 800f1c8:	f000 f862 	bl	800f290 <_fstat_r>
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	dbf2      	blt.n	800f1b6 <__swhatbuf_r+0x12>
 800f1d0:	9a01      	ldr	r2, [sp, #4]
 800f1d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f1d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f1da:	425a      	negs	r2, r3
 800f1dc:	415a      	adcs	r2, r3
 800f1de:	602a      	str	r2, [r5, #0]
 800f1e0:	e7ee      	b.n	800f1c0 <__swhatbuf_r+0x1c>
 800f1e2:	2340      	movs	r3, #64	; 0x40
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	6023      	str	r3, [r4, #0]
 800f1e8:	b016      	add	sp, #88	; 0x58
 800f1ea:	bd70      	pop	{r4, r5, r6, pc}

0800f1ec <__smakebuf_r>:
 800f1ec:	898b      	ldrh	r3, [r1, #12]
 800f1ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1f0:	079d      	lsls	r5, r3, #30
 800f1f2:	4606      	mov	r6, r0
 800f1f4:	460c      	mov	r4, r1
 800f1f6:	d507      	bpl.n	800f208 <__smakebuf_r+0x1c>
 800f1f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f1fc:	6023      	str	r3, [r4, #0]
 800f1fe:	6123      	str	r3, [r4, #16]
 800f200:	2301      	movs	r3, #1
 800f202:	6163      	str	r3, [r4, #20]
 800f204:	b002      	add	sp, #8
 800f206:	bd70      	pop	{r4, r5, r6, pc}
 800f208:	ab01      	add	r3, sp, #4
 800f20a:	466a      	mov	r2, sp
 800f20c:	f7ff ffca 	bl	800f1a4 <__swhatbuf_r>
 800f210:	9900      	ldr	r1, [sp, #0]
 800f212:	4605      	mov	r5, r0
 800f214:	4630      	mov	r0, r6
 800f216:	f7ff f9c7 	bl	800e5a8 <_malloc_r>
 800f21a:	b948      	cbnz	r0, 800f230 <__smakebuf_r+0x44>
 800f21c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f220:	059a      	lsls	r2, r3, #22
 800f222:	d4ef      	bmi.n	800f204 <__smakebuf_r+0x18>
 800f224:	f023 0303 	bic.w	r3, r3, #3
 800f228:	f043 0302 	orr.w	r3, r3, #2
 800f22c:	81a3      	strh	r3, [r4, #12]
 800f22e:	e7e3      	b.n	800f1f8 <__smakebuf_r+0xc>
 800f230:	4b0d      	ldr	r3, [pc, #52]	; (800f268 <__smakebuf_r+0x7c>)
 800f232:	62b3      	str	r3, [r6, #40]	; 0x28
 800f234:	89a3      	ldrh	r3, [r4, #12]
 800f236:	6020      	str	r0, [r4, #0]
 800f238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f23c:	81a3      	strh	r3, [r4, #12]
 800f23e:	9b00      	ldr	r3, [sp, #0]
 800f240:	6163      	str	r3, [r4, #20]
 800f242:	9b01      	ldr	r3, [sp, #4]
 800f244:	6120      	str	r0, [r4, #16]
 800f246:	b15b      	cbz	r3, 800f260 <__smakebuf_r+0x74>
 800f248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f24c:	4630      	mov	r0, r6
 800f24e:	f000 f831 	bl	800f2b4 <_isatty_r>
 800f252:	b128      	cbz	r0, 800f260 <__smakebuf_r+0x74>
 800f254:	89a3      	ldrh	r3, [r4, #12]
 800f256:	f023 0303 	bic.w	r3, r3, #3
 800f25a:	f043 0301 	orr.w	r3, r3, #1
 800f25e:	81a3      	strh	r3, [r4, #12]
 800f260:	89a3      	ldrh	r3, [r4, #12]
 800f262:	431d      	orrs	r5, r3
 800f264:	81a5      	strh	r5, [r4, #12]
 800f266:	e7cd      	b.n	800f204 <__smakebuf_r+0x18>
 800f268:	0800e6f5 	.word	0x0800e6f5

0800f26c <_read_r>:
 800f26c:	b538      	push	{r3, r4, r5, lr}
 800f26e:	4c07      	ldr	r4, [pc, #28]	; (800f28c <_read_r+0x20>)
 800f270:	4605      	mov	r5, r0
 800f272:	4608      	mov	r0, r1
 800f274:	4611      	mov	r1, r2
 800f276:	2200      	movs	r2, #0
 800f278:	6022      	str	r2, [r4, #0]
 800f27a:	461a      	mov	r2, r3
 800f27c:	f7fc fc82 	bl	800bb84 <_read>
 800f280:	1c43      	adds	r3, r0, #1
 800f282:	d102      	bne.n	800f28a <_read_r+0x1e>
 800f284:	6823      	ldr	r3, [r4, #0]
 800f286:	b103      	cbz	r3, 800f28a <_read_r+0x1e>
 800f288:	602b      	str	r3, [r5, #0]
 800f28a:	bd38      	pop	{r3, r4, r5, pc}
 800f28c:	2000bfe0 	.word	0x2000bfe0

0800f290 <_fstat_r>:
 800f290:	b538      	push	{r3, r4, r5, lr}
 800f292:	4c07      	ldr	r4, [pc, #28]	; (800f2b0 <_fstat_r+0x20>)
 800f294:	2300      	movs	r3, #0
 800f296:	4605      	mov	r5, r0
 800f298:	4608      	mov	r0, r1
 800f29a:	4611      	mov	r1, r2
 800f29c:	6023      	str	r3, [r4, #0]
 800f29e:	f7fc fcb6 	bl	800bc0e <_fstat>
 800f2a2:	1c43      	adds	r3, r0, #1
 800f2a4:	d102      	bne.n	800f2ac <_fstat_r+0x1c>
 800f2a6:	6823      	ldr	r3, [r4, #0]
 800f2a8:	b103      	cbz	r3, 800f2ac <_fstat_r+0x1c>
 800f2aa:	602b      	str	r3, [r5, #0]
 800f2ac:	bd38      	pop	{r3, r4, r5, pc}
 800f2ae:	bf00      	nop
 800f2b0:	2000bfe0 	.word	0x2000bfe0

0800f2b4 <_isatty_r>:
 800f2b4:	b538      	push	{r3, r4, r5, lr}
 800f2b6:	4c06      	ldr	r4, [pc, #24]	; (800f2d0 <_isatty_r+0x1c>)
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	4608      	mov	r0, r1
 800f2be:	6023      	str	r3, [r4, #0]
 800f2c0:	f7fc fcb5 	bl	800bc2e <_isatty>
 800f2c4:	1c43      	adds	r3, r0, #1
 800f2c6:	d102      	bne.n	800f2ce <_isatty_r+0x1a>
 800f2c8:	6823      	ldr	r3, [r4, #0]
 800f2ca:	b103      	cbz	r3, 800f2ce <_isatty_r+0x1a>
 800f2cc:	602b      	str	r3, [r5, #0]
 800f2ce:	bd38      	pop	{r3, r4, r5, pc}
 800f2d0:	2000bfe0 	.word	0x2000bfe0

0800f2d4 <roundf>:
 800f2d4:	ee10 0a10 	vmov	r0, s0
 800f2d8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f2dc:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800f2e0:	2a16      	cmp	r2, #22
 800f2e2:	dc15      	bgt.n	800f310 <roundf+0x3c>
 800f2e4:	2a00      	cmp	r2, #0
 800f2e6:	da08      	bge.n	800f2fa <roundf+0x26>
 800f2e8:	3201      	adds	r2, #1
 800f2ea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800f2ee:	d101      	bne.n	800f2f4 <roundf+0x20>
 800f2f0:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800f2f4:	ee00 3a10 	vmov	s0, r3
 800f2f8:	4770      	bx	lr
 800f2fa:	4908      	ldr	r1, [pc, #32]	; (800f31c <roundf+0x48>)
 800f2fc:	4111      	asrs	r1, r2
 800f2fe:	4208      	tst	r0, r1
 800f300:	d0fa      	beq.n	800f2f8 <roundf+0x24>
 800f302:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f306:	4113      	asrs	r3, r2
 800f308:	4403      	add	r3, r0
 800f30a:	ea23 0301 	bic.w	r3, r3, r1
 800f30e:	e7f1      	b.n	800f2f4 <roundf+0x20>
 800f310:	2a80      	cmp	r2, #128	; 0x80
 800f312:	d1f1      	bne.n	800f2f8 <roundf+0x24>
 800f314:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop
 800f31c:	007fffff 	.word	0x007fffff

0800f320 <powf>:
 800f320:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800f324:	ed2d 8b04 	vpush	{d8-d9}
 800f328:	4ca7      	ldr	r4, [pc, #668]	; (800f5c8 <powf+0x2a8>)
 800f32a:	b08a      	sub	sp, #40	; 0x28
 800f32c:	eef0 8a40 	vmov.f32	s17, s0
 800f330:	eeb0 8a60 	vmov.f32	s16, s1
 800f334:	f000 f958 	bl	800f5e8 <__ieee754_powf>
 800f338:	f994 5000 	ldrsb.w	r5, [r4]
 800f33c:	1c6b      	adds	r3, r5, #1
 800f33e:	eeb0 9a40 	vmov.f32	s18, s0
 800f342:	4626      	mov	r6, r4
 800f344:	d05f      	beq.n	800f406 <powf+0xe6>
 800f346:	eeb4 8a48 	vcmp.f32	s16, s16
 800f34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f34e:	d65a      	bvs.n	800f406 <powf+0xe6>
 800f350:	eef4 8a68 	vcmp.f32	s17, s17
 800f354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f358:	d721      	bvc.n	800f39e <powf+0x7e>
 800f35a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f362:	d150      	bne.n	800f406 <powf+0xe6>
 800f364:	2301      	movs	r3, #1
 800f366:	9300      	str	r3, [sp, #0]
 800f368:	4b98      	ldr	r3, [pc, #608]	; (800f5cc <powf+0x2ac>)
 800f36a:	9301      	str	r3, [sp, #4]
 800f36c:	ee18 0a90 	vmov	r0, s17
 800f370:	2300      	movs	r3, #0
 800f372:	9308      	str	r3, [sp, #32]
 800f374:	f7f1 f900 	bl	8000578 <__aeabi_f2d>
 800f378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f37c:	ee18 0a10 	vmov	r0, s16
 800f380:	f7f1 f8fa 	bl	8000578 <__aeabi_f2d>
 800f384:	4b92      	ldr	r3, [pc, #584]	; (800f5d0 <powf+0x2b0>)
 800f386:	2200      	movs	r2, #0
 800f388:	2d02      	cmp	r5, #2
 800f38a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f38e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f392:	d032      	beq.n	800f3fa <powf+0xda>
 800f394:	4668      	mov	r0, sp
 800f396:	f000 fbea 	bl	800fb6e <matherr>
 800f39a:	bb40      	cbnz	r0, 800f3ee <powf+0xce>
 800f39c:	e065      	b.n	800f46a <powf+0x14a>
 800f39e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800f5d4 <powf+0x2b4>
 800f3a2:	eef4 8a69 	vcmp.f32	s17, s19
 800f3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3aa:	d163      	bne.n	800f474 <powf+0x154>
 800f3ac:	eeb4 8a69 	vcmp.f32	s16, s19
 800f3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b4:	d12e      	bne.n	800f414 <powf+0xf4>
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	9300      	str	r3, [sp, #0]
 800f3ba:	4b84      	ldr	r3, [pc, #528]	; (800f5cc <powf+0x2ac>)
 800f3bc:	9301      	str	r3, [sp, #4]
 800f3be:	ee18 0a90 	vmov	r0, s17
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	9308      	str	r3, [sp, #32]
 800f3c6:	f7f1 f8d7 	bl	8000578 <__aeabi_f2d>
 800f3ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3ce:	ee18 0a10 	vmov	r0, s16
 800f3d2:	f7f1 f8d1 	bl	8000578 <__aeabi_f2d>
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	2300      	movs	r3, #0
 800f3da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f3e2:	2d00      	cmp	r5, #0
 800f3e4:	d0d6      	beq.n	800f394 <powf+0x74>
 800f3e6:	4b7a      	ldr	r3, [pc, #488]	; (800f5d0 <powf+0x2b0>)
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f3ee:	9b08      	ldr	r3, [sp, #32]
 800f3f0:	b11b      	cbz	r3, 800f3fa <powf+0xda>
 800f3f2:	f7ff f83d 	bl	800e470 <__errno>
 800f3f6:	9b08      	ldr	r3, [sp, #32]
 800f3f8:	6003      	str	r3, [r0, #0]
 800f3fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f3fe:	f7f1 f913 	bl	8000628 <__aeabi_d2f>
 800f402:	ee09 0a10 	vmov	s18, r0
 800f406:	eeb0 0a49 	vmov.f32	s0, s18
 800f40a:	b00a      	add	sp, #40	; 0x28
 800f40c:	ecbd 8b04 	vpop	{d8-d9}
 800f410:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800f414:	eeb0 0a48 	vmov.f32	s0, s16
 800f418:	f000 fbb2 	bl	800fb80 <finitef>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	d0f2      	beq.n	800f406 <powf+0xe6>
 800f420:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f428:	d5ed      	bpl.n	800f406 <powf+0xe6>
 800f42a:	2301      	movs	r3, #1
 800f42c:	9300      	str	r3, [sp, #0]
 800f42e:	4b67      	ldr	r3, [pc, #412]	; (800f5cc <powf+0x2ac>)
 800f430:	9301      	str	r3, [sp, #4]
 800f432:	ee18 0a90 	vmov	r0, s17
 800f436:	2300      	movs	r3, #0
 800f438:	9308      	str	r3, [sp, #32]
 800f43a:	f7f1 f89d 	bl	8000578 <__aeabi_f2d>
 800f43e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f442:	ee18 0a10 	vmov	r0, s16
 800f446:	f7f1 f897 	bl	8000578 <__aeabi_f2d>
 800f44a:	f994 3000 	ldrsb.w	r3, [r4]
 800f44e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f452:	b923      	cbnz	r3, 800f45e <powf+0x13e>
 800f454:	2200      	movs	r2, #0
 800f456:	2300      	movs	r3, #0
 800f458:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f45c:	e79a      	b.n	800f394 <powf+0x74>
 800f45e:	495e      	ldr	r1, [pc, #376]	; (800f5d8 <powf+0x2b8>)
 800f460:	2000      	movs	r0, #0
 800f462:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f466:	2b02      	cmp	r3, #2
 800f468:	d194      	bne.n	800f394 <powf+0x74>
 800f46a:	f7ff f801 	bl	800e470 <__errno>
 800f46e:	2321      	movs	r3, #33	; 0x21
 800f470:	6003      	str	r3, [r0, #0]
 800f472:	e7bc      	b.n	800f3ee <powf+0xce>
 800f474:	f000 fb84 	bl	800fb80 <finitef>
 800f478:	4605      	mov	r5, r0
 800f47a:	2800      	cmp	r0, #0
 800f47c:	d173      	bne.n	800f566 <powf+0x246>
 800f47e:	eeb0 0a68 	vmov.f32	s0, s17
 800f482:	f000 fb7d 	bl	800fb80 <finitef>
 800f486:	2800      	cmp	r0, #0
 800f488:	d06d      	beq.n	800f566 <powf+0x246>
 800f48a:	eeb0 0a48 	vmov.f32	s0, s16
 800f48e:	f000 fb77 	bl	800fb80 <finitef>
 800f492:	2800      	cmp	r0, #0
 800f494:	d067      	beq.n	800f566 <powf+0x246>
 800f496:	ee18 0a90 	vmov	r0, s17
 800f49a:	f7f1 f86d 	bl	8000578 <__aeabi_f2d>
 800f49e:	4680      	mov	r8, r0
 800f4a0:	ee18 0a10 	vmov	r0, s16
 800f4a4:	4689      	mov	r9, r1
 800f4a6:	f7f1 f867 	bl	8000578 <__aeabi_f2d>
 800f4aa:	eeb4 9a49 	vcmp.f32	s18, s18
 800f4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b2:	f994 4000 	ldrsb.w	r4, [r4]
 800f4b6:	4b45      	ldr	r3, [pc, #276]	; (800f5cc <powf+0x2ac>)
 800f4b8:	d713      	bvc.n	800f4e2 <powf+0x1c2>
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	e9cd 2300 	strd	r2, r3, [sp]
 800f4c0:	9508      	str	r5, [sp, #32]
 800f4c2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f4c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f4ca:	2c00      	cmp	r4, #0
 800f4cc:	d0c2      	beq.n	800f454 <powf+0x134>
 800f4ce:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800f4d2:	ee17 0a90 	vmov	r0, s15
 800f4d6:	f7f1 f84f 	bl	8000578 <__aeabi_f2d>
 800f4da:	2c02      	cmp	r4, #2
 800f4dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f4e0:	e7c2      	b.n	800f468 <powf+0x148>
 800f4e2:	2203      	movs	r2, #3
 800f4e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f4e8:	e9cd 2300 	strd	r2, r3, [sp]
 800f4ec:	9508      	str	r5, [sp, #32]
 800f4ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f4f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f4f6:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f4fa:	b9fc      	cbnz	r4, 800f53c <powf+0x21c>
 800f4fc:	4b37      	ldr	r3, [pc, #220]	; (800f5dc <powf+0x2bc>)
 800f4fe:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800f502:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f50e:	d553      	bpl.n	800f5b8 <powf+0x298>
 800f510:	eeb0 0a48 	vmov.f32	s0, s16
 800f514:	f000 fb44 	bl	800fba0 <rintf>
 800f518:	eeb4 0a48 	vcmp.f32	s0, s16
 800f51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f520:	d004      	beq.n	800f52c <powf+0x20c>
 800f522:	4b2f      	ldr	r3, [pc, #188]	; (800f5e0 <powf+0x2c0>)
 800f524:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f528:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f52c:	f996 3000 	ldrsb.w	r3, [r6]
 800f530:	2b02      	cmp	r3, #2
 800f532:	d141      	bne.n	800f5b8 <powf+0x298>
 800f534:	f7fe ff9c 	bl	800e470 <__errno>
 800f538:	2322      	movs	r3, #34	; 0x22
 800f53a:	e799      	b.n	800f470 <powf+0x150>
 800f53c:	4b29      	ldr	r3, [pc, #164]	; (800f5e4 <powf+0x2c4>)
 800f53e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800f542:	2200      	movs	r2, #0
 800f544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f548:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f54c:	d5ee      	bpl.n	800f52c <powf+0x20c>
 800f54e:	eeb0 0a48 	vmov.f32	s0, s16
 800f552:	f000 fb25 	bl	800fba0 <rintf>
 800f556:	eeb4 0a48 	vcmp.f32	s0, s16
 800f55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f55e:	d0e5      	beq.n	800f52c <powf+0x20c>
 800f560:	2200      	movs	r2, #0
 800f562:	4b1d      	ldr	r3, [pc, #116]	; (800f5d8 <powf+0x2b8>)
 800f564:	e7e0      	b.n	800f528 <powf+0x208>
 800f566:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f56e:	f47f af4a 	bne.w	800f406 <powf+0xe6>
 800f572:	eeb0 0a68 	vmov.f32	s0, s17
 800f576:	f000 fb03 	bl	800fb80 <finitef>
 800f57a:	2800      	cmp	r0, #0
 800f57c:	f43f af43 	beq.w	800f406 <powf+0xe6>
 800f580:	eeb0 0a48 	vmov.f32	s0, s16
 800f584:	f000 fafc 	bl	800fb80 <finitef>
 800f588:	2800      	cmp	r0, #0
 800f58a:	f43f af3c 	beq.w	800f406 <powf+0xe6>
 800f58e:	2304      	movs	r3, #4
 800f590:	9300      	str	r3, [sp, #0]
 800f592:	4b0e      	ldr	r3, [pc, #56]	; (800f5cc <powf+0x2ac>)
 800f594:	9301      	str	r3, [sp, #4]
 800f596:	ee18 0a90 	vmov	r0, s17
 800f59a:	2300      	movs	r3, #0
 800f59c:	9308      	str	r3, [sp, #32]
 800f59e:	f7f0 ffeb 	bl	8000578 <__aeabi_f2d>
 800f5a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5a6:	ee18 0a10 	vmov	r0, s16
 800f5aa:	f7f0 ffe5 	bl	8000578 <__aeabi_f2d>
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	e7b7      	b.n	800f528 <powf+0x208>
 800f5b8:	4668      	mov	r0, sp
 800f5ba:	f000 fad8 	bl	800fb6e <matherr>
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	f47f af15 	bne.w	800f3ee <powf+0xce>
 800f5c4:	e7b6      	b.n	800f534 <powf+0x214>
 800f5c6:	bf00      	nop
 800f5c8:	200006b0 	.word	0x200006b0
 800f5cc:	0800ff5f 	.word	0x0800ff5f
 800f5d0:	3ff00000 	.word	0x3ff00000
 800f5d4:	00000000 	.word	0x00000000
 800f5d8:	fff00000 	.word	0xfff00000
 800f5dc:	47efffff 	.word	0x47efffff
 800f5e0:	c7efffff 	.word	0xc7efffff
 800f5e4:	7ff00000 	.word	0x7ff00000

0800f5e8 <__ieee754_powf>:
 800f5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ec:	ee10 5a90 	vmov	r5, s1
 800f5f0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800f5f4:	ed2d 8b02 	vpush	{d8}
 800f5f8:	eeb0 8a40 	vmov.f32	s16, s0
 800f5fc:	eef0 8a60 	vmov.f32	s17, s1
 800f600:	f000 8293 	beq.w	800fb2a <__ieee754_powf+0x542>
 800f604:	ee10 8a10 	vmov	r8, s0
 800f608:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800f60c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f610:	dc06      	bgt.n	800f620 <__ieee754_powf+0x38>
 800f612:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f616:	dd0a      	ble.n	800f62e <__ieee754_powf+0x46>
 800f618:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f61c:	f000 8285 	beq.w	800fb2a <__ieee754_powf+0x542>
 800f620:	ecbd 8b02 	vpop	{d8}
 800f624:	48d9      	ldr	r0, [pc, #868]	; (800f98c <__ieee754_powf+0x3a4>)
 800f626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f62a:	f000 bab3 	b.w	800fb94 <nanf>
 800f62e:	f1b8 0f00 	cmp.w	r8, #0
 800f632:	da1d      	bge.n	800f670 <__ieee754_powf+0x88>
 800f634:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800f638:	da2c      	bge.n	800f694 <__ieee754_powf+0xac>
 800f63a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f63e:	db30      	blt.n	800f6a2 <__ieee754_powf+0xba>
 800f640:	15fb      	asrs	r3, r7, #23
 800f642:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f646:	fa47 f603 	asr.w	r6, r7, r3
 800f64a:	fa06 f303 	lsl.w	r3, r6, r3
 800f64e:	42bb      	cmp	r3, r7
 800f650:	d127      	bne.n	800f6a2 <__ieee754_powf+0xba>
 800f652:	f006 0601 	and.w	r6, r6, #1
 800f656:	f1c6 0602 	rsb	r6, r6, #2
 800f65a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f65e:	d122      	bne.n	800f6a6 <__ieee754_powf+0xbe>
 800f660:	2d00      	cmp	r5, #0
 800f662:	f280 8268 	bge.w	800fb36 <__ieee754_powf+0x54e>
 800f666:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f66a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f66e:	e00d      	b.n	800f68c <__ieee754_powf+0xa4>
 800f670:	2600      	movs	r6, #0
 800f672:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f676:	d1f0      	bne.n	800f65a <__ieee754_powf+0x72>
 800f678:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f67c:	f000 8255 	beq.w	800fb2a <__ieee754_powf+0x542>
 800f680:	dd0a      	ble.n	800f698 <__ieee754_powf+0xb0>
 800f682:	2d00      	cmp	r5, #0
 800f684:	f280 8254 	bge.w	800fb30 <__ieee754_powf+0x548>
 800f688:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800f990 <__ieee754_powf+0x3a8>
 800f68c:	ecbd 8b02 	vpop	{d8}
 800f690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f694:	2602      	movs	r6, #2
 800f696:	e7ec      	b.n	800f672 <__ieee754_powf+0x8a>
 800f698:	2d00      	cmp	r5, #0
 800f69a:	daf5      	bge.n	800f688 <__ieee754_powf+0xa0>
 800f69c:	eeb1 0a68 	vneg.f32	s0, s17
 800f6a0:	e7f4      	b.n	800f68c <__ieee754_powf+0xa4>
 800f6a2:	2600      	movs	r6, #0
 800f6a4:	e7d9      	b.n	800f65a <__ieee754_powf+0x72>
 800f6a6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800f6aa:	d102      	bne.n	800f6b2 <__ieee754_powf+0xca>
 800f6ac:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f6b0:	e7ec      	b.n	800f68c <__ieee754_powf+0xa4>
 800f6b2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800f6b6:	eeb0 0a48 	vmov.f32	s0, s16
 800f6ba:	d108      	bne.n	800f6ce <__ieee754_powf+0xe6>
 800f6bc:	f1b8 0f00 	cmp.w	r8, #0
 800f6c0:	db05      	blt.n	800f6ce <__ieee754_powf+0xe6>
 800f6c2:	ecbd 8b02 	vpop	{d8}
 800f6c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ca:	f000 ba4d 	b.w	800fb68 <__ieee754_sqrtf>
 800f6ce:	f000 fa50 	bl	800fb72 <fabsf>
 800f6d2:	b124      	cbz	r4, 800f6de <__ieee754_powf+0xf6>
 800f6d4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800f6d8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f6dc:	d117      	bne.n	800f70e <__ieee754_powf+0x126>
 800f6de:	2d00      	cmp	r5, #0
 800f6e0:	bfbc      	itt	lt
 800f6e2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800f6e6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f6ea:	f1b8 0f00 	cmp.w	r8, #0
 800f6ee:	dacd      	bge.n	800f68c <__ieee754_powf+0xa4>
 800f6f0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800f6f4:	ea54 0306 	orrs.w	r3, r4, r6
 800f6f8:	d104      	bne.n	800f704 <__ieee754_powf+0x11c>
 800f6fa:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f6fe:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f702:	e7c3      	b.n	800f68c <__ieee754_powf+0xa4>
 800f704:	2e01      	cmp	r6, #1
 800f706:	d1c1      	bne.n	800f68c <__ieee754_powf+0xa4>
 800f708:	eeb1 0a40 	vneg.f32	s0, s0
 800f70c:	e7be      	b.n	800f68c <__ieee754_powf+0xa4>
 800f70e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800f712:	3801      	subs	r0, #1
 800f714:	ea56 0300 	orrs.w	r3, r6, r0
 800f718:	d104      	bne.n	800f724 <__ieee754_powf+0x13c>
 800f71a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f71e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f722:	e7b3      	b.n	800f68c <__ieee754_powf+0xa4>
 800f724:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800f728:	dd6d      	ble.n	800f806 <__ieee754_powf+0x21e>
 800f72a:	4b9a      	ldr	r3, [pc, #616]	; (800f994 <__ieee754_powf+0x3ac>)
 800f72c:	429c      	cmp	r4, r3
 800f72e:	dc06      	bgt.n	800f73e <__ieee754_powf+0x156>
 800f730:	2d00      	cmp	r5, #0
 800f732:	daa9      	bge.n	800f688 <__ieee754_powf+0xa0>
 800f734:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800f998 <__ieee754_powf+0x3b0>
 800f738:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f73c:	e7a6      	b.n	800f68c <__ieee754_powf+0xa4>
 800f73e:	4b97      	ldr	r3, [pc, #604]	; (800f99c <__ieee754_powf+0x3b4>)
 800f740:	429c      	cmp	r4, r3
 800f742:	dd02      	ble.n	800f74a <__ieee754_powf+0x162>
 800f744:	2d00      	cmp	r5, #0
 800f746:	dcf5      	bgt.n	800f734 <__ieee754_powf+0x14c>
 800f748:	e79e      	b.n	800f688 <__ieee754_powf+0xa0>
 800f74a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f74e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f752:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800f9a0 <__ieee754_powf+0x3b8>
 800f756:	eef1 6a40 	vneg.f32	s13, s0
 800f75a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800f75e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f762:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f766:	eee7 7a40 	vfms.f32	s15, s14, s0
 800f76a:	ee60 0a00 	vmul.f32	s1, s0, s0
 800f76e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800f9a4 <__ieee754_powf+0x3bc>
 800f772:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800f776:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800f9a8 <__ieee754_powf+0x3c0>
 800f77a:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800f77e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f782:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800f9ac <__ieee754_powf+0x3c4>
 800f786:	eeb0 6a67 	vmov.f32	s12, s15
 800f78a:	eea0 6a07 	vfma.f32	s12, s0, s14
 800f78e:	ee16 3a10 	vmov	r3, s12
 800f792:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f796:	f023 030f 	bic.w	r3, r3, #15
 800f79a:	ee00 3a90 	vmov	s1, r3
 800f79e:	eee6 0a87 	vfma.f32	s1, s13, s14
 800f7a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f7a6:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800f7aa:	f025 050f 	bic.w	r5, r5, #15
 800f7ae:	ee07 5a10 	vmov	s14, r5
 800f7b2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f7b6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f7ba:	ee07 3a90 	vmov	s15, r3
 800f7be:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f7c2:	3e01      	subs	r6, #1
 800f7c4:	ea56 0200 	orrs.w	r2, r6, r0
 800f7c8:	ee07 5a10 	vmov	s14, r5
 800f7cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7d0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f7d4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f7d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f7dc:	ee17 4a10 	vmov	r4, s14
 800f7e0:	bf08      	it	eq
 800f7e2:	eeb0 8a40 	vmoveq.f32	s16, s0
 800f7e6:	2c00      	cmp	r4, #0
 800f7e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f7ec:	f340 8184 	ble.w	800faf8 <__ieee754_powf+0x510>
 800f7f0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800f7f4:	f340 80fc 	ble.w	800f9f0 <__ieee754_powf+0x408>
 800f7f8:	eddf 7a67 	vldr	s15, [pc, #412]	; 800f998 <__ieee754_powf+0x3b0>
 800f7fc:	ee28 0a27 	vmul.f32	s0, s16, s15
 800f800:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f804:	e742      	b.n	800f68c <__ieee754_powf+0xa4>
 800f806:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800f80a:	bfbf      	itttt	lt
 800f80c:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800f9b0 <__ieee754_powf+0x3c8>
 800f810:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f814:	f06f 0217 	mvnlt.w	r2, #23
 800f818:	ee17 4a90 	vmovlt	r4, s15
 800f81c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800f820:	bfa8      	it	ge
 800f822:	2200      	movge	r2, #0
 800f824:	3b7f      	subs	r3, #127	; 0x7f
 800f826:	4413      	add	r3, r2
 800f828:	4a62      	ldr	r2, [pc, #392]	; (800f9b4 <__ieee754_powf+0x3cc>)
 800f82a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800f82e:	4294      	cmp	r4, r2
 800f830:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800f834:	dd06      	ble.n	800f844 <__ieee754_powf+0x25c>
 800f836:	4a60      	ldr	r2, [pc, #384]	; (800f9b8 <__ieee754_powf+0x3d0>)
 800f838:	4294      	cmp	r4, r2
 800f83a:	f340 80a5 	ble.w	800f988 <__ieee754_powf+0x3a0>
 800f83e:	3301      	adds	r3, #1
 800f840:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f844:	2400      	movs	r4, #0
 800f846:	4a5d      	ldr	r2, [pc, #372]	; (800f9bc <__ieee754_powf+0x3d4>)
 800f848:	00a7      	lsls	r7, r4, #2
 800f84a:	443a      	add	r2, r7
 800f84c:	ee07 1a90 	vmov	s15, r1
 800f850:	ed92 7a00 	vldr	s14, [r2]
 800f854:	4a5a      	ldr	r2, [pc, #360]	; (800f9c0 <__ieee754_powf+0x3d8>)
 800f856:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f85a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800f85e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800f862:	1049      	asrs	r1, r1, #1
 800f864:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800f868:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800f86c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800f870:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800f874:	ee06 1a10 	vmov	s12, r1
 800f878:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800f87c:	ee14 ca90 	vmov	ip, s9
 800f880:	ea02 0c0c 	and.w	ip, r2, ip
 800f884:	ee05 ca10 	vmov	s10, ip
 800f888:	eeb1 4a45 	vneg.f32	s8, s10
 800f88c:	eee4 5a06 	vfma.f32	s11, s8, s12
 800f890:	ee36 6a47 	vsub.f32	s12, s12, s14
 800f894:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800f9c4 <__ieee754_powf+0x3dc>
 800f898:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800f89c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800f8a0:	eee4 5a06 	vfma.f32	s11, s8, s12
 800f8a4:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800f8a8:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800f8ac:	eddf 5a46 	vldr	s11, [pc, #280]	; 800f9c8 <__ieee754_powf+0x3e0>
 800f8b0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f8b4:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f9cc <__ieee754_powf+0x3e4>
 800f8b8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f8bc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f9a0 <__ieee754_powf+0x3b8>
 800f8c0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f8c4:	eddf 5a42 	vldr	s11, [pc, #264]	; 800f9d0 <__ieee754_powf+0x3e8>
 800f8c8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f8cc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800f9d4 <__ieee754_powf+0x3ec>
 800f8d0:	ee75 6a24 	vadd.f32	s13, s10, s9
 800f8d4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f8d8:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f8dc:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800f8e0:	eef0 7a65 	vmov.f32	s15, s11
 800f8e4:	eee3 6a87 	vfma.f32	s13, s7, s14
 800f8e8:	eee5 7a05 	vfma.f32	s15, s10, s10
 800f8ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8f0:	ee17 1a90 	vmov	r1, s15
 800f8f4:	4011      	ands	r1, r2
 800f8f6:	ee07 1a90 	vmov	s15, r1
 800f8fa:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800f8fe:	eddf 5a36 	vldr	s11, [pc, #216]	; 800f9d8 <__ieee754_powf+0x3f0>
 800f902:	eea4 7a05 	vfma.f32	s14, s8, s10
 800f906:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f90a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f90e:	eea7 7a86 	vfma.f32	s14, s15, s12
 800f912:	eeb0 6a47 	vmov.f32	s12, s14
 800f916:	eea5 6a27 	vfma.f32	s12, s10, s15
 800f91a:	ee16 1a10 	vmov	r1, s12
 800f91e:	4011      	ands	r1, r2
 800f920:	ee06 1a90 	vmov	s13, r1
 800f924:	eee4 6a27 	vfma.f32	s13, s8, s15
 800f928:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800f9dc <__ieee754_powf+0x3f4>
 800f92c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f930:	ee06 1a10 	vmov	s12, r1
 800f934:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f938:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f9e0 <__ieee754_powf+0x3f8>
 800f93c:	4929      	ldr	r1, [pc, #164]	; (800f9e4 <__ieee754_powf+0x3fc>)
 800f93e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f942:	4439      	add	r1, r7
 800f944:	edd1 7a00 	vldr	s15, [r1]
 800f948:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f94c:	ee07 3a90 	vmov	s15, r3
 800f950:	eef0 0a47 	vmov.f32	s1, s14
 800f954:	4b24      	ldr	r3, [pc, #144]	; (800f9e8 <__ieee754_powf+0x400>)
 800f956:	eee6 0a25 	vfma.f32	s1, s12, s11
 800f95a:	443b      	add	r3, r7
 800f95c:	ed93 5a00 	vldr	s10, [r3]
 800f960:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f964:	ee70 0a85 	vadd.f32	s1, s1, s10
 800f968:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800f96c:	ee17 3a90 	vmov	r3, s15
 800f970:	4013      	ands	r3, r2
 800f972:	ee07 3a90 	vmov	s15, r3
 800f976:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f97a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f97e:	eee6 7a65 	vfms.f32	s15, s12, s11
 800f982:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f986:	e70e      	b.n	800f7a6 <__ieee754_powf+0x1be>
 800f988:	2401      	movs	r4, #1
 800f98a:	e75c      	b.n	800f846 <__ieee754_powf+0x25e>
 800f98c:	0800ff31 	.word	0x0800ff31
 800f990:	00000000 	.word	0x00000000
 800f994:	3f7ffff7 	.word	0x3f7ffff7
 800f998:	7149f2ca 	.word	0x7149f2ca
 800f99c:	3f800007 	.word	0x3f800007
 800f9a0:	3eaaaaab 	.word	0x3eaaaaab
 800f9a4:	36eca570 	.word	0x36eca570
 800f9a8:	3fb8aa3b 	.word	0x3fb8aa3b
 800f9ac:	3fb8aa00 	.word	0x3fb8aa00
 800f9b0:	4b800000 	.word	0x4b800000
 800f9b4:	001cc471 	.word	0x001cc471
 800f9b8:	005db3d6 	.word	0x005db3d6
 800f9bc:	0800ff64 	.word	0x0800ff64
 800f9c0:	fffff000 	.word	0xfffff000
 800f9c4:	3e6c3255 	.word	0x3e6c3255
 800f9c8:	3e53f142 	.word	0x3e53f142
 800f9cc:	3e8ba305 	.word	0x3e8ba305
 800f9d0:	3edb6db7 	.word	0x3edb6db7
 800f9d4:	3f19999a 	.word	0x3f19999a
 800f9d8:	3f763800 	.word	0x3f763800
 800f9dc:	3f76384f 	.word	0x3f76384f
 800f9e0:	369dc3a0 	.word	0x369dc3a0
 800f9e4:	0800ff74 	.word	0x0800ff74
 800f9e8:	0800ff6c 	.word	0x0800ff6c
 800f9ec:	3338aa3c 	.word	0x3338aa3c
 800f9f0:	f040 8092 	bne.w	800fb18 <__ieee754_powf+0x530>
 800f9f4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800f9ec <__ieee754_powf+0x404>
 800f9f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f9fc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800fa00:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fa04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa08:	f73f aef6 	bgt.w	800f7f8 <__ieee754_powf+0x210>
 800fa0c:	15db      	asrs	r3, r3, #23
 800fa0e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800fa12:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fa16:	4103      	asrs	r3, r0
 800fa18:	4423      	add	r3, r4
 800fa1a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fa1e:	4947      	ldr	r1, [pc, #284]	; (800fb3c <__ieee754_powf+0x554>)
 800fa20:	3a7f      	subs	r2, #127	; 0x7f
 800fa22:	4111      	asrs	r1, r2
 800fa24:	ea23 0101 	bic.w	r1, r3, r1
 800fa28:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800fa2c:	ee07 1a10 	vmov	s14, r1
 800fa30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800fa34:	f1c2 0217 	rsb	r2, r2, #23
 800fa38:	4110      	asrs	r0, r2
 800fa3a:	2c00      	cmp	r4, #0
 800fa3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa40:	bfb8      	it	lt
 800fa42:	4240      	neglt	r0, r0
 800fa44:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800fa48:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fb40 <__ieee754_powf+0x558>
 800fa4c:	ee17 3a10 	vmov	r3, s14
 800fa50:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800fa54:	f023 030f 	bic.w	r3, r3, #15
 800fa58:	ee07 3a10 	vmov	s14, r3
 800fa5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa60:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fa64:	eddf 7a37 	vldr	s15, [pc, #220]	; 800fb44 <__ieee754_powf+0x55c>
 800fa68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa6c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800fa70:	eddf 6a35 	vldr	s13, [pc, #212]	; 800fb48 <__ieee754_powf+0x560>
 800fa74:	eeb0 0a67 	vmov.f32	s0, s15
 800fa78:	eea7 0a26 	vfma.f32	s0, s14, s13
 800fa7c:	eeb0 6a40 	vmov.f32	s12, s0
 800fa80:	eea7 6a66 	vfms.f32	s12, s14, s13
 800fa84:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fa88:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fa8c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800fb4c <__ieee754_powf+0x564>
 800fa90:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800fb50 <__ieee754_powf+0x568>
 800fa94:	eea7 6a26 	vfma.f32	s12, s14, s13
 800fa98:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800fb54 <__ieee754_powf+0x56c>
 800fa9c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800faa0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800fb58 <__ieee754_powf+0x570>
 800faa4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800faa8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800fb5c <__ieee754_powf+0x574>
 800faac:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fab0:	eeb0 6a40 	vmov.f32	s12, s0
 800fab4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800fab8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fabc:	eeb0 7a46 	vmov.f32	s14, s12
 800fac0:	ee77 6a66 	vsub.f32	s13, s14, s13
 800fac4:	ee20 6a06 	vmul.f32	s12, s0, s12
 800fac8:	eee0 7a27 	vfma.f32	s15, s0, s15
 800facc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800fad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fad4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fad8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fadc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fae0:	ee10 3a10 	vmov	r3, s0
 800fae4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fae8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800faec:	da1a      	bge.n	800fb24 <__ieee754_powf+0x53c>
 800faee:	f000 f8b1 	bl	800fc54 <scalbnf>
 800faf2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800faf6:	e5c9      	b.n	800f68c <__ieee754_powf+0xa4>
 800faf8:	4a19      	ldr	r2, [pc, #100]	; (800fb60 <__ieee754_powf+0x578>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	dd02      	ble.n	800fb04 <__ieee754_powf+0x51c>
 800fafe:	eddf 7a19 	vldr	s15, [pc, #100]	; 800fb64 <__ieee754_powf+0x57c>
 800fb02:	e67b      	b.n	800f7fc <__ieee754_powf+0x214>
 800fb04:	d108      	bne.n	800fb18 <__ieee754_powf+0x530>
 800fb06:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb0a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb12:	f6ff af7b 	blt.w	800fa0c <__ieee754_powf+0x424>
 800fb16:	e7f2      	b.n	800fafe <__ieee754_powf+0x516>
 800fb18:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800fb1c:	f73f af76 	bgt.w	800fa0c <__ieee754_powf+0x424>
 800fb20:	2000      	movs	r0, #0
 800fb22:	e78f      	b.n	800fa44 <__ieee754_powf+0x45c>
 800fb24:	ee00 3a10 	vmov	s0, r3
 800fb28:	e7e3      	b.n	800faf2 <__ieee754_powf+0x50a>
 800fb2a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fb2e:	e5ad      	b.n	800f68c <__ieee754_powf+0xa4>
 800fb30:	eeb0 0a68 	vmov.f32	s0, s17
 800fb34:	e5aa      	b.n	800f68c <__ieee754_powf+0xa4>
 800fb36:	eeb0 0a48 	vmov.f32	s0, s16
 800fb3a:	e5a7      	b.n	800f68c <__ieee754_powf+0xa4>
 800fb3c:	007fffff 	.word	0x007fffff
 800fb40:	3f317218 	.word	0x3f317218
 800fb44:	35bfbe8c 	.word	0x35bfbe8c
 800fb48:	3f317200 	.word	0x3f317200
 800fb4c:	3331bb4c 	.word	0x3331bb4c
 800fb50:	b5ddea0e 	.word	0xb5ddea0e
 800fb54:	388ab355 	.word	0x388ab355
 800fb58:	bb360b61 	.word	0xbb360b61
 800fb5c:	3e2aaaab 	.word	0x3e2aaaab
 800fb60:	43160000 	.word	0x43160000
 800fb64:	0da24260 	.word	0x0da24260

0800fb68 <__ieee754_sqrtf>:
 800fb68:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fb6c:	4770      	bx	lr

0800fb6e <matherr>:
 800fb6e:	2000      	movs	r0, #0
 800fb70:	4770      	bx	lr

0800fb72 <fabsf>:
 800fb72:	ee10 3a10 	vmov	r3, s0
 800fb76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb7a:	ee00 3a10 	vmov	s0, r3
 800fb7e:	4770      	bx	lr

0800fb80 <finitef>:
 800fb80:	ee10 3a10 	vmov	r3, s0
 800fb84:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800fb88:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800fb8c:	bfac      	ite	ge
 800fb8e:	2000      	movge	r0, #0
 800fb90:	2001      	movlt	r0, #1
 800fb92:	4770      	bx	lr

0800fb94 <nanf>:
 800fb94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fb9c <nanf+0x8>
 800fb98:	4770      	bx	lr
 800fb9a:	bf00      	nop
 800fb9c:	7fc00000 	.word	0x7fc00000

0800fba0 <rintf>:
 800fba0:	b513      	push	{r0, r1, r4, lr}
 800fba2:	ee10 1a10 	vmov	r1, s0
 800fba6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fbaa:	0ddc      	lsrs	r4, r3, #23
 800fbac:	3c7f      	subs	r4, #127	; 0x7f
 800fbae:	2c16      	cmp	r4, #22
 800fbb0:	dc46      	bgt.n	800fc40 <rintf+0xa0>
 800fbb2:	b32b      	cbz	r3, 800fc00 <rintf+0x60>
 800fbb4:	2c00      	cmp	r4, #0
 800fbb6:	ee10 2a10 	vmov	r2, s0
 800fbba:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800fbbe:	da21      	bge.n	800fc04 <rintf+0x64>
 800fbc0:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800fbc4:	425b      	negs	r3, r3
 800fbc6:	4a21      	ldr	r2, [pc, #132]	; (800fc4c <rintf+0xac>)
 800fbc8:	0a5b      	lsrs	r3, r3, #9
 800fbca:	0d09      	lsrs	r1, r1, #20
 800fbcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fbd0:	0509      	lsls	r1, r1, #20
 800fbd2:	430b      	orrs	r3, r1
 800fbd4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800fbd8:	ee07 3a90 	vmov	s15, r3
 800fbdc:	edd2 6a00 	vldr	s13, [r2]
 800fbe0:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800fbe4:	ed8d 7a01 	vstr	s14, [sp, #4]
 800fbe8:	eddd 7a01 	vldr	s15, [sp, #4]
 800fbec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fbf0:	ee17 3a90 	vmov	r3, s15
 800fbf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fbf8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800fbfc:	ee00 3a10 	vmov	s0, r3
 800fc00:	b002      	add	sp, #8
 800fc02:	bd10      	pop	{r4, pc}
 800fc04:	4b12      	ldr	r3, [pc, #72]	; (800fc50 <rintf+0xb0>)
 800fc06:	4123      	asrs	r3, r4
 800fc08:	4219      	tst	r1, r3
 800fc0a:	d0f9      	beq.n	800fc00 <rintf+0x60>
 800fc0c:	085b      	lsrs	r3, r3, #1
 800fc0e:	4219      	tst	r1, r3
 800fc10:	d006      	beq.n	800fc20 <rintf+0x80>
 800fc12:	ea21 0203 	bic.w	r2, r1, r3
 800fc16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fc1a:	fa43 f404 	asr.w	r4, r3, r4
 800fc1e:	4322      	orrs	r2, r4
 800fc20:	4b0a      	ldr	r3, [pc, #40]	; (800fc4c <rintf+0xac>)
 800fc22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fc26:	ed90 7a00 	vldr	s14, [r0]
 800fc2a:	ee07 2a90 	vmov	s15, r2
 800fc2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fc32:	edcd 7a01 	vstr	s15, [sp, #4]
 800fc36:	ed9d 0a01 	vldr	s0, [sp, #4]
 800fc3a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fc3e:	e7df      	b.n	800fc00 <rintf+0x60>
 800fc40:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fc44:	d3dc      	bcc.n	800fc00 <rintf+0x60>
 800fc46:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fc4a:	e7d9      	b.n	800fc00 <rintf+0x60>
 800fc4c:	0800ff7c 	.word	0x0800ff7c
 800fc50:	007fffff 	.word	0x007fffff

0800fc54 <scalbnf>:
 800fc54:	b508      	push	{r3, lr}
 800fc56:	ee10 2a10 	vmov	r2, s0
 800fc5a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800fc5e:	ed2d 8b02 	vpush	{d8}
 800fc62:	eef0 0a40 	vmov.f32	s1, s0
 800fc66:	d004      	beq.n	800fc72 <scalbnf+0x1e>
 800fc68:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fc6c:	d306      	bcc.n	800fc7c <scalbnf+0x28>
 800fc6e:	ee70 0a00 	vadd.f32	s1, s0, s0
 800fc72:	ecbd 8b02 	vpop	{d8}
 800fc76:	eeb0 0a60 	vmov.f32	s0, s1
 800fc7a:	bd08      	pop	{r3, pc}
 800fc7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fc80:	d21c      	bcs.n	800fcbc <scalbnf+0x68>
 800fc82:	4b1f      	ldr	r3, [pc, #124]	; (800fd00 <scalbnf+0xac>)
 800fc84:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fd04 <scalbnf+0xb0>
 800fc88:	4298      	cmp	r0, r3
 800fc8a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800fc8e:	db10      	blt.n	800fcb2 <scalbnf+0x5e>
 800fc90:	ee10 2a90 	vmov	r2, s1
 800fc94:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800fc98:	3b19      	subs	r3, #25
 800fc9a:	4403      	add	r3, r0
 800fc9c:	2bfe      	cmp	r3, #254	; 0xfe
 800fc9e:	dd0f      	ble.n	800fcc0 <scalbnf+0x6c>
 800fca0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800fd08 <scalbnf+0xb4>
 800fca4:	eeb0 0a48 	vmov.f32	s0, s16
 800fca8:	f000 f834 	bl	800fd14 <copysignf>
 800fcac:	ee60 0a08 	vmul.f32	s1, s0, s16
 800fcb0:	e7df      	b.n	800fc72 <scalbnf+0x1e>
 800fcb2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800fd0c <scalbnf+0xb8>
 800fcb6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800fcba:	e7da      	b.n	800fc72 <scalbnf+0x1e>
 800fcbc:	0ddb      	lsrs	r3, r3, #23
 800fcbe:	e7ec      	b.n	800fc9a <scalbnf+0x46>
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	dd06      	ble.n	800fcd2 <scalbnf+0x7e>
 800fcc4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800fcc8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800fccc:	ee00 3a90 	vmov	s1, r3
 800fcd0:	e7cf      	b.n	800fc72 <scalbnf+0x1e>
 800fcd2:	f113 0f16 	cmn.w	r3, #22
 800fcd6:	da06      	bge.n	800fce6 <scalbnf+0x92>
 800fcd8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fcdc:	4298      	cmp	r0, r3
 800fcde:	dcdf      	bgt.n	800fca0 <scalbnf+0x4c>
 800fce0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800fd0c <scalbnf+0xb8>
 800fce4:	e7de      	b.n	800fca4 <scalbnf+0x50>
 800fce6:	3319      	adds	r3, #25
 800fce8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800fcec:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800fcf0:	eddf 7a07 	vldr	s15, [pc, #28]	; 800fd10 <scalbnf+0xbc>
 800fcf4:	ee07 3a10 	vmov	s14, r3
 800fcf8:	ee67 0a27 	vmul.f32	s1, s14, s15
 800fcfc:	e7b9      	b.n	800fc72 <scalbnf+0x1e>
 800fcfe:	bf00      	nop
 800fd00:	ffff3cb0 	.word	0xffff3cb0
 800fd04:	4c000000 	.word	0x4c000000
 800fd08:	7149f2ca 	.word	0x7149f2ca
 800fd0c:	0da24260 	.word	0x0da24260
 800fd10:	33000000 	.word	0x33000000

0800fd14 <copysignf>:
 800fd14:	ee10 3a10 	vmov	r3, s0
 800fd18:	ee10 2a90 	vmov	r2, s1
 800fd1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd20:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800fd24:	4313      	orrs	r3, r2
 800fd26:	ee00 3a10 	vmov	s0, r3
 800fd2a:	4770      	bx	lr

0800fd2c <_init>:
 800fd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd2e:	bf00      	nop
 800fd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd32:	bc08      	pop	{r3}
 800fd34:	469e      	mov	lr, r3
 800fd36:	4770      	bx	lr

0800fd38 <_fini>:
 800fd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd3a:	bf00      	nop
 800fd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd3e:	bc08      	pop	{r3}
 800fd40:	469e      	mov	lr, r3
 800fd42:	4770      	bx	lr


MEMS_RECORDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08013978  08013978  00023978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e3c  08013e3c  00030820  2**0
                  CONTENTS
  4 .ARM          00000008  08013e3c  08013e3c  00023e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013e44  08013e44  00030820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013e44  08013e44  00023e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013e48  08013e48  00023e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000820  20000000  08013e4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ef8  20000820  0801466c  00030820  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007718  0801466c  00037718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030820  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024e17  00000000  00000000  00030850  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000045c6  00000000  00000000  00055667  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001700  00000000  00000000  00059c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001508  00000000  00000000  0005b330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027c88  00000000  00000000  0005c838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018ccc  00000000  00000000  000844c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df86e  00000000  00000000  0009d18c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0017c9fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007460  00000000  00000000  0017caf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000820 	.word	0x20000820
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801395c 	.word	0x0801395c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000824 	.word	0x20000824
 800020c:	0801395c 	.word	0x0801395c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <CCA02M1_AUDIO_IN_Init>:
*       - 2 if PDM is used
* @param  AudioInit Init structure
* @retval BSP status
*/
__weak int32_t CCA02M1_AUDIO_IN_Init(uint32_t Instance, CCA02M1_AUDIO_Init_t* AudioInit)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b098      	sub	sp, #96	; 0x60
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  int32_t ret =  BSP_ERROR_NONE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d903      	bls.n	8000fe4 <CCA02M1_AUDIO_IN_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;  
 8000fdc:	f06f 0301 	mvn.w	r3, #1
 8000fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000fe2:	e13d      	b.n	8001260 <CCA02M1_AUDIO_IN_Init+0x298>
  }
  else
  {
    /* Store the audio record context */
    AudioInCtx[Instance].Device          = AudioInit->Device;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	49a0      	ldr	r1, [pc, #640]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2064      	movs	r0, #100	; 0x64
 8000fee:	fb00 f303 	mul.w	r3, r0, r3
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;  
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	499b      	ldr	r1, [pc, #620]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2064      	movs	r0, #100	; 0x64
 8001002:	fb00 f303 	mul.w	r3, r0, r3
 8001006:	440b      	add	r3, r1
 8001008:	3310      	adds	r3, #16
 800100a:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].SampleRate      = AudioInit->SampleRate; 
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	4996      	ldr	r1, [pc, #600]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2064      	movs	r0, #100	; 0x64
 8001016:	fb00 f303 	mul.w	r3, r0, r3
 800101a:	440b      	add	r3, r1
 800101c:	3308      	adds	r3, #8
 800101e:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	4991      	ldr	r1, [pc, #580]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2064      	movs	r0, #100	; 0x64
 800102a:	fb00 f303 	mul.w	r3, r0, r3
 800102e:	440b      	add	r3, r1
 8001030:	330c      	adds	r3, #12
 8001032:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].Volume          = AudioInit->Volume;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	498c      	ldr	r1, [pc, #560]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2064      	movs	r0, #100	; 0x64
 800103e:	fb00 f303 	mul.w	r3, r0, r3
 8001042:	440b      	add	r3, r1
 8001044:	3320      	adds	r3, #32
 8001046:	601a      	str	r2, [r3, #0]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 8001048:	4a88      	ldr	r2, [pc, #544]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2164      	movs	r1, #100	; 0x64
 800104e:	fb01 f303 	mul.w	r3, r1, r3
 8001052:	4413      	add	r3, r2
 8001054:	3324      	adds	r3, #36	; 0x24
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
    
    if(Instance == 0U)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	f040 80f0 	bne.w	8001242 <CCA02M1_AUDIO_IN_Init+0x27a>
#ifdef USE_STM32L4XX_NUCLEO
      ret =  BSP_ERROR_WRONG_PARAM;
#else
      uint32_t PDM_Clock_Freq;     
      
      switch (AudioInit->SampleRate)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800106a:	d012      	beq.n	8001092 <CCA02M1_AUDIO_IN_Init+0xca>
 800106c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001070:	d803      	bhi.n	800107a <CCA02M1_AUDIO_IN_Init+0xb2>
 8001072:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001076:	d008      	beq.n	800108a <CCA02M1_AUDIO_IN_Init+0xc2>
 8001078:	e017      	b.n	80010aa <CCA02M1_AUDIO_IN_Init+0xe2>
 800107a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800107e:	d00c      	beq.n	800109a <CCA02M1_AUDIO_IN_Init+0xd2>
 8001080:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001084:	4293      	cmp	r3, r2
 8001086:	d00c      	beq.n	80010a2 <CCA02M1_AUDIO_IN_Init+0xda>
 8001088:	e00f      	b.n	80010aa <CCA02M1_AUDIO_IN_Init+0xe2>
      {
      case AUDIO_FREQUENCY_8K:
        PDM_Clock_Freq = 1280;
 800108a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800108e:	65bb      	str	r3, [r7, #88]	; 0x58
        break;
 8001090:	e012      	b.n	80010b8 <CCA02M1_AUDIO_IN_Init+0xf0>
        
      case AUDIO_FREQUENCY_16K:
        PDM_Clock_Freq = PDM_FREQ_16K;
 8001092:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001096:	65bb      	str	r3, [r7, #88]	; 0x58
        break;
 8001098:	e00e      	b.n	80010b8 <CCA02M1_AUDIO_IN_Init+0xf0>
        
      case AUDIO_FREQUENCY_32K:
        PDM_Clock_Freq = 2048;
 800109a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800109e:	65bb      	str	r3, [r7, #88]	; 0x58
        break;
 80010a0:	e00a      	b.n	80010b8 <CCA02M1_AUDIO_IN_Init+0xf0>
        
      case AUDIO_FREQUENCY_48K:
        PDM_Clock_Freq = 3072;
 80010a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010a6:	65bb      	str	r3, [r7, #88]	; 0x58
        break;
 80010a8:	e006      	b.n	80010b8 <CCA02M1_AUDIO_IN_Init+0xf0>
        
      default:
        PDM_Clock_Freq = 1280;
 80010aa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80010ae:	65bb      	str	r3, [r7, #88]	; 0x58
        ret =  BSP_ERROR_WRONG_PARAM;
 80010b0:	f06f 0301 	mvn.w	r3, #1
 80010b4:	65fb      	str	r3, [r7, #92]	; 0x5c
        break;
 80010b6:	bf00      	nop
      }
      
      AudioInCtx[Instance].DecimationFactor = (PDM_Clock_Freq * 1000U)/AudioInit->SampleRate;
 80010b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010be:	fb02 f203 	mul.w	r2, r2, r3
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80010ca:	4968      	ldr	r1, [pc, #416]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2064      	movs	r0, #100	; 0x64
 80010d0:	fb00 f303 	mul.w	r3, r0, r3
 80010d4:	440b      	add	r3, r1
 80010d6:	3360      	adds	r3, #96	; 0x60
 80010d8:	601a      	str	r2, [r3, #0]
      AudioInCtx[Instance].Size = (PDM_Clock_Freq/8U) * 2U * N_MS_PER_INTERRUPT;
 80010da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010dc:	08db      	lsrs	r3, r3, #3
 80010de:	005a      	lsls	r2, r3, #1
 80010e0:	4962      	ldr	r1, [pc, #392]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2064      	movs	r0, #100	; 0x64
 80010e6:	fb00 f303 	mul.w	r3, r0, r3
 80010ea:	440b      	add	r3, r1
 80010ec:	331c      	adds	r3, #28
 80010ee:	601a      	str	r2, [r3, #0]
      /* Enable SAI to generate clock used by audio driver */
      __HAL_SAI_ENABLE(&hAudioInSai);
      
#else             
      MX_I2S_IN_Config i2s_config;
      if(AudioInCtx[0].ChannelsNbr == 1U)
 80010f0:	4b5e      	ldr	r3, [pc, #376]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d102      	bne.n	80010fe <CCA02M1_AUDIO_IN_Init+0x136>
      {
        i2s_config.DataFormat   = I2S_DATAFORMAT_16B;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	e001      	b.n	8001102 <CCA02M1_AUDIO_IN_Init+0x13a>
      }
      else
      {
        i2s_config.DataFormat   = I2S_DATAFORMAT_32B;
 80010fe:	2305      	movs	r3, #5
 8001100:	617b      	str	r3, [r7, #20]
      }
      
      i2s_config.AudioFreq = ((PDM_Clock_Freq * 1000U) / 32U);
 8001102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001104:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	095b      	lsrs	r3, r3, #5
 800110e:	61fb      	str	r3, [r7, #28]
      i2s_config.CPOL         = I2S_CPOL_HIGH;
 8001110:	2308      	movs	r3, #8
 8001112:	623b      	str	r3, [r7, #32]
      i2s_config.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
      i2s_config.Mode         = I2S_MODE_MASTER_RX;
 8001118:	f44f 7340 	mov.w	r3, #768	; 0x300
 800111c:	60fb      	str	r3, [r7, #12]
      i2s_config.Standard     = I2S_STANDARD_MSB;
 800111e:	2310      	movs	r3, #16
 8001120:	613b      	str	r3, [r7, #16]
#ifdef USE_STM32F4XX_NUCLEO
      i2s_config.FullDuplexMode   = I2S_FULLDUPLEXMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
      i2s_config.ClockSource  = I2S_CLOCK_PLL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
#else
      i2s_config.ClockSource  = I2S_CLOCK_SYSCLK;
#endif
      
      if (AudioInCtx[0].ChannelsNbr>1U)
 800112a:	4b50      	ldr	r3, [pc, #320]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d90a      	bls.n	8001148 <CCA02M1_AUDIO_IN_Init+0x180>
      {
        PDM_Clock_Freq *=2U;
 8001132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	65bb      	str	r3, [r7, #88]	; 0x58
        if (AUDIO_IN_Timer_Init() != HAL_OK)
 8001138:	f000 ffb4 	bl	80020a4 <AUDIO_IN_Timer_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <CCA02M1_AUDIO_IN_Init+0x180>
        {
          ret =  BSP_ERROR_PERIPH_FAILURE;
 8001142:	f06f 0303 	mvn.w	r3, #3
 8001146:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
      }
      
      /* PLL clock is set depending by the AudioFreq */ 
      if(MX_I2S_IN_ClockConfig(&hAudioInI2s, PDM_Clock_Freq) != HAL_OK)
 8001148:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800114a:	4849      	ldr	r0, [pc, #292]	; (8001270 <CCA02M1_AUDIO_IN_Init+0x2a8>)
 800114c:	f000 f898 	bl	8001280 <MX_I2S_IN_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <CCA02M1_AUDIO_IN_Init+0x194>
      {
        ret =  BSP_ERROR_CLOCK_FAILURE;
 8001156:	f06f 0308 	mvn.w	r3, #8
 800115a:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      
      /* I2S Peripheral configuration */
      hAudioInI2s.Instance          = AUDIO_IN_I2S_INSTANCE;
 800115c:	4b44      	ldr	r3, [pc, #272]	; (8001270 <CCA02M1_AUDIO_IN_Init+0x2a8>)
 800115e:	4a45      	ldr	r2, [pc, #276]	; (8001274 <CCA02M1_AUDIO_IN_Init+0x2ac>)
 8001160:	601a      	str	r2, [r3, #0]
      __HAL_I2S_DISABLE(&hAudioInI2s);
 8001162:	4b43      	ldr	r3, [pc, #268]	; (8001270 <CCA02M1_AUDIO_IN_Init+0x2a8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	69da      	ldr	r2, [r3, #28]
 8001168:	4b41      	ldr	r3, [pc, #260]	; (8001270 <CCA02M1_AUDIO_IN_Init+0x2a8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001170:	61da      	str	r2, [r3, #28]
      I2S_MspInit(&hAudioInI2s);
 8001172:	483f      	ldr	r0, [pc, #252]	; (8001270 <CCA02M1_AUDIO_IN_Init+0x2a8>)
 8001174:	f000 fed8 	bl	8001f28 <I2S_MspInit>
      
      if (MX_I2S_IN_Init(&hAudioInI2s, &i2s_config)!= HAL_OK)
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4619      	mov	r1, r3
 800117e:	483c      	ldr	r0, [pc, #240]	; (8001270 <CCA02M1_AUDIO_IN_Init+0x2a8>)
 8001180:	f000 f938 	bl	80013f4 <MX_I2S_IN_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <CCA02M1_AUDIO_IN_Init+0x1c8>
      {
        ret =  BSP_ERROR_PERIPH_FAILURE;
 800118a:	f06f 0303 	mvn.w	r3, #3
 800118e:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      if (HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8001190:	4837      	ldr	r0, [pc, #220]	; (8001270 <CCA02M1_AUDIO_IN_Init+0x2a8>)
 8001192:	f001 ff65 	bl	8003060 <HAL_I2S_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <CCA02M1_AUDIO_IN_Init+0x1da>
      {
        ret =  BSP_ERROR_PERIPH_FAILURE;
 800119c:	f06f 0303 	mvn.w	r3, #3
 80011a0:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      
      if (AudioInCtx[0].ChannelsNbr>2U)
 80011a2:	4b32      	ldr	r3, [pc, #200]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d93b      	bls.n	8001222 <CCA02M1_AUDIO_IN_Init+0x25a>
      {
        /* Set the SPI parameters */
        hAudioInSPI.Instance               = AUDIO_IN_SPI_INSTANCE;
 80011aa:	4b33      	ldr	r3, [pc, #204]	; (8001278 <CCA02M1_AUDIO_IN_Init+0x2b0>)
 80011ac:	4a33      	ldr	r2, [pc, #204]	; (800127c <CCA02M1_AUDIO_IN_Init+0x2b4>)
 80011ae:	601a      	str	r2, [r3, #0]
        
        __HAL_SPI_DISABLE(&hAudioInSPI);
 80011b0:	4b31      	ldr	r3, [pc, #196]	; (8001278 <CCA02M1_AUDIO_IN_Init+0x2b0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <CCA02M1_AUDIO_IN_Init+0x2b0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011be:	601a      	str	r2, [r3, #0]
        SPI_MspInit(&hAudioInSPI);
 80011c0:	482d      	ldr	r0, [pc, #180]	; (8001278 <CCA02M1_AUDIO_IN_Init+0x2b0>)
 80011c2:	f000 ff03 	bl	8001fcc <SPI_MspInit>
        
        MX_SPI_Config spi_config;
        spi_config.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011c6:	2300      	movs	r3, #0
 80011c8:	647b      	str	r3, [r7, #68]	; 0x44
        spi_config.Direction         = SPI_DIRECTION_2LINES_RXONLY;
 80011ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
        spi_config.CLKPhase          = SPI_PHASE_2EDGE;
 80011d0:	2301      	movs	r3, #1
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        spi_config.CLKPolarity       = SPI_POLARITY_HIGH;
 80011d4:	2302      	movs	r3, #2
 80011d6:	63bb      	str	r3, [r7, #56]	; 0x38
        spi_config.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 80011d8:	2300      	movs	r3, #0
 80011da:	653b      	str	r3, [r7, #80]	; 0x50
        spi_config.CRCPolynomial     = 7;
 80011dc:	2307      	movs	r3, #7
 80011de:	657b      	str	r3, [r7, #84]	; 0x54
        spi_config.DataSize          = SPI_DATASIZE_16BIT;
 80011e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
        spi_config.FirstBit          = SPI_FIRSTBIT_MSB;
 80011e6:	2300      	movs	r3, #0
 80011e8:	64bb      	str	r3, [r7, #72]	; 0x48
        spi_config.NSS               = SPI_NSS_SOFT;
 80011ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ee:	643b      	str	r3, [r7, #64]	; 0x40
        spi_config.TIMode            = SPI_TIMODE_DISABLED;
 80011f0:	2300      	movs	r3, #0
 80011f2:	64fb      	str	r3, [r7, #76]	; 0x4c
        spi_config.Mode              = SPI_MODE_SLAVE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        
        if (MX_SPI_Init(&hAudioInSPI, &spi_config)!= HAL_OK)
 80011f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fc:	4619      	mov	r1, r3
 80011fe:	481e      	ldr	r0, [pc, #120]	; (8001278 <CCA02M1_AUDIO_IN_Init+0x2b0>)
 8001200:	f000 f87e 	bl	8001300 <MX_SPI_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <CCA02M1_AUDIO_IN_Init+0x248>
        {
          ret =  BSP_ERROR_PERIPH_FAILURE;
 800120a:	f06f 0303 	mvn.w	r3, #3
 800120e:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        if (HAL_SPI_Init(&hAudioInSPI) != HAL_OK)
 8001210:	4819      	ldr	r0, [pc, #100]	; (8001278 <CCA02M1_AUDIO_IN_Init+0x2b0>)
 8001212:	f004 ff49 	bl	80060a8 <HAL_SPI_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <CCA02M1_AUDIO_IN_Init+0x25a>
        {
          ret =  BSP_ERROR_PERIPH_FAILURE;
 800121c:	f06f 0303 	mvn.w	r3, #3
 8001220:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        
      }
#endif
      if (CCA02M1_AUDIO_IN_PDMToPCM_Init(Instance, AudioInCtx[0].SampleRate, AudioInCtx[0].ChannelsNbr, AudioInCtx[0].ChannelsNbr)!= BSP_ERROR_NONE)
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8001224:	6899      	ldr	r1, [r3, #8]
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8001228:	691a      	ldr	r2, [r3, #16]
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f974 	bl	800151c <CCA02M1_AUDIO_IN_PDMToPCM_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d009      	beq.n	800124e <CCA02M1_AUDIO_IN_Init+0x286>
      {
        ret =  BSP_ERROR_NO_INIT;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001240:	e005      	b.n	800124e <CCA02M1_AUDIO_IN_Init+0x286>
      }
#endif
    }
    else if(Instance == 1U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <CCA02M1_AUDIO_IN_Init+0x286>
          }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1U) */
        }
      }
#else
      ret =  BSP_ERROR_WRONG_PARAM;
 8001248:	f06f 0301 	mvn.w	r3, #1
 800124c:	65fb      	str	r3, [r7, #92]	; 0x5c
    {      
      
    }
    
    /* Update BSP AUDIO IN state */     
    AudioInCtx[Instance].State = AUDIO_IN_STATE_STOP; 
 800124e:	4a07      	ldr	r2, [pc, #28]	; (800126c <CCA02M1_AUDIO_IN_Init+0x2a4>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2164      	movs	r1, #100	; 0x64
 8001254:	fb01 f303 	mul.w	r3, r1, r3
 8001258:	4413      	add	r3, r2
 800125a:	3324      	adds	r3, #36	; 0x24
 800125c:	2202      	movs	r2, #2
 800125e:	601a      	str	r2, [r3, #0]
    /* Return BSP status */ 
  }
  return ret;
 8001260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8001262:	4618      	mov	r0, r3
 8001264:	3760      	adds	r7, #96	; 0x60
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000840 	.word	0x20000840
 8001270:	20001bf0 	.word	0x20001bf0
 8001274:	40003800 	.word	0x40003800
 8001278:	20000ae4 	.word	0x20000ae4
 800127c:	40013000 	.word	0x40013000

08001280 <MX_I2S_IN_ClockConfig>:
* @note   This API is called by CCA02M1_AUDIO_IN_Init() 
*         Being __weak it can be overwritten by the application     
* @retval HAL_OK if no problem during execution, HAL_ERROR otherwise
*/
__weak HAL_StatusTypeDef MX_I2S_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t PDM_rate)
{ 
 8001280:	b580      	push	{r7, lr}
 8001282:	b09a      	sub	sp, #104	; 0x68
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  UNUSED(hi2s);
  
  HAL_StatusTypeDef ret = HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  /*I2S PLL Configuration*/
  RCC_PeriphCLKInitTypeDef rccclkinit;
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit); 
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	4618      	mov	r0, r3
 8001296:	f004 f825 	bl	80052e4 <HAL_RCCEx_GetPeriphCLKConfig>
  
#if defined(STM32F446xx)
  rccclkinit.PLLI2S.PLLI2SQ = 2;
 800129a:	2302      	movs	r3, #2
 800129c:	61bb      	str	r3, [r7, #24]
  rccclkinit.PLLI2SDivQ = 1;
 800129e:	2301      	movs	r3, #1
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif
  if ((PDM_rate % 1280U) == 0U)
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_I2S_IN_ClockConfig+0x7c>)
 80012a6:	fba3 2301 	umull	r2, r3, r3, r1
 80012aa:	0a9a      	lsrs	r2, r3, #10
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	1aca      	subs	r2, r1, r3
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	d106      	bne.n	80012c8 <MX_I2S_IN_ClockConfig+0x48>
  {
#if defined(STM32F411xE) || defined (STM32F446xx)    
    rccclkinit.PLLI2S.PLLI2SM = 10;
 80012ba:	230a      	movs	r3, #10
 80012bc:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 96;
 80012be:	2360      	movs	r3, #96	; 0x60
 80012c0:	613b      	str	r3, [r7, #16]
#else
    rccclkinit.PLLI2S.PLLI2SN = 192;
#endif
    rccclkinit.PLLI2S.PLLI2SR = 5;
 80012c2:	2305      	movs	r3, #5
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	e006      	b.n	80012d6 <MX_I2S_IN_ClockConfig+0x56>
  }
  else
  {
#if defined(STM32F411xE) || defined (STM32F446xx)
    
    rccclkinit.PLLI2S.PLLI2SM = 8;
 80012c8:	2308      	movs	r3, #8
 80012ca:	60fb      	str	r3, [r7, #12]
#endif
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80012cc:	f44f 7381 	mov.w	r3, #258	; 0x102
 80012d0:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80012d2:	2303      	movs	r3, #3
 80012d4:	61fb      	str	r3, [r7, #28]
  }   
  
#if defined(STM32F446xx)
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 80012d6:	2302      	movs	r3, #2
 80012d8:	60bb      	str	r3, [r7, #8]
#else
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
#endif
  
  if(HAL_RCCEx_PeriphCLKConfig(&rccclkinit) != HAL_OK)
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fcd6 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <MX_I2S_IN_ClockConfig+0x70>
  {
    ret = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  return ret;
 80012f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3768      	adds	r7, #104	; 0x68
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	cccccccd 	.word	0xcccccccd

08001300 <MX_SPI_Init>:


__weak HAL_StatusTypeDef MX_SPI_Init(SPI_HandleTypeDef* hspi, MX_SPI_Config *MXConfig)
{  
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef ret = HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
  
  hspi->Init.BaudRatePrescaler = MXConfig->BaudRatePrescaler; 
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	61da      	str	r2, [r3, #28]
  hspi->Init.Direction         = MXConfig->Direction;         
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	609a      	str	r2, [r3, #8]
  hspi->Init.CLKPhase          = MXConfig->CLKPhase;          
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	615a      	str	r2, [r3, #20]
  hspi->Init.CLKPolarity       = MXConfig->CLKPolarity;       
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	611a      	str	r2, [r3, #16]
  hspi->Init.CRCCalculation    = MXConfig->CRCCalculation;    
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial     = MXConfig->CRCPolynomial;     
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.DataSize          = MXConfig->DataSize;          
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60da      	str	r2, [r3, #12]
  hspi->Init.FirstBit          = MXConfig->FirstBit;         
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	69da      	ldr	r2, [r3, #28]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	621a      	str	r2, [r3, #32]
  hspi->Init.NSS               = MXConfig->NSS;               
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
  hspi->Init.TIMode            = MXConfig->TIMode;            
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	6a1a      	ldr	r2, [r3, #32]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.Mode              = MXConfig->Mode; 
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	605a      	str	r2, [r3, #4]
  
  /* Configure the DMA handler for Transmission process */
  hdma_rx.Instance                 = AUDIO_IN_SPI_RX_DMA_STREAM;
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_SPI_Init+0xec>)
 8001368:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <MX_SPI_Init+0xf0>)
 800136a:	601a      	str	r2, [r3, #0]
  hdma_rx.Init.Channel             = AUDIO_IN_SPI_RX_DMA_CHANNEL;
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_SPI_Init+0xec>)
 800136e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001372:	605a      	str	r2, [r3, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_SPI_Init+0xec>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_SPI_Init+0xec>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_SPI_Init+0xec>)
 8001382:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001386:	611a      	str	r2, [r3, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_SPI_Init+0xec>)
 800138a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800138e:	615a      	str	r2, [r3, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_SPI_Init+0xec>)
 8001392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001396:	619a      	str	r2, [r3, #24]
  hdma_rx.Init.Mode                = DMA_CIRCULAR;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_SPI_Init+0xec>)
 800139a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800139e:	61da      	str	r2, [r3, #28]
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_SPI_Init+0xec>)
 80013a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013a6:	621a      	str	r2, [r3, #32]
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_SPI_Init+0xec>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_SPI_Init+0xec>)
 80013b0:	2203      	movs	r2, #3
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MX_SPI_Init+0xec>)
 80013b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_SPI_Init+0xec>)
 80013be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Configure the DMA Stream */ 
  if (HAL_DMA_Init(&hdma_rx) != HAL_OK)
 80013c4:	4809      	ldr	r0, [pc, #36]	; (80013ec <MX_SPI_Init+0xec>)
 80013c6:	f001 f8ed 	bl	80025a4 <HAL_DMA_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_SPI_Init+0xd4>
  {
    ret = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Associate the initialized DMA handle to the the SPI handle */
  __HAL_LINKDMA(hspi, hdmarx, hdma_rx);      
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <MX_SPI_Init+0xec>)
 80013d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <MX_SPI_Init+0xec>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6393      	str	r3, [r2, #56]	; 0x38
  
  return ret;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000177c 	.word	0x2000177c
 80013f0:	40026440 	.word	0x40026440

080013f4 <MX_I2S_IN_Init>:


__weak HAL_StatusTypeDef MX_I2S_IN_Init(I2S_HandleTypeDef* hi2s, MX_I2S_IN_Config *MXConfig)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sRx;
  HAL_StatusTypeDef ret = HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
  
  hi2s->Init.DataFormat = MXConfig->DataFormat;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60da      	str	r2, [r3, #12]
  hi2s->Init.AudioFreq = MXConfig->AudioFreq;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	691a      	ldr	r2, [r3, #16]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	615a      	str	r2, [r3, #20]
  hi2s->Init.ClockSource = MXConfig->ClockSource;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	699a      	ldr	r2, [r3, #24]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	61da      	str	r2, [r3, #28]
  hi2s->Init.CPOL = MXConfig->CPOL;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	619a      	str	r2, [r3, #24]
  hi2s->Init.MCLKOutput = MXConfig->MCLKOutput;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	611a      	str	r2, [r3, #16]
  hi2s->Init.Mode = MXConfig->Mode;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	605a      	str	r2, [r3, #4]
  hi2s->Init.Standard = MXConfig->Standard;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	609a      	str	r2, [r3, #8]
#ifdef USE_STM32F4XX_NUCLEO
  hi2s->Init.FullDuplexMode = MXConfig->FullDuplexMode;  
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	69da      	ldr	r2, [r3, #28]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	621a      	str	r2, [r3, #32]
#endif
  
  /* Enable the DMA clock */
  AUDIO_IN_I2S_DMAx_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	4b31      	ldr	r3, [pc, #196]	; (800150c <MX_I2S_IN_Init+0x118>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a30      	ldr	r2, [pc, #192]	; (800150c <MX_I2S_IN_Init+0x118>)
 800144c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b2e      	ldr	r3, [pc, #184]	; (800150c <MX_I2S_IN_Init+0x118>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == AUDIO_IN_I2S_INSTANCE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a2b      	ldr	r2, [pc, #172]	; (8001510 <MX_I2S_IN_Init+0x11c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d142      	bne.n	80014ee <MX_I2S_IN_Init+0xfa>
  {
    /* Configure the hdma_i2sRx handle parameters */
    hdma_i2sRx.Init.Channel             = AUDIO_IN_I2S_DMAx_CHANNEL;
 8001468:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <MX_I2S_IN_Init+0x120>)
 800146a:	2200      	movs	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800146e:	4b29      	ldr	r3, [pc, #164]	; (8001514 <MX_I2S_IN_Init+0x120>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001474:	4b27      	ldr	r3, [pc, #156]	; (8001514 <MX_I2S_IN_Init+0x120>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <MX_I2S_IN_Init+0x120>)
 800147c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001480:	611a      	str	r2, [r3, #16]
    hdma_i2sRx.Init.PeriphDataAlignment = AUDIO_IN_I2S_DMAx_PERIPH_DATA_SIZE;
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <MX_I2S_IN_Init+0x120>)
 8001484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001488:	615a      	str	r2, [r3, #20]
    hdma_i2sRx.Init.MemDataAlignment    = AUDIO_IN_I2S_DMAx_MEM_DATA_SIZE;
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <MX_I2S_IN_Init+0x120>)
 800148c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001490:	619a      	str	r2, [r3, #24]
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <MX_I2S_IN_Init+0x120>)
 8001494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001498:	61da      	str	r2, [r3, #28]
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <MX_I2S_IN_Init+0x120>)
 800149c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014a0:	621a      	str	r2, [r3, #32]
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <MX_I2S_IN_Init+0x120>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_I2S_IN_Init+0x120>)
 80014aa:	2203      	movs	r2, #3
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <MX_I2S_IN_Init+0x120>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_I2S_IN_Init+0x120>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_i2sRx.Instance = AUDIO_IN_I2S_DMAx_STREAM;
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_I2S_IN_Init+0x120>)
 80014bc:	4a16      	ldr	r2, [pc, #88]	; (8001518 <MX_I2S_IN_Init+0x124>)
 80014be:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a14      	ldr	r2, [pc, #80]	; (8001514 <MX_I2S_IN_Init+0x120>)
 80014c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <MX_I2S_IN_Init+0x120>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    if (HAL_DMA_DeInit(&hdma_i2sRx) != HAL_OK)
 80014cc:	4811      	ldr	r0, [pc, #68]	; (8001514 <MX_I2S_IN_Init+0x120>)
 80014ce:	f001 f917 	bl	8002700 <HAL_DMA_DeInit>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_I2S_IN_Init+0xe8>
    {
      ret = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
    }
    
    /* Configure the DMA Stream */
    if (HAL_DMA_Init(&hdma_i2sRx) != HAL_OK)
 80014dc:	480d      	ldr	r0, [pc, #52]	; (8001514 <MX_I2S_IN_Init+0x120>)
 80014de:	f001 f861 	bl	80025a4 <HAL_DMA_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d004      	beq.n	80014f2 <MX_I2S_IN_Init+0xfe>
    {
      ret = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	e001      	b.n	80014f2 <MX_I2S_IN_Init+0xfe>
    }
  }
  else
  {
    ret = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_I2S_DMAx_IRQ, CCA02M1_AUDIO_IN_IT_PRIORITY, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2106      	movs	r1, #6
 80014f6:	200e      	movs	r0, #14
 80014f8:	f001 f81d 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_I2S_DMAx_IRQ); 
 80014fc:	200e      	movs	r0, #14
 80014fe:	f001 f836 	bl	800256e <HAL_NVIC_EnableIRQ>
  
  return ret;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40023800 	.word	0x40023800
 8001510:	40003800 	.word	0x40003800
 8001514:	200017dc 	.word	0x200017dc
 8001518:	40026058 	.word	0x40026058

0800151c <CCA02M1_AUDIO_IN_PDMToPCM_Init>:
* @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
* @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
* @retval BSP status
*/
__weak int32_t CCA02M1_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
  int32_t ret =  BSP_ERROR_NONE;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  
  if(Instance != 0U)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x20>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8001534:	f06f 0301 	mvn.w	r3, #1
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	e13b      	b.n	80017b4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x298>
    uint32_t index;    
    static int16_t aState_ARM[4][DECIMATOR_STATE_LENGTH];
    static int16_t aCoeffs[] = { -1406, 1634, -1943, 2386, -3080, 4325, -7223, 21690, 21690, -7223, 4325, -3080, 2386, -1943, 1634, -1406, };
    
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	4b9f      	ldr	r3, [pc, #636]	; (80017c0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a4>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a9e      	ldr	r2, [pc, #632]	; (80017c0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a4>)
 8001546:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b9c      	ldr	r3, [pc, #624]	; (80017c0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a4>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]
    
    for(index = 0; index < ChnlNbrIn; index++)
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	e125      	b.n	80017aa <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x28e>
    {
      volatile uint32_t error = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 8001562:	4a98      	ldr	r2, [pc, #608]	; (80017c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	214c      	movs	r1, #76	; 0x4c
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	2200      	movs	r2, #0
 8001570:	801a      	strh	r2, [r3, #0]
      if (ChnlNbrIn == 1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d109      	bne.n	800158c <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x70>
      {
        PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_BE;
 8001578:	4a92      	ldr	r2, [pc, #584]	; (80017c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	214c      	movs	r1, #76	; 0x4c
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4413      	add	r3, r2
 8001584:	3302      	adds	r3, #2
 8001586:	2201      	movs	r2, #1
 8001588:	801a      	strh	r2, [r3, #0]
 800158a:	e008      	b.n	800159e <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x82>
      }
      else
      {
        PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 800158c:	4a8d      	ldr	r2, [pc, #564]	; (80017c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	214c      	movs	r1, #76	; 0x4c
 8001592:	fb01 f303 	mul.w	r3, r1, r3
 8001596:	4413      	add	r3, r2
 8001598:	3302      	adds	r3, #2
 800159a:	2200      	movs	r2, #0
 800159c:	801a      	strh	r2, [r3, #0]
      }
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 800159e:	4a89      	ldr	r2, [pc, #548]	; (80017c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	214c      	movs	r1, #76	; 0x4c
 80015a4:	fb01 f303 	mul.w	r3, r1, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	3304      	adds	r3, #4
 80015ac:	4a86      	ldr	r2, [pc, #536]	; (80017c8 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2ac>)
 80015ae:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = (uint16_t)ChnlNbrOut;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b298      	uxth	r0, r3
 80015b4:	4a83      	ldr	r2, [pc, #524]	; (80017c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	214c      	movs	r1, #76	; 0x4c
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	4413      	add	r3, r2
 80015c0:	330a      	adds	r3, #10
 80015c2:	4602      	mov	r2, r0
 80015c4:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = (uint16_t)ChnlNbrIn;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	b298      	uxth	r0, r3
 80015ca:	4a7e      	ldr	r2, [pc, #504]	; (80017c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	214c      	movs	r1, #76	; 0x4c
 80015d0:	fb01 f303 	mul.w	r3, r1, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	3308      	adds	r3, #8
 80015d8:	4602      	mov	r2, r0
 80015da:	801a      	strh	r2, [r3, #0]
      
      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = (uint16_t) ((AudioFreq/1000U) * N_MS_PER_INTERRUPT);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4a7b      	ldr	r2, [pc, #492]	; (80017cc <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b0>)
 80015e0:	fba2 2303 	umull	r2, r3, r2, r3
 80015e4:	099b      	lsrs	r3, r3, #6
 80015e6:	b298      	uxth	r0, r3
 80015e8:	4979      	ldr	r1, [pc, #484]	; (80017d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	440b      	add	r3, r1
 80015f6:	3302      	adds	r3, #2
 80015f8:	4602      	mov	r2, r0
 80015fa:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 80015fc:	4974      	ldr	r1, [pc, #464]	; (80017d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	440b      	add	r3, r1
 800160a:	3304      	adds	r3, #4
 800160c:	2218      	movs	r2, #24
 800160e:	801a      	strh	r2, [r3, #0]
      
      switch (AudioInCtx[0].DecimationFactor)
 8001610:	4b70      	ldr	r3, [pc, #448]	; (80017d4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b8>)
 8001612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001614:	2b30      	cmp	r3, #48	; 0x30
 8001616:	d032      	beq.n	800167e <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x162>
 8001618:	2b30      	cmp	r3, #48	; 0x30
 800161a:	d806      	bhi.n	800162a <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x10e>
 800161c:	2b18      	cmp	r3, #24
 800161e:	d01a      	beq.n	8001656 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x13a>
 8001620:	2b20      	cmp	r3, #32
 8001622:	d022      	beq.n	800166a <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x14e>
 8001624:	2b10      	cmp	r3, #16
 8001626:	d00c      	beq.n	8001642 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x126>
 8001628:	e08f      	b.n	800174a <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x22e>
 800162a:	2b50      	cmp	r3, #80	; 0x50
 800162c:	d03b      	beq.n	80016a6 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x18a>
 800162e:	2b50      	cmp	r3, #80	; 0x50
 8001630:	d802      	bhi.n	8001638 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x11c>
 8001632:	2b40      	cmp	r3, #64	; 0x40
 8001634:	d02d      	beq.n	8001692 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x176>
 8001636:	e088      	b.n	800174a <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x22e>
 8001638:	2b80      	cmp	r3, #128	; 0x80
 800163a:	d03e      	beq.n	80016ba <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x19e>
 800163c:	2ba0      	cmp	r3, #160	; 0xa0
 800163e:	d046      	beq.n	80016ce <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x1b2>
 8001640:	e083      	b.n	800174a <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x22e>
      {
      case 16:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_16;
 8001642:	4963      	ldr	r1, [pc, #396]	; (80017d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4613      	mov	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	440b      	add	r3, r1
 8001650:	2205      	movs	r2, #5
 8001652:	801a      	strh	r2, [r3, #0]
        break;
 8001654:	e07d      	b.n	8001752 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      case 24:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_24;
 8001656:	495e      	ldr	r1, [pc, #376]	; (80017d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	440b      	add	r3, r1
 8001664:	2206      	movs	r2, #6
 8001666:	801a      	strh	r2, [r3, #0]
        break;
 8001668:	e073      	b.n	8001752 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      case 32:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_32;
 800166a:	4959      	ldr	r1, [pc, #356]	; (80017d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	440b      	add	r3, r1
 8001678:	2207      	movs	r2, #7
 800167a:	801a      	strh	r2, [r3, #0]
        break;
 800167c:	e069      	b.n	8001752 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      case 48:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_48;
 800167e:	4954      	ldr	r1, [pc, #336]	; (80017d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	440b      	add	r3, r1
 800168c:	2201      	movs	r2, #1
 800168e:	801a      	strh	r2, [r3, #0]
        break;
 8001690:	e05f      	b.n	8001752 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      case 64:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8001692:	494f      	ldr	r1, [pc, #316]	; (80017d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	440b      	add	r3, r1
 80016a0:	2202      	movs	r2, #2
 80016a2:	801a      	strh	r2, [r3, #0]
        break;
 80016a4:	e055      	b.n	8001752 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      case 80:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_80;
 80016a6:	494a      	ldr	r1, [pc, #296]	; (80017d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	440b      	add	r3, r1
 80016b4:	2203      	movs	r2, #3
 80016b6:	801a      	strh	r2, [r3, #0]
        break;
 80016b8:	e04b      	b.n	8001752 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      case 128:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_128;
 80016ba:	4945      	ldr	r1, [pc, #276]	; (80017d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	440b      	add	r3, r1
 80016c8:	2204      	movs	r2, #4
 80016ca:	801a      	strh	r2, [r3, #0]
        break;
 80016cc:	e041      	b.n	8001752 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      case 160:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_80;
 80016ce:	4940      	ldr	r1, [pc, #256]	; (80017d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	440b      	add	r3, r1
 80016dc:	2203      	movs	r2, #3
 80016de:	801a      	strh	r2, [r3, #0]
        PDM_FilterConfig[index].output_samples_number *= 2U;        
 80016e0:	493b      	ldr	r1, [pc, #236]	; (80017d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	440b      	add	r3, r1
 80016ee:	3302      	adds	r3, #2
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	b298      	uxth	r0, r3
 80016f6:	4936      	ldr	r1, [pc, #216]	; (80017d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4613      	mov	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	440b      	add	r3, r1
 8001704:	3302      	adds	r3, #2
 8001706:	4602      	mov	r2, r0
 8001708:	801a      	strh	r2, [r3, #0]
        PDM_FilterHandler[index].out_ptr_channels = 1;
 800170a:	4a2e      	ldr	r2, [pc, #184]	; (80017c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	214c      	movs	r1, #76	; 0x4c
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	330a      	adds	r3, #10
 8001718:	2201      	movs	r2, #1
 800171a:	801a      	strh	r2, [r3, #0]
        (void)arm_fir_decimate_init_q15  (&ARM_Decimator_State[index], DECIMATOR_NUM_TAPS, DECIMATOR_FACTOR,
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4a2c      	ldr	r2, [pc, #176]	; (80017d8 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2bc>)
 8001728:	1898      	adds	r0, r3, r2
                                          aCoeffs, aState_ARM[index], DECIMATOR_BLOCK_SIZE);
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4613      	mov	r3, r2
 800172e:	015b      	lsls	r3, r3, #5
 8001730:	1a9b      	subs	r3, r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4a29      	ldr	r2, [pc, #164]	; (80017dc <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2c0>)
 8001736:	4413      	add	r3, r2
        (void)arm_fir_decimate_init_q15  (&ARM_Decimator_State[index], DECIMATOR_NUM_TAPS, DECIMATOR_FACTOR,
 8001738:	2210      	movs	r2, #16
 800173a:	9201      	str	r2, [sp, #4]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2c4>)
 8001740:	2202      	movs	r2, #2
 8001742:	2110      	movs	r1, #16
 8001744:	f009 ff7f 	bl	800b646 <arm_fir_decimate_init_q15>
         break;
 8001748:	e003      	b.n	8001752 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x236>
      default:
        ret =  BSP_ERROR_WRONG_PARAM;
 800174a:	f06f 0301 	mvn.w	r3, #1
 800174e:	61fb      	str	r3, [r7, #28]
        break;
 8001750:	bf00      	nop
      }
      
      error = PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	224c      	movs	r2, #76	; 0x4c
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 800175c:	4413      	add	r3, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f00c ffe8 	bl	800e734 <PDM_Filter_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	613b      	str	r3, [r7, #16]
      if (error!=0U)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x258>
      {
        ret =  BSP_ERROR_NO_INIT;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	61fb      	str	r3, [r7, #28]
      }
      
      error = PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	224c      	movs	r2, #76	; 0x4c
 8001778:	fb02 f303 	mul.w	r3, r2, r3
 800177c:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2a8>)
 800177e:	1898      	adds	r0, r3, r2
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x2b4>)
 800178c:	4413      	add	r3, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f00d f85a 	bl	800e848 <PDM_Filter_setConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	613b      	str	r3, [r7, #16]
      if (error!=0U)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x288>
      {
        ret =  BSP_ERROR_NO_INIT;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	61fb      	str	r3, [r7, #28]
    for(index = 0; index < ChnlNbrIn; index++)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	3301      	adds	r3, #1
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	f4ff aed5 	bcc.w	800155e <CCA02M1_AUDIO_IN_PDMToPCM_Init+0x42>
      }
    }
    
#endif
  } 
  return ret;
 80017b4:	69fb      	ldr	r3, [r7, #28]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800
 80017c4:	2000099c 	.word	0x2000099c
 80017c8:	7e809d48 	.word	0x7e809d48
 80017cc:	10624dd3 	.word	0x10624dd3
 80017d0:	20000acc 	.word	0x20000acc
 80017d4:	20000840 	.word	0x20000840
 80017d8:	2000096c 	.word	0x2000096c
 80017dc:	2000183c 	.word	0x2000183c
 80017e0:	20000480 	.word	0x20000480

080017e4 <CCA02M1_AUDIO_IN_PDMToPCM>:
* @param  PDMBuf    Pointer to PDM buffer data
* @param  PCMBuf    Pointer to PCM buffer data
* @retval BSP status
*/
__weak int32_t CCA02M1_AUDIO_IN_PDMToPCM(uint32_t Instance, uint16_t *PDMBuf, uint16_t *PCMBuf)
{  
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b094      	sub	sp, #80	; 0x50
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  int32_t ret =  BSP_ERROR_NONE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  
  if(Instance != 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <CCA02M1_AUDIO_IN_PDMToPCM+0x1e>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80017fa:	f06f 0301 	mvn.w	r3, #1
 80017fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001800:	e069      	b.n	80018d6 <CCA02M1_AUDIO_IN_PDMToPCM+0xf2>
#ifdef USE_STM32L4XX_NUCLEO    
    ret =  BSP_ERROR_WRONG_PARAM;
#else
    uint32_t index;
    
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8001802:	2300      	movs	r3, #0
 8001804:	64bb      	str	r3, [r7, #72]	; 0x48
 8001806:	e05b      	b.n	80018c0 <CCA02M1_AUDIO_IN_PDMToPCM+0xdc>
    {
      if (AudioInCtx[Instance].SampleRate == 8000U)
 8001808:	4a35      	ldr	r2, [pc, #212]	; (80018e0 <CCA02M1_AUDIO_IN_PDMToPCM+0xfc>)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2164      	movs	r1, #100	; 0x64
 800180e:	fb01 f303 	mul.w	r3, r1, r3
 8001812:	4413      	add	r3, r2
 8001814:	3308      	adds	r3, #8
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800181c:	d13d      	bne.n	800189a <CCA02M1_AUDIO_IN_PDMToPCM+0xb6>
      {
        uint16_t Decimate_Out[8*N_MS_PER_INTERRUPT];
        uint32_t ii;
        uint16_t PDM_Filter_Out[16*N_MS_PER_INTERRUPT];
        
        (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], PDM_Filter_Out, &PDM_FilterHandler[index]);
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001822:	18d0      	adds	r0, r2, r3
 8001824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001826:	224c      	movs	r2, #76	; 0x4c
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	4a2d      	ldr	r2, [pc, #180]	; (80018e4 <CCA02M1_AUDIO_IN_PDMToPCM+0x100>)
 800182e:	441a      	add	r2, r3
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	f00d f8f9 	bl	800ea2c <PDM_Filter>
        (void)arm_fir_decimate_q15 (&ARM_Decimator_State[index], (q15_t *)&(PDM_Filter_Out), (q15_t*)&(Decimate_Out), DECIMATOR_BLOCK_SIZE);
 800183a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4a28      	ldr	r2, [pc, #160]	; (80018e8 <CCA02M1_AUDIO_IN_PDMToPCM+0x104>)
 8001846:	1898      	adds	r0, r3, r2
 8001848:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800184c:	f107 0114 	add.w	r1, r7, #20
 8001850:	2310      	movs	r3, #16
 8001852:	f009 ff2d 	bl	800b6b0 <arm_fir_decimate_q15>
        for (ii=0; ii<8U*N_MS_PER_INTERRUPT; ii++)
 8001856:	2300      	movs	r3, #0
 8001858:	647b      	str	r3, [r7, #68]	; 0x44
 800185a:	e01a      	b.n	8001892 <CCA02M1_AUDIO_IN_PDMToPCM+0xae>
        {
          PCMBuf[(ii * AudioInCtx[Instance].ChannelsNbr) + index] = Decimate_Out[ii];
 800185c:	4a20      	ldr	r2, [pc, #128]	; (80018e0 <CCA02M1_AUDIO_IN_PDMToPCM+0xfc>)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2164      	movs	r1, #100	; 0x64
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	4413      	add	r3, r2
 8001868:	3310      	adds	r3, #16
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800186e:	fb02 f203 	mul.w	r2, r2, r3
 8001872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001874:	4413      	add	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	441a      	add	r2, r3
 800187c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001884:	440b      	add	r3, r1
 8001886:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800188a:	8013      	strh	r3, [r2, #0]
        for (ii=0; ii<8U*N_MS_PER_INTERRUPT; ii++)
 800188c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800188e:	3301      	adds	r3, #1
 8001890:	647b      	str	r3, [r7, #68]	; 0x44
 8001892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001894:	2b07      	cmp	r3, #7
 8001896:	d9e1      	bls.n	800185c <CCA02M1_AUDIO_IN_PDMToPCM+0x78>
 8001898:	e00f      	b.n	80018ba <CCA02M1_AUDIO_IN_PDMToPCM+0xd6>
        }
      }
      else
      {
        (void)PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800189e:	18d0      	adds	r0, r2, r3
 80018a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	18d1      	adds	r1, r2, r3
 80018a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018aa:	224c      	movs	r2, #76	; 0x4c
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <CCA02M1_AUDIO_IN_PDMToPCM+0x100>)
 80018b2:	4413      	add	r3, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	f00d f8b9 	bl	800ea2c <PDM_Filter>
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 80018ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018bc:	3301      	adds	r3, #1
 80018be:	64bb      	str	r3, [r7, #72]	; 0x48
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <CCA02M1_AUDIO_IN_PDMToPCM+0xfc>)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2164      	movs	r1, #100	; 0x64
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	3310      	adds	r3, #16
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d398      	bcc.n	8001808 <CCA02M1_AUDIO_IN_PDMToPCM+0x24>
      }
    }
    
#endif
  }  
  return ret;
 80018d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3750      	adds	r7, #80	; 0x50
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000840 	.word	0x20000840
 80018e4:	2000099c 	.word	0x2000099c
 80018e8:	2000096c 	.word	0x2000096c

080018ec <CCA02M1_AUDIO_IN_Record>:
* @param  pbuf     Main buffer pointer for the recorded data storing  
* @param  NbrOfBytes     Size of the record buffer. Parameter not used when Instance is 0
* @retval BSP status
*/
int32_t CCA02M1_AUDIO_IN_Record(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  
  if(Instance >= (AUDIO_IN_INSTANCES_NBR - 1U) )
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d903      	bls.n	800190a <CCA02M1_AUDIO_IN_Record+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001902:	f06f 0301 	mvn.w	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e05e      	b.n	80019c8 <CCA02M1_AUDIO_IN_Record+0xdc>
  }
  else 
  {
    AudioInCtx[Instance].pBuff = (uint16_t*)pBuf;
 800190a:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <CCA02M1_AUDIO_IN_Record+0xe8>)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2164      	movs	r1, #100	; 0x64
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	4413      	add	r3, r2
 8001916:	3314      	adds	r3, #20
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	601a      	str	r2, [r3, #0]
    
    if(Instance == 0U)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d14f      	bne.n	80019c2 <CCA02M1_AUDIO_IN_Record+0xd6>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }  
      
#else
      
      if(AudioInCtx[Instance].ChannelsNbr > 2U)
 8001922:	4a2c      	ldr	r2, [pc, #176]	; (80019d4 <CCA02M1_AUDIO_IN_Record+0xe8>)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2164      	movs	r1, #100	; 0x64
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	4413      	add	r3, r2
 800192e:	3310      	adds	r3, #16
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d913      	bls.n	800195e <CCA02M1_AUDIO_IN_Record+0x72>
      {
        if(HAL_SPI_Receive_DMA(&hAudioInSPI, (uint8_t *)SPI_InternalBuffer, (uint16_t)AudioInCtx[Instance].Size) != HAL_OK)
 8001936:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <CCA02M1_AUDIO_IN_Record+0xe8>)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2164      	movs	r1, #100	; 0x64
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	4413      	add	r3, r2
 8001942:	331c      	adds	r3, #28
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	461a      	mov	r2, r3
 800194a:	4923      	ldr	r1, [pc, #140]	; (80019d8 <CCA02M1_AUDIO_IN_Record+0xec>)
 800194c:	4823      	ldr	r0, [pc, #140]	; (80019dc <CCA02M1_AUDIO_IN_Record+0xf0>)
 800194e:	f004 fc19 	bl	8006184 <HAL_SPI_Receive_DMA>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <CCA02M1_AUDIO_IN_Record+0x72>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8001958:	f06f 0303 	mvn.w	r3, #3
 800195c:	617b      	str	r3, [r7, #20]
        }
      }
      
      if(AudioInCtx[Instance].ChannelsNbr != 1U)
 800195e:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <CCA02M1_AUDIO_IN_Record+0xe8>)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2164      	movs	r1, #100	; 0x64
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	3310      	adds	r3, #16
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d007      	beq.n	8001982 <CCA02M1_AUDIO_IN_Record+0x96>
      {
        if(AUDIO_IN_Timer_Start() != HAL_OK)
 8001972:	f000 fc4b 	bl	800220c <AUDIO_IN_Timer_Start>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <CCA02M1_AUDIO_IN_Record+0x96>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800197c:	f06f 0303 	mvn.w	r3, #3
 8001980:	617b      	str	r3, [r7, #20]
        }
      }
      
      if(HAL_I2S_Receive_DMA(&hAudioInI2s, I2S_InternalBuffer, (uint16_t)AudioInCtx[Instance].Size/2U) != HAL_OK)
 8001982:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <CCA02M1_AUDIO_IN_Record+0xe8>)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2164      	movs	r1, #100	; 0x64
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	4413      	add	r3, r2
 800198e:	331c      	adds	r3, #28
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	b29b      	uxth	r3, r3
 8001998:	461a      	mov	r2, r3
 800199a:	4911      	ldr	r1, [pc, #68]	; (80019e0 <CCA02M1_AUDIO_IN_Record+0xf4>)
 800199c:	4811      	ldr	r0, [pc, #68]	; (80019e4 <CCA02M1_AUDIO_IN_Record+0xf8>)
 800199e:	f001 fc61 	bl	8003264 <HAL_I2S_Receive_DMA>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <CCA02M1_AUDIO_IN_Record+0xc2>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80019a8:	f06f 0303 	mvn.w	r3, #3
 80019ac:	617b      	str	r3, [r7, #20]
      }
      
#endif
      
      /* Update BSP AUDIO IN state */     
      AudioInCtx[Instance].State = AUDIO_IN_STATE_RECORDING;
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <CCA02M1_AUDIO_IN_Record+0xe8>)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2164      	movs	r1, #100	; 0x64
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	3324      	adds	r3, #36	; 0x24
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	e002      	b.n	80019c8 <CCA02M1_AUDIO_IN_Record+0xdc>
      }
      /* Update BSP AUDIO IN state */     
      AudioInCtx[Instance].State = AUDIO_IN_STATE_RECORDING;
      
#else
      ret = BSP_ERROR_WRONG_PARAM;
 80019c2:	f06f 0301 	mvn.w	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
#endif
    }
  }
  /* Return BSP status */
  return ret;
 80019c8:	697b      	ldr	r3, [r7, #20]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000840 	.word	0x20000840
 80019d8:	2000117c 	.word	0x2000117c
 80019dc:	20000ae4 	.word	0x20000ae4
 80019e0:	20000b7c 	.word	0x20000b7c
 80019e4:	20001bf0 	.word	0x20001bf0

080019e8 <CCA02M1_AUDIO_IN_SetVolume>:
* @param  Instance  AUDIO IN Instance. It can be 0 when I2S / SPI is used or 1 if DFSDM is used
* @param  Volume    Volume level to be returnd
* @retval BSP status
*/
int32_t CCA02M1_AUDIO_IN_SetVolume(uint32_t Instance, uint32_t Volume)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
  
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d903      	bls.n	8001a04 <CCA02M1_AUDIO_IN_SetVolume+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019fc:	f06f 0301 	mvn.w	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	e04b      	b.n	8001a9c <CCA02M1_AUDIO_IN_SetVolume+0xb4>
  }
  else if (Instance == 0U)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d13f      	bne.n	8001a8a <CCA02M1_AUDIO_IN_SetVolume+0xa2>
      22,22,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,25,25,25,
      25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,
      27,27,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,
      29,29,29,29,30,30,30,30,30,30,30,31  
    };
    for (index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	e030      	b.n	8001a72 <CCA02M1_AUDIO_IN_SetVolume+0x8a>
    {
      if (PDM_FilterConfig[index].mic_gain != VolumeGain[Volume])
 8001a10:	4925      	ldr	r1, [pc, #148]	; (8001aa8 <CCA02M1_AUDIO_IN_SetVolume+0xc0>)
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3304      	adds	r3, #4
 8001a20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a24:	4921      	ldr	r1, [pc, #132]	; (8001aac <CCA02M1_AUDIO_IN_SetVolume+0xc4>)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d01d      	beq.n	8001a6c <CCA02M1_AUDIO_IN_SetVolume+0x84>
      {
        PDM_FilterConfig[index].mic_gain = VolumeGain[Volume];
 8001a30:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <CCA02M1_AUDIO_IN_SetVolume+0xc4>)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8001a38:	491b      	ldr	r1, [pc, #108]	; (8001aa8 <CCA02M1_AUDIO_IN_SetVolume+0xc0>)
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	440b      	add	r3, r1
 8001a46:	3304      	adds	r3, #4
 8001a48:	4602      	mov	r2, r0
 8001a4a:	801a      	strh	r2, [r3, #0]
        (void)PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	224c      	movs	r2, #76	; 0x4c
 8001a50:	fb02 f303 	mul.w	r3, r2, r3
 8001a54:	4a16      	ldr	r2, [pc, #88]	; (8001ab0 <CCA02M1_AUDIO_IN_SetVolume+0xc8>)
 8001a56:	1898      	adds	r0, r3, r2
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <CCA02M1_AUDIO_IN_SetVolume+0xc0>)
 8001a64:	4413      	add	r3, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f00c feee 	bl	800e848 <PDM_Filter_setConfig>
    for (index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <CCA02M1_AUDIO_IN_SetVolume+0xcc>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2164      	movs	r1, #100	; 0x64
 8001a78:	fb01 f303 	mul.w	r3, r1, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3310      	adds	r3, #16
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d3c3      	bcc.n	8001a10 <CCA02M1_AUDIO_IN_SetVolume+0x28>
 8001a88:	e008      	b.n	8001a9c <CCA02M1_AUDIO_IN_SetVolume+0xb4>
#endif
  }
  else
  {
    /* Update AudioIn Context */
    AudioInCtx[Instance].Volume = Volume;
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <CCA02M1_AUDIO_IN_SetVolume+0xcc>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2164      	movs	r1, #100	; 0x64
 8001a90:	fb01 f303 	mul.w	r3, r1, r3
 8001a94:	4413      	add	r3, r2
 8001a96:	3320      	adds	r3, #32
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	601a      	str	r2, [r3, #0]
  }
  /* Return BSP status */
  return ret;  
 8001a9c:	68fb      	ldr	r3, [r7, #12]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000acc 	.word	0x20000acc
 8001aac:	200004a0 	.word	0x200004a0
 8001ab0:	2000099c 	.word	0x2000099c
 8001ab4:	20000840 	.word	0x20000840

08001ab8 <HAL_I2S_RxCpltCallback>:
written into the buffer that the user indicates when calling the CCA02M1_AUDIO_IN_Start(...) function.
* @param hi2s: I2S handle
* @retval None
*/
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);
  uint32_t index;
  
  switch(AudioInCtx[0].ChannelsNbr){
 8001ac0:	4b8c      	ldr	r3, [pc, #560]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d023      	beq.n	8001b10 <HAL_I2S_RxCpltCallback+0x58>
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d073      	beq.n	8001bb4 <HAL_I2S_RxCpltCallback+0xfc>
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d000      	beq.n	8001ad2 <HAL_I2S_RxCpltCallback+0x1a>
      break;
    }
  default:
    {
      
      break;
 8001ad0:	e109      	b.n	8001ce6 <HAL_I2S_RxCpltCallback+0x22e>
      uint16_t * DataTempI2S = &I2S_InternalBuffer[AudioInCtx[0].Size/4U] ;
 8001ad2:	4b88      	ldr	r3, [pc, #544]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4a87      	ldr	r2, [pc, #540]	; (8001cf8 <HAL_I2S_RxCpltCallback+0x240>)
 8001adc:	4413      	add	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]
      for(index = 0; index < (AudioInCtx[0].Size/4U); index++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	e00d      	b.n	8001b02 <HAL_I2S_RxCpltCallback+0x4a>
        AudioInCtx[0].pBuff[index] = (DataTempI2S[index]);
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	441a      	add	r2, r3
 8001aee:	4b81      	ldr	r3, [pc, #516]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001af0:	6959      	ldr	r1, [r3, #20]
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	440b      	add	r3, r1
 8001af8:	8812      	ldrh	r2, [r2, #0]
 8001afa:	801a      	strh	r2, [r3, #0]
      for(index = 0; index < (AudioInCtx[0].Size/4U); index++)
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	3301      	adds	r3, #1
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
 8001b02:	4b7c      	ldr	r3, [pc, #496]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3eb      	bcc.n	8001ae6 <HAL_I2S_RxCpltCallback+0x2e>
      break;
 8001b0e:	e0ea      	b.n	8001ce6 <HAL_I2S_RxCpltCallback+0x22e>
      uint16_t * DataTempI2S = &(I2S_InternalBuffer[AudioInCtx[0].Size/2U]);
 8001b10:	4b78      	ldr	r3, [pc, #480]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	085b      	lsrs	r3, r3, #1
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4a77      	ldr	r2, [pc, #476]	; (8001cf8 <HAL_I2S_RxCpltCallback+0x240>)
 8001b1a:	4413      	add	r3, r2
 8001b1c:	617b      	str	r3, [r7, #20]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) {
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	e040      	b.n	8001ba6 <HAL_I2S_RxCpltCallback+0xee>
        a = ((uint8_t *)(DataTempI2S))[(index*2U)];
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	74fb      	strb	r3, [r7, #19]
        b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	3301      	adds	r3, #1
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4413      	add	r3, r2
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	74bb      	strb	r3, [r7, #18]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] | (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8001b3e:	7cfb      	ldrb	r3, [r7, #19]
 8001b40:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001b44:	4a6d      	ldr	r2, [pc, #436]	; (8001cfc <HAL_I2S_RxCpltCallback+0x244>)
 8001b46:	5cd3      	ldrb	r3, [r2, r3]
 8001b48:	b25a      	sxtb	r2, r3
 8001b4a:	7cbb      	ldrb	r3, [r7, #18]
 8001b4c:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001b50:	496a      	ldr	r1, [pc, #424]	; (8001cfc <HAL_I2S_RxCpltCallback+0x244>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b259      	sxtb	r1, r3
 8001b5c:	4b65      	ldr	r3, [pc, #404]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	b2ca      	uxtb	r2, r1
 8001b68:	701a      	strb	r2, [r3, #0]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] | (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8001b6a:	7cfb      	ldrb	r3, [r7, #19]
 8001b6c:	085b      	lsrs	r3, r3, #1
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001b74:	4a61      	ldr	r2, [pc, #388]	; (8001cfc <HAL_I2S_RxCpltCallback+0x244>)
 8001b76:	5cd3      	ldrb	r3, [r2, r3]
 8001b78:	b25a      	sxtb	r2, r3
 8001b7a:	7cbb      	ldrb	r3, [r7, #18]
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001b84:	495d      	ldr	r1, [pc, #372]	; (8001cfc <HAL_I2S_RxCpltCallback+0x244>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	b259      	sxtb	r1, r3
 8001b90:	4b58      	ldr	r3, [pc, #352]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001b92:	695a      	ldr	r2, [r3, #20]
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	3301      	adds	r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b2ca      	uxtb	r2, r1
 8001b9e:	701a      	strb	r2, [r3, #0]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) {
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba6:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	085b      	lsrs	r3, r3, #1
 8001bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d3b8      	bcc.n	8001b24 <HAL_I2S_RxCpltCallback+0x6c>
      break;
 8001bb2:	e098      	b.n	8001ce6 <HAL_I2S_RxCpltCallback+0x22e>
      uint16_t * DataTempI2S = &(I2S_InternalBuffer[AudioInCtx[0].Size/2U]);
 8001bb4:	4b4f      	ldr	r3, [pc, #316]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4a4e      	ldr	r2, [pc, #312]	; (8001cf8 <HAL_I2S_RxCpltCallback+0x240>)
 8001bbe:	4413      	add	r3, r2
 8001bc0:	623b      	str	r3, [r7, #32]
      uint16_t * DataTempSPI = &(SPI_InternalBuffer[AudioInCtx[0].Size/2U]);
 8001bc2:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4a4d      	ldr	r2, [pc, #308]	; (8001d00 <HAL_I2S_RxCpltCallback+0x248>)
 8001bcc:	4413      	add	r3, r2
 8001bce:	61fb      	str	r3, [r7, #28]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd4:	e07f      	b.n	8001cd6 <HAL_I2S_RxCpltCallback+0x21e>
        a = ((uint8_t *)(DataTempI2S))[(index*2U)];
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	6a3a      	ldr	r2, [r7, #32]
 8001bdc:	4413      	add	r3, r2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	76fb      	strb	r3, [r7, #27]
        b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	3301      	adds	r3, #1
 8001be8:	6a3a      	ldr	r2, [r7, #32]
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	76bb      	strb	r3, [r7, #26]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001bf0:	7efb      	ldrb	r3, [r7, #27]
 8001bf2:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001bf6:	4a41      	ldr	r2, [pc, #260]	; (8001cfc <HAL_I2S_RxCpltCallback+0x244>)
 8001bf8:	5cd3      	ldrb	r3, [r2, r3]
 8001bfa:	b25a      	sxtb	r2, r3
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8001bfc:	7ebb      	ldrb	r3, [r7, #26]
 8001bfe:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001c02:	493e      	ldr	r1, [pc, #248]	; (8001cfc <HAL_I2S_RxCpltCallback+0x244>)
 8001c04:	5ccb      	ldrb	r3, [r1, r3]
 8001c06:	011b      	lsls	r3, r3, #4
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	b259      	sxtb	r1, r3
 8001c0e:	4b39      	ldr	r3, [pc, #228]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	b2ca      	uxtb	r2, r1
 8001c1a:	701a      	strb	r2, [r3, #0]
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8001c1c:	7efb      	ldrb	r3, [r7, #27]
 8001c1e:	085b      	lsrs	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001c26:	4a35      	ldr	r2, [pc, #212]	; (8001cfc <HAL_I2S_RxCpltCallback+0x244>)
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	b25a      	sxtb	r2, r3
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8001c2c:	7ebb      	ldrb	r3, [r7, #26]
 8001c2e:	085b      	lsrs	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001c36:	4931      	ldr	r1, [pc, #196]	; (8001cfc <HAL_I2S_RxCpltCallback+0x244>)
 8001c38:	5ccb      	ldrb	r3, [r1, r3]
 8001c3a:	011b      	lsls	r3, r3, #4
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b259      	sxtb	r1, r3
 8001c42:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b2ca      	uxtb	r2, r1
 8001c50:	701a      	strb	r2, [r3, #0]
            a = ((uint8_t *)(DataTempSPI))[(index*2U)];
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	4413      	add	r3, r2
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	76fb      	strb	r3, [r7, #27]
            b = ((uint8_t *)(DataTempSPI))[(index*2U)+1U];
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	3301      	adds	r3, #1
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	4413      	add	r3, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	76bb      	strb	r3, [r7, #26]
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001c6c:	7efb      	ldrb	r3, [r7, #27]
 8001c6e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001c72:	4a22      	ldr	r2, [pc, #136]	; (8001cfc <HAL_I2S_RxCpltCallback+0x244>)
 8001c74:	5cd3      	ldrb	r3, [r2, r3]
 8001c76:	b25a      	sxtb	r2, r3
              (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8001c78:	7ebb      	ldrb	r3, [r7, #26]
 8001c7a:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001c7e:	491f      	ldr	r1, [pc, #124]	; (8001cfc <HAL_I2S_RxCpltCallback+0x244>)
 8001c80:	5ccb      	ldrb	r3, [r1, r3]
 8001c82:	011b      	lsls	r3, r3, #4
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001c84:	b25b      	sxtb	r3, r3
 8001c86:	4313      	orrs	r3, r2
 8001c88:	b259      	sxtb	r1, r3
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	b2ca      	uxtb	r2, r1
 8001c98:	701a      	strb	r2, [r3, #0]
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8001c9a:	7efb      	ldrb	r3, [r7, #27]
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001ca4:	4a15      	ldr	r2, [pc, #84]	; (8001cfc <HAL_I2S_RxCpltCallback+0x244>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	b25a      	sxtb	r2, r3
                (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8001caa:	7ebb      	ldrb	r3, [r7, #26]
 8001cac:	085b      	lsrs	r3, r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001cb4:	4911      	ldr	r1, [pc, #68]	; (8001cfc <HAL_I2S_RxCpltCallback+0x244>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	011b      	lsls	r3, r3, #4
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b259      	sxtb	r1, r3
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	3303      	adds	r3, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	b2ca      	uxtb	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) {
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <HAL_I2S_RxCpltCallback+0x23c>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	085b      	lsrs	r3, r3, #1
 8001cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	f4ff af79 	bcc.w	8001bd6 <HAL_I2S_RxCpltCallback+0x11e>
      break;
 8001ce4:	bf00      	nop
    }
    
  }
  
  CCA02M1_AUDIO_IN_TransferComplete_CallBack(0);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f00a f8c1 	bl	800be6e <CCA02M1_AUDIO_IN_TransferComplete_CallBack>
}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000840 	.word	0x20000840
 8001cf8:	20000b7c 	.word	0x20000b7c
 8001cfc:	20000400 	.word	0x20000400
 8001d00:	2000117c 	.word	0x2000117c

08001d04 <HAL_I2S_RxHalfCpltCallback>:
written into the buffer that the user indicates when calling the CCA02M1_AUDIO_IN_Start(...) function.
* @param hi2s: I2S handle
* @retval None
*/
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);
  uint32_t index;
  switch(AudioInCtx[0].ChannelsNbr){
 8001d0c:	4b82      	ldr	r3, [pc, #520]	; (8001f18 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d01e      	beq.n	8001d52 <HAL_I2S_RxHalfCpltCallback+0x4e>
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d069      	beq.n	8001dec <HAL_I2S_RxHalfCpltCallback+0xe8>
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d000      	beq.n	8001d1e <HAL_I2S_RxHalfCpltCallback+0x1a>
      }
      break;   
    }
  default:
    {      
      break;
 8001d1c:	e0f5      	b.n	8001f0a <HAL_I2S_RxHalfCpltCallback+0x206>
      uint16_t * DataTempI2S = I2S_InternalBuffer;
 8001d1e:	4b7f      	ldr	r3, [pc, #508]	; (8001f1c <HAL_I2S_RxHalfCpltCallback+0x218>)
 8001d20:	60fb      	str	r3, [r7, #12]
      for(index = 0; index < (AudioInCtx[0].Size/4U); index++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
 8001d26:	e00d      	b.n	8001d44 <HAL_I2S_RxHalfCpltCallback+0x40>
        AudioInCtx[0].pBuff[index] = (DataTempI2S[index]);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	441a      	add	r2, r3
 8001d30:	4b79      	ldr	r3, [pc, #484]	; (8001f18 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001d32:	6959      	ldr	r1, [r3, #20]
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	440b      	add	r3, r1
 8001d3a:	8812      	ldrh	r2, [r2, #0]
 8001d3c:	801a      	strh	r2, [r3, #0]
      for(index = 0; index < (AudioInCtx[0].Size/4U); index++)
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	3301      	adds	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
 8001d44:	4b74      	ldr	r3, [pc, #464]	; (8001f18 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3eb      	bcc.n	8001d28 <HAL_I2S_RxHalfCpltCallback+0x24>
      break;
 8001d50:	e0db      	b.n	8001f0a <HAL_I2S_RxHalfCpltCallback+0x206>
      uint16_t * DataTempI2S = I2S_InternalBuffer;
 8001d52:	4b72      	ldr	r3, [pc, #456]	; (8001f1c <HAL_I2S_RxHalfCpltCallback+0x218>)
 8001d54:	617b      	str	r3, [r7, #20]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) {
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5a:	e040      	b.n	8001dde <HAL_I2S_RxHalfCpltCallback+0xda>
        a = ((uint8_t *)(DataTempI2S))[(index*2U)];
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	74fb      	strb	r3, [r7, #19]
        b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4413      	add	r3, r2
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	74bb      	strb	r3, [r7, #18]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001d76:	7cfb      	ldrb	r3, [r7, #19]
 8001d78:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001d7c:	4a68      	ldr	r2, [pc, #416]	; (8001f20 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	b25a      	sxtb	r2, r3
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8001d82:	7cbb      	ldrb	r3, [r7, #18]
 8001d84:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001d88:	4965      	ldr	r1, [pc, #404]	; (8001f20 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 8001d8a:	5ccb      	ldrb	r3, [r1, r3]
 8001d8c:	011b      	lsls	r3, r3, #4
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b259      	sxtb	r1, r3
 8001d94:	4b60      	ldr	r3, [pc, #384]	; (8001f18 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b2ca      	uxtb	r2, r1
 8001da0:	701a      	strb	r2, [r3, #0]
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8001da2:	7cfb      	ldrb	r3, [r7, #19]
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001dac:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
 8001db0:	b25a      	sxtb	r2, r3
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8001db2:	7cbb      	ldrb	r3, [r7, #18]
 8001db4:	085b      	lsrs	r3, r3, #1
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001dbc:	4958      	ldr	r1, [pc, #352]	; (8001f20 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	011b      	lsls	r3, r3, #4
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b259      	sxtb	r1, r3
 8001dc8:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b2ca      	uxtb	r2, r1
 8001dd6:	701a      	strb	r2, [r3, #0]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) {
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	3301      	adds	r3, #1
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dde:	4b4e      	ldr	r3, [pc, #312]	; (8001f18 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	085b      	lsrs	r3, r3, #1
 8001de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d3b8      	bcc.n	8001d5c <HAL_I2S_RxHalfCpltCallback+0x58>
      break;
 8001dea:	e08e      	b.n	8001f0a <HAL_I2S_RxHalfCpltCallback+0x206>
      uint16_t * DataTempI2S = I2S_InternalBuffer;
 8001dec:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <HAL_I2S_RxHalfCpltCallback+0x218>)
 8001dee:	623b      	str	r3, [r7, #32]
      uint16_t * DataTempSPI = SPI_InternalBuffer;
 8001df0:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <HAL_I2S_RxHalfCpltCallback+0x220>)
 8001df2:	61fb      	str	r3, [r7, #28]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) 
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
 8001df8:	e07f      	b.n	8001efa <HAL_I2S_RxHalfCpltCallback+0x1f6>
        a = ((uint8_t *)(DataTempI2S))[(index*2U)];
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	6a3a      	ldr	r2, [r7, #32]
 8001e00:	4413      	add	r3, r2
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	76fb      	strb	r3, [r7, #27]
        b = ((uint8_t *)(DataTempI2S))[(index*2U)+1U];
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	6a3a      	ldr	r2, [r7, #32]
 8001e0e:	4413      	add	r3, r2
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	76bb      	strb	r3, [r7, #26]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001e14:	7efb      	ldrb	r3, [r7, #27]
 8001e16:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001e1a:	4a41      	ldr	r2, [pc, #260]	; (8001f20 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	b25a      	sxtb	r2, r3
          (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8001e20:	7ebb      	ldrb	r3, [r7, #26]
 8001e22:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001e26:	493e      	ldr	r1, [pc, #248]	; (8001f20 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 8001e28:	5ccb      	ldrb	r3, [r1, r3]
 8001e2a:	011b      	lsls	r3, r3, #4
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001e2c:	b25b      	sxtb	r3, r3
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	b259      	sxtb	r1, r3
 8001e32:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b2ca      	uxtb	r2, r1
 8001e3e:	701a      	strb	r2, [r3, #0]
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8001e40:	7efb      	ldrb	r3, [r7, #27]
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001e4a:	4a35      	ldr	r2, [pc, #212]	; (8001f20 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 8001e4c:	5cd3      	ldrb	r3, [r2, r3]
 8001e4e:	b25a      	sxtb	r2, r3
            (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8001e50:	7ebb      	ldrb	r3, [r7, #26]
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001e5a:	4931      	ldr	r1, [pc, #196]	; (8001f20 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 8001e5c:	5ccb      	ldrb	r3, [r1, r3]
 8001e5e:	011b      	lsls	r3, r3, #4
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+1U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8001e60:	b25b      	sxtb	r3, r3
 8001e62:	4313      	orrs	r3, r2
 8001e64:	b259      	sxtb	r1, r3
 8001e66:	4b2c      	ldr	r3, [pc, #176]	; (8001f18 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	3301      	adds	r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	b2ca      	uxtb	r2, r1
 8001e74:	701a      	strb	r2, [r3, #0]
            a = ((uint8_t *)(DataTempSPI))[(index*2U)];
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	76fb      	strb	r3, [r7, #27]
            b = ((uint8_t *)(DataTempSPI))[(index*2U)+1U];
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	3301      	adds	r3, #1
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	76bb      	strb	r3, [r7, #26]
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001e90:	7efb      	ldrb	r3, [r7, #27]
 8001e92:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001e96:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 8001e98:	5cd3      	ldrb	r3, [r2, r3]
 8001e9a:	b25a      	sxtb	r2, r3
              (Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4);;
 8001e9c:	7ebb      	ldrb	r3, [r7, #26]
 8001e9e:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001ea2:	491f      	ldr	r1, [pc, #124]	; (8001f20 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 8001ea4:	5ccb      	ldrb	r3, [r1, r3]
 8001ea6:	011b      	lsls	r3, r3, #4
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+2U] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8001ea8:	b25b      	sxtb	r3, r3
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	b259      	sxtb	r1, r3
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	b2ca      	uxtb	r2, r1
 8001ebc:	701a      	strb	r2, [r3, #0]
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8001ebe:	7efb      	ldrb	r3, [r7, #27]
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001ec8:	4a15      	ldr	r2, [pc, #84]	; (8001f20 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 8001eca:	5cd3      	ldrb	r3, [r2, r3]
 8001ecc:	b25a      	sxtb	r2, r3
                (Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4);
 8001ece:	7ebb      	ldrb	r3, [r7, #26]
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8001ed8:	4911      	ldr	r1, [pc, #68]	; (8001f20 <HAL_I2S_RxHalfCpltCallback+0x21c>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	011b      	lsls	r3, r3, #4
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4U)+3U] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8001ede:	b25b      	sxtb	r3, r3
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	b259      	sxtb	r1, r3
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	3303      	adds	r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	b2ca      	uxtb	r2, r1
 8001ef2:	701a      	strb	r2, [r3, #0]
      for(index=0; index<(AudioInCtx[0].Size/2U); index++) 
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <HAL_I2S_RxHalfCpltCallback+0x214>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	085b      	lsrs	r3, r3, #1
 8001f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f02:	429a      	cmp	r2, r3
 8001f04:	f4ff af79 	bcc.w	8001dfa <HAL_I2S_RxHalfCpltCallback+0xf6>
      break;   
 8001f08:	bf00      	nop
    }
    
  }
  
  CCA02M1_AUDIO_IN_HalfTransfer_CallBack(0);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f009 ffa5 	bl	800be5a <CCA02M1_AUDIO_IN_HalfTransfer_CallBack>
}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000840 	.word	0x20000840
 8001f1c:	20000b7c 	.word	0x20000b7c
 8001f20:	20000400 	.word	0x20000400
 8001f24:	2000117c 	.word	0x2000117c

08001f28 <I2S_MspInit>:
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
}

#else
static void I2S_MspInit(I2S_HandleTypeDef *hi2s)
{	
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the I2S2 peripheral clock */
  AUDIO_IN_I2S_CLK_ENABLE();
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <I2S_MspInit+0x9c>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	4a22      	ldr	r2, [pc, #136]	; (8001fc4 <I2S_MspInit+0x9c>)
 8001f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f40:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <I2S_MspInit+0x9c>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	693b      	ldr	r3, [r7, #16]
  
  /* Enable I2S GPIO clocks */
  AUDIO_IN_I2S_SCK_GPIO_CLK_ENABLE();
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <I2S_MspInit+0x9c>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	4a1b      	ldr	r2, [pc, #108]	; (8001fc4 <I2S_MspInit+0x9c>)
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <I2S_MspInit+0x9c>)
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
  AUDIO_IN_I2S_MOSI_GPIO_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <I2S_MspInit+0x9c>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <I2S_MspInit+0x9c>)
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	6313      	str	r3, [r2, #48]	; 0x30
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <I2S_MspInit+0x9c>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
  
  /* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	623b      	str	r3, [r7, #32]
  
  
  GPIO_InitStruct.Pin       = AUDIO_IN_I2S_SCK_PIN;
 8001f90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = AUDIO_IN_I2S_SCK_AF;
 8001f96:	2305      	movs	r3, #5
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_IN_I2S_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <I2S_MspInit+0xa0>)
 8001fa2:	f000 fecb 	bl	8002d3c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin       = AUDIO_IN_I2S_MOSI_PIN ;
 8001fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = AUDIO_IN_I2S_MOSI_AF;
 8001fac:	2305      	movs	r3, #5
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_IN_I2S_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <I2S_MspInit+0xa0>)
 8001fb8:	f000 fec0 	bl	8002d3c <HAL_GPIO_Init>
  
} 
 8001fbc:	bf00      	nop
 8001fbe:	3728      	adds	r7, #40	; 0x28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020400 	.word	0x40020400

08001fcc <SPI_MspInit>:

static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{  
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	; 0x30
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable GPIO TX/RX clock */
  AUDIO_IN_SPI_SCK_GPIO_CLK_ENABLE();
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	4b30      	ldr	r3, [pc, #192]	; (800209c <SPI_MspInit+0xd0>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	4a2f      	ldr	r2, [pc, #188]	; (800209c <SPI_MspInit+0xd0>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <SPI_MspInit+0xd0>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	69bb      	ldr	r3, [r7, #24]
  AUDIO_IN_SPI_MISO_GPIO_CLK_ENABLE();
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	4b29      	ldr	r3, [pc, #164]	; (800209c <SPI_MspInit+0xd0>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	4a28      	ldr	r2, [pc, #160]	; (800209c <SPI_MspInit+0xd0>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8002000:	4b26      	ldr	r3, [pc, #152]	; (800209c <SPI_MspInit+0xd0>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	697b      	ldr	r3, [r7, #20]
  AUDIO_IN_SPI_MOSI_GPIO_CLK_ENABLE();
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <SPI_MspInit+0xd0>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	4a21      	ldr	r2, [pc, #132]	; (800209c <SPI_MspInit+0xd0>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6313      	str	r3, [r2, #48]	; 0x30
 800201c:	4b1f      	ldr	r3, [pc, #124]	; (800209c <SPI_MspInit+0xd0>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	693b      	ldr	r3, [r7, #16]
  /* Enable SPI3 clock */
  AUDIO_IN_SPI_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <SPI_MspInit+0xd0>)
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	4a1a      	ldr	r2, [pc, #104]	; (800209c <SPI_MspInit+0xd0>)
 8002032:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002036:	6453      	str	r3, [r2, #68]	; 0x44
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <SPI_MspInit+0xd0>)
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
  /* Enable DMA1 clock */
  AUDIO_IN_SPI_DMAx_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <SPI_MspInit+0xd0>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4a13      	ldr	r2, [pc, #76]	; (800209c <SPI_MspInit+0xd0>)
 800204e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002052:	6313      	str	r3, [r2, #48]	; 0x30
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <SPI_MspInit+0xd0>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
  
  /*##-2- Configure peripheral GPIO ##########################################*/
  /* SPI SCK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = AUDIO_IN_SPI_SCK_PIN;
 8002060:	2320      	movs	r3, #32
 8002062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002068:	2301      	movs	r3, #1
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800206c:	2302      	movs	r3, #2
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = AUDIO_IN_SPI_SCK_AF;
 8002070:	2305      	movs	r3, #5
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  HAL_GPIO_Init(AUDIO_IN_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	4619      	mov	r1, r3
 800207a:	4809      	ldr	r0, [pc, #36]	; (80020a0 <SPI_MspInit+0xd4>)
 800207c:	f000 fe5e 	bl	8002d3c <HAL_GPIO_Init>
  
  /* SPI MOSI GPIO pin configuration  */
  GPIO_InitStruct.Pin = AUDIO_IN_SPI_MOSI_PIN;
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = AUDIO_IN_SPI_MOSI_AF;
 8002084:	2305      	movs	r3, #5
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	4619      	mov	r1, r3
 800208e:	4804      	ldr	r0, [pc, #16]	; (80020a0 <SPI_MspInit+0xd4>)
 8002090:	f000 fe54 	bl	8002d3c <HAL_GPIO_Init>
  
  
}
 8002094:	bf00      	nop
 8002096:	3730      	adds	r7, #48	; 0x30
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020000 	.word	0x40020000

080020a4 <AUDIO_IN_Timer_Init>:
* @brief Audio Timer Init
* @param None
* @retval None
*/
static HAL_StatusTypeDef AUDIO_IN_Timer_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret =  HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  static TIM_IC_InitTypeDef       sICConfig;
  static TIM_OC_InitTypeDef       sOCConfig; 
  GPIO_InitTypeDef   GPIO_InitStruct;
  
  /* Enable AUDIO_TIMER clock*/
  AUDIO_IN_TIMER_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	4b4e      	ldr	r3, [pc, #312]	; (80021f0 <AUDIO_IN_Timer_Init+0x14c>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	4a4d      	ldr	r2, [pc, #308]	; (80021f0 <AUDIO_IN_Timer_Init+0x14c>)
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	6413      	str	r3, [r2, #64]	; 0x40
 80020c0:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <AUDIO_IN_Timer_Init+0x14c>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
  AUDIO_IN_TIMER_CHOUT_GPIO_PORT_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <AUDIO_IN_Timer_Init+0x14c>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4a46      	ldr	r2, [pc, #280]	; (80021f0 <AUDIO_IN_Timer_Init+0x14c>)
 80020d6:	f043 0302 	orr.w	r3, r3, #2
 80020da:	6313      	str	r3, [r2, #48]	; 0x30
 80020dc:	4b44      	ldr	r3, [pc, #272]	; (80021f0 <AUDIO_IN_Timer_Init+0x14c>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
  AUDIO_IN_TIMER_CHIN_GPIO_PORT_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	4b40      	ldr	r3, [pc, #256]	; (80021f0 <AUDIO_IN_Timer_Init+0x14c>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	4a3f      	ldr	r2, [pc, #252]	; (80021f0 <AUDIO_IN_Timer_Init+0x14c>)
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	6313      	str	r3, [r2, #48]	; 0x30
 80020f8:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <AUDIO_IN_Timer_Init+0x14c>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
  
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002108:	2301      	movs	r3, #1
 800210a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	61fb      	str	r3, [r7, #28]
  
  GPIO_InitStruct.Alternate = AUDIO_IN_TIMER_CHIN_AF;
 8002110:	2302      	movs	r3, #2
 8002112:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pin = AUDIO_IN_TIMER_CHIN_PIN;
 8002114:	2310      	movs	r3, #16
 8002116:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHIN_GPIO_PORT, &GPIO_InitStruct);
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	4619      	mov	r1, r3
 800211e:	4835      	ldr	r0, [pc, #212]	; (80021f4 <AUDIO_IN_Timer_Init+0x150>)
 8002120:	f000 fe0c 	bl	8002d3c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = AUDIO_IN_TIMER_CHOUT_AF;
 8002124:	2302      	movs	r3, #2
 8002126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pin = AUDIO_IN_TIMER_CHOUT_PIN;
 8002128:	2320      	movs	r3, #32
 800212a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHOUT_GPIO_PORT, &GPIO_InitStruct);
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	4619      	mov	r1, r3
 8002132:	4830      	ldr	r0, [pc, #192]	; (80021f4 <AUDIO_IN_Timer_Init+0x150>)
 8002134:	f000 fe02 	bl	8002d3c <HAL_GPIO_Init>
  
  TimDividerHandle.Instance = AUDIO_IN_TIMER;
 8002138:	4b2f      	ldr	r3, [pc, #188]	; (80021f8 <AUDIO_IN_Timer_Init+0x154>)
 800213a:	4a30      	ldr	r2, [pc, #192]	; (80021fc <AUDIO_IN_Timer_Init+0x158>)
 800213c:	601a      	str	r2, [r3, #0]
  
  /* Configure the Input: channel_1 */
  sICConfig.ICPolarity  = TIM_ICPOLARITY_RISING;
 800213e:	4b30      	ldr	r3, [pc, #192]	; (8002200 <AUDIO_IN_Timer_Init+0x15c>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
  sICConfig.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002144:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <AUDIO_IN_Timer_Init+0x15c>)
 8002146:	2201      	movs	r2, #1
 8002148:	605a      	str	r2, [r3, #4]
  sICConfig.ICPrescaler = TIM_ICPSC_DIV1;
 800214a:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <AUDIO_IN_Timer_Init+0x15c>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  sICConfig.ICFilter = 0;
 8002150:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <AUDIO_IN_Timer_Init+0x15c>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
  if(HAL_TIM_IC_ConfigChannel(&TimDividerHandle, &sICConfig, TIM_CHANNEL_1) != HAL_OK)
 8002156:	2200      	movs	r2, #0
 8002158:	4929      	ldr	r1, [pc, #164]	; (8002200 <AUDIO_IN_Timer_Init+0x15c>)
 800215a:	4827      	ldr	r0, [pc, #156]	; (80021f8 <AUDIO_IN_Timer_Init+0x154>)
 800215c:	f004 fc85 	bl	8006a6a <HAL_TIM_IC_ConfigChannel>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <AUDIO_IN_Timer_Init+0xc8>
  {
    ret =  HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  /* Configure TIM1 in Gated Slave mode for the external trigger (Filtered Timer
  Input 1) */
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800216c:	4b25      	ldr	r3, [pc, #148]	; (8002204 <AUDIO_IN_Timer_Init+0x160>)
 800216e:	2250      	movs	r2, #80	; 0x50
 8002170:	605a      	str	r2, [r3, #4]
  sSlaveConfig.SlaveMode    = TIM_SLAVEMODE_EXTERNAL1;
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <AUDIO_IN_Timer_Init+0x160>)
 8002174:	2207      	movs	r2, #7
 8002176:	601a      	str	r2, [r3, #0]
  if( HAL_TIM_SlaveConfigSynchronization(&TimDividerHandle, &sSlaveConfig) != HAL_OK)
 8002178:	4922      	ldr	r1, [pc, #136]	; (8002204 <AUDIO_IN_Timer_Init+0x160>)
 800217a:	481f      	ldr	r0, [pc, #124]	; (80021f8 <AUDIO_IN_Timer_Init+0x154>)
 800217c:	f004 fdd8 	bl	8006d30 <HAL_TIM_SlaveConfigSynchro>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <AUDIO_IN_Timer_Init+0xe8>
  {
    ret =  HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  /* Initialize TIM3 peripheral in PWM mode*/
  TimDividerHandle.Init.Period            = 1;
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <AUDIO_IN_Timer_Init+0x154>)
 800218e:	2201      	movs	r2, #1
 8002190:	60da      	str	r2, [r3, #12]
  TimDividerHandle.Init.Prescaler         = 0;
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <AUDIO_IN_Timer_Init+0x154>)
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
  TimDividerHandle.Init.ClockDivision     = 0;
 8002198:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <AUDIO_IN_Timer_Init+0x154>)
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
  TimDividerHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800219e:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <AUDIO_IN_Timer_Init+0x154>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  TimDividerHandle.Init.RepetitionCounter = 0;
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <AUDIO_IN_Timer_Init+0x154>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	615a      	str	r2, [r3, #20]
  if(HAL_TIM_PWM_Init(&TimDividerHandle) != HAL_OK)
 80021aa:	4813      	ldr	r0, [pc, #76]	; (80021f8 <AUDIO_IN_Timer_Init+0x154>)
 80021ac:	f004 fc06 	bl	80069bc <HAL_TIM_PWM_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <AUDIO_IN_Timer_Init+0x118>
  {
    ret =  HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  /* Configure the PWM_channel_1  */
  sOCConfig.OCMode     = TIM_OCMODE_PWM1;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <AUDIO_IN_Timer_Init+0x164>)
 80021be:	2260      	movs	r2, #96	; 0x60
 80021c0:	601a      	str	r2, [r3, #0]
  sOCConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <AUDIO_IN_Timer_Init+0x164>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  sOCConfig.Pulse = 1;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <AUDIO_IN_Timer_Init+0x164>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	605a      	str	r2, [r3, #4]
  if(HAL_TIM_PWM_ConfigChannel(&TimDividerHandle, &sOCConfig, TIM_CHANNEL_2) != HAL_OK)
 80021ce:	2204      	movs	r2, #4
 80021d0:	490d      	ldr	r1, [pc, #52]	; (8002208 <AUDIO_IN_Timer_Init+0x164>)
 80021d2:	4809      	ldr	r0, [pc, #36]	; (80021f8 <AUDIO_IN_Timer_Init+0x154>)
 80021d4:	f004 fce6 	bl	8006ba4 <HAL_TIM_PWM_ConfigChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <AUDIO_IN_Timer_Init+0x140>
  {
    ret =  HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 80021e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020400 	.word	0x40020400
 80021f8:	20000b3c 	.word	0x20000b3c
 80021fc:	40000400 	.word	0x40000400
 8002200:	20001934 	.word	0x20001934
 8002204:	20001944 	.word	0x20001944
 8002208:	20001958 	.word	0x20001958

0800220c <AUDIO_IN_Timer_Start>:
* @brief Audio Timer Start
* @param None
* @retval None
*/
static HAL_StatusTypeDef AUDIO_IN_Timer_Start(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
  
  HAL_StatusTypeDef ret =  HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	71fb      	strb	r3, [r7, #7]
  if(HAL_TIM_IC_Start(&TimDividerHandle, TIM_CHANNEL_1) != HAL_OK)
 8002216:	2100      	movs	r1, #0
 8002218:	480a      	ldr	r0, [pc, #40]	; (8002244 <AUDIO_IN_Timer_Start+0x38>)
 800221a:	f004 fc04 	bl	8006a26 <HAL_TIM_IC_Start>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <AUDIO_IN_Timer_Start+0x1c>
  {
    ret =  HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	71fb      	strb	r3, [r7, #7]
  }
  /* Start the Output Compare */
  if(HAL_TIM_OC_Start(&TimDividerHandle, TIM_CHANNEL_2) != HAL_OK)
 8002228:	2104      	movs	r1, #4
 800222a:	4806      	ldr	r0, [pc, #24]	; (8002244 <AUDIO_IN_Timer_Start+0x38>)
 800222c:	f004 fb88 	bl	8006940 <HAL_TIM_OC_Start>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <AUDIO_IN_Timer_Start+0x2e>
  {
    ret =  HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 800223a:	79fb      	ldrb	r3, [r7, #7]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000b3c 	.word	0x20000b3c

08002248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0d      	ldr	r2, [pc, #52]	; (8002288 <HAL_Init+0x40>)
 8002252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <HAL_Init+0x40>)
 800225e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <HAL_Init+0x40>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002270:	2003      	movs	r0, #3
 8002272:	f000 f955 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002276:	200f      	movs	r0, #15
 8002278:	f000 f810 	bl	800229c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800227c:	f000 f806 	bl	800228c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023c00 	.word	0x40023c00

0800228c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_InitTick+0x54>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_InitTick+0x58>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f965 	bl	800258a <HAL_SYSTICK_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00e      	b.n	80022e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b0f      	cmp	r3, #15
 80022ce:	d80a      	bhi.n	80022e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d0:	2200      	movs	r2, #0
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f000 f92d 	bl	8002536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022dc:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <HAL_InitTick+0x5c>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e000      	b.n	80022e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	200005f0 	.word	0x200005f0
 80022f4:	200005a8 	.word	0x200005a8
 80022f8:	200005a4 	.word	0x200005a4

080022fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_IncTick+0x20>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_IncTick+0x24>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4413      	add	r3, r2
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <HAL_IncTick+0x24>)
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	200005a8 	.word	0x200005a8
 8002320:	20001c38 	.word	0x20001c38

08002324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return uwTick;
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_GetTick+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20001c38 	.word	0x20001c38

0800233c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff ffee 	bl	8002324 <HAL_GetTick>
 8002348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d005      	beq.n	8002362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_Delay+0x40>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002362:	bf00      	nop
 8002364:	f7ff ffde 	bl	8002324 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d8f7      	bhi.n	8002364 <HAL_Delay+0x28>
  {
  }
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200005a8 	.word	0x200005a8

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	db0b      	blt.n	800240e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	4907      	ldr	r1, [pc, #28]	; (800241c <__NVIC_EnableIRQ+0x38>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2001      	movs	r0, #1
 8002406:	fa00 f202 	lsl.w	r2, r0, r2
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	; (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	; (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ec:	d301      	bcc.n	80024f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00f      	b.n	8002512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <SysTick_Config+0x40>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fa:	210f      	movs	r1, #15
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	f7ff ff8e 	bl	8002420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <SysTick_Config+0x40>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <SysTick_Config+0x40>)
 800250c:	2207      	movs	r2, #7
 800250e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	e000e010 	.word	0xe000e010

08002520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff29 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002548:	f7ff ff3e 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 800254c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f7ff ff8e 	bl	8002474 <NVIC_EncodePriority>
 8002558:	4602      	mov	r2, r0
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff5d 	bl	8002420 <__NVIC_SetPriority>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff31 	bl	80023e4 <__NVIC_EnableIRQ>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffa2 	bl	80024dc <SysTick_Config>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025b0:	f7ff feb8 	bl	8002324 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e099      	b.n	80026f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e0:	e00f      	b.n	8002602 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025e2:	f7ff fe9f 	bl	8002324 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d908      	bls.n	8002602 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2203      	movs	r2, #3
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e078      	b.n	80026f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e8      	bne.n	80025e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_DMA_Init+0x158>)
 800261c:	4013      	ands	r3, r2
 800261e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800262e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	2b04      	cmp	r3, #4
 800265a:	d107      	bne.n	800266c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4313      	orrs	r3, r2
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f023 0307 	bic.w	r3, r3, #7
 8002682:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2b04      	cmp	r3, #4
 8002694:	d117      	bne.n	80026c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00e      	beq.n	80026c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 facd 	bl	8002c48 <DMA_CheckFifoParam>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2240      	movs	r2, #64	; 0x40
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026c2:	2301      	movs	r3, #1
 80026c4:	e016      	b.n	80026f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa84 	bl	8002bdc <DMA_CalcBaseAndBitshift>
 80026d4:	4603      	mov	r3, r0
 80026d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	223f      	movs	r2, #63	; 0x3f
 80026de:	409a      	lsls	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	f010803f 	.word	0xf010803f

08002700 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e050      	b.n	80027b4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d101      	bne.n	8002722 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
 8002720:	e048      	b.n	80027b4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2200      	movs	r2, #0
 8002740:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2221      	movs	r2, #33	; 0x21
 8002760:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fa3a 	bl	8002bdc <DMA_CalcBaseAndBitshift>
 8002768:	4603      	mov	r3, r0
 800276a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	223f      	movs	r2, #63	; 0x3f
 8002796:	409a      	lsls	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_DMA_Start_IT+0x26>
 80027de:	2302      	movs	r3, #2
 80027e0:	e040      	b.n	8002864 <HAL_DMA_Start_IT+0xa8>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d12f      	bne.n	8002856 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2202      	movs	r2, #2
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f9b8 	bl	8002b80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002814:	223f      	movs	r2, #63	; 0x3f
 8002816:	409a      	lsls	r2, r3
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0216 	orr.w	r2, r2, #22
 800282a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	2b00      	cmp	r3, #0
 8002832:	d007      	beq.n	8002844 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0208 	orr.w	r2, r2, #8
 8002842:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e005      	b.n	8002862 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800285e:	2302      	movs	r3, #2
 8002860:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002862:	7dfb      	ldrb	r3, [r7, #23]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002878:	4b92      	ldr	r3, [pc, #584]	; (8002ac4 <HAL_DMA_IRQHandler+0x258>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a92      	ldr	r2, [pc, #584]	; (8002ac8 <HAL_DMA_IRQHandler+0x25c>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	0a9b      	lsrs	r3, r3, #10
 8002884:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	2208      	movs	r2, #8
 8002898:	409a      	lsls	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01a      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0204 	bic.w	r2, r2, #4
 80028be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	2208      	movs	r2, #8
 80028c6:	409a      	lsls	r2, r3
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	f043 0201 	orr.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	2201      	movs	r2, #1
 80028de:	409a      	lsls	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d012      	beq.n	800290e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fa:	2201      	movs	r2, #1
 80028fc:	409a      	lsls	r2, r3
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f043 0202 	orr.w	r2, r3, #2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	2204      	movs	r2, #4
 8002914:	409a      	lsls	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d012      	beq.n	8002944 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00b      	beq.n	8002944 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	2204      	movs	r2, #4
 8002932:	409a      	lsls	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293c:	f043 0204 	orr.w	r2, r3, #4
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002948:	2210      	movs	r2, #16
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d043      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d03c      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	2210      	movs	r2, #16
 8002968:	409a      	lsls	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d018      	beq.n	80029ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d108      	bne.n	800299c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d024      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	4798      	blx	r3
 800299a:	e01f      	b.n	80029dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d01b      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
 80029ac:	e016      	b.n	80029dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d107      	bne.n	80029cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0208 	bic.w	r2, r2, #8
 80029ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e0:	2220      	movs	r2, #32
 80029e2:	409a      	lsls	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 808e 	beq.w	8002b0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8086 	beq.w	8002b0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	2220      	movs	r2, #32
 8002a04:	409a      	lsls	r2, r3
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	d136      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0216 	bic.w	r2, r2, #22
 8002a24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d103      	bne.n	8002a46 <HAL_DMA_IRQHandler+0x1da>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0208 	bic.w	r2, r2, #8
 8002a54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5a:	223f      	movs	r2, #63	; 0x3f
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d07d      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
        }
        return;
 8002a82:	e078      	b.n	8002b76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01c      	beq.n	8002acc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d108      	bne.n	8002ab2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d030      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
 8002ab0:	e02b      	b.n	8002b0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d027      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
 8002ac2:	e022      	b.n	8002b0a <HAL_DMA_IRQHandler+0x29e>
 8002ac4:	200005f0 	.word	0x200005f0
 8002ac8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10f      	bne.n	8002afa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0210 	bic.w	r2, r2, #16
 8002ae8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d032      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d022      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2205      	movs	r2, #5
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d307      	bcc.n	8002b52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f2      	bne.n	8002b36 <HAL_DMA_IRQHandler+0x2ca>
 8002b50:	e000      	b.n	8002b54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b52:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
 8002b74:	e000      	b.n	8002b78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b76:	bf00      	nop
    }
  }
}
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop

08002b80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	d108      	bne.n	8002bc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bbe:	e007      	b.n	8002bd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	60da      	str	r2, [r3, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	3b10      	subs	r3, #16
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <DMA_CalcBaseAndBitshift+0x64>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bf6:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <DMA_CalcBaseAndBitshift+0x68>)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d909      	bls.n	8002c1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c12:	f023 0303 	bic.w	r3, r3, #3
 8002c16:	1d1a      	adds	r2, r3, #4
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c1c:	e007      	b.n	8002c2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	aaaaaaab 	.word	0xaaaaaaab
 8002c44:	08013a54 	.word	0x08013a54

08002c48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d11f      	bne.n	8002ca2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d855      	bhi.n	8002d14 <DMA_CheckFifoParam+0xcc>
 8002c68:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <DMA_CheckFifoParam+0x28>)
 8002c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6e:	bf00      	nop
 8002c70:	08002c81 	.word	0x08002c81
 8002c74:	08002c93 	.word	0x08002c93
 8002c78:	08002c81 	.word	0x08002c81
 8002c7c:	08002d15 	.word	0x08002d15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d045      	beq.n	8002d18 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c90:	e042      	b.n	8002d18 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c9a:	d13f      	bne.n	8002d1c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca0:	e03c      	b.n	8002d1c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002caa:	d121      	bne.n	8002cf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d836      	bhi.n	8002d20 <DMA_CheckFifoParam+0xd8>
 8002cb2:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <DMA_CheckFifoParam+0x70>)
 8002cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb8:	08002cc9 	.word	0x08002cc9
 8002cbc:	08002ccf 	.word	0x08002ccf
 8002cc0:	08002cc9 	.word	0x08002cc9
 8002cc4:	08002ce1 	.word	0x08002ce1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ccc:	e02f      	b.n	8002d2e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d024      	beq.n	8002d24 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cde:	e021      	b.n	8002d24 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ce8:	d11e      	bne.n	8002d28 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cee:	e01b      	b.n	8002d28 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d902      	bls.n	8002cfc <DMA_CheckFifoParam+0xb4>
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d003      	beq.n	8002d02 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cfa:	e018      	b.n	8002d2e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002d00:	e015      	b.n	8002d2e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00e      	beq.n	8002d2c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
      break;
 8002d12:	e00b      	b.n	8002d2c <DMA_CheckFifoParam+0xe4>
      break;
 8002d14:	bf00      	nop
 8002d16:	e00a      	b.n	8002d2e <DMA_CheckFifoParam+0xe6>
      break;
 8002d18:	bf00      	nop
 8002d1a:	e008      	b.n	8002d2e <DMA_CheckFifoParam+0xe6>
      break;
 8002d1c:	bf00      	nop
 8002d1e:	e006      	b.n	8002d2e <DMA_CheckFifoParam+0xe6>
      break;
 8002d20:	bf00      	nop
 8002d22:	e004      	b.n	8002d2e <DMA_CheckFifoParam+0xe6>
      break;
 8002d24:	bf00      	nop
 8002d26:	e002      	b.n	8002d2e <DMA_CheckFifoParam+0xe6>
      break;   
 8002d28:	bf00      	nop
 8002d2a:	e000      	b.n	8002d2e <DMA_CheckFifoParam+0xe6>
      break;
 8002d2c:	bf00      	nop
    }
  } 
  
  return status; 
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	; 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	e165      	b.n	8003024 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	f040 8154 	bne.w	800301e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d00b      	beq.n	8002d96 <HAL_GPIO_Init+0x5a>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d007      	beq.n	8002d96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d8a:	2b11      	cmp	r3, #17
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b12      	cmp	r3, #18
 8002d94:	d130      	bne.n	8002df8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2203      	movs	r2, #3
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dcc:	2201      	movs	r2, #1
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 0201 	and.w	r2, r3, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	2203      	movs	r2, #3
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0xfc>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b12      	cmp	r3, #18
 8002e36:	d123      	bne.n	8002e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	08da      	lsrs	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3208      	adds	r2, #8
 8002e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	220f      	movs	r2, #15
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	08da      	lsrs	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3208      	adds	r2, #8
 8002e7a:	69b9      	ldr	r1, [r7, #24]
 8002e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0203 	and.w	r2, r3, #3
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80ae 	beq.w	800301e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <HAL_GPIO_Init+0x2fc>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	4a5b      	ldr	r2, [pc, #364]	; (8003038 <HAL_GPIO_Init+0x2fc>)
 8002ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed2:	4b59      	ldr	r3, [pc, #356]	; (8003038 <HAL_GPIO_Init+0x2fc>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ede:	4a57      	ldr	r2, [pc, #348]	; (800303c <HAL_GPIO_Init+0x300>)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4e      	ldr	r2, [pc, #312]	; (8003040 <HAL_GPIO_Init+0x304>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d025      	beq.n	8002f56 <HAL_GPIO_Init+0x21a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4d      	ldr	r2, [pc, #308]	; (8003044 <HAL_GPIO_Init+0x308>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01f      	beq.n	8002f52 <HAL_GPIO_Init+0x216>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4c      	ldr	r2, [pc, #304]	; (8003048 <HAL_GPIO_Init+0x30c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d019      	beq.n	8002f4e <HAL_GPIO_Init+0x212>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4b      	ldr	r2, [pc, #300]	; (800304c <HAL_GPIO_Init+0x310>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <HAL_GPIO_Init+0x20e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4a      	ldr	r2, [pc, #296]	; (8003050 <HAL_GPIO_Init+0x314>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00d      	beq.n	8002f46 <HAL_GPIO_Init+0x20a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a49      	ldr	r2, [pc, #292]	; (8003054 <HAL_GPIO_Init+0x318>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d007      	beq.n	8002f42 <HAL_GPIO_Init+0x206>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a48      	ldr	r2, [pc, #288]	; (8003058 <HAL_GPIO_Init+0x31c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_GPIO_Init+0x202>
 8002f3a:	2306      	movs	r3, #6
 8002f3c:	e00c      	b.n	8002f58 <HAL_GPIO_Init+0x21c>
 8002f3e:	2307      	movs	r3, #7
 8002f40:	e00a      	b.n	8002f58 <HAL_GPIO_Init+0x21c>
 8002f42:	2305      	movs	r3, #5
 8002f44:	e008      	b.n	8002f58 <HAL_GPIO_Init+0x21c>
 8002f46:	2304      	movs	r3, #4
 8002f48:	e006      	b.n	8002f58 <HAL_GPIO_Init+0x21c>
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e004      	b.n	8002f58 <HAL_GPIO_Init+0x21c>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e002      	b.n	8002f58 <HAL_GPIO_Init+0x21c>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <HAL_GPIO_Init+0x21c>
 8002f56:	2300      	movs	r3, #0
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	f002 0203 	and.w	r2, r2, #3
 8002f5e:	0092      	lsls	r2, r2, #2
 8002f60:	4093      	lsls	r3, r2
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f68:	4934      	ldr	r1, [pc, #208]	; (800303c <HAL_GPIO_Init+0x300>)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	089b      	lsrs	r3, r3, #2
 8002f6e:	3302      	adds	r3, #2
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f76:	4b39      	ldr	r3, [pc, #228]	; (800305c <HAL_GPIO_Init+0x320>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f9a:	4a30      	ldr	r2, [pc, #192]	; (800305c <HAL_GPIO_Init+0x320>)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fa0:	4b2e      	ldr	r3, [pc, #184]	; (800305c <HAL_GPIO_Init+0x320>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fc4:	4a25      	ldr	r2, [pc, #148]	; (800305c <HAL_GPIO_Init+0x320>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_GPIO_Init+0x320>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fee:	4a1b      	ldr	r2, [pc, #108]	; (800305c <HAL_GPIO_Init+0x320>)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <HAL_GPIO_Init+0x320>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003018:	4a10      	ldr	r2, [pc, #64]	; (800305c <HAL_GPIO_Init+0x320>)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3301      	adds	r3, #1
 8003022:	61fb      	str	r3, [r7, #28]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	2b0f      	cmp	r3, #15
 8003028:	f67f ae96 	bls.w	8002d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800302c:	bf00      	nop
 800302e:	3724      	adds	r7, #36	; 0x24
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	40023800 	.word	0x40023800
 800303c:	40013800 	.word	0x40013800
 8003040:	40020000 	.word	0x40020000
 8003044:	40020400 	.word	0x40020400
 8003048:	40020800 	.word	0x40020800
 800304c:	40020c00 	.word	0x40020c00
 8003050:	40021000 	.word	0x40021000
 8003054:	40021400 	.word	0x40021400
 8003058:	40021800 	.word	0x40021800
 800305c:	40013c00 	.word	0x40013c00

08003060 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0e1      	b.n	8003236 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a6d      	ldr	r2, [pc, #436]	; (8003240 <HAL_I2S_Init+0x1e0>)
 800308a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f8df 	bl	8003250 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030a8:	f023 030f 	bic.w	r3, r3, #15
 80030ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2202      	movs	r2, #2
 80030b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d06f      	beq.n	800319e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030c6:	2310      	movs	r3, #16
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	e001      	b.n	80030d0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030cc:	2320      	movs	r3, #32
 80030ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d802      	bhi.n	80030de <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a58      	ldr	r2, [pc, #352]	; (8003244 <HAL_I2S_Init+0x1e4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_I2S_Init+0x92>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a56      	ldr	r2, [pc, #344]	; (8003248 <HAL_I2S_Init+0x1e8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d104      	bne.n	80030fc <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80030f2:	2001      	movs	r0, #1
 80030f4:	f002 f9bc 	bl	8005470 <HAL_RCCEx_GetPeriphCLKFreq>
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	e003      	b.n	8003104 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80030fc:	2002      	movs	r0, #2
 80030fe:	f002 f9b7 	bl	8005470 <HAL_RCCEx_GetPeriphCLKFreq>
 8003102:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310c:	d125      	bne.n	800315a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d010      	beq.n	8003138 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	461a      	mov	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	3305      	adds	r3, #5
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	e01f      	b.n	8003178 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	461a      	mov	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	3305      	adds	r3, #5
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	e00e      	b.n	8003178 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	461a      	mov	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	3305      	adds	r3, #5
 8003176:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4a34      	ldr	r2, [pc, #208]	; (800324c <HAL_I2S_Init+0x1ec>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	08db      	lsrs	r3, r3, #3
 8003182:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	e003      	b.n	80031a6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800319e:	2302      	movs	r3, #2
 80031a0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d902      	bls.n	80031b2 <HAL_I2S_Init+0x152>
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	2bff      	cmp	r3, #255	; 0xff
 80031b0:	d907      	bls.n	80031c2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f043 0210 	orr.w	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e039      	b.n	8003236 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	ea42 0103 	orr.w	r1, r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031e0:	f023 030f 	bic.w	r3, r3, #15
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6851      	ldr	r1, [r2, #4]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6892      	ldr	r2, [r2, #8]
 80031ec:	4311      	orrs	r1, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68d2      	ldr	r2, [r2, #12]
 80031f2:	4311      	orrs	r1, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6992      	ldr	r2, [r2, #24]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003204:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b30      	cmp	r3, #48	; 0x30
 800320c:	d003      	beq.n	8003216 <HAL_I2S_Init+0x1b6>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2bb0      	cmp	r3, #176	; 0xb0
 8003214:	d107      	bne.n	8003226 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69da      	ldr	r2, [r3, #28]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003224:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	08003569 	.word	0x08003569
 8003244:	40003800 	.word	0x40003800
 8003248:	40003c00 	.word	0x40003c00
 800324c:	cccccccd 	.word	0xcccccccd

08003250 <HAL_I2S_MspInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_MspInit(I2S_HandleTypeDef *hi2s)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_MspInit could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	4613      	mov	r3, r2
 8003270:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_I2S_Receive_DMA+0x1a>
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0a1      	b.n	80033c6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_I2S_Receive_DMA+0x2e>
 800328e:	2302      	movs	r3, #2
 8003290:	e099      	b.n	80033c6 <HAL_I2S_Receive_DMA+0x162>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d005      	beq.n	80032b2 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	e089      	b.n	80033c6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2204      	movs	r2, #4
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d002      	beq.n	80032de <HAL_I2S_Receive_DMA+0x7a>
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d10a      	bne.n	80032f4 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	865a      	strh	r2, [r3, #50]	; 0x32
 80032f2:	e005      	b.n	8003300 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	88fa      	ldrh	r2, [r7, #6]
 80032f8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	88fa      	ldrh	r2, [r7, #6]
 80032fe:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003304:	4a32      	ldr	r2, [pc, #200]	; (80033d0 <HAL_I2S_Receive_DMA+0x16c>)
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330c:	4a31      	ldr	r2, [pc, #196]	; (80033d4 <HAL_I2S_Receive_DMA+0x170>)
 800330e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	4a30      	ldr	r2, [pc, #192]	; (80033d8 <HAL_I2S_Receive_DMA+0x174>)
 8003316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003326:	d10a      	bne.n	800333e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	330c      	adds	r3, #12
 8003348:	4619      	mov	r1, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003354:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003356:	f7ff fa31 	bl	80027bc <HAL_DMA_Start_IT>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00f      	beq.n	8003380 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	f043 0208 	orr.w	r2, r3, #8
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e022      	b.n	80033c6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338a:	2b00      	cmp	r3, #0
 800338c:	d107      	bne.n	800339e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800339c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	08003447 	.word	0x08003447
 80033d4:	08003405 	.word	0x08003405
 80033d8:	08003463 	.word	0x08003463

080033dc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10e      	bne.n	8003438 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f7fe fb3d 	bl	8001ab8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f7fe fc55 	bl	8001d04 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0203 	bic.w	r2, r2, #3
 800347e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	f043 0208 	orr.w	r2, r3, #8
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff ffa5 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	881a      	ldrh	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	1c9a      	adds	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10e      	bne.n	8003502 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ff6d 	bl	80033dc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	b292      	uxth	r2, r2
 800351e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	1c9a      	adds	r2, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10e      	bne.n	8003560 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003550:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe faac 	bl	8001ab8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b04      	cmp	r3, #4
 8003582:	d13a      	bne.n	80035fa <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b01      	cmp	r3, #1
 800358c:	d109      	bne.n	80035a2 <I2S_IRQHandler+0x3a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003598:	2b40      	cmp	r3, #64	; 0x40
 800359a:	d102      	bne.n	80035a2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ffb4 	bl	800350a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	d126      	bne.n	80035fa <I2S_IRQHandler+0x92>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d11f      	bne.n	80035fa <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035c8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ec:	f043 0202 	orr.w	r2, r3, #2
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff fefb 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b03      	cmp	r3, #3
 8003604:	d136      	bne.n	8003674 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b02      	cmp	r3, #2
 800360e:	d109      	bne.n	8003624 <I2S_IRQHandler+0xbc>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361a:	2b80      	cmp	r3, #128	; 0x80
 800361c:	d102      	bne.n	8003624 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ff45 	bl	80034ae <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b08      	cmp	r3, #8
 800362c:	d122      	bne.n	8003674 <I2S_IRQHandler+0x10c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b20      	cmp	r3, #32
 800363a:	d11b      	bne.n	8003674 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800364a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	f043 0204 	orr.w	r2, r3, #4
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff febe 	bl	80033f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003674:	bf00      	nop
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800367c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800367e:	b08f      	sub	sp, #60	; 0x3c
 8003680:	af0a      	add	r7, sp, #40	; 0x28
 8003682:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e116      	b.n	80038bc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d106      	bne.n	80036ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f008 ffc9 	bl	800c640 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2203      	movs	r2, #3
 80036b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f004 fdd6 	bl	800827e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	687e      	ldr	r6, [r7, #4]
 80036da:	466d      	mov	r5, sp
 80036dc:	f106 0410 	add.w	r4, r6, #16
 80036e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80036f0:	1d33      	adds	r3, r6, #4
 80036f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036f4:	6838      	ldr	r0, [r7, #0]
 80036f6:	f004 fcad 	bl	8008054 <USB_CoreInit>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0d7      	b.n	80038bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f004 fdc4 	bl	80082a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003718:	2300      	movs	r3, #0
 800371a:	73fb      	strb	r3, [r7, #15]
 800371c:	e04a      	b.n	80037b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800371e:	7bfa      	ldrb	r2, [r7, #15]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	333d      	adds	r3, #61	; 0x3d
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	333c      	adds	r3, #60	; 0x3c
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003746:	7bfa      	ldrb	r2, [r7, #15]
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	b298      	uxth	r0, r3
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	3342      	adds	r3, #66	; 0x42
 800375a:	4602      	mov	r2, r0
 800375c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	333f      	adds	r3, #63	; 0x3f
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3344      	adds	r3, #68	; 0x44
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	3348      	adds	r3, #72	; 0x48
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800379a:	7bfa      	ldrb	r2, [r7, #15]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	3350      	adds	r3, #80	; 0x50
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	3301      	adds	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d3af      	bcc.n	800371e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
 80037c2:	e044      	b.n	800384e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	3301      	adds	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
 800384e:	7bfa      	ldrb	r2, [r7, #15]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	429a      	cmp	r2, r3
 8003856:	d3b5      	bcc.n	80037c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	687e      	ldr	r6, [r7, #4]
 8003860:	466d      	mov	r5, sp
 8003862:	f106 0410 	add.w	r4, r6, #16
 8003866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800386a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800386c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800386e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003872:	e885 0003 	stmia.w	r5, {r0, r1}
 8003876:	1d33      	adds	r3, r6, #4
 8003878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800387a:	6838      	ldr	r0, [r7, #0]
 800387c:	f004 fd3a 	bl	80082f4 <USB_DevInit>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e014      	b.n	80038bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d102      	bne.n	80038b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f001 f8a6 	bl	80049fc <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f005 fd6c 	bl	8009392 <USB_DevDisconnect>

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_PCD_Start+0x1c>
 80038dc:	2302      	movs	r3, #2
 80038de:	e020      	b.n	8003922 <HAL_PCD_Start+0x5e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d109      	bne.n	8003904 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d005      	beq.n	8003904 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f005 fd2a 	bl	8009362 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f004 fca2 	bl	800825c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800392a:	b590      	push	{r4, r7, lr}
 800392c:	b08d      	sub	sp, #52	; 0x34
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f005 fdd1 	bl	80094e8 <USB_GetMode>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	f040 83ca 	bne.w	80040e2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f005 fd35 	bl	80093c2 <USB_ReadInterrupts>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 83c0 	beq.w	80040e0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f005 fd2c 	bl	80093c2 <USB_ReadInterrupts>
 800396a:	4603      	mov	r3, r0
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b02      	cmp	r3, #2
 8003972:	d107      	bne.n	8003984 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f002 0202 	and.w	r2, r2, #2
 8003982:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f005 fd1a 	bl	80093c2 <USB_ReadInterrupts>
 800398e:	4603      	mov	r3, r0
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b10      	cmp	r3, #16
 8003996:	d161      	bne.n	8003a5c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0210 	bic.w	r2, r2, #16
 80039a6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f003 020f 	and.w	r2, r3, #15
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4413      	add	r3, r2
 80039c4:	3304      	adds	r3, #4
 80039c6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	0c5b      	lsrs	r3, r3, #17
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d124      	bne.n	8003a1e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d035      	beq.n	8003a4c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	6a38      	ldr	r0, [r7, #32]
 80039f4:	f005 fb92 	bl	800911c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a04:	441a      	add	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a16:	441a      	add	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	619a      	str	r2, [r3, #24]
 8003a1c:	e016      	b.n	8003a4c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	0c5b      	lsrs	r3, r3, #17
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	d110      	bne.n	8003a4c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a30:	2208      	movs	r2, #8
 8003a32:	4619      	mov	r1, r3
 8003a34:	6a38      	ldr	r0, [r7, #32]
 8003a36:	f005 fb71 	bl	800911c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a46:	441a      	add	r2, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0210 	orr.w	r2, r2, #16
 8003a5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f005 fcae 	bl	80093c2 <USB_ReadInterrupts>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a70:	d16e      	bne.n	8003b50 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f005 fcb4 	bl	80093e8 <USB_ReadDevAllOutEpInterrupt>
 8003a80:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a82:	e062      	b.n	8003b4a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d057      	beq.n	8003b3e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f005 fcd9 	bl	8009450 <USB_ReadDevOutEPInterrupt>
 8003a9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00c      	beq.n	8003ac4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2301      	movs	r3, #1
 8003aba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fdf2 	bl	80046a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00c      	beq.n	8003ae8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ada:	461a      	mov	r2, r3
 8003adc:	2308      	movs	r3, #8
 8003ade:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 feec 	bl	80048c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afe:	461a      	mov	r2, r3
 8003b00:	2310      	movs	r3, #16
 8003b02:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b36:	461a      	mov	r2, r3
 8003b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b3c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	3301      	adds	r3, #1
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d199      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f005 fc34 	bl	80093c2 <USB_ReadInterrupts>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b64:	f040 80c0 	bne.w	8003ce8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f005 fc55 	bl	800941c <USB_ReadDevAllInEpInterrupt>
 8003b72:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b78:	e0b2      	b.n	8003ce0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80a7 	beq.w	8003cd4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f005 fc7b 	bl	800948c <USB_ReadDevInEPInterrupt>
 8003b96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d057      	beq.n	8003c52 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	2201      	movs	r2, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	69f9      	ldr	r1, [r7, #28]
 8003bbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d132      	bne.n	8003c46 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	3348      	adds	r3, #72	; 0x48
 8003bf0:	6819      	ldr	r1, [r3, #0]
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4403      	add	r3, r0
 8003c00:	3344      	adds	r3, #68	; 0x44
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4419      	add	r1, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4403      	add	r3, r0
 8003c14:	3348      	adds	r3, #72	; 0x48
 8003c16:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d113      	bne.n	8003c46 <HAL_PCD_IRQHandler+0x31c>
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	3350      	adds	r3, #80	; 0x50
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d108      	bne.n	8003c46 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2101      	movs	r1, #1
 8003c42:	f005 fc83 	bl	800954c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f008 fd70 	bl	800c732 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c84:	461a      	mov	r2, r3
 8003c86:	2310      	movs	r3, #16
 8003c88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2340      	movs	r3, #64	; 0x40
 8003ca4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fc5d 	bl	800458e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	085b      	lsrs	r3, r3, #1
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f47f af49 	bne.w	8003b7a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f005 fb68 	bl	80093c2 <USB_ReadInterrupts>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cfc:	d122      	bne.n	8003d44 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d108      	bne.n	8003d2e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d24:	2100      	movs	r1, #0
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fe8c 	bl	8004a44 <HAL_PCDEx_LPM_Callback>
 8003d2c:	e002      	b.n	8003d34 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f008 fd5d 	bl	800c7ee <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f005 fb3a 	bl	80093c2 <USB_ReadInterrupts>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d58:	d112      	bne.n	8003d80 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d102      	bne.n	8003d70 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f008 fd31 	bl	800c7d2 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d7e:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f005 fb1c 	bl	80093c2 <USB_ReadInterrupts>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d94:	d121      	bne.n	8003dda <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003da4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d111      	bne.n	8003dd4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	f003 020f 	and.w	r2, r3, #15
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003dca:	2101      	movs	r1, #1
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fe39 	bl	8004a44 <HAL_PCDEx_LPM_Callback>
 8003dd2:	e002      	b.n	8003dda <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f008 fcfc 	bl	800c7d2 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f005 faef 	bl	80093c2 <USB_ReadInterrupts>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dee:	f040 80c7 	bne.w	8003f80 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2110      	movs	r1, #16
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f004 fbcf 	bl	80085b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e12:	2300      	movs	r3, #0
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e16:	e056      	b.n	8003ec6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e24:	461a      	mov	r2, r3
 8003e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e2a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e3c:	0151      	lsls	r1, r2, #5
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	440a      	add	r2, r1
 8003e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e4a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e5c:	0151      	lsls	r1, r2, #5
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	440a      	add	r2, r1
 8003e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e7e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e90:	0151      	lsls	r1, r2, #5
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	440a      	add	r2, r1
 8003e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ebe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d3a3      	bcc.n	8003e18 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ede:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ee2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d016      	beq.n	8003f1a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003efc:	f043 030b 	orr.w	r3, r3, #11
 8003f00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f12:	f043 030b 	orr.w	r3, r3, #11
 8003f16:	6453      	str	r3, [r2, #68]	; 0x44
 8003f18:	e015      	b.n	8003f46 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f2c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003f30:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f40:	f043 030b 	orr.w	r3, r3, #11
 8003f44:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f58:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f005 faee 	bl	800954c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f005 fa1c 	bl	80093c2 <USB_ReadInterrupts>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f94:	d124      	bne.n	8003fe0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f005 fab2 	bl	8009504 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f004 fb64 	bl	8008672 <USB_GetDevSpeed>
 8003faa:	4603      	mov	r3, r0
 8003fac:	461a      	mov	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681c      	ldr	r4, [r3, #0]
 8003fb6:	f000 fe37 	bl	8004c28 <HAL_RCC_GetHCLKFreq>
 8003fba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f004 f8a7 	bl	8008118 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f008 fbd9 	bl	800c782 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003fde:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f005 f9ec 	bl	80093c2 <USB_ReadInterrupts>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d10a      	bne.n	800400a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f008 fbb6 	bl	800c766 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f002 0208 	and.w	r2, r2, #8
 8004008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f005 f9d7 	bl	80093c2 <USB_ReadInterrupts>
 8004014:	4603      	mov	r3, r0
 8004016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800401a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800401e:	d10f      	bne.n	8004040 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	b2db      	uxtb	r3, r3
 8004028:	4619      	mov	r1, r3
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f008 fbff 	bl	800c82e <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800403e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f005 f9bc 	bl	80093c2 <USB_ReadInterrupts>
 800404a:	4603      	mov	r3, r0
 800404c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004054:	d10f      	bne.n	8004076 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	b2db      	uxtb	r3, r3
 800405e:	4619      	mov	r1, r3
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f008 fbd2 	bl	800c80a <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004074:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f005 f9a1 	bl	80093c2 <USB_ReadInterrupts>
 8004080:	4603      	mov	r3, r0
 8004082:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408a:	d10a      	bne.n	80040a2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f008 fbe0 	bl	800c852 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f005 f98b 	bl	80093c2 <USB_ReadInterrupts>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d115      	bne.n	80040e2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f008 fbd0 	bl	800c86e <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	e000      	b.n	80040e2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80040e0:	bf00      	nop
    }
  }
}
 80040e2:	3734      	adds	r7, #52	; 0x34
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd90      	pop	{r4, r7, pc}

080040e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_PCD_SetAddress+0x1a>
 80040fe:	2302      	movs	r3, #2
 8004100:	e013      	b.n	800412a <HAL_PCD_SetAddress+0x42>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	4611      	mov	r1, r2
 800411a:	4618      	mov	r0, r3
 800411c:	f005 f8fb 	bl	8009316 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	4608      	mov	r0, r1
 800413c:	4611      	mov	r1, r2
 800413e:	461a      	mov	r2, r3
 8004140:	4603      	mov	r3, r0
 8004142:	70fb      	strb	r3, [r7, #3]
 8004144:	460b      	mov	r3, r1
 8004146:	803b      	strh	r3, [r7, #0]
 8004148:	4613      	mov	r3, r2
 800414a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004154:	2b00      	cmp	r3, #0
 8004156:	da0f      	bge.n	8004178 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 020f 	and.w	r2, r3, #15
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	3338      	adds	r3, #56	; 0x38
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	4413      	add	r3, r2
 800416c:	3304      	adds	r3, #4
 800416e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	705a      	strb	r2, [r3, #1]
 8004176:	e00f      	b.n	8004198 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	f003 020f 	and.w	r2, r3, #15
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	3304      	adds	r3, #4
 8004190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80041a4:	883a      	ldrh	r2, [r7, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	78ba      	ldrb	r2, [r7, #2]
 80041ae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	785b      	ldrb	r3, [r3, #1]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d004      	beq.n	80041c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041c2:	78bb      	ldrb	r3, [r7, #2]
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d102      	bne.n	80041ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_PCD_EP_Open+0xaa>
 80041d8:	2302      	movs	r3, #2
 80041da:	e00e      	b.n	80041fa <HAL_PCD_EP_Open+0xc8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68f9      	ldr	r1, [r7, #12]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f004 fa66 	bl	80086bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80041f8:	7afb      	ldrb	r3, [r7, #11]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	460b      	mov	r3, r1
 800420c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800420e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004212:	2b00      	cmp	r3, #0
 8004214:	da0f      	bge.n	8004236 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004216:	78fb      	ldrb	r3, [r7, #3]
 8004218:	f003 020f 	and.w	r2, r3, #15
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	3338      	adds	r3, #56	; 0x38
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	4413      	add	r3, r2
 800422a:	3304      	adds	r3, #4
 800422c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	705a      	strb	r2, [r3, #1]
 8004234:	e00f      	b.n	8004256 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	f003 020f 	and.w	r2, r3, #15
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4413      	add	r3, r2
 800424c:	3304      	adds	r3, #4
 800424e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004256:	78fb      	ldrb	r3, [r7, #3]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_PCD_EP_Close+0x6e>
 800426c:	2302      	movs	r3, #2
 800426e:	e00e      	b.n	800428e <HAL_PCD_EP_Close+0x8c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68f9      	ldr	r1, [r7, #12]
 800427e:	4618      	mov	r0, r3
 8004280:	f004 faa4 	bl	80087cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b086      	sub	sp, #24
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
 80042a2:	460b      	mov	r3, r1
 80042a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042a6:	7afb      	ldrb	r3, [r7, #11]
 80042a8:	f003 020f 	and.w	r2, r3, #15
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	3304      	adds	r3, #4
 80042be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2200      	movs	r2, #0
 80042d0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2200      	movs	r2, #0
 80042d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d8:	7afb      	ldrb	r3, [r7, #11]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d102      	bne.n	80042f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042f2:	7afb      	ldrb	r3, [r7, #11]
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	6979      	ldr	r1, [r7, #20]
 800430a:	f004 fd7f 	bl	8008e0c <USB_EP0StartXfer>
 800430e:	e008      	b.n	8004322 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	6979      	ldr	r1, [r7, #20]
 800431e:	f004 fb31 	bl	8008984 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	607a      	str	r2, [r7, #4]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	460b      	mov	r3, r1
 800433a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800433c:	7afb      	ldrb	r3, [r7, #11]
 800433e:	f003 020f 	and.w	r2, r3, #15
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	3338      	adds	r3, #56	; 0x38
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	3304      	adds	r3, #4
 8004352:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2200      	movs	r2, #0
 8004364:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2201      	movs	r2, #1
 800436a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800436c:	7afb      	ldrb	r3, [r7, #11]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	b2da      	uxtb	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d102      	bne.n	8004386 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004386:	7afb      	ldrb	r3, [r7, #11]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	2b00      	cmp	r3, #0
 800438e:	d109      	bne.n	80043a4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	6979      	ldr	r1, [r7, #20]
 800439e:	f004 fd35 	bl	8008e0c <USB_EP0StartXfer>
 80043a2:	e008      	b.n	80043b6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	6979      	ldr	r1, [r7, #20]
 80043b2:	f004 fae7 	bl	8008984 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	f003 020f 	and.w	r2, r3, #15
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d901      	bls.n	80043de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e050      	b.n	8004480 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	da0f      	bge.n	8004406 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	f003 020f 	and.w	r2, r3, #15
 80043ec:	4613      	mov	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	3338      	adds	r3, #56	; 0x38
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	4413      	add	r3, r2
 80043fa:	3304      	adds	r3, #4
 80043fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	705a      	strb	r2, [r3, #1]
 8004404:	e00d      	b.n	8004422 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	4613      	mov	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4413      	add	r3, r2
 8004418:	3304      	adds	r3, #4
 800441a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	b2da      	uxtb	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_PCD_EP_SetStall+0x82>
 800443e:	2302      	movs	r3, #2
 8004440:	e01e      	b.n	8004480 <HAL_PCD_EP_SetStall+0xc0>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68f9      	ldr	r1, [r7, #12]
 8004450:	4618      	mov	r0, r3
 8004452:	f004 fe8c 	bl	800916e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	b2d9      	uxtb	r1, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004470:	461a      	mov	r2, r3
 8004472:	f005 f86b 	bl	800954c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	f003 020f 	and.w	r2, r3, #15
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d901      	bls.n	80044a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e042      	b.n	800452c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	da0f      	bge.n	80044ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	f003 020f 	and.w	r2, r3, #15
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	3338      	adds	r3, #56	; 0x38
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	4413      	add	r3, r2
 80044c2:	3304      	adds	r3, #4
 80044c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	705a      	strb	r2, [r3, #1]
 80044cc:	e00f      	b.n	80044ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	f003 020f 	and.w	r2, r3, #15
 80044d4:	4613      	mov	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	4413      	add	r3, r2
 80044e4:	3304      	adds	r3, #4
 80044e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_PCD_EP_ClrStall+0x86>
 800450a:	2302      	movs	r3, #2
 800450c:	e00e      	b.n	800452c <HAL_PCD_EP_ClrStall+0xa4>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	4618      	mov	r0, r3
 800451e:	f004 fe94 	bl	800924a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_PCD_EP_Flush+0x1a>
 800454a:	2302      	movs	r3, #2
 800454c:	e01b      	b.n	8004586 <HAL_PCD_EP_Flush+0x52>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004556:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800455a:	2b00      	cmp	r3, #0
 800455c:	da09      	bge.n	8004572 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	4619      	mov	r1, r3
 800456a:	4610      	mov	r0, r2
 800456c:	f004 f820 	bl	80085b0 <USB_FlushTxFifo>
 8004570:	e004      	b.n	800457c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f004 f840 	bl	80085fc <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b08a      	sub	sp, #40	; 0x28
 8004592:	af02      	add	r7, sp, #8
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	4613      	mov	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	3338      	adds	r3, #56	; 0x38
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	3304      	adds	r3, #4
 80045b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d901      	bls.n	80045c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e06c      	b.n	80046a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d902      	bls.n	80045e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3303      	adds	r3, #3
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045ea:	e02b      	b.n	8004644 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	695a      	ldr	r2, [r3, #20]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d902      	bls.n	8004608 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	3303      	adds	r3, #3
 800460c:	089b      	lsrs	r3, r3, #2
 800460e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68d9      	ldr	r1, [r3, #12]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	b2da      	uxtb	r2, r3
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004620:	b2db      	uxtb	r3, r3
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	4603      	mov	r3, r0
 8004626:	6978      	ldr	r0, [r7, #20]
 8004628:	f004 fd43 	bl	80090b2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	441a      	add	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	699a      	ldr	r2, [r3, #24]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	441a      	add	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	b29b      	uxth	r3, r3
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	429a      	cmp	r2, r3
 8004658:	d809      	bhi.n	800466e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004662:	429a      	cmp	r2, r3
 8004664:	d203      	bcs.n	800466e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1be      	bne.n	80045ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	429a      	cmp	r2, r3
 8004678:	d811      	bhi.n	800469e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	2201      	movs	r2, #1
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	43db      	mvns	r3, r3
 8004694:	6939      	ldr	r1, [r7, #16]
 8004696:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800469a:	4013      	ands	r3, r2
 800469c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3720      	adds	r7, #32
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	333c      	adds	r3, #60	; 0x3c
 80046c0:	3304      	adds	r3, #4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	f040 80a0 	bne.w	8004820 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d015      	beq.n	8004716 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a72      	ldr	r2, [pc, #456]	; (80048b8 <PCD_EP_OutXfrComplete_int+0x210>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	f240 80dd 	bls.w	80048ae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80d7 	beq.w	80048ae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470c:	461a      	mov	r2, r3
 800470e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004712:	6093      	str	r3, [r2, #8]
 8004714:	e0cb      	b.n	80048ae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d009      	beq.n	8004734 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472c:	461a      	mov	r2, r3
 800472e:	2320      	movs	r3, #32
 8004730:	6093      	str	r3, [r2, #8]
 8004732:	e0bc      	b.n	80048ae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800473a:	2b00      	cmp	r3, #0
 800473c:	f040 80b7 	bne.w	80048ae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4a5d      	ldr	r2, [pc, #372]	; (80048b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d90f      	bls.n	8004768 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475e:	461a      	mov	r2, r3
 8004760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004764:	6093      	str	r3, [r2, #8]
 8004766:	e0a2      	b.n	80048ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800477a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	0159      	lsls	r1, r3, #5
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	440b      	add	r3, r1
 8004784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800478e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4403      	add	r3, r0
 800479e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80047a2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047b6:	6819      	ldr	r1, [r3, #0]
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	4613      	mov	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4403      	add	r3, r0
 80047c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4419      	add	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	4613      	mov	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4403      	add	r3, r0
 80047dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047e0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d114      	bne.n	8004812 <PCD_EP_OutXfrComplete_int+0x16a>
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d108      	bne.n	8004812 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800480a:	461a      	mov	r2, r3
 800480c:	2101      	movs	r1, #1
 800480e:	f004 fe9d 	bl	800954c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	4619      	mov	r1, r3
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f007 ff6f 	bl	800c6fc <HAL_PCD_DataOutStageCallback>
 800481e:	e046      	b.n	80048ae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a26      	ldr	r2, [pc, #152]	; (80048bc <PCD_EP_OutXfrComplete_int+0x214>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d124      	bne.n	8004872 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483e:	461a      	mov	r2, r3
 8004840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004844:	6093      	str	r3, [r2, #8]
 8004846:	e032      	b.n	80048ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485e:	461a      	mov	r2, r3
 8004860:	2320      	movs	r3, #32
 8004862:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	4619      	mov	r1, r3
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f007 ff46 	bl	800c6fc <HAL_PCD_DataOutStageCallback>
 8004870:	e01d      	b.n	80048ae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d114      	bne.n	80048a2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d108      	bne.n	80048a2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800489a:	461a      	mov	r2, r3
 800489c:	2100      	movs	r1, #0
 800489e:	f004 fe55 	bl	800954c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	4619      	mov	r1, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f007 ff27 	bl	800c6fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	4f54300a 	.word	0x4f54300a
 80048bc:	4f54310a 	.word	0x4f54310a

080048c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	333c      	adds	r3, #60	; 0x3c
 80048d8:	3304      	adds	r3, #4
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4a15      	ldr	r2, [pc, #84]	; (8004948 <PCD_EP_OutSetupPacket_int+0x88>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d90e      	bls.n	8004914 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d009      	beq.n	8004914 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490c:	461a      	mov	r2, r3
 800490e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004912:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f007 fedf 	bl	800c6d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <PCD_EP_OutSetupPacket_int+0x88>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d90c      	bls.n	800493c <PCD_EP_OutSetupPacket_int+0x7c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d108      	bne.n	800493c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004934:	461a      	mov	r2, r3
 8004936:	2101      	movs	r1, #1
 8004938:	f004 fe08 	bl	800954c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	4f54300a 	.word	0x4f54300a

0800494c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
 8004958:	4613      	mov	r3, r2
 800495a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d107      	bne.n	800497a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800496a:	883b      	ldrh	r3, [r7, #0]
 800496c:	0419      	lsls	r1, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	430a      	orrs	r2, r1
 8004976:	629a      	str	r2, [r3, #40]	; 0x28
 8004978:	e028      	b.n	80049cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	0c1b      	lsrs	r3, r3, #16
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	4413      	add	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004988:	2300      	movs	r3, #0
 800498a:	73fb      	strb	r3, [r7, #15]
 800498c:	e00d      	b.n	80049aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	3340      	adds	r3, #64	; 0x40
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	4413      	add	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	3301      	adds	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
 80049aa:	7bfa      	ldrb	r2, [r7, #15]
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d3ec      	bcc.n	800498e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049b4:	883b      	ldrh	r3, [r7, #0]
 80049b6:	0418      	lsls	r0, r3, #16
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6819      	ldr	r1, [r3, #0]
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	3b01      	subs	r3, #1
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	4302      	orrs	r2, r0
 80049c4:	3340      	adds	r3, #64	; 0x40
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	460b      	mov	r3, r1
 80049e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	887a      	ldrh	r2, [r7, #2]
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2e:	f043 0303 	orr.w	r3, r3, #3
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0cc      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a70:	4b68      	ldr	r3, [pc, #416]	; (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d90c      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b65      	ldr	r3, [pc, #404]	; (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b63      	ldr	r3, [pc, #396]	; (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0b8      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d020      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ab0:	4b59      	ldr	r3, [pc, #356]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	4a58      	ldr	r2, [pc, #352]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004aba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ac8:	4b53      	ldr	r3, [pc, #332]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4a52      	ldr	r2, [pc, #328]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ad2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad4:	4b50      	ldr	r3, [pc, #320]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	494d      	ldr	r1, [pc, #308]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d044      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d107      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afa:	4b47      	ldr	r3, [pc, #284]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d119      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e07f      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d003      	beq.n	8004b1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d107      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1a:	4b3f      	ldr	r3, [pc, #252]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e06f      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2a:	4b3b      	ldr	r3, [pc, #236]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e067      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b3a:	4b37      	ldr	r3, [pc, #220]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f023 0203 	bic.w	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4934      	ldr	r1, [pc, #208]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b4c:	f7fd fbea 	bl	8002324 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b52:	e00a      	b.n	8004b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b54:	f7fd fbe6 	bl	8002324 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e04f      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	4b2b      	ldr	r3, [pc, #172]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 020c 	and.w	r2, r3, #12
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d1eb      	bne.n	8004b54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b7c:	4b25      	ldr	r3, [pc, #148]	; (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d20c      	bcs.n	8004ba4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8a:	4b22      	ldr	r3, [pc, #136]	; (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b92:	4b20      	ldr	r3, [pc, #128]	; (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e032      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4916      	ldr	r1, [pc, #88]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	490e      	ldr	r1, [pc, #56]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004be2:	f000 fe63 	bl	80058ac <HAL_RCC_GetSysClockFreq>
 8004be6:	4601      	mov	r1, r0
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <HAL_RCC_ClockConfig+0x1c0>)
 8004bf4:	5cd3      	ldrb	r3, [r2, r3]
 8004bf6:	fa21 f303 	lsr.w	r3, r1, r3
 8004bfa:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fd fb4a 	bl	800229c <HAL_InitTick>

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40023c00 	.word	0x40023c00
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	08013a5c 	.word	0x08013a5c
 8004c20:	200005f0 	.word	0x200005f0
 8004c24:	200005a4 	.word	0x200005a4

08004c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c2c:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	200005f0 	.word	0x200005f0

08004c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c44:	f7ff fff0 	bl	8004c28 <HAL_RCC_GetHCLKFreq>
 8004c48:	4601      	mov	r1, r0
 8004c4a:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	0a9b      	lsrs	r3, r3, #10
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	4a03      	ldr	r2, [pc, #12]	; (8004c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c56:	5cd3      	ldrb	r3, [r2, r3]
 8004c58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40023800 	.word	0x40023800
 8004c64:	08013a6c 	.word	0x08013a6c

08004c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c6c:	f7ff ffdc 	bl	8004c28 <HAL_RCC_GetHCLKFreq>
 8004c70:	4601      	mov	r1, r0
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	0b5b      	lsrs	r3, r3, #13
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	4a03      	ldr	r2, [pc, #12]	; (8004c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c7e:	5cd3      	ldrb	r3, [r2, r3]
 8004c80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	08013a6c 	.word	0x08013a6c

08004c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08c      	sub	sp, #48	; 0x30
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d010      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004cc8:	4b6f      	ldr	r3, [pc, #444]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cce:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	496c      	ldr	r1, [pc, #432]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d010      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004cf6:	4b64      	ldr	r3, [pc, #400]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cfc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d04:	4960      	ldr	r1, [pc, #384]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004d14:	2301      	movs	r3, #1
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d017      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d24:	4b58      	ldr	r3, [pc, #352]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	4955      	ldr	r1, [pc, #340]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d42:	d101      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004d44:	2301      	movs	r3, #1
 8004d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004d50:	2301      	movs	r3, #1
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d017      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d60:	4b49      	ldr	r3, [pc, #292]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	4946      	ldr	r1, [pc, #280]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004d80:	2301      	movs	r3, #1
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 808a 	beq.w	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60bb      	str	r3, [r7, #8]
 8004da2:	4b39      	ldr	r3, [pc, #228]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	4a38      	ldr	r2, [pc, #224]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dac:	6413      	str	r3, [r2, #64]	; 0x40
 8004dae:	4b36      	ldr	r3, [pc, #216]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004dba:	4b34      	ldr	r3, [pc, #208]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a33      	ldr	r2, [pc, #204]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dc6:	f7fd faad 	bl	8002324 <HAL_GetTick>
 8004dca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dce:	f7fd faa9 	bl	8002324 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e278      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004de0:	4b2a      	ldr	r3, [pc, #168]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dec:	4b26      	ldr	r3, [pc, #152]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d02f      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e04:	6a3a      	ldr	r2, [r7, #32]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d028      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e0a:	4b1f      	ldr	r3, [pc, #124]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e12:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e14:	4b1e      	ldr	r3, [pc, #120]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e1a:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e20:	4a19      	ldr	r2, [pc, #100]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e26:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d114      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e32:	f7fd fa77 	bl	8002324 <HAL_GetTick>
 8004e36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e38:	e00a      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e3a:	f7fd fa73 	bl	8002324 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e240      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e50:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0ee      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e68:	d114      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004e6a:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7e:	4902      	ldr	r1, [pc, #8]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	608b      	str	r3, [r1, #8]
 8004e84:	e00c      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004e86:	bf00      	nop
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	40007000 	.word	0x40007000
 8004e90:	42470e40 	.word	0x42470e40
 8004e94:	4b4a      	ldr	r3, [pc, #296]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	4a49      	ldr	r2, [pc, #292]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e9e:	6093      	str	r3, [r2, #8]
 8004ea0:	4b47      	ldr	r3, [pc, #284]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ea2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eac:	4944      	ldr	r1, [pc, #272]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004ec4:	4b3f      	ldr	r3, [pc, #252]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004ec6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004ed4:	4b3a      	ldr	r3, [pc, #232]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	4937      	ldr	r1, [pc, #220]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ef6:	4b32      	ldr	r3, [pc, #200]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004efc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f04:	492e      	ldr	r1, [pc, #184]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d011      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f18:	4b29      	ldr	r3, [pc, #164]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f1e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f26:	4926      	ldr	r1, [pc, #152]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f36:	d101      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004f48:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	491a      	ldr	r1, [pc, #104]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d011      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004f6a:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f70:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f78:	4911      	ldr	r1, [pc, #68]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f88:	d101      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d005      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f9c:	f040 80ff 	bne.w	800519e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fa0:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fa6:	f7fd f9bd 	bl	8002324 <HAL_GetTick>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fac:	e00e      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fae:	f7fd f9b9 	bl	8002324 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d907      	bls.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e188      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	424711e0 	.word	0x424711e0
 8004fc8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fcc:	4b7e      	ldr	r3, [pc, #504]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1ea      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d009      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d028      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d124      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005000:	4b71      	ldr	r3, [pc, #452]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005006:	0c1b      	lsrs	r3, r3, #16
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	3301      	adds	r3, #1
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005012:	4b6d      	ldr	r3, [pc, #436]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005018:	0e1b      	lsrs	r3, r3, #24
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	019b      	lsls	r3, r3, #6
 800502a:	431a      	orrs	r2, r3
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	3b01      	subs	r3, #1
 8005032:	041b      	lsls	r3, r3, #16
 8005034:	431a      	orrs	r2, r3
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	061b      	lsls	r3, r3, #24
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	071b      	lsls	r3, r3, #28
 8005042:	4961      	ldr	r1, [pc, #388]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d004      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800505e:	d00a      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005068:	2b00      	cmp	r3, #0
 800506a:	d035      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005074:	d130      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005076:	4b54      	ldr	r3, [pc, #336]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800507c:	0c1b      	lsrs	r3, r3, #16
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	3301      	adds	r3, #1
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005088:	4b4f      	ldr	r3, [pc, #316]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800508a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508e:	0f1b      	lsrs	r3, r3, #28
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	019b      	lsls	r3, r3, #6
 80050a0:	431a      	orrs	r2, r3
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	085b      	lsrs	r3, r3, #1
 80050a6:	3b01      	subs	r3, #1
 80050a8:	041b      	lsls	r3, r3, #16
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	061b      	lsls	r3, r3, #24
 80050b2:	431a      	orrs	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	071b      	lsls	r3, r3, #28
 80050b8:	4943      	ldr	r1, [pc, #268]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050c0:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c6:	f023 021f 	bic.w	r2, r3, #31
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	3b01      	subs	r3, #1
 80050d0:	493d      	ldr	r1, [pc, #244]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d029      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ec:	d124      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80050ee:	4b36      	ldr	r3, [pc, #216]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	3301      	adds	r3, #1
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005100:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005106:	0f1b      	lsrs	r3, r3, #28
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	019b      	lsls	r3, r3, #6
 8005118:	431a      	orrs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	3b01      	subs	r3, #1
 8005122:	041b      	lsls	r3, r3, #16
 8005124:	431a      	orrs	r2, r3
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	061b      	lsls	r3, r3, #24
 800512a:	431a      	orrs	r2, r3
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	071b      	lsls	r3, r3, #28
 8005130:	4925      	ldr	r1, [pc, #148]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005140:	2b00      	cmp	r3, #0
 8005142:	d016      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	019b      	lsls	r3, r3, #6
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	3b01      	subs	r3, #1
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	061b      	lsls	r3, r3, #24
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	071b      	lsls	r3, r3, #28
 800516a:	4917      	ldr	r1, [pc, #92]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005172:	4b16      	ldr	r3, [pc, #88]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005174:	2201      	movs	r2, #1
 8005176:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005178:	f7fd f8d4 	bl	8002324 <HAL_GetTick>
 800517c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005180:	f7fd f8d0 	bl	8002324 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e09f      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005192:	4b0d      	ldr	r3, [pc, #52]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0f0      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	f040 8095 	bne.w	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051a6:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ac:	f7fd f8ba 	bl	8002324 <HAL_GetTick>
 80051b0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051b2:	e00f      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80051b4:	f7fd f8b6 	bl	8002324 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d908      	bls.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e085      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80051c6:	bf00      	nop
 80051c8:	40023800 	.word	0x40023800
 80051cc:	42470068 	.word	0x42470068
 80051d0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051d4:	4b41      	ldr	r3, [pc, #260]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051e0:	d0e8      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d02b      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005206:	2b00      	cmp	r3, #0
 8005208:	d127      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800520a:	4b34      	ldr	r3, [pc, #208]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005210:	0c1b      	lsrs	r3, r3, #16
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	3301      	adds	r3, #1
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699a      	ldr	r2, [r3, #24]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	019b      	lsls	r3, r3, #6
 8005226:	431a      	orrs	r2, r3
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	3b01      	subs	r3, #1
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	061b      	lsls	r3, r3, #24
 8005238:	4928      	ldr	r1, [pc, #160]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005240:	4b26      	ldr	r3, [pc, #152]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005246:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	3b01      	subs	r3, #1
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	4922      	ldr	r1, [pc, #136]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01d      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800526e:	d118      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005270:	4b1a      	ldr	r3, [pc, #104]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	0e1b      	lsrs	r3, r3, #24
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	019b      	lsls	r3, r3, #6
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	3b01      	subs	r3, #1
 8005292:	041b      	lsls	r3, r3, #16
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	061b      	lsls	r3, r3, #24
 800529a:	4910      	ldr	r1, [pc, #64]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052a2:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052a8:	f7fd f83c 	bl	8002324 <HAL_GetTick>
 80052ac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052b0:	f7fd f838 	bl	8002324 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e007      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052c2:	4b06      	ldr	r3, [pc, #24]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ce:	d1ef      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3730      	adds	r7, #48	; 0x30
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40023800 	.word	0x40023800
 80052e0:	42470070 	.word	0x42470070

080052e4 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1 | RCC_PERIPHCLK_I2S_APB2 |\
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80052f2:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_FMPI2C1  |\
                                        RCC_PERIPHCLK_CLK48     | RCC_PERIPHCLK_SDIO     |\
                                        RCC_PERIPHCLK_SPDIFRX;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI2SCFGR_PLLI2SM_Pos);
 80052f4:	4b5d      	ldr	r3, [pc, #372]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80052f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8005302:	4b5a      	ldr	r3, [pc, #360]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8005304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005308:	099b      	lsrs	r3, r3, #6
 800530a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005312:	4b56      	ldr	r3, [pc, #344]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8005314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005318:	0c1b      	lsrs	r3, r3, #16
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	3301      	adds	r3, #1
 8005320:	005a      	lsls	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005326:	4b51      	ldr	r3, [pc, #324]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8005328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800532c:	0e1b      	lsrs	r3, r3, #24
 800532e:	f003 020f 	and.w	r2, r3, #15
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005336:	4b4d      	ldr	r3, [pc, #308]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8005338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533c:	0f1b      	lsrs	r3, r3, #28
 800533e:	f003 0207 	and.w	r2, r3, #7
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	615a      	str	r2, [r3, #20]
  /* Get the PLLSAI Clock configuration --------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIM = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM) >> RCC_PLLSAICFGR_PLLSAIM_Pos);
 8005346:	4b49      	ldr	r3, [pc, #292]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8005348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8005354:	4b45      	ldr	r3, [pc, #276]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535a:	099b      	lsrs	r3, r3, #6
 800535c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005364:	4b41      	ldr	r3, [pc, #260]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	0c1b      	lsrs	r3, r3, #16
 800536c:	f003 0303 	and.w	r3, r3, #3
 8005370:	3301      	adds	r3, #1
 8005372:	005a      	lsls	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005378:	4b3c      	ldr	r3, [pc, #240]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	0e1b      	lsrs	r3, r3, #24
 8005380:	f003 020f 	and.w	r2, r3, #15
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	625a      	str	r2, [r3, #36]	; 0x24
  /* Get the PLLSAI/PLLI2S division factors ----------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLLI2SDIVQ_Pos);
 8005388:	4b38      	ldr	r3, [pc, #224]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 800538a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800538e:	f003 021f 	and.w	r2, r3, #31
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLLSAIDIVQ_Pos);
 8005396:	4b35      	ldr	r3, [pc, #212]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8005398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800539c:	0a1b      	lsrs	r3, r3, #8
 800539e:	f003 021f 	and.w	r2, r3, #31
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80053a6:	4b31      	ldr	r3, [pc, #196]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80053a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ac:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the SAI2 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80053b4:	4b2d      	ldr	r3, [pc, #180]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80053b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ba:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2S APB1 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80053c2:	4b2a      	ldr	r3, [pc, #168]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80053c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get the I2S APB2 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80053d0:	4b26      	ldr	r3, [pc, #152]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80053d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d6:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80053de:	4b23      	ldr	r3, [pc, #140]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80053e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80053e8:	4b20      	ldr	r3, [pc, #128]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ec:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the CEC clock configuration -----------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80053f8:	4b1c      	ldr	r3, [pc, #112]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80053fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053fe:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the FMPI2C1 clock configuration -------------------------------------*/
  PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
 8005406:	4b19      	ldr	r3, [pc, #100]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8005408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800540c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the CLK48 clock configuration ----------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8005414:	4b15      	ldr	r3, [pc, #84]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8005416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541a:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the SDIO clock configuration ----------------------------------------*/
  PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
 8005422:	4b12      	ldr	r3, [pc, #72]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8005424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005428:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the SPDIFRX clock configuration -------------------------------------*/
  PeriphClkInit->SpdifClockSelection = __HAL_RCC_GET_SPDIFRX_SOURCE();
 8005430:	4b0e      	ldr	r3, [pc, #56]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8005432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005436:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 800543e:	4b0b      	ldr	r3, [pc, #44]	; (800546c <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8005440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d104      	bne.n	8005456 <HAL_RCCEx_GetPeriphCLKConfig+0x172>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8005454:	e003      	b.n	800545e <HAL_RCCEx_GetPeriphCLKConfig+0x17a>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 800545e:	bf00      	nop
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40023800 	.word	0x40023800

08005470 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005470:	b480      	push	{r7}
 8005472:	b089      	sub	sp, #36	; 0x24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3b01      	subs	r3, #1
 8005494:	2b07      	cmp	r3, #7
 8005496:	f200 81fa 	bhi.w	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 800549a:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a0:	08005669 	.word	0x08005669
 80054a4:	08005785 	.word	0x08005785
 80054a8:	0800588f 	.word	0x0800588f
 80054ac:	080054c1 	.word	0x080054c1
 80054b0:	0800588f 	.word	0x0800588f
 80054b4:	0800588f 	.word	0x0800588f
 80054b8:	0800588f 	.word	0x0800588f
 80054bc:	080054c1 	.word	0x080054c1
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80054c0:	4bac      	ldr	r3, [pc, #688]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80054c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054c6:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80054ce:	613b      	str	r3, [r7, #16]
      switch (saiclocksource)
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054d6:	f000 80b7 	beq.w	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80054da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054de:	d809      	bhi.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 80054e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e4:	d04c      	beq.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80054e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054ea:	f000 8083 	beq.w	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00b      	beq.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          }
          break;
        }
      default :
        {
          break;
 80054f2:	e0b8      	b.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
      switch (saiclocksource)
 80054f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054f8:	d07c      	beq.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80054fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054fe:	f000 80a6 	beq.w	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8005502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005506:	d03b      	beq.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          break;
 8005508:	e0ad      	b.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800550a:	4b9a      	ldr	r3, [pc, #616]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d109      	bne.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8005516:	4b97      	ldr	r3, [pc, #604]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005520:	4a95      	ldr	r2, [pc, #596]	; (8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	e008      	b.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800552a:	4b92      	ldr	r3, [pc, #584]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005534:	4a91      	ldr	r2, [pc, #580]	; (800577c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005536:	fbb2 f3f3 	udiv	r3, r2, r3
 800553a:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800553c:	4b8d      	ldr	r3, [pc, #564]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005542:	0e1b      	lsrs	r3, r3, #24
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800554a:	4b8a      	ldr	r3, [pc, #552]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	099b      	lsrs	r3, r3, #6
 8005552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	fb02 f203 	mul.w	r2, r2, r3
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005562:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8005564:	4b83      	ldr	r3, [pc, #524]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800556a:	0a1b      	lsrs	r3, r3, #8
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	3301      	adds	r3, #1
 8005572:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	fbb2 f3f3 	udiv	r3, r2, r3
 800557c:	61fb      	str	r3, [r7, #28]
          break;
 800557e:	e072      	b.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005580:	4b7c      	ldr	r3, [pc, #496]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d109      	bne.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800558c:	4b79      	ldr	r3, [pc, #484]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800558e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005596:	4a78      	ldr	r2, [pc, #480]	; (8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005598:	fbb2 f3f3 	udiv	r3, r2, r3
 800559c:	61bb      	str	r3, [r7, #24]
 800559e:	e008      	b.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80055a0:	4b74      	ldr	r3, [pc, #464]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80055a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055aa:	4a74      	ldr	r2, [pc, #464]	; (800577c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80055ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b0:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80055b2:	4b70      	ldr	r3, [pc, #448]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80055b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b8:	0e1b      	lsrs	r3, r3, #24
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80055c0:	4b6c      	ldr	r3, [pc, #432]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80055c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c6:	099b      	lsrs	r3, r3, #6
 80055c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	fb02 f203 	mul.w	r2, r2, r3
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d8:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80055da:	4b66      	ldr	r3, [pc, #408]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80055dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e0:	f003 031f 	and.w	r3, r3, #31
 80055e4:	3301      	adds	r3, #1
 80055e6:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	61fb      	str	r3, [r7, #28]
          break;
 80055f2:	e038      	b.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80055f4:	4b5f      	ldr	r3, [pc, #380]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d108      	bne.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005600:	4b5c      	ldr	r3, [pc, #368]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005608:	4a5b      	ldr	r2, [pc, #364]	; (8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800560a:	fbb2 f3f3 	udiv	r3, r2, r3
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	e007      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005612:	4b58      	ldr	r3, [pc, #352]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800561a:	4a58      	ldr	r2, [pc, #352]	; (800577c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8005622:	4b54      	ldr	r3, [pc, #336]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	0f1b      	lsrs	r3, r3, #28
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800562e:	4b51      	ldr	r3, [pc, #324]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	099b      	lsrs	r3, r3, #6
 8005634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	fb02 f203 	mul.w	r2, r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	61fb      	str	r3, [r7, #28]
          break;
 8005646:	e00e      	b.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005648:	4b4d      	ldr	r3, [pc, #308]	; (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800564a:	61fb      	str	r3, [r7, #28]
          break;
 800564c:	e00b      	b.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800564e:	4b49      	ldr	r3, [pc, #292]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
            frequency = (uint32_t)(HSI_VALUE);
 800565a:	4b47      	ldr	r3, [pc, #284]	; (8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800565c:	61fb      	str	r3, [r7, #28]
          break;
 800565e:	e001      	b.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            frequency = (uint32_t)(HSE_VALUE);
 8005660:	4b46      	ldr	r3, [pc, #280]	; (800577c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005662:	61fb      	str	r3, [r7, #28]
          break;
 8005664:	bf00      	nop
        }
      }
      break;
 8005666:	e112      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005668:	4b42      	ldr	r3, [pc, #264]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800566a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800566e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005672:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800567a:	d00c      	beq.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 800567c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005680:	d802      	bhi.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005686:	e070      	b.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800568c:	d035      	beq.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800568e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005692:	d05d      	beq.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005694:	e069      	b.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005696:	4b3a      	ldr	r3, [pc, #232]	; (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8005698:	61fb      	str	r3, [r7, #28]
          break;
 800569a:	e069      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800569c:	4b35      	ldr	r3, [pc, #212]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a8:	d109      	bne.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80056aa:	4b32      	ldr	r3, [pc, #200]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80056ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056b4:	4a31      	ldr	r2, [pc, #196]	; (800577c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80056b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ba:	61bb      	str	r3, [r7, #24]
 80056bc:	e008      	b.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80056be:	4b2d      	ldr	r3, [pc, #180]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80056c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c8:	4a2b      	ldr	r2, [pc, #172]	; (8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80056d0:	4b28      	ldr	r3, [pc, #160]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80056d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	fb02 f303 	mul.w	r3, r2, r3
 80056e2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80056e4:	4b23      	ldr	r3, [pc, #140]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80056e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ea:	0f1b      	lsrs	r3, r3, #28
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f6:	61fb      	str	r3, [r7, #28]
          break;
 80056f8:	e03a      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80056fa:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005706:	d108      	bne.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005708:	4b1a      	ldr	r3, [pc, #104]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005710:	4a1a      	ldr	r2, [pc, #104]	; (800577c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005712:	fbb2 f3f3 	udiv	r3, r2, r3
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	e007      	b.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800571a:	4b16      	ldr	r3, [pc, #88]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005722:	4a15      	ldr	r2, [pc, #84]	; (8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800572a:	4b12      	ldr	r3, [pc, #72]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	099b      	lsrs	r3, r3, #6
 8005730:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	fb02 f303 	mul.w	r3, r2, r3
 800573a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800573c:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	0f1b      	lsrs	r3, r3, #28
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	fbb2 f3f3 	udiv	r3, r2, r3
 800574c:	61fb      	str	r3, [r7, #28]
          break;
 800574e:	e00f      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005750:	4b08      	ldr	r3, [pc, #32]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800575c:	d102      	bne.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
          {
            frequency = HSE_VALUE;
 800575e:	4b07      	ldr	r3, [pc, #28]	; (800577c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005760:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005762:	e005      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
            frequency = HSI_VALUE;
 8005764:	4b04      	ldr	r3, [pc, #16]	; (8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8005766:	61fb      	str	r3, [r7, #28]
          break;
 8005768:	e002      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	61fb      	str	r3, [r7, #28]
          break;
 800576e:	bf00      	nop
        }
      }
      break;
 8005770:	e08d      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 8005772:	bf00      	nop
 8005774:	40023800 	.word	0x40023800
 8005778:	00f42400 	.word	0x00f42400
 800577c:	007a1200 	.word	0x007a1200
 8005780:	00bb8000 	.word	0x00bb8000
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005784:	4b45      	ldr	r3, [pc, #276]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8005786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800578a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800578e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005796:	d00c      	beq.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8005798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800579c:	d802      	bhi.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 80057a2:	e070      	b.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 80057a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057a8:	d035      	beq.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 80057aa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80057ae:	d05d      	beq.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80057b0:	e069      	b.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80057b2:	4b3b      	ldr	r3, [pc, #236]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x430>)
 80057b4:	61fb      	str	r3, [r7, #28]
          break;
 80057b6:	e069      	b.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80057b8:	4b38      	ldr	r3, [pc, #224]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057c4:	d109      	bne.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80057c6:	4b35      	ldr	r3, [pc, #212]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80057c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057d0:	4a34      	ldr	r2, [pc, #208]	; (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 80057d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	e008      	b.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80057da:	4b30      	ldr	r3, [pc, #192]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80057dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057e4:	4a30      	ldr	r2, [pc, #192]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80057e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ea:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80057ec:	4b2b      	ldr	r3, [pc, #172]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80057ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f2:	099b      	lsrs	r3, r3, #6
 80057f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	fb02 f303 	mul.w	r3, r2, r3
 80057fe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005800:	4b26      	ldr	r3, [pc, #152]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8005802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005806:	0f1b      	lsrs	r3, r3, #28
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005812:	61fb      	str	r3, [r7, #28]
          break;
 8005814:	e03a      	b.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005816:	4b21      	ldr	r3, [pc, #132]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800581e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005822:	d108      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005824:	4b1d      	ldr	r3, [pc, #116]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800582c:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 800582e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	e007      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005836:	4b19      	ldr	r3, [pc, #100]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800583e:	4a1a      	ldr	r2, [pc, #104]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8005840:	fbb2 f3f3 	udiv	r3, r2, r3
 8005844:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005846:	4b15      	ldr	r3, [pc, #84]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	099b      	lsrs	r3, r3, #6
 800584c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	fb02 f303 	mul.w	r3, r2, r3
 8005856:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005858:	4b10      	ldr	r3, [pc, #64]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	0f1b      	lsrs	r3, r3, #28
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	fbb2 f3f3 	udiv	r3, r2, r3
 8005868:	61fb      	str	r3, [r7, #28]
          break;
 800586a:	e00f      	b.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800586c:	4b0b      	ldr	r3, [pc, #44]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005878:	d102      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          {
            frequency = HSE_VALUE;
 800587a:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 800587c:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800587e:	e005      	b.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            frequency = HSI_VALUE;
 8005880:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8005882:	61fb      	str	r3, [r7, #28]
          break;
 8005884:	e002      	b.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	61fb      	str	r3, [r7, #28]
          break;
 800588a:	bf00      	nop
        }
      }
      break;
 800588c:	bf00      	nop
    }
  }
  return frequency;
 800588e:	69fb      	ldr	r3, [r7, #28]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3724      	adds	r7, #36	; 0x24
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	40023800 	.word	0x40023800
 80058a0:	00bb8000 	.word	0x00bb8000
 80058a4:	007a1200 	.word	0x007a1200
 80058a8:	00f42400 	.word	0x00f42400

080058ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058c6:	4bc6      	ldr	r3, [pc, #792]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x334>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b0c      	cmp	r3, #12
 80058d0:	f200 817e 	bhi.w	8005bd0 <HAL_RCC_GetSysClockFreq+0x324>
 80058d4:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <HAL_RCC_GetSysClockFreq+0x30>)
 80058d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058da:	bf00      	nop
 80058dc:	08005911 	.word	0x08005911
 80058e0:	08005bd1 	.word	0x08005bd1
 80058e4:	08005bd1 	.word	0x08005bd1
 80058e8:	08005bd1 	.word	0x08005bd1
 80058ec:	08005917 	.word	0x08005917
 80058f0:	08005bd1 	.word	0x08005bd1
 80058f4:	08005bd1 	.word	0x08005bd1
 80058f8:	08005bd1 	.word	0x08005bd1
 80058fc:	0800591d 	.word	0x0800591d
 8005900:	08005bd1 	.word	0x08005bd1
 8005904:	08005bd1 	.word	0x08005bd1
 8005908:	08005bd1 	.word	0x08005bd1
 800590c:	08005a79 	.word	0x08005a79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005910:	4bb4      	ldr	r3, [pc, #720]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x338>)
 8005912:	613b      	str	r3, [r7, #16]
       break;
 8005914:	e15f      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005916:	4bb4      	ldr	r3, [pc, #720]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8005918:	613b      	str	r3, [r7, #16]
      break;
 800591a:	e15c      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800591c:	4bb0      	ldr	r3, [pc, #704]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x334>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005924:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005926:	4bae      	ldr	r3, [pc, #696]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d04a      	beq.n	80059c8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005932:	4bab      	ldr	r3, [pc, #684]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	099b      	lsrs	r3, r3, #6
 8005938:	f04f 0400 	mov.w	r4, #0
 800593c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	ea03 0501 	and.w	r5, r3, r1
 8005948:	ea04 0602 	and.w	r6, r4, r2
 800594c:	4629      	mov	r1, r5
 800594e:	4632      	mov	r2, r6
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	f04f 0400 	mov.w	r4, #0
 8005958:	0154      	lsls	r4, r2, #5
 800595a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800595e:	014b      	lsls	r3, r1, #5
 8005960:	4619      	mov	r1, r3
 8005962:	4622      	mov	r2, r4
 8005964:	1b49      	subs	r1, r1, r5
 8005966:	eb62 0206 	sbc.w	r2, r2, r6
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	f04f 0400 	mov.w	r4, #0
 8005972:	0194      	lsls	r4, r2, #6
 8005974:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005978:	018b      	lsls	r3, r1, #6
 800597a:	1a5b      	subs	r3, r3, r1
 800597c:	eb64 0402 	sbc.w	r4, r4, r2
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	00e2      	lsls	r2, r4, #3
 800598a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800598e:	00d9      	lsls	r1, r3, #3
 8005990:	460b      	mov	r3, r1
 8005992:	4614      	mov	r4, r2
 8005994:	195b      	adds	r3, r3, r5
 8005996:	eb44 0406 	adc.w	r4, r4, r6
 800599a:	f04f 0100 	mov.w	r1, #0
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	0262      	lsls	r2, r4, #9
 80059a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80059a8:	0259      	lsls	r1, r3, #9
 80059aa:	460b      	mov	r3, r1
 80059ac:	4614      	mov	r4, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	4621      	mov	r1, r4
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f04f 0400 	mov.w	r4, #0
 80059b8:	461a      	mov	r2, r3
 80059ba:	4623      	mov	r3, r4
 80059bc:	f7fb f984 	bl	8000cc8 <__aeabi_uldivmod>
 80059c0:	4603      	mov	r3, r0
 80059c2:	460c      	mov	r4, r1
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	e049      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059c8:	4b85      	ldr	r3, [pc, #532]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x334>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	099b      	lsrs	r3, r3, #6
 80059ce:	f04f 0400 	mov.w	r4, #0
 80059d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	ea03 0501 	and.w	r5, r3, r1
 80059de:	ea04 0602 	and.w	r6, r4, r2
 80059e2:	4629      	mov	r1, r5
 80059e4:	4632      	mov	r2, r6
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	f04f 0400 	mov.w	r4, #0
 80059ee:	0154      	lsls	r4, r2, #5
 80059f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059f4:	014b      	lsls	r3, r1, #5
 80059f6:	4619      	mov	r1, r3
 80059f8:	4622      	mov	r2, r4
 80059fa:	1b49      	subs	r1, r1, r5
 80059fc:	eb62 0206 	sbc.w	r2, r2, r6
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	f04f 0400 	mov.w	r4, #0
 8005a08:	0194      	lsls	r4, r2, #6
 8005a0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a0e:	018b      	lsls	r3, r1, #6
 8005a10:	1a5b      	subs	r3, r3, r1
 8005a12:	eb64 0402 	sbc.w	r4, r4, r2
 8005a16:	f04f 0100 	mov.w	r1, #0
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	00e2      	lsls	r2, r4, #3
 8005a20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a24:	00d9      	lsls	r1, r3, #3
 8005a26:	460b      	mov	r3, r1
 8005a28:	4614      	mov	r4, r2
 8005a2a:	195b      	adds	r3, r3, r5
 8005a2c:	eb44 0406 	adc.w	r4, r4, r6
 8005a30:	f04f 0100 	mov.w	r1, #0
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	02a2      	lsls	r2, r4, #10
 8005a3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005a3e:	0299      	lsls	r1, r3, #10
 8005a40:	460b      	mov	r3, r1
 8005a42:	4614      	mov	r4, r2
 8005a44:	4618      	mov	r0, r3
 8005a46:	4621      	mov	r1, r4
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f04f 0400 	mov.w	r4, #0
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4623      	mov	r3, r4
 8005a52:	f7fb f939 	bl	8000cc8 <__aeabi_uldivmod>
 8005a56:	4603      	mov	r3, r0
 8005a58:	460c      	mov	r4, r1
 8005a5a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a5c:	4b60      	ldr	r3, [pc, #384]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	0c1b      	lsrs	r3, r3, #16
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	3301      	adds	r3, #1
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a74:	613b      	str	r3, [r7, #16]
      break;
 8005a76:	e0ae      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a78:	4b59      	ldr	r3, [pc, #356]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a80:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a82:	4b57      	ldr	r3, [pc, #348]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d04a      	beq.n	8005b24 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a8e:	4b54      	ldr	r3, [pc, #336]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	099b      	lsrs	r3, r3, #6
 8005a94:	f04f 0400 	mov.w	r4, #0
 8005a98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	ea03 0501 	and.w	r5, r3, r1
 8005aa4:	ea04 0602 	and.w	r6, r4, r2
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	4632      	mov	r2, r6
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	f04f 0400 	mov.w	r4, #0
 8005ab4:	0154      	lsls	r4, r2, #5
 8005ab6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005aba:	014b      	lsls	r3, r1, #5
 8005abc:	4619      	mov	r1, r3
 8005abe:	4622      	mov	r2, r4
 8005ac0:	1b49      	subs	r1, r1, r5
 8005ac2:	eb62 0206 	sbc.w	r2, r2, r6
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	f04f 0400 	mov.w	r4, #0
 8005ace:	0194      	lsls	r4, r2, #6
 8005ad0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ad4:	018b      	lsls	r3, r1, #6
 8005ad6:	1a5b      	subs	r3, r3, r1
 8005ad8:	eb64 0402 	sbc.w	r4, r4, r2
 8005adc:	f04f 0100 	mov.w	r1, #0
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	00e2      	lsls	r2, r4, #3
 8005ae6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005aea:	00d9      	lsls	r1, r3, #3
 8005aec:	460b      	mov	r3, r1
 8005aee:	4614      	mov	r4, r2
 8005af0:	195b      	adds	r3, r3, r5
 8005af2:	eb44 0406 	adc.w	r4, r4, r6
 8005af6:	f04f 0100 	mov.w	r1, #0
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	0262      	lsls	r2, r4, #9
 8005b00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005b04:	0259      	lsls	r1, r3, #9
 8005b06:	460b      	mov	r3, r1
 8005b08:	4614      	mov	r4, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f04f 0400 	mov.w	r4, #0
 8005b14:	461a      	mov	r2, r3
 8005b16:	4623      	mov	r3, r4
 8005b18:	f7fb f8d6 	bl	8000cc8 <__aeabi_uldivmod>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	460c      	mov	r4, r1
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	e049      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b24:	4b2e      	ldr	r3, [pc, #184]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	099b      	lsrs	r3, r3, #6
 8005b2a:	f04f 0400 	mov.w	r4, #0
 8005b2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b32:	f04f 0200 	mov.w	r2, #0
 8005b36:	ea03 0501 	and.w	r5, r3, r1
 8005b3a:	ea04 0602 	and.w	r6, r4, r2
 8005b3e:	4629      	mov	r1, r5
 8005b40:	4632      	mov	r2, r6
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	f04f 0400 	mov.w	r4, #0
 8005b4a:	0154      	lsls	r4, r2, #5
 8005b4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b50:	014b      	lsls	r3, r1, #5
 8005b52:	4619      	mov	r1, r3
 8005b54:	4622      	mov	r2, r4
 8005b56:	1b49      	subs	r1, r1, r5
 8005b58:	eb62 0206 	sbc.w	r2, r2, r6
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	f04f 0400 	mov.w	r4, #0
 8005b64:	0194      	lsls	r4, r2, #6
 8005b66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b6a:	018b      	lsls	r3, r1, #6
 8005b6c:	1a5b      	subs	r3, r3, r1
 8005b6e:	eb64 0402 	sbc.w	r4, r4, r2
 8005b72:	f04f 0100 	mov.w	r1, #0
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	00e2      	lsls	r2, r4, #3
 8005b7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b80:	00d9      	lsls	r1, r3, #3
 8005b82:	460b      	mov	r3, r1
 8005b84:	4614      	mov	r4, r2
 8005b86:	195b      	adds	r3, r3, r5
 8005b88:	eb44 0406 	adc.w	r4, r4, r6
 8005b8c:	f04f 0100 	mov.w	r1, #0
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	02a2      	lsls	r2, r4, #10
 8005b96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005b9a:	0299      	lsls	r1, r3, #10
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4614      	mov	r4, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f04f 0400 	mov.w	r4, #0
 8005baa:	461a      	mov	r2, r3
 8005bac:	4623      	mov	r3, r4
 8005bae:	f7fb f88b 	bl	8000cc8 <__aeabi_uldivmod>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005bb8:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	0f1b      	lsrs	r3, r3, #28
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bcc:	613b      	str	r3, [r7, #16]
      break;
 8005bce:	e002      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bd0:	4b04      	ldr	r3, [pc, #16]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x338>)
 8005bd2:	613b      	str	r3, [r7, #16]
      break;
 8005bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bd6:	693b      	ldr	r3, [r7, #16]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be0:	40023800 	.word	0x40023800
 8005be4:	00f42400 	.word	0x00f42400
 8005be8:	007a1200 	.word	0x007a1200

08005bec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 8087 	beq.w	8005d14 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c06:	4b97      	ldr	r3, [pc, #604]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 030c 	and.w	r3, r3, #12
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d019      	beq.n	8005c46 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c12:	4b94      	ldr	r3, [pc, #592]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c1a:	2b08      	cmp	r3, #8
 8005c1c:	d106      	bne.n	8005c2c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c1e:	4b91      	ldr	r3, [pc, #580]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c2a:	d00c      	beq.n	8005c46 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c2c:	4b8d      	ldr	r3, [pc, #564]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c34:	2b0c      	cmp	r3, #12
 8005c36:	d112      	bne.n	8005c5e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c38:	4b8a      	ldr	r3, [pc, #552]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c44:	d10b      	bne.n	8005c5e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c46:	4b87      	ldr	r3, [pc, #540]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d05f      	beq.n	8005d12 <HAL_RCC_OscConfig+0x126>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d15b      	bne.n	8005d12 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e21a      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c66:	d106      	bne.n	8005c76 <HAL_RCC_OscConfig+0x8a>
 8005c68:	4b7e      	ldr	r3, [pc, #504]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a7d      	ldr	r2, [pc, #500]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	e01d      	b.n	8005cb2 <HAL_RCC_OscConfig+0xc6>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c7e:	d10c      	bne.n	8005c9a <HAL_RCC_OscConfig+0xae>
 8005c80:	4b78      	ldr	r3, [pc, #480]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a77      	ldr	r2, [pc, #476]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005c86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	4b75      	ldr	r3, [pc, #468]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a74      	ldr	r2, [pc, #464]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	e00b      	b.n	8005cb2 <HAL_RCC_OscConfig+0xc6>
 8005c9a:	4b72      	ldr	r3, [pc, #456]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a71      	ldr	r2, [pc, #452]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	4b6f      	ldr	r3, [pc, #444]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a6e      	ldr	r2, [pc, #440]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cb0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d015      	beq.n	8005ce6 <HAL_RCC_OscConfig+0xfa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cba:	f7fc fb33 	bl	8002324 <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cc0:	e00a      	b.n	8005cd8 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cc2:	f7fc fb2f 	bl	8002324 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCC_OscConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e1dd      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd8:	4b62      	ldr	r3, [pc, #392]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0ee      	beq.n	8005cc2 <HAL_RCC_OscConfig+0xd6>
 8005ce4:	e016      	b.n	8005d14 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce6:	f7fc fb1d 	bl	8002324 <HAL_GetTick>
 8005cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cec:	e00a      	b.n	8005d04 <HAL_RCC_OscConfig+0x118>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cee:	f7fc fb19 	bl	8002324 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e1c7      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d04:	4b57      	ldr	r3, [pc, #348]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1ee      	bne.n	8005cee <HAL_RCC_OscConfig+0x102>
 8005d10:	e000      	b.n	8005d14 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d12:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d06f      	beq.n	8005e00 <HAL_RCC_OscConfig+0x214>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d20:	4b50      	ldr	r3, [pc, #320]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 030c 	and.w	r3, r3, #12
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d017      	beq.n	8005d5c <HAL_RCC_OscConfig+0x170>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d2c:	4b4d      	ldr	r3, [pc, #308]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d105      	bne.n	8005d44 <HAL_RCC_OscConfig+0x158>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d38:	4b4a      	ldr	r3, [pc, #296]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <HAL_RCC_OscConfig+0x170>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d44:	4b47      	ldr	r3, [pc, #284]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d4c:	2b0c      	cmp	r3, #12
 8005d4e:	d11c      	bne.n	8005d8a <HAL_RCC_OscConfig+0x19e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d50:	4b44      	ldr	r3, [pc, #272]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d116      	bne.n	8005d8a <HAL_RCC_OscConfig+0x19e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d5c:	4b41      	ldr	r3, [pc, #260]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_RCC_OscConfig+0x188>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e18f      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d74:	4b3b      	ldr	r3, [pc, #236]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	4938      	ldr	r1, [pc, #224]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d88:	e03a      	b.n	8005e00 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d020      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x1e8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d92:	4b35      	ldr	r3, [pc, #212]	; (8005e68 <HAL_RCC_OscConfig+0x27c>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d98:	f7fc fac4 	bl	8002324 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005da0:	f7fc fac0 	bl	8002324 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e170      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db2:	4b2c      	ldr	r3, [pc, #176]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f0      	beq.n	8005da0 <HAL_RCC_OscConfig+0x1b4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dbe:	4b29      	ldr	r3, [pc, #164]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	4925      	ldr	r1, [pc, #148]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	600b      	str	r3, [r1, #0]
 8005dd2:	e015      	b.n	8005e00 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dd4:	4b24      	ldr	r3, [pc, #144]	; (8005e68 <HAL_RCC_OscConfig+0x27c>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dda:	f7fc faa3 	bl	8002324 <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x208>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005de2:	f7fc fa9f 	bl	8002324 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x208>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e14f      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df4:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1f0      	bne.n	8005de2 <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d037      	beq.n	8005e7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d016      	beq.n	8005e42 <HAL_RCC_OscConfig+0x256>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e14:	4b15      	ldr	r3, [pc, #84]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005e16:	2201      	movs	r2, #1
 8005e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e1a:	f7fc fa83 	bl	8002324 <HAL_GetTick>
 8005e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e20:	e008      	b.n	8005e34 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e22:	f7fc fa7f 	bl	8002324 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e12f      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e34:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <HAL_RCC_OscConfig+0x278>)
 8005e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0f0      	beq.n	8005e22 <HAL_RCC_OscConfig+0x236>
 8005e40:	e01c      	b.n	8005e7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e42:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <HAL_RCC_OscConfig+0x280>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e48:	f7fc fa6c 	bl	8002324 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e4e:	e00f      	b.n	8005e70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e50:	f7fc fa68 	bl	8002324 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d908      	bls.n	8005e70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e118      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
 8005e62:	bf00      	nop
 8005e64:	40023800 	.word	0x40023800
 8005e68:	42470000 	.word	0x42470000
 8005e6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e70:	4b8a      	ldr	r3, [pc, #552]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e9      	bne.n	8005e50 <HAL_RCC_OscConfig+0x264>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8097 	beq.w	8005fb8 <HAL_RCC_OscConfig+0x3cc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e8e:	4b83      	ldr	r3, [pc, #524]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10f      	bne.n	8005eba <HAL_RCC_OscConfig+0x2ce>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	4b7f      	ldr	r3, [pc, #508]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	4a7e      	ldr	r2, [pc, #504]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eaa:	4b7c      	ldr	r3, [pc, #496]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eba:	4b79      	ldr	r3, [pc, #484]	; (80060a0 <HAL_RCC_OscConfig+0x4b4>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d118      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x30c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ec6:	4b76      	ldr	r3, [pc, #472]	; (80060a0 <HAL_RCC_OscConfig+0x4b4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a75      	ldr	r2, [pc, #468]	; (80060a0 <HAL_RCC_OscConfig+0x4b4>)
 8005ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ed2:	f7fc fa27 	bl	8002324 <HAL_GetTick>
 8005ed6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eda:	f7fc fa23 	bl	8002324 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e0d3      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eec:	4b6c      	ldr	r3, [pc, #432]	; (80060a0 <HAL_RCC_OscConfig+0x4b4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0f0      	beq.n	8005eda <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d106      	bne.n	8005f0e <HAL_RCC_OscConfig+0x322>
 8005f00:	4b66      	ldr	r3, [pc, #408]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f04:	4a65      	ldr	r2, [pc, #404]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005f06:	f043 0301 	orr.w	r3, r3, #1
 8005f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f0c:	e01c      	b.n	8005f48 <HAL_RCC_OscConfig+0x35c>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	d10c      	bne.n	8005f30 <HAL_RCC_OscConfig+0x344>
 8005f16:	4b61      	ldr	r3, [pc, #388]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1a:	4a60      	ldr	r2, [pc, #384]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005f1c:	f043 0304 	orr.w	r3, r3, #4
 8005f20:	6713      	str	r3, [r2, #112]	; 0x70
 8005f22:	4b5e      	ldr	r3, [pc, #376]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f26:	4a5d      	ldr	r2, [pc, #372]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005f28:	f043 0301 	orr.w	r3, r3, #1
 8005f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f2e:	e00b      	b.n	8005f48 <HAL_RCC_OscConfig+0x35c>
 8005f30:	4b5a      	ldr	r3, [pc, #360]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f34:	4a59      	ldr	r2, [pc, #356]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005f36:	f023 0301 	bic.w	r3, r3, #1
 8005f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f3c:	4b57      	ldr	r3, [pc, #348]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f40:	4a56      	ldr	r2, [pc, #344]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005f42:	f023 0304 	bic.w	r3, r3, #4
 8005f46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d015      	beq.n	8005f7c <HAL_RCC_OscConfig+0x390>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f50:	f7fc f9e8 	bl	8002324 <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f56:	e00a      	b.n	8005f6e <HAL_RCC_OscConfig+0x382>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f58:	f7fc f9e4 	bl	8002324 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x382>
        {
          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e092      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f6e:	4b4b      	ldr	r3, [pc, #300]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0ee      	beq.n	8005f58 <HAL_RCC_OscConfig+0x36c>
 8005f7a:	e014      	b.n	8005fa6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7c:	f7fc f9d2 	bl	8002324 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f82:	e00a      	b.n	8005f9a <HAL_RCC_OscConfig+0x3ae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f84:	f7fc f9ce 	bl	8002324 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x3ae>
        {
          return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e07c      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f9a:	4b40      	ldr	r3, [pc, #256]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1ee      	bne.n	8005f84 <HAL_RCC_OscConfig+0x398>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d105      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x3cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fac:	4b3b      	ldr	r3, [pc, #236]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	4a3a      	ldr	r2, [pc, #232]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d068      	beq.n	8006092 <HAL_RCC_OscConfig+0x4a6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fc0:	4b36      	ldr	r3, [pc, #216]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 030c 	and.w	r3, r3, #12
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d060      	beq.n	800608e <HAL_RCC_OscConfig+0x4a2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d145      	bne.n	8006060 <HAL_RCC_OscConfig+0x474>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd4:	4b33      	ldr	r3, [pc, #204]	; (80060a4 <HAL_RCC_OscConfig+0x4b8>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fda:	f7fc f9a3 	bl	8002324 <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCC_OscConfig+0x408>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe2:	f7fc f99f 	bl	8002324 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e04f      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ff4:	4b29      	ldr	r3, [pc, #164]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1f0      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x3f6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	019b      	lsls	r3, r3, #6
 8006010:	431a      	orrs	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	085b      	lsrs	r3, r3, #1
 8006018:	3b01      	subs	r3, #1
 800601a:	041b      	lsls	r3, r3, #16
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	061b      	lsls	r3, r3, #24
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	071b      	lsls	r3, r3, #28
 800602c:	491b      	ldr	r1, [pc, #108]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 800602e:	4313      	orrs	r3, r2
 8006030:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006032:	4b1c      	ldr	r3, [pc, #112]	; (80060a4 <HAL_RCC_OscConfig+0x4b8>)
 8006034:	2201      	movs	r2, #1
 8006036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006038:	f7fc f974 	bl	8002324 <HAL_GetTick>
 800603c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0x466>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006040:	f7fc f970 	bl	8002324 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x466>
          {
            return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e020      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006052:	4b12      	ldr	r3, [pc, #72]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f0      	beq.n	8006040 <HAL_RCC_OscConfig+0x454>
 800605e:	e018      	b.n	8006092 <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006060:	4b10      	ldr	r3, [pc, #64]	; (80060a4 <HAL_RCC_OscConfig+0x4b8>)
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006066:	f7fc f95d 	bl	8002324 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x494>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800606e:	f7fc f959 	bl	8002324 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x494>
          {
            return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e009      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006080:	4b06      	ldr	r3, [pc, #24]	; (800609c <HAL_RCC_OscConfig+0x4b0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f0      	bne.n	800606e <HAL_RCC_OscConfig+0x482>
 800608c:	e001      	b.n	8006092 <HAL_RCC_OscConfig+0x4a6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <HAL_RCC_OscConfig+0x4a8>
    }
  }
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40023800 	.word	0x40023800
 80060a0:	40007000 	.word	0x40007000
 80060a4:	42470060 	.word	0x42470060

080060a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e056      	b.n	8006168 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d106      	bne.n	80060da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f84b 	bl	8006170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	ea42 0103 	orr.w	r1, r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	0c1b      	lsrs	r3, r3, #16
 8006138:	f003 0104 	and.w	r1, r3, #4
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	69da      	ldr	r2, [r3, #28]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006156:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d110      	bne.n	80061c0 <HAL_SPI_Receive_DMA+0x3c>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a6:	d10b      	bne.n	80061c0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2204      	movs	r2, #4
 80061ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80061b0:	88fb      	ldrh	r3, [r7, #6]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 f8a4 	bl	8006304 <HAL_SPI_TransmitReceive_DMA>
 80061bc:	4603      	mov	r3, r0
 80061be:	e097      	b.n	80062f0 <HAL_SPI_Receive_DMA+0x16c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_SPI_Receive_DMA+0x4a>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e090      	b.n	80062f0 <HAL_SPI_Receive_DMA+0x16c>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d002      	beq.n	80061e8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80061e2:	2302      	movs	r3, #2
 80061e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061e6:	e07e      	b.n	80062e6 <HAL_SPI_Receive_DMA+0x162>
  }

  if ((pData == NULL) || (Size == 0U))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <HAL_SPI_Receive_DMA+0x70>
 80061ee:	88fb      	ldrh	r3, [r7, #6]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d102      	bne.n	80061fa <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061f8:	e075      	b.n	80062e6 <HAL_SPI_Receive_DMA+0x162>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2204      	movs	r2, #4
 80061fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	88fa      	ldrh	r2, [r7, #6]
 8006212:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	88fa      	ldrh	r2, [r7, #6]
 8006218:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800623a:	d107      	bne.n	800624c <HAL_SPI_Receive_DMA+0xc8>
  {
    SPI_1LINE_RX(hspi);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800624a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006250:	4a29      	ldr	r2, [pc, #164]	; (80062f8 <HAL_SPI_Receive_DMA+0x174>)
 8006252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006258:	4a28      	ldr	r2, [pc, #160]	; (80062fc <HAL_SPI_Receive_DMA+0x178>)
 800625a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006260:	4a27      	ldr	r2, [pc, #156]	; (8006300 <HAL_SPI_Receive_DMA+0x17c>)
 8006262:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006268:	2200      	movs	r2, #0
 800626a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	330c      	adds	r3, #12
 8006276:	4619      	mov	r1, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006282:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006284:	f7fc fa9a 	bl	80027bc <HAL_DMA_Start_IT>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00c      	beq.n	80062a8 <HAL_SPI_Receive_DMA+0x124>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006292:	f043 0210 	orr.w	r2, r3, #16
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80062a6:	e01e      	b.n	80062e6 <HAL_SPI_Receive_DMA+0x162>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b2:	2b40      	cmp	r3, #64	; 0x40
 80062b4:	d007      	beq.n	80062c6 <HAL_SPI_Receive_DMA+0x142>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062c4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0220 	orr.w	r2, r2, #32
 80062d4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0201 	orr.w	r2, r2, #1
 80062e4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	080066a5 	.word	0x080066a5
 80062fc:	0800656d 	.word	0x0800656d
 8006300:	080066dd 	.word	0x080066dd

08006304 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006320:	2302      	movs	r3, #2
 8006322:	e0e3      	b.n	80064ec <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006332:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800633a:	7dbb      	ldrb	r3, [r7, #22]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d00d      	beq.n	800635c <HAL_SPI_TransmitReceive_DMA+0x58>
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006346:	d106      	bne.n	8006356 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d102      	bne.n	8006356 <HAL_SPI_TransmitReceive_DMA+0x52>
 8006350:	7dbb      	ldrb	r3, [r7, #22]
 8006352:	2b04      	cmp	r3, #4
 8006354:	d002      	beq.n	800635c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006356:	2302      	movs	r3, #2
 8006358:	75fb      	strb	r3, [r7, #23]
    goto error;
 800635a:	e0c2      	b.n	80064e2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006368:	887b      	ldrh	r3, [r7, #2]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d102      	bne.n	8006374 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006372:	e0b6      	b.n	80064e2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b04      	cmp	r3, #4
 800637e:	d003      	beq.n	8006388 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2205      	movs	r2, #5
 8006384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	887a      	ldrh	r2, [r7, #2]
 8006398:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	887a      	ldrh	r2, [r7, #2]
 800639e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	887a      	ldrh	r2, [r7, #2]
 80063aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	887a      	ldrh	r2, [r7, #2]
 80063b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d108      	bne.n	80063dc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ce:	4a49      	ldr	r2, [pc, #292]	; (80064f4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80063d0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d6:	4a48      	ldr	r2, [pc, #288]	; (80064f8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80063d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80063da:	e007      	b.n	80063ec <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e0:	4a46      	ldr	r2, [pc, #280]	; (80064fc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80063e2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e8:	4a45      	ldr	r2, [pc, #276]	; (8006500 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80063ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f0:	4a44      	ldr	r2, [pc, #272]	; (8006504 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80063f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f8:	2200      	movs	r2, #0
 80063fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	330c      	adds	r3, #12
 8006406:	4619      	mov	r1, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006412:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006414:	f7fc f9d2 	bl	80027bc <HAL_DMA_Start_IT>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00c      	beq.n	8006438 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006422:	f043 0210 	orr.w	r2, r3, #16
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006436:	e054      	b.n	80064e2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644c:	2200      	movs	r2, #0
 800644e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006454:	2200      	movs	r2, #0
 8006456:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800645c:	2200      	movs	r2, #0
 800645e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006464:	2200      	movs	r2, #0
 8006466:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	4619      	mov	r1, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	330c      	adds	r3, #12
 8006478:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006480:	f7fc f99c 	bl	80027bc <HAL_DMA_Start_IT>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00c      	beq.n	80064a4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	f043 0210 	orr.w	r2, r3, #16
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80064a2:	e01e      	b.n	80064e2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ae:	2b40      	cmp	r3, #64	; 0x40
 80064b0:	d007      	beq.n	80064c2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064c0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0220 	orr.w	r2, r2, #32
 80064d0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0202 	orr.w	r2, r2, #2
 80064e0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	080066a5 	.word	0x080066a5
 80064f8:	0800656d 	.word	0x0800656d
 80064fc:	080066c1 	.word	0x080066c1
 8006500:	08006615 	.word	0x08006615
 8006504:	080066dd 	.word	0x080066dd

08006508 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800657a:	f7fb fed3 	bl	8002324 <HAL_GetTick>
 800657e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800658e:	d03b      	beq.n	8006608 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0220 	bic.w	r2, r2, #32
 800659e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10d      	bne.n	80065c4 <SPI_DMAReceiveCplt+0x58>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065b0:	d108      	bne.n	80065c4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0203 	bic.w	r2, r2, #3
 80065c0:	605a      	str	r2, [r3, #4]
 80065c2:	e007      	b.n	80065d4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0201 	bic.w	r2, r2, #1
 80065d2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	2164      	movs	r1, #100	; 0x64
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 f909 	bl	80067f0 <SPI_EndRxTransaction>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2220      	movs	r2, #32
 80065e8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f7ff ffa9 	bl	8006558 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006606:	e002      	b.n	800660e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff ff7d 	bl	8006508 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006622:	f7fb fe7f 	bl	8002324 <HAL_GetTick>
 8006626:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006636:	d02f      	beq.n	8006698 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0220 	bic.w	r2, r2, #32
 8006646:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	2164      	movs	r1, #100	; 0x64
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f935 	bl	80068bc <SPI_EndRxTxTransaction>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d005      	beq.n	8006664 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665c:	f043 0220 	orr.w	r2, r3, #32
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0203 	bic.w	r2, r2, #3
 8006672:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f7ff ff61 	bl	8006558 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006696:	e002      	b.n	800669e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7ff ff3f 	bl	800651c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff ff3c 	bl	8006530 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f7ff ff38 	bl	8006544 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0203 	bic.w	r2, r2, #3
 80066f8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fe:	f043 0210 	orr.w	r2, r3, #16
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f7ff ff22 	bl	8006558 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006714:	bf00      	nop
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	4613      	mov	r3, r2
 800672a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800672c:	e04c      	b.n	80067c8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d048      	beq.n	80067c8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006736:	f7fb fdf5 	bl	8002324 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d902      	bls.n	800674c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d13d      	bne.n	80067c8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800675a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006764:	d111      	bne.n	800678a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800676e:	d004      	beq.n	800677a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006778:	d107      	bne.n	800678a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006788:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006792:	d10f      	bne.n	80067b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e00f      	b.n	80067e8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	4013      	ands	r3, r2
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	bf0c      	ite	eq
 80067d8:	2301      	moveq	r3, #1
 80067da:	2300      	movne	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	461a      	mov	r2, r3
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d1a3      	bne.n	800672e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006804:	d111      	bne.n	800682a <SPI_EndRxTransaction+0x3a>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800680e:	d004      	beq.n	800681a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006818:	d107      	bne.n	800682a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006828:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006832:	d12a      	bne.n	800688a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800683c:	d012      	beq.n	8006864 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2200      	movs	r2, #0
 8006846:	2180      	movs	r1, #128	; 0x80
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f7ff ff67 	bl	800671c <SPI_WaitFlagStateUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d02d      	beq.n	80068b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006858:	f043 0220 	orr.w	r2, r3, #32
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e026      	b.n	80068b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2200      	movs	r2, #0
 800686c:	2101      	movs	r1, #1
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7ff ff54 	bl	800671c <SPI_WaitFlagStateUntilTimeout>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01a      	beq.n	80068b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687e:	f043 0220 	orr.w	r2, r3, #32
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e013      	b.n	80068b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2200      	movs	r2, #0
 8006892:	2101      	movs	r1, #1
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f7ff ff41 	bl	800671c <SPI_WaitFlagStateUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d007      	beq.n	80068b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a4:	f043 0220 	orr.w	r2, r3, #32
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e000      	b.n	80068b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068c8:	4b1b      	ldr	r3, [pc, #108]	; (8006938 <SPI_EndRxTxTransaction+0x7c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1b      	ldr	r2, [pc, #108]	; (800693c <SPI_EndRxTxTransaction+0x80>)
 80068ce:	fba2 2303 	umull	r2, r3, r2, r3
 80068d2:	0d5b      	lsrs	r3, r3, #21
 80068d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068d8:	fb02 f303 	mul.w	r3, r2, r3
 80068dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068e6:	d112      	bne.n	800690e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2200      	movs	r2, #0
 80068f0:	2180      	movs	r1, #128	; 0x80
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff ff12 	bl	800671c <SPI_WaitFlagStateUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d016      	beq.n	800692c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006902:	f043 0220 	orr.w	r2, r3, #32
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e00f      	b.n	800692e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	3b01      	subs	r3, #1
 8006918:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006924:	2b80      	cmp	r3, #128	; 0x80
 8006926:	d0f2      	beq.n	800690e <SPI_EndRxTxTransaction+0x52>
 8006928:	e000      	b.n	800692c <SPI_EndRxTxTransaction+0x70>
        break;
 800692a:	bf00      	nop
  }

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	200005f0 	.word	0x200005f0
 800693c:	165e9f81 	.word	0x165e9f81

08006940 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2201      	movs	r2, #1
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f000 fead 	bl	80076b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a15      	ldr	r2, [pc, #84]	; (80069b4 <HAL_TIM_OC_Start+0x74>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d004      	beq.n	800696c <HAL_TIM_OC_Start+0x2c>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a14      	ldr	r2, [pc, #80]	; (80069b8 <HAL_TIM_OC_Start+0x78>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d101      	bne.n	8006970 <HAL_TIM_OC_Start+0x30>
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <HAL_TIM_OC_Start+0x32>
 8006970:	2300      	movs	r3, #0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d007      	beq.n	8006986 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006984:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b06      	cmp	r3, #6
 8006996:	d007      	beq.n	80069a8 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0201 	orr.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40010400 	.word	0x40010400

080069bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e01d      	b.n	8006a0a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d106      	bne.n	80069e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f815 	bl	8006a12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4619      	mov	r1, r3
 80069fa:	4610      	mov	r0, r2
 80069fc:	f000 f9da 	bl	8006db4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2201      	movs	r2, #1
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fe3a 	bl	80076b2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b06      	cmp	r3, #6
 8006a4e:	d007      	beq.n	8006a60 <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0201 	orr.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e08a      	b.n	8006b9a <HAL_TIM_IC_ConfigChannel+0x130>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d11b      	bne.n	8006ad2 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6819      	ldr	r1, [r3, #0]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f000 fc59 	bl	8007360 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699a      	ldr	r2, [r3, #24]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 020c 	bic.w	r2, r2, #12
 8006abc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6999      	ldr	r1, [r3, #24]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	619a      	str	r2, [r3, #24]
 8006ad0:	e05a      	b.n	8006b88 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d11c      	bne.n	8006b12 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6818      	ldr	r0, [r3, #0]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	6819      	ldr	r1, [r3, #0]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f000 fcdd 	bl	80074a6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	699a      	ldr	r2, [r3, #24]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006afa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6999      	ldr	r1, [r3, #24]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	021a      	lsls	r2, r3, #8
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	619a      	str	r2, [r3, #24]
 8006b10:	e03a      	b.n	8006b88 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d11b      	bne.n	8006b50 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	6819      	ldr	r1, [r3, #0]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f000 fd2a 	bl	8007580 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69da      	ldr	r2, [r3, #28]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 020c 	bic.w	r2, r2, #12
 8006b3a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69d9      	ldr	r1, [r3, #28]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	61da      	str	r2, [r3, #28]
 8006b4e:	e01b      	b.n	8006b88 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6818      	ldr	r0, [r3, #0]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	6819      	ldr	r1, [r3, #0]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f000 fd4a 	bl	80075f8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	69da      	ldr	r2, [r3, #28]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b72:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	69d9      	ldr	r1, [r3, #28]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	021a      	lsls	r2, r3, #8
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e0b4      	b.n	8006d28 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b0c      	cmp	r3, #12
 8006bd2:	f200 809f 	bhi.w	8006d14 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006bd6:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006c11 	.word	0x08006c11
 8006be0:	08006d15 	.word	0x08006d15
 8006be4:	08006d15 	.word	0x08006d15
 8006be8:	08006d15 	.word	0x08006d15
 8006bec:	08006c51 	.word	0x08006c51
 8006bf0:	08006d15 	.word	0x08006d15
 8006bf4:	08006d15 	.word	0x08006d15
 8006bf8:	08006d15 	.word	0x08006d15
 8006bfc:	08006c93 	.word	0x08006c93
 8006c00:	08006d15 	.word	0x08006d15
 8006c04:	08006d15 	.word	0x08006d15
 8006c08:	08006d15 	.word	0x08006d15
 8006c0c:	08006cd3 	.word	0x08006cd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 f96c 	bl	8006ef4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699a      	ldr	r2, [r3, #24]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0208 	orr.w	r2, r2, #8
 8006c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 0204 	bic.w	r2, r2, #4
 8006c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6999      	ldr	r1, [r3, #24]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	691a      	ldr	r2, [r3, #16]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	619a      	str	r2, [r3, #24]
      break;
 8006c4e:	e062      	b.n	8006d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 f9bc 	bl	8006fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699a      	ldr	r2, [r3, #24]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6999      	ldr	r1, [r3, #24]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	021a      	lsls	r2, r3, #8
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	619a      	str	r2, [r3, #24]
      break;
 8006c90:	e041      	b.n	8006d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68b9      	ldr	r1, [r7, #8]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 fa11 	bl	80070c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69da      	ldr	r2, [r3, #28]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f042 0208 	orr.w	r2, r2, #8
 8006cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	69da      	ldr	r2, [r3, #28]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0204 	bic.w	r2, r2, #4
 8006cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69d9      	ldr	r1, [r3, #28]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	61da      	str	r2, [r3, #28]
      break;
 8006cd0:	e021      	b.n	8006d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68b9      	ldr	r1, [r7, #8]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fa65 	bl	80071a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69da      	ldr	r2, [r3, #28]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	69da      	ldr	r2, [r3, #28]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69d9      	ldr	r1, [r3, #28]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	021a      	lsls	r2, r3, #8
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	61da      	str	r2, [r3, #28]
      break;
 8006d12:	e000      	b.n	8006d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006d14:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e031      	b.n	8006dac <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fa7a 	bl	8007254 <TIM_SlaveTimer_SetConfig>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d009      	beq.n	8006d7a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e018      	b.n	8006dac <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d88:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68da      	ldr	r2, [r3, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d98:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a40      	ldr	r2, [pc, #256]	; (8006ec8 <TIM_Base_SetConfig+0x114>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d013      	beq.n	8006df4 <TIM_Base_SetConfig+0x40>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd2:	d00f      	beq.n	8006df4 <TIM_Base_SetConfig+0x40>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a3d      	ldr	r2, [pc, #244]	; (8006ecc <TIM_Base_SetConfig+0x118>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00b      	beq.n	8006df4 <TIM_Base_SetConfig+0x40>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a3c      	ldr	r2, [pc, #240]	; (8006ed0 <TIM_Base_SetConfig+0x11c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d007      	beq.n	8006df4 <TIM_Base_SetConfig+0x40>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a3b      	ldr	r2, [pc, #236]	; (8006ed4 <TIM_Base_SetConfig+0x120>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d003      	beq.n	8006df4 <TIM_Base_SetConfig+0x40>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a3a      	ldr	r2, [pc, #232]	; (8006ed8 <TIM_Base_SetConfig+0x124>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d108      	bne.n	8006e06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a2f      	ldr	r2, [pc, #188]	; (8006ec8 <TIM_Base_SetConfig+0x114>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d02b      	beq.n	8006e66 <TIM_Base_SetConfig+0xb2>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e14:	d027      	beq.n	8006e66 <TIM_Base_SetConfig+0xb2>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a2c      	ldr	r2, [pc, #176]	; (8006ecc <TIM_Base_SetConfig+0x118>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d023      	beq.n	8006e66 <TIM_Base_SetConfig+0xb2>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a2b      	ldr	r2, [pc, #172]	; (8006ed0 <TIM_Base_SetConfig+0x11c>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d01f      	beq.n	8006e66 <TIM_Base_SetConfig+0xb2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a2a      	ldr	r2, [pc, #168]	; (8006ed4 <TIM_Base_SetConfig+0x120>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d01b      	beq.n	8006e66 <TIM_Base_SetConfig+0xb2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a29      	ldr	r2, [pc, #164]	; (8006ed8 <TIM_Base_SetConfig+0x124>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d017      	beq.n	8006e66 <TIM_Base_SetConfig+0xb2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a28      	ldr	r2, [pc, #160]	; (8006edc <TIM_Base_SetConfig+0x128>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d013      	beq.n	8006e66 <TIM_Base_SetConfig+0xb2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a27      	ldr	r2, [pc, #156]	; (8006ee0 <TIM_Base_SetConfig+0x12c>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d00f      	beq.n	8006e66 <TIM_Base_SetConfig+0xb2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a26      	ldr	r2, [pc, #152]	; (8006ee4 <TIM_Base_SetConfig+0x130>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d00b      	beq.n	8006e66 <TIM_Base_SetConfig+0xb2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a25      	ldr	r2, [pc, #148]	; (8006ee8 <TIM_Base_SetConfig+0x134>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d007      	beq.n	8006e66 <TIM_Base_SetConfig+0xb2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a24      	ldr	r2, [pc, #144]	; (8006eec <TIM_Base_SetConfig+0x138>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d003      	beq.n	8006e66 <TIM_Base_SetConfig+0xb2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a23      	ldr	r2, [pc, #140]	; (8006ef0 <TIM_Base_SetConfig+0x13c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d108      	bne.n	8006e78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a0a      	ldr	r2, [pc, #40]	; (8006ec8 <TIM_Base_SetConfig+0x114>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d003      	beq.n	8006eac <TIM_Base_SetConfig+0xf8>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a0c      	ldr	r2, [pc, #48]	; (8006ed8 <TIM_Base_SetConfig+0x124>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d103      	bne.n	8006eb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	615a      	str	r2, [r3, #20]
}
 8006eba:	bf00      	nop
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	40010000 	.word	0x40010000
 8006ecc:	40000400 	.word	0x40000400
 8006ed0:	40000800 	.word	0x40000800
 8006ed4:	40000c00 	.word	0x40000c00
 8006ed8:	40010400 	.word	0x40010400
 8006edc:	40014000 	.word	0x40014000
 8006ee0:	40014400 	.word	0x40014400
 8006ee4:	40014800 	.word	0x40014800
 8006ee8:	40001800 	.word	0x40001800
 8006eec:	40001c00 	.word	0x40001c00
 8006ef0:	40002000 	.word	0x40002000

08006ef4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f023 0201 	bic.w	r2, r3, #1
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0303 	bic.w	r3, r3, #3
 8006f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f023 0302 	bic.w	r3, r3, #2
 8006f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a20      	ldr	r2, [pc, #128]	; (8006fcc <TIM_OC1_SetConfig+0xd8>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d003      	beq.n	8006f58 <TIM_OC1_SetConfig+0x64>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a1f      	ldr	r2, [pc, #124]	; (8006fd0 <TIM_OC1_SetConfig+0xdc>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d10c      	bne.n	8006f72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f023 0308 	bic.w	r3, r3, #8
 8006f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f023 0304 	bic.w	r3, r3, #4
 8006f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a15      	ldr	r2, [pc, #84]	; (8006fcc <TIM_OC1_SetConfig+0xd8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d003      	beq.n	8006f82 <TIM_OC1_SetConfig+0x8e>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a14      	ldr	r2, [pc, #80]	; (8006fd0 <TIM_OC1_SetConfig+0xdc>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d111      	bne.n	8006fa6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	621a      	str	r2, [r3, #32]
}
 8006fc0:	bf00      	nop
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40010400 	.word	0x40010400

08006fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f023 0210 	bic.w	r2, r3, #16
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800700a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f023 0320 	bic.w	r3, r3, #32
 800701e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a22      	ldr	r2, [pc, #136]	; (80070b8 <TIM_OC2_SetConfig+0xe4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d003      	beq.n	800703c <TIM_OC2_SetConfig+0x68>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a21      	ldr	r2, [pc, #132]	; (80070bc <TIM_OC2_SetConfig+0xe8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d10d      	bne.n	8007058 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	4313      	orrs	r3, r2
 800704e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007056:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a17      	ldr	r2, [pc, #92]	; (80070b8 <TIM_OC2_SetConfig+0xe4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d003      	beq.n	8007068 <TIM_OC2_SetConfig+0x94>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a16      	ldr	r2, [pc, #88]	; (80070bc <TIM_OC2_SetConfig+0xe8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d113      	bne.n	8007090 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800706e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	621a      	str	r2, [r3, #32]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40010000 	.word	0x40010000
 80070bc:	40010400 	.word	0x40010400

080070c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 0303 	bic.w	r3, r3, #3
 80070f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	021b      	lsls	r3, r3, #8
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a21      	ldr	r2, [pc, #132]	; (80071a0 <TIM_OC3_SetConfig+0xe0>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d003      	beq.n	8007126 <TIM_OC3_SetConfig+0x66>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a20      	ldr	r2, [pc, #128]	; (80071a4 <TIM_OC3_SetConfig+0xe4>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d10d      	bne.n	8007142 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800712c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a16      	ldr	r2, [pc, #88]	; (80071a0 <TIM_OC3_SetConfig+0xe0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d003      	beq.n	8007152 <TIM_OC3_SetConfig+0x92>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a15      	ldr	r2, [pc, #84]	; (80071a4 <TIM_OC3_SetConfig+0xe4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d113      	bne.n	800717a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	011b      	lsls	r3, r3, #4
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4313      	orrs	r3, r2
 8007178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	621a      	str	r2, [r3, #32]
}
 8007194:	bf00      	nop
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	40010000 	.word	0x40010000
 80071a4:	40010400 	.word	0x40010400

080071a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	031b      	lsls	r3, r3, #12
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a12      	ldr	r2, [pc, #72]	; (800724c <TIM_OC4_SetConfig+0xa4>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d003      	beq.n	8007210 <TIM_OC4_SetConfig+0x68>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a11      	ldr	r2, [pc, #68]	; (8007250 <TIM_OC4_SetConfig+0xa8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d109      	bne.n	8007224 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007216:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	019b      	lsls	r3, r3, #6
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	621a      	str	r2, [r3, #32]
}
 800723e:	bf00      	nop
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40010000 	.word	0x40010000
 8007250:	40010400 	.word	0x40010400

08007254 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	4313      	orrs	r3, r2
 8007276:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f023 0307 	bic.w	r3, r3, #7
 800727e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	4313      	orrs	r3, r2
 8007288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	2b30      	cmp	r3, #48	; 0x30
 8007298:	d05c      	beq.n	8007354 <TIM_SlaveTimer_SetConfig+0x100>
 800729a:	2b30      	cmp	r3, #48	; 0x30
 800729c:	d806      	bhi.n	80072ac <TIM_SlaveTimer_SetConfig+0x58>
 800729e:	2b10      	cmp	r3, #16
 80072a0:	d058      	beq.n	8007354 <TIM_SlaveTimer_SetConfig+0x100>
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	d056      	beq.n	8007354 <TIM_SlaveTimer_SetConfig+0x100>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d054      	beq.n	8007354 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80072aa:	e054      	b.n	8007356 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80072ac:	2b50      	cmp	r3, #80	; 0x50
 80072ae:	d03d      	beq.n	800732c <TIM_SlaveTimer_SetConfig+0xd8>
 80072b0:	2b50      	cmp	r3, #80	; 0x50
 80072b2:	d802      	bhi.n	80072ba <TIM_SlaveTimer_SetConfig+0x66>
 80072b4:	2b40      	cmp	r3, #64	; 0x40
 80072b6:	d010      	beq.n	80072da <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80072b8:	e04d      	b.n	8007356 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80072ba:	2b60      	cmp	r3, #96	; 0x60
 80072bc:	d040      	beq.n	8007340 <TIM_SlaveTimer_SetConfig+0xec>
 80072be:	2b70      	cmp	r3, #112	; 0x70
 80072c0:	d000      	beq.n	80072c4 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80072c2:	e048      	b.n	8007356 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	68d9      	ldr	r1, [r3, #12]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	f000 f9cd 	bl	8007672 <TIM_ETR_SetConfig>
      break;
 80072d8:	e03d      	b.n	8007356 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b05      	cmp	r3, #5
 80072e0:	d101      	bne.n	80072e6 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e038      	b.n	8007358 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6a1a      	ldr	r2, [r3, #32]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 0201 	bic.w	r2, r2, #1
 80072fc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800730c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	4313      	orrs	r3, r2
 8007318:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	621a      	str	r2, [r3, #32]
      break;
 800732a:	e014      	b.n	8007356 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6818      	ldr	r0, [r3, #0]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	6899      	ldr	r1, [r3, #8]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	461a      	mov	r2, r3
 800733a:	f000 f885 	bl	8007448 <TIM_TI1_ConfigInputStage>
      break;
 800733e:	e00a      	b.n	8007356 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	6899      	ldr	r1, [r3, #8]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	461a      	mov	r2, r3
 800734e:	f000 f8e7 	bl	8007520 <TIM_TI2_ConfigInputStage>
      break;
 8007352:	e000      	b.n	8007356 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8007354:	bf00      	nop
  }
  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	f023 0201 	bic.w	r2, r3, #1
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4a28      	ldr	r2, [pc, #160]	; (800742c <TIM_TI1_SetConfig+0xcc>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d01b      	beq.n	80073c6 <TIM_TI1_SetConfig+0x66>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007394:	d017      	beq.n	80073c6 <TIM_TI1_SetConfig+0x66>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4a25      	ldr	r2, [pc, #148]	; (8007430 <TIM_TI1_SetConfig+0xd0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d013      	beq.n	80073c6 <TIM_TI1_SetConfig+0x66>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4a24      	ldr	r2, [pc, #144]	; (8007434 <TIM_TI1_SetConfig+0xd4>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00f      	beq.n	80073c6 <TIM_TI1_SetConfig+0x66>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	4a23      	ldr	r2, [pc, #140]	; (8007438 <TIM_TI1_SetConfig+0xd8>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d00b      	beq.n	80073c6 <TIM_TI1_SetConfig+0x66>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4a22      	ldr	r2, [pc, #136]	; (800743c <TIM_TI1_SetConfig+0xdc>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d007      	beq.n	80073c6 <TIM_TI1_SetConfig+0x66>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4a21      	ldr	r2, [pc, #132]	; (8007440 <TIM_TI1_SetConfig+0xe0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d003      	beq.n	80073c6 <TIM_TI1_SetConfig+0x66>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4a20      	ldr	r2, [pc, #128]	; (8007444 <TIM_TI1_SetConfig+0xe4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d101      	bne.n	80073ca <TIM_TI1_SetConfig+0x6a>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e000      	b.n	80073cc <TIM_TI1_SetConfig+0x6c>
 80073ca:	2300      	movs	r3, #0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d008      	beq.n	80073e2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f023 0303 	bic.w	r3, r3, #3
 80073d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	e003      	b.n	80073ea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f043 0301 	orr.w	r3, r3, #1
 80073e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	011b      	lsls	r3, r3, #4
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f023 030a 	bic.w	r3, r3, #10
 8007404:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f003 030a 	and.w	r3, r3, #10
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	4313      	orrs	r3, r2
 8007410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	621a      	str	r2, [r3, #32]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	40010000 	.word	0x40010000
 8007430:	40000400 	.word	0x40000400
 8007434:	40000800 	.word	0x40000800
 8007438:	40000c00 	.word	0x40000c00
 800743c:	40010400 	.word	0x40010400
 8007440:	40014000 	.word	0x40014000
 8007444:	40001800 	.word	0x40001800

08007448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	f023 0201 	bic.w	r2, r3, #1
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	011b      	lsls	r3, r3, #4
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	4313      	orrs	r3, r2
 800747c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f023 030a 	bic.w	r3, r3, #10
 8007484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	621a      	str	r2, [r3, #32]
}
 800749a:	bf00      	nop
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b087      	sub	sp, #28
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
 80074b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f023 0210 	bic.w	r2, r3, #16
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	021b      	lsls	r3, r3, #8
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	4313      	orrs	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	031b      	lsls	r3, r3, #12
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	621a      	str	r2, [r3, #32]
}
 8007514:	bf00      	nop
 8007516:	371c      	adds	r7, #28
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	f023 0210 	bic.w	r2, r3, #16
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800754a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	031b      	lsls	r3, r3, #12
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	4313      	orrs	r3, r2
 8007554:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800755c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	011b      	lsls	r3, r3, #4
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	621a      	str	r2, [r3, #32]
}
 8007574:	bf00      	nop
 8007576:	371c      	adds	r7, #28
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f023 0303 	bic.w	r3, r3, #3
 80075ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80075d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	4313      	orrs	r3, r2
 80075de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	621a      	str	r2, [r3, #32]
}
 80075ec:	bf00      	nop
 80075ee:	371c      	adds	r7, #28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007624:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007636:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	031b      	lsls	r3, r3, #12
 800763c:	b29b      	uxth	r3, r3
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	4313      	orrs	r3, r2
 8007642:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800764a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	031b      	lsls	r3, r3, #12
 8007650:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	4313      	orrs	r3, r2
 8007658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	621a      	str	r2, [r3, #32]
}
 8007666:	bf00      	nop
 8007668:	371c      	adds	r7, #28
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007672:	b480      	push	{r7}
 8007674:	b087      	sub	sp, #28
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	607a      	str	r2, [r7, #4]
 800767e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800768c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	021a      	lsls	r2, r3, #8
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	431a      	orrs	r2, r3
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	4313      	orrs	r3, r2
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	609a      	str	r2, [r3, #8]
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b087      	sub	sp, #28
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f003 031f 	and.w	r3, r3, #31
 80076c4:	2201      	movs	r2, #1
 80076c6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a1a      	ldr	r2, [r3, #32]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	43db      	mvns	r3, r3
 80076d4:	401a      	ands	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a1a      	ldr	r2, [r3, #32]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f003 031f 	and.w	r3, r3, #31
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ea:	431a      	orrs	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	621a      	str	r2, [r3, #32]
}
 80076f0:	bf00      	nop
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e03f      	b.n	800778e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d106      	bne.n	8007728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f004 fe48 	bl	800c3b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2224      	movs	r2, #36	; 0x24
 800772c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800773e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f90b 	bl	800795c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	691a      	ldr	r2, [r3, #16]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695a      	ldr	r2, [r3, #20]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b088      	sub	sp, #32
 800779a:	af02      	add	r7, sp, #8
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	603b      	str	r3, [r7, #0]
 80077a2:	4613      	mov	r3, r2
 80077a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b20      	cmp	r3, #32
 80077b4:	f040 8083 	bne.w	80078be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <HAL_UART_Transmit+0x2e>
 80077be:	88fb      	ldrh	r3, [r7, #6]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e07b      	b.n	80078c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_UART_Transmit+0x40>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e074      	b.n	80078c0 <HAL_UART_Transmit+0x12a>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2221      	movs	r2, #33	; 0x21
 80077e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80077ec:	f7fa fd9a 	bl	8002324 <HAL_GetTick>
 80077f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	88fa      	ldrh	r2, [r7, #6]
 80077f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	88fa      	ldrh	r2, [r7, #6]
 80077fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007806:	e042      	b.n	800788e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800780c:	b29b      	uxth	r3, r3
 800780e:	3b01      	subs	r3, #1
 8007810:	b29a      	uxth	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800781e:	d122      	bne.n	8007866 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2200      	movs	r2, #0
 8007828:	2180      	movs	r1, #128	; 0x80
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 f84c 	bl	80078c8 <UART_WaitOnFlagUntilTimeout>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e042      	b.n	80078c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800784c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d103      	bne.n	800785e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	3302      	adds	r3, #2
 800785a:	60bb      	str	r3, [r7, #8]
 800785c:	e017      	b.n	800788e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	3301      	adds	r3, #1
 8007862:	60bb      	str	r3, [r7, #8]
 8007864:	e013      	b.n	800788e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2200      	movs	r2, #0
 800786e:	2180      	movs	r1, #128	; 0x80
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 f829 	bl	80078c8 <UART_WaitOnFlagUntilTimeout>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e01f      	b.n	80078c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	1c5a      	adds	r2, r3, #1
 8007884:	60ba      	str	r2, [r7, #8]
 8007886:	781a      	ldrb	r2, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007892:	b29b      	uxth	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1b7      	bne.n	8007808 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2200      	movs	r2, #0
 80078a0:	2140      	movs	r1, #64	; 0x40
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f000 f810 	bl	80078c8 <UART_WaitOnFlagUntilTimeout>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e006      	b.n	80078c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	e000      	b.n	80078c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80078be:	2302      	movs	r3, #2
  }
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	603b      	str	r3, [r7, #0]
 80078d4:	4613      	mov	r3, r2
 80078d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d8:	e02c      	b.n	8007934 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e0:	d028      	beq.n	8007934 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d007      	beq.n	80078f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80078e8:	f7fa fd1c 	bl	8002324 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d21d      	bcs.n	8007934 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68da      	ldr	r2, [r3, #12]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007906:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695a      	ldr	r2, [r3, #20]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 0201 	bic.w	r2, r2, #1
 8007916:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2220      	movs	r2, #32
 800791c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2220      	movs	r2, #32
 8007924:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e00f      	b.n	8007954 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	4013      	ands	r3, r2
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	429a      	cmp	r2, r3
 8007942:	bf0c      	ite	eq
 8007944:	2301      	moveq	r3, #1
 8007946:	2300      	movne	r3, #0
 8007948:	b2db      	uxtb	r3, r3
 800794a:	461a      	mov	r2, r3
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	429a      	cmp	r2, r3
 8007950:	d0c3      	beq.n	80078da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	b085      	sub	sp, #20
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	431a      	orrs	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	4313      	orrs	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800799e:	f023 030c 	bic.w	r3, r3, #12
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6812      	ldr	r2, [r2, #0]
 80079a6:	68f9      	ldr	r1, [r7, #12]
 80079a8:	430b      	orrs	r3, r1
 80079aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	699a      	ldr	r2, [r3, #24]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ca:	f040 818b 	bne.w	8007ce4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4ac1      	ldr	r2, [pc, #772]	; (8007cd8 <UART_SetConfig+0x37c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d005      	beq.n	80079e4 <UART_SetConfig+0x88>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4abf      	ldr	r2, [pc, #764]	; (8007cdc <UART_SetConfig+0x380>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	f040 80bd 	bne.w	8007b5e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079e4:	f7fd f940 	bl	8004c68 <HAL_RCC_GetPCLK2Freq>
 80079e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	461d      	mov	r5, r3
 80079ee:	f04f 0600 	mov.w	r6, #0
 80079f2:	46a8      	mov	r8, r5
 80079f4:	46b1      	mov	r9, r6
 80079f6:	eb18 0308 	adds.w	r3, r8, r8
 80079fa:	eb49 0409 	adc.w	r4, r9, r9
 80079fe:	4698      	mov	r8, r3
 8007a00:	46a1      	mov	r9, r4
 8007a02:	eb18 0805 	adds.w	r8, r8, r5
 8007a06:	eb49 0906 	adc.w	r9, r9, r6
 8007a0a:	f04f 0100 	mov.w	r1, #0
 8007a0e:	f04f 0200 	mov.w	r2, #0
 8007a12:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a16:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a1a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a1e:	4688      	mov	r8, r1
 8007a20:	4691      	mov	r9, r2
 8007a22:	eb18 0005 	adds.w	r0, r8, r5
 8007a26:	eb49 0106 	adc.w	r1, r9, r6
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	461d      	mov	r5, r3
 8007a30:	f04f 0600 	mov.w	r6, #0
 8007a34:	196b      	adds	r3, r5, r5
 8007a36:	eb46 0406 	adc.w	r4, r6, r6
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	4623      	mov	r3, r4
 8007a3e:	f7f9 f943 	bl	8000cc8 <__aeabi_uldivmod>
 8007a42:	4603      	mov	r3, r0
 8007a44:	460c      	mov	r4, r1
 8007a46:	461a      	mov	r2, r3
 8007a48:	4ba5      	ldr	r3, [pc, #660]	; (8007ce0 <UART_SetConfig+0x384>)
 8007a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a4e:	095b      	lsrs	r3, r3, #5
 8007a50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	461d      	mov	r5, r3
 8007a58:	f04f 0600 	mov.w	r6, #0
 8007a5c:	46a9      	mov	r9, r5
 8007a5e:	46b2      	mov	sl, r6
 8007a60:	eb19 0309 	adds.w	r3, r9, r9
 8007a64:	eb4a 040a 	adc.w	r4, sl, sl
 8007a68:	4699      	mov	r9, r3
 8007a6a:	46a2      	mov	sl, r4
 8007a6c:	eb19 0905 	adds.w	r9, r9, r5
 8007a70:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a74:	f04f 0100 	mov.w	r1, #0
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a88:	4689      	mov	r9, r1
 8007a8a:	4692      	mov	sl, r2
 8007a8c:	eb19 0005 	adds.w	r0, r9, r5
 8007a90:	eb4a 0106 	adc.w	r1, sl, r6
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	461d      	mov	r5, r3
 8007a9a:	f04f 0600 	mov.w	r6, #0
 8007a9e:	196b      	adds	r3, r5, r5
 8007aa0:	eb46 0406 	adc.w	r4, r6, r6
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	4623      	mov	r3, r4
 8007aa8:	f7f9 f90e 	bl	8000cc8 <__aeabi_uldivmod>
 8007aac:	4603      	mov	r3, r0
 8007aae:	460c      	mov	r4, r1
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	4b8b      	ldr	r3, [pc, #556]	; (8007ce0 <UART_SetConfig+0x384>)
 8007ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	2164      	movs	r1, #100	; 0x64
 8007abc:	fb01 f303 	mul.w	r3, r1, r3
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	3332      	adds	r3, #50	; 0x32
 8007ac6:	4a86      	ldr	r2, [pc, #536]	; (8007ce0 <UART_SetConfig+0x384>)
 8007ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ad4:	4498      	add	r8, r3
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	461d      	mov	r5, r3
 8007ada:	f04f 0600 	mov.w	r6, #0
 8007ade:	46a9      	mov	r9, r5
 8007ae0:	46b2      	mov	sl, r6
 8007ae2:	eb19 0309 	adds.w	r3, r9, r9
 8007ae6:	eb4a 040a 	adc.w	r4, sl, sl
 8007aea:	4699      	mov	r9, r3
 8007aec:	46a2      	mov	sl, r4
 8007aee:	eb19 0905 	adds.w	r9, r9, r5
 8007af2:	eb4a 0a06 	adc.w	sl, sl, r6
 8007af6:	f04f 0100 	mov.w	r1, #0
 8007afa:	f04f 0200 	mov.w	r2, #0
 8007afe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b0a:	4689      	mov	r9, r1
 8007b0c:	4692      	mov	sl, r2
 8007b0e:	eb19 0005 	adds.w	r0, r9, r5
 8007b12:	eb4a 0106 	adc.w	r1, sl, r6
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	461d      	mov	r5, r3
 8007b1c:	f04f 0600 	mov.w	r6, #0
 8007b20:	196b      	adds	r3, r5, r5
 8007b22:	eb46 0406 	adc.w	r4, r6, r6
 8007b26:	461a      	mov	r2, r3
 8007b28:	4623      	mov	r3, r4
 8007b2a:	f7f9 f8cd 	bl	8000cc8 <__aeabi_uldivmod>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	461a      	mov	r2, r3
 8007b34:	4b6a      	ldr	r3, [pc, #424]	; (8007ce0 <UART_SetConfig+0x384>)
 8007b36:	fba3 1302 	umull	r1, r3, r3, r2
 8007b3a:	095b      	lsrs	r3, r3, #5
 8007b3c:	2164      	movs	r1, #100	; 0x64
 8007b3e:	fb01 f303 	mul.w	r3, r1, r3
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	00db      	lsls	r3, r3, #3
 8007b46:	3332      	adds	r3, #50	; 0x32
 8007b48:	4a65      	ldr	r2, [pc, #404]	; (8007ce0 <UART_SetConfig+0x384>)
 8007b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	f003 0207 	and.w	r2, r3, #7
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4442      	add	r2, r8
 8007b5a:	609a      	str	r2, [r3, #8]
 8007b5c:	e26f      	b.n	800803e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b5e:	f7fd f86f 	bl	8004c40 <HAL_RCC_GetPCLK1Freq>
 8007b62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	461d      	mov	r5, r3
 8007b68:	f04f 0600 	mov.w	r6, #0
 8007b6c:	46a8      	mov	r8, r5
 8007b6e:	46b1      	mov	r9, r6
 8007b70:	eb18 0308 	adds.w	r3, r8, r8
 8007b74:	eb49 0409 	adc.w	r4, r9, r9
 8007b78:	4698      	mov	r8, r3
 8007b7a:	46a1      	mov	r9, r4
 8007b7c:	eb18 0805 	adds.w	r8, r8, r5
 8007b80:	eb49 0906 	adc.w	r9, r9, r6
 8007b84:	f04f 0100 	mov.w	r1, #0
 8007b88:	f04f 0200 	mov.w	r2, #0
 8007b8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007b90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007b94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b98:	4688      	mov	r8, r1
 8007b9a:	4691      	mov	r9, r2
 8007b9c:	eb18 0005 	adds.w	r0, r8, r5
 8007ba0:	eb49 0106 	adc.w	r1, r9, r6
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	461d      	mov	r5, r3
 8007baa:	f04f 0600 	mov.w	r6, #0
 8007bae:	196b      	adds	r3, r5, r5
 8007bb0:	eb46 0406 	adc.w	r4, r6, r6
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	4623      	mov	r3, r4
 8007bb8:	f7f9 f886 	bl	8000cc8 <__aeabi_uldivmod>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	4b47      	ldr	r3, [pc, #284]	; (8007ce0 <UART_SetConfig+0x384>)
 8007bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8007bc8:	095b      	lsrs	r3, r3, #5
 8007bca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	461d      	mov	r5, r3
 8007bd2:	f04f 0600 	mov.w	r6, #0
 8007bd6:	46a9      	mov	r9, r5
 8007bd8:	46b2      	mov	sl, r6
 8007bda:	eb19 0309 	adds.w	r3, r9, r9
 8007bde:	eb4a 040a 	adc.w	r4, sl, sl
 8007be2:	4699      	mov	r9, r3
 8007be4:	46a2      	mov	sl, r4
 8007be6:	eb19 0905 	adds.w	r9, r9, r5
 8007bea:	eb4a 0a06 	adc.w	sl, sl, r6
 8007bee:	f04f 0100 	mov.w	r1, #0
 8007bf2:	f04f 0200 	mov.w	r2, #0
 8007bf6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c02:	4689      	mov	r9, r1
 8007c04:	4692      	mov	sl, r2
 8007c06:	eb19 0005 	adds.w	r0, r9, r5
 8007c0a:	eb4a 0106 	adc.w	r1, sl, r6
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	461d      	mov	r5, r3
 8007c14:	f04f 0600 	mov.w	r6, #0
 8007c18:	196b      	adds	r3, r5, r5
 8007c1a:	eb46 0406 	adc.w	r4, r6, r6
 8007c1e:	461a      	mov	r2, r3
 8007c20:	4623      	mov	r3, r4
 8007c22:	f7f9 f851 	bl	8000cc8 <__aeabi_uldivmod>
 8007c26:	4603      	mov	r3, r0
 8007c28:	460c      	mov	r4, r1
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	4b2c      	ldr	r3, [pc, #176]	; (8007ce0 <UART_SetConfig+0x384>)
 8007c2e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c32:	095b      	lsrs	r3, r3, #5
 8007c34:	2164      	movs	r1, #100	; 0x64
 8007c36:	fb01 f303 	mul.w	r3, r1, r3
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	3332      	adds	r3, #50	; 0x32
 8007c40:	4a27      	ldr	r2, [pc, #156]	; (8007ce0 <UART_SetConfig+0x384>)
 8007c42:	fba2 2303 	umull	r2, r3, r2, r3
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c4e:	4498      	add	r8, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	461d      	mov	r5, r3
 8007c54:	f04f 0600 	mov.w	r6, #0
 8007c58:	46a9      	mov	r9, r5
 8007c5a:	46b2      	mov	sl, r6
 8007c5c:	eb19 0309 	adds.w	r3, r9, r9
 8007c60:	eb4a 040a 	adc.w	r4, sl, sl
 8007c64:	4699      	mov	r9, r3
 8007c66:	46a2      	mov	sl, r4
 8007c68:	eb19 0905 	adds.w	r9, r9, r5
 8007c6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c70:	f04f 0100 	mov.w	r1, #0
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c84:	4689      	mov	r9, r1
 8007c86:	4692      	mov	sl, r2
 8007c88:	eb19 0005 	adds.w	r0, r9, r5
 8007c8c:	eb4a 0106 	adc.w	r1, sl, r6
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	461d      	mov	r5, r3
 8007c96:	f04f 0600 	mov.w	r6, #0
 8007c9a:	196b      	adds	r3, r5, r5
 8007c9c:	eb46 0406 	adc.w	r4, r6, r6
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	4623      	mov	r3, r4
 8007ca4:	f7f9 f810 	bl	8000cc8 <__aeabi_uldivmod>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	461a      	mov	r2, r3
 8007cae:	4b0c      	ldr	r3, [pc, #48]	; (8007ce0 <UART_SetConfig+0x384>)
 8007cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8007cb4:	095b      	lsrs	r3, r3, #5
 8007cb6:	2164      	movs	r1, #100	; 0x64
 8007cb8:	fb01 f303 	mul.w	r3, r1, r3
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	3332      	adds	r3, #50	; 0x32
 8007cc2:	4a07      	ldr	r2, [pc, #28]	; (8007ce0 <UART_SetConfig+0x384>)
 8007cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc8:	095b      	lsrs	r3, r3, #5
 8007cca:	f003 0207 	and.w	r2, r3, #7
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4442      	add	r2, r8
 8007cd4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007cd6:	e1b2      	b.n	800803e <UART_SetConfig+0x6e2>
 8007cd8:	40011000 	.word	0x40011000
 8007cdc:	40011400 	.word	0x40011400
 8007ce0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4ad7      	ldr	r2, [pc, #860]	; (8008048 <UART_SetConfig+0x6ec>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d005      	beq.n	8007cfa <UART_SetConfig+0x39e>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4ad6      	ldr	r2, [pc, #856]	; (800804c <UART_SetConfig+0x6f0>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	f040 80d1 	bne.w	8007e9c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cfa:	f7fc ffb5 	bl	8004c68 <HAL_RCC_GetPCLK2Freq>
 8007cfe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	469a      	mov	sl, r3
 8007d04:	f04f 0b00 	mov.w	fp, #0
 8007d08:	46d0      	mov	r8, sl
 8007d0a:	46d9      	mov	r9, fp
 8007d0c:	eb18 0308 	adds.w	r3, r8, r8
 8007d10:	eb49 0409 	adc.w	r4, r9, r9
 8007d14:	4698      	mov	r8, r3
 8007d16:	46a1      	mov	r9, r4
 8007d18:	eb18 080a 	adds.w	r8, r8, sl
 8007d1c:	eb49 090b 	adc.w	r9, r9, fp
 8007d20:	f04f 0100 	mov.w	r1, #0
 8007d24:	f04f 0200 	mov.w	r2, #0
 8007d28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d34:	4688      	mov	r8, r1
 8007d36:	4691      	mov	r9, r2
 8007d38:	eb1a 0508 	adds.w	r5, sl, r8
 8007d3c:	eb4b 0609 	adc.w	r6, fp, r9
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	4619      	mov	r1, r3
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	f04f 0300 	mov.w	r3, #0
 8007d4e:	f04f 0400 	mov.w	r4, #0
 8007d52:	0094      	lsls	r4, r2, #2
 8007d54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d58:	008b      	lsls	r3, r1, #2
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	4623      	mov	r3, r4
 8007d5e:	4628      	mov	r0, r5
 8007d60:	4631      	mov	r1, r6
 8007d62:	f7f8 ffb1 	bl	8000cc8 <__aeabi_uldivmod>
 8007d66:	4603      	mov	r3, r0
 8007d68:	460c      	mov	r4, r1
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4bb8      	ldr	r3, [pc, #736]	; (8008050 <UART_SetConfig+0x6f4>)
 8007d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d72:	095b      	lsrs	r3, r3, #5
 8007d74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	469b      	mov	fp, r3
 8007d7c:	f04f 0c00 	mov.w	ip, #0
 8007d80:	46d9      	mov	r9, fp
 8007d82:	46e2      	mov	sl, ip
 8007d84:	eb19 0309 	adds.w	r3, r9, r9
 8007d88:	eb4a 040a 	adc.w	r4, sl, sl
 8007d8c:	4699      	mov	r9, r3
 8007d8e:	46a2      	mov	sl, r4
 8007d90:	eb19 090b 	adds.w	r9, r9, fp
 8007d94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d98:	f04f 0100 	mov.w	r1, #0
 8007d9c:	f04f 0200 	mov.w	r2, #0
 8007da0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007da4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007da8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007dac:	4689      	mov	r9, r1
 8007dae:	4692      	mov	sl, r2
 8007db0:	eb1b 0509 	adds.w	r5, fp, r9
 8007db4:	eb4c 060a 	adc.w	r6, ip, sl
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	f04f 0200 	mov.w	r2, #0
 8007dc2:	f04f 0300 	mov.w	r3, #0
 8007dc6:	f04f 0400 	mov.w	r4, #0
 8007dca:	0094      	lsls	r4, r2, #2
 8007dcc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007dd0:	008b      	lsls	r3, r1, #2
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	4623      	mov	r3, r4
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	4631      	mov	r1, r6
 8007dda:	f7f8 ff75 	bl	8000cc8 <__aeabi_uldivmod>
 8007dde:	4603      	mov	r3, r0
 8007de0:	460c      	mov	r4, r1
 8007de2:	461a      	mov	r2, r3
 8007de4:	4b9a      	ldr	r3, [pc, #616]	; (8008050 <UART_SetConfig+0x6f4>)
 8007de6:	fba3 1302 	umull	r1, r3, r3, r2
 8007dea:	095b      	lsrs	r3, r3, #5
 8007dec:	2164      	movs	r1, #100	; 0x64
 8007dee:	fb01 f303 	mul.w	r3, r1, r3
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	011b      	lsls	r3, r3, #4
 8007df6:	3332      	adds	r3, #50	; 0x32
 8007df8:	4a95      	ldr	r2, [pc, #596]	; (8008050 <UART_SetConfig+0x6f4>)
 8007dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfe:	095b      	lsrs	r3, r3, #5
 8007e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e04:	4498      	add	r8, r3
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	469b      	mov	fp, r3
 8007e0a:	f04f 0c00 	mov.w	ip, #0
 8007e0e:	46d9      	mov	r9, fp
 8007e10:	46e2      	mov	sl, ip
 8007e12:	eb19 0309 	adds.w	r3, r9, r9
 8007e16:	eb4a 040a 	adc.w	r4, sl, sl
 8007e1a:	4699      	mov	r9, r3
 8007e1c:	46a2      	mov	sl, r4
 8007e1e:	eb19 090b 	adds.w	r9, r9, fp
 8007e22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e26:	f04f 0100 	mov.w	r1, #0
 8007e2a:	f04f 0200 	mov.w	r2, #0
 8007e2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e3a:	4689      	mov	r9, r1
 8007e3c:	4692      	mov	sl, r2
 8007e3e:	eb1b 0509 	adds.w	r5, fp, r9
 8007e42:	eb4c 060a 	adc.w	r6, ip, sl
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	f04f 0200 	mov.w	r2, #0
 8007e50:	f04f 0300 	mov.w	r3, #0
 8007e54:	f04f 0400 	mov.w	r4, #0
 8007e58:	0094      	lsls	r4, r2, #2
 8007e5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e5e:	008b      	lsls	r3, r1, #2
 8007e60:	461a      	mov	r2, r3
 8007e62:	4623      	mov	r3, r4
 8007e64:	4628      	mov	r0, r5
 8007e66:	4631      	mov	r1, r6
 8007e68:	f7f8 ff2e 	bl	8000cc8 <__aeabi_uldivmod>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	461a      	mov	r2, r3
 8007e72:	4b77      	ldr	r3, [pc, #476]	; (8008050 <UART_SetConfig+0x6f4>)
 8007e74:	fba3 1302 	umull	r1, r3, r3, r2
 8007e78:	095b      	lsrs	r3, r3, #5
 8007e7a:	2164      	movs	r1, #100	; 0x64
 8007e7c:	fb01 f303 	mul.w	r3, r1, r3
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	3332      	adds	r3, #50	; 0x32
 8007e86:	4a72      	ldr	r2, [pc, #456]	; (8008050 <UART_SetConfig+0x6f4>)
 8007e88:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8c:	095b      	lsrs	r3, r3, #5
 8007e8e:	f003 020f 	and.w	r2, r3, #15
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4442      	add	r2, r8
 8007e98:	609a      	str	r2, [r3, #8]
 8007e9a:	e0d0      	b.n	800803e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e9c:	f7fc fed0 	bl	8004c40 <HAL_RCC_GetPCLK1Freq>
 8007ea0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	469a      	mov	sl, r3
 8007ea6:	f04f 0b00 	mov.w	fp, #0
 8007eaa:	46d0      	mov	r8, sl
 8007eac:	46d9      	mov	r9, fp
 8007eae:	eb18 0308 	adds.w	r3, r8, r8
 8007eb2:	eb49 0409 	adc.w	r4, r9, r9
 8007eb6:	4698      	mov	r8, r3
 8007eb8:	46a1      	mov	r9, r4
 8007eba:	eb18 080a 	adds.w	r8, r8, sl
 8007ebe:	eb49 090b 	adc.w	r9, r9, fp
 8007ec2:	f04f 0100 	mov.w	r1, #0
 8007ec6:	f04f 0200 	mov.w	r2, #0
 8007eca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ece:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ed2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ed6:	4688      	mov	r8, r1
 8007ed8:	4691      	mov	r9, r2
 8007eda:	eb1a 0508 	adds.w	r5, sl, r8
 8007ede:	eb4b 0609 	adc.w	r6, fp, r9
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	f04f 0200 	mov.w	r2, #0
 8007eec:	f04f 0300 	mov.w	r3, #0
 8007ef0:	f04f 0400 	mov.w	r4, #0
 8007ef4:	0094      	lsls	r4, r2, #2
 8007ef6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007efa:	008b      	lsls	r3, r1, #2
 8007efc:	461a      	mov	r2, r3
 8007efe:	4623      	mov	r3, r4
 8007f00:	4628      	mov	r0, r5
 8007f02:	4631      	mov	r1, r6
 8007f04:	f7f8 fee0 	bl	8000cc8 <__aeabi_uldivmod>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4b50      	ldr	r3, [pc, #320]	; (8008050 <UART_SetConfig+0x6f4>)
 8007f10:	fba3 2302 	umull	r2, r3, r3, r2
 8007f14:	095b      	lsrs	r3, r3, #5
 8007f16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	469b      	mov	fp, r3
 8007f1e:	f04f 0c00 	mov.w	ip, #0
 8007f22:	46d9      	mov	r9, fp
 8007f24:	46e2      	mov	sl, ip
 8007f26:	eb19 0309 	adds.w	r3, r9, r9
 8007f2a:	eb4a 040a 	adc.w	r4, sl, sl
 8007f2e:	4699      	mov	r9, r3
 8007f30:	46a2      	mov	sl, r4
 8007f32:	eb19 090b 	adds.w	r9, r9, fp
 8007f36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f3a:	f04f 0100 	mov.w	r1, #0
 8007f3e:	f04f 0200 	mov.w	r2, #0
 8007f42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f4e:	4689      	mov	r9, r1
 8007f50:	4692      	mov	sl, r2
 8007f52:	eb1b 0509 	adds.w	r5, fp, r9
 8007f56:	eb4c 060a 	adc.w	r6, ip, sl
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	f04f 0200 	mov.w	r2, #0
 8007f64:	f04f 0300 	mov.w	r3, #0
 8007f68:	f04f 0400 	mov.w	r4, #0
 8007f6c:	0094      	lsls	r4, r2, #2
 8007f6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f72:	008b      	lsls	r3, r1, #2
 8007f74:	461a      	mov	r2, r3
 8007f76:	4623      	mov	r3, r4
 8007f78:	4628      	mov	r0, r5
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	f7f8 fea4 	bl	8000cc8 <__aeabi_uldivmod>
 8007f80:	4603      	mov	r3, r0
 8007f82:	460c      	mov	r4, r1
 8007f84:	461a      	mov	r2, r3
 8007f86:	4b32      	ldr	r3, [pc, #200]	; (8008050 <UART_SetConfig+0x6f4>)
 8007f88:	fba3 1302 	umull	r1, r3, r3, r2
 8007f8c:	095b      	lsrs	r3, r3, #5
 8007f8e:	2164      	movs	r1, #100	; 0x64
 8007f90:	fb01 f303 	mul.w	r3, r1, r3
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	3332      	adds	r3, #50	; 0x32
 8007f9a:	4a2d      	ldr	r2, [pc, #180]	; (8008050 <UART_SetConfig+0x6f4>)
 8007f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fa6:	4498      	add	r8, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	469b      	mov	fp, r3
 8007fac:	f04f 0c00 	mov.w	ip, #0
 8007fb0:	46d9      	mov	r9, fp
 8007fb2:	46e2      	mov	sl, ip
 8007fb4:	eb19 0309 	adds.w	r3, r9, r9
 8007fb8:	eb4a 040a 	adc.w	r4, sl, sl
 8007fbc:	4699      	mov	r9, r3
 8007fbe:	46a2      	mov	sl, r4
 8007fc0:	eb19 090b 	adds.w	r9, r9, fp
 8007fc4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007fc8:	f04f 0100 	mov.w	r1, #0
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007fd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fdc:	4689      	mov	r9, r1
 8007fde:	4692      	mov	sl, r2
 8007fe0:	eb1b 0509 	adds.w	r5, fp, r9
 8007fe4:	eb4c 060a 	adc.w	r6, ip, sl
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	4619      	mov	r1, r3
 8007fee:	f04f 0200 	mov.w	r2, #0
 8007ff2:	f04f 0300 	mov.w	r3, #0
 8007ff6:	f04f 0400 	mov.w	r4, #0
 8007ffa:	0094      	lsls	r4, r2, #2
 8007ffc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008000:	008b      	lsls	r3, r1, #2
 8008002:	461a      	mov	r2, r3
 8008004:	4623      	mov	r3, r4
 8008006:	4628      	mov	r0, r5
 8008008:	4631      	mov	r1, r6
 800800a:	f7f8 fe5d 	bl	8000cc8 <__aeabi_uldivmod>
 800800e:	4603      	mov	r3, r0
 8008010:	460c      	mov	r4, r1
 8008012:	461a      	mov	r2, r3
 8008014:	4b0e      	ldr	r3, [pc, #56]	; (8008050 <UART_SetConfig+0x6f4>)
 8008016:	fba3 1302 	umull	r1, r3, r3, r2
 800801a:	095b      	lsrs	r3, r3, #5
 800801c:	2164      	movs	r1, #100	; 0x64
 800801e:	fb01 f303 	mul.w	r3, r1, r3
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	3332      	adds	r3, #50	; 0x32
 8008028:	4a09      	ldr	r2, [pc, #36]	; (8008050 <UART_SetConfig+0x6f4>)
 800802a:	fba2 2303 	umull	r2, r3, r2, r3
 800802e:	095b      	lsrs	r3, r3, #5
 8008030:	f003 020f 	and.w	r2, r3, #15
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4442      	add	r2, r8
 800803a:	609a      	str	r2, [r3, #8]
}
 800803c:	e7ff      	b.n	800803e <UART_SetConfig+0x6e2>
 800803e:	bf00      	nop
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008048:	40011000 	.word	0x40011000
 800804c:	40011400 	.word	0x40011400
 8008050:	51eb851f 	.word	0x51eb851f

08008054 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008054:	b084      	sub	sp, #16
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	f107 001c 	add.w	r0, r7, #28
 8008062:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	2b01      	cmp	r3, #1
 800806a:	d122      	bne.n	80080b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008070:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008096:	2b01      	cmp	r3, #1
 8008098:	d105      	bne.n	80080a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f001 faae 	bl	8009608 <USB_CoreReset>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73fb      	strb	r3, [r7, #15]
 80080b0:	e01a      	b.n	80080e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f001 faa2 	bl	8009608 <USB_CoreReset>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80080c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d106      	bne.n	80080dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	639a      	str	r2, [r3, #56]	; 0x38
 80080da:	e005      	b.n	80080e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d10b      	bne.n	8008106 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f043 0206 	orr.w	r2, r3, #6
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f043 0220 	orr.w	r2, r3, #32
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008106:	7bfb      	ldrb	r3, [r7, #15]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008112:	b004      	add	sp, #16
 8008114:	4770      	bx	lr
	...

08008118 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008126:	79fb      	ldrb	r3, [r7, #7]
 8008128:	2b02      	cmp	r3, #2
 800812a:	d165      	bne.n	80081f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4a41      	ldr	r2, [pc, #260]	; (8008234 <USB_SetTurnaroundTime+0x11c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d906      	bls.n	8008142 <USB_SetTurnaroundTime+0x2a>
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4a40      	ldr	r2, [pc, #256]	; (8008238 <USB_SetTurnaroundTime+0x120>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d802      	bhi.n	8008142 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800813c:	230f      	movs	r3, #15
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e062      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	4a3c      	ldr	r2, [pc, #240]	; (8008238 <USB_SetTurnaroundTime+0x120>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d906      	bls.n	8008158 <USB_SetTurnaroundTime+0x40>
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	4a3b      	ldr	r2, [pc, #236]	; (800823c <USB_SetTurnaroundTime+0x124>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d802      	bhi.n	8008158 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008152:	230e      	movs	r3, #14
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	e057      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4a38      	ldr	r2, [pc, #224]	; (800823c <USB_SetTurnaroundTime+0x124>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d906      	bls.n	800816e <USB_SetTurnaroundTime+0x56>
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	4a37      	ldr	r2, [pc, #220]	; (8008240 <USB_SetTurnaroundTime+0x128>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d802      	bhi.n	800816e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008168:	230d      	movs	r3, #13
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	e04c      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	4a33      	ldr	r2, [pc, #204]	; (8008240 <USB_SetTurnaroundTime+0x128>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d906      	bls.n	8008184 <USB_SetTurnaroundTime+0x6c>
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	4a32      	ldr	r2, [pc, #200]	; (8008244 <USB_SetTurnaroundTime+0x12c>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d802      	bhi.n	8008184 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800817e:	230c      	movs	r3, #12
 8008180:	617b      	str	r3, [r7, #20]
 8008182:	e041      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4a2f      	ldr	r2, [pc, #188]	; (8008244 <USB_SetTurnaroundTime+0x12c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d906      	bls.n	800819a <USB_SetTurnaroundTime+0x82>
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	4a2e      	ldr	r2, [pc, #184]	; (8008248 <USB_SetTurnaroundTime+0x130>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d802      	bhi.n	800819a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008194:	230b      	movs	r3, #11
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	e036      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	4a2a      	ldr	r2, [pc, #168]	; (8008248 <USB_SetTurnaroundTime+0x130>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d906      	bls.n	80081b0 <USB_SetTurnaroundTime+0x98>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	4a29      	ldr	r2, [pc, #164]	; (800824c <USB_SetTurnaroundTime+0x134>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d802      	bhi.n	80081b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80081aa:	230a      	movs	r3, #10
 80081ac:	617b      	str	r3, [r7, #20]
 80081ae:	e02b      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4a26      	ldr	r2, [pc, #152]	; (800824c <USB_SetTurnaroundTime+0x134>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d906      	bls.n	80081c6 <USB_SetTurnaroundTime+0xae>
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4a25      	ldr	r2, [pc, #148]	; (8008250 <USB_SetTurnaroundTime+0x138>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d802      	bhi.n	80081c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80081c0:	2309      	movs	r3, #9
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	e020      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	4a21      	ldr	r2, [pc, #132]	; (8008250 <USB_SetTurnaroundTime+0x138>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d906      	bls.n	80081dc <USB_SetTurnaroundTime+0xc4>
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4a20      	ldr	r2, [pc, #128]	; (8008254 <USB_SetTurnaroundTime+0x13c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d802      	bhi.n	80081dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80081d6:	2308      	movs	r3, #8
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	e015      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <USB_SetTurnaroundTime+0x13c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d906      	bls.n	80081f2 <USB_SetTurnaroundTime+0xda>
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	4a1c      	ldr	r2, [pc, #112]	; (8008258 <USB_SetTurnaroundTime+0x140>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d802      	bhi.n	80081f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80081ec:	2307      	movs	r3, #7
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	e00a      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80081f2:	2306      	movs	r3, #6
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	e007      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d102      	bne.n	8008204 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80081fe:	2309      	movs	r3, #9
 8008200:	617b      	str	r3, [r7, #20]
 8008202:	e001      	b.n	8008208 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008204:	2309      	movs	r3, #9
 8008206:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	68da      	ldr	r2, [r3, #12]
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	029b      	lsls	r3, r3, #10
 800821c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008220:	431a      	orrs	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	371c      	adds	r7, #28
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	00d8acbf 	.word	0x00d8acbf
 8008238:	00e4e1bf 	.word	0x00e4e1bf
 800823c:	00f423ff 	.word	0x00f423ff
 8008240:	0106737f 	.word	0x0106737f
 8008244:	011a499f 	.word	0x011a499f
 8008248:	01312cff 	.word	0x01312cff
 800824c:	014ca43f 	.word	0x014ca43f
 8008250:	016e35ff 	.word	0x016e35ff
 8008254:	01a6ab1f 	.word	0x01a6ab1f
 8008258:	01e847ff 	.word	0x01e847ff

0800825c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f043 0201 	orr.w	r2, r3, #1
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f023 0201 	bic.w	r2, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082b8:	78fb      	ldrb	r3, [r7, #3]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d106      	bne.n	80082cc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	60da      	str	r2, [r3, #12]
 80082ca:	e00b      	b.n	80082e4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80082cc:	78fb      	ldrb	r3, [r7, #3]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d106      	bne.n	80082e0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60da      	str	r2, [r3, #12]
 80082de:	e001      	b.n	80082e4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e003      	b.n	80082ec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80082e4:	2032      	movs	r0, #50	; 0x32
 80082e6:	f7fa f829 	bl	800233c <HAL_Delay>

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082f4:	b084      	sub	sp, #16
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b086      	sub	sp, #24
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800830e:	2300      	movs	r3, #0
 8008310:	613b      	str	r3, [r7, #16]
 8008312:	e009      	b.n	8008328 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	3340      	adds	r3, #64	; 0x40
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	2200      	movs	r2, #0
 8008320:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	3301      	adds	r3, #1
 8008326:	613b      	str	r3, [r7, #16]
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	2b0e      	cmp	r3, #14
 800832c:	d9f2      	bls.n	8008314 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800832e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d11c      	bne.n	800836e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008342:	f043 0302 	orr.w	r3, r3, #2
 8008346:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	e005      	b.n	800837a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008372:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008380:	461a      	mov	r2, r3
 8008382:	2300      	movs	r3, #0
 8008384:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800838c:	4619      	mov	r1, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008394:	461a      	mov	r2, r3
 8008396:	680b      	ldr	r3, [r1, #0]
 8008398:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	2b01      	cmp	r3, #1
 800839e:	d10c      	bne.n	80083ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d104      	bne.n	80083b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083a6:	2100      	movs	r1, #0
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f949 	bl	8008640 <USB_SetDevSpeed>
 80083ae:	e008      	b.n	80083c2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083b0:	2101      	movs	r1, #1
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f944 	bl	8008640 <USB_SetDevSpeed>
 80083b8:	e003      	b.n	80083c2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083ba:	2103      	movs	r1, #3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f93f 	bl	8008640 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083c2:	2110      	movs	r1, #16
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f8f3 	bl	80085b0 <USB_FlushTxFifo>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f911 	bl	80085fc <USB_FlushRxFifo>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ea:	461a      	mov	r2, r3
 80083ec:	2300      	movs	r3, #0
 80083ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f6:	461a      	mov	r2, r3
 80083f8:	2300      	movs	r3, #0
 80083fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008402:	461a      	mov	r2, r3
 8008404:	2300      	movs	r3, #0
 8008406:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008408:	2300      	movs	r3, #0
 800840a:	613b      	str	r3, [r7, #16]
 800840c:	e043      	b.n	8008496 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4413      	add	r3, r2
 8008416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008424:	d118      	bne.n	8008458 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10a      	bne.n	8008442 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008438:	461a      	mov	r2, r3
 800843a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	e013      	b.n	800846a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800844e:	461a      	mov	r2, r3
 8008450:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	e008      	b.n	800846a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008464:	461a      	mov	r2, r3
 8008466:	2300      	movs	r3, #0
 8008468:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008476:	461a      	mov	r2, r3
 8008478:	2300      	movs	r3, #0
 800847a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008488:	461a      	mov	r2, r3
 800848a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800848e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	3301      	adds	r3, #1
 8008494:	613b      	str	r3, [r7, #16]
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	429a      	cmp	r2, r3
 800849c:	d3b7      	bcc.n	800840e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800849e:	2300      	movs	r3, #0
 80084a0:	613b      	str	r3, [r7, #16]
 80084a2:	e043      	b.n	800852c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084ba:	d118      	bne.n	80084ee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10a      	bne.n	80084d8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ce:	461a      	mov	r2, r3
 80084d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084d4:	6013      	str	r3, [r2, #0]
 80084d6:	e013      	b.n	8008500 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e4:	461a      	mov	r2, r3
 80084e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	e008      	b.n	8008500 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fa:	461a      	mov	r2, r3
 80084fc:	2300      	movs	r3, #0
 80084fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850c:	461a      	mov	r2, r3
 800850e:	2300      	movs	r3, #0
 8008510:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4413      	add	r3, r2
 800851a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851e:	461a      	mov	r2, r3
 8008520:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008524:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	3301      	adds	r3, #1
 800852a:	613b      	str	r3, [r7, #16]
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	429a      	cmp	r2, r3
 8008532:	d3b7      	bcc.n	80084a4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008542:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008546:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008554:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	2b00      	cmp	r3, #0
 800855a:	d105      	bne.n	8008568 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	f043 0210 	orr.w	r2, r3, #16
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	699a      	ldr	r2, [r3, #24]
 800856c:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <USB_DevInit+0x2b8>)
 800856e:	4313      	orrs	r3, r2
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008576:	2b00      	cmp	r3, #0
 8008578:	d005      	beq.n	8008586 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	f043 0208 	orr.w	r2, r3, #8
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008588:	2b01      	cmp	r3, #1
 800858a:	d107      	bne.n	800859c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008594:	f043 0304 	orr.w	r3, r3, #4
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800859c:	7dfb      	ldrb	r3, [r7, #23]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085a8:	b004      	add	sp, #16
 80085aa:	4770      	bx	lr
 80085ac:	803c3800 	.word	0x803c3800

080085b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	019b      	lsls	r3, r3, #6
 80085c2:	f043 0220 	orr.w	r2, r3, #32
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3301      	adds	r3, #1
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4a09      	ldr	r2, [pc, #36]	; (80085f8 <USB_FlushTxFifo+0x48>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d901      	bls.n	80085dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e006      	b.n	80085ea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b20      	cmp	r3, #32
 80085e6:	d0f0      	beq.n	80085ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	00030d40 	.word	0x00030d40

080085fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008604:	2300      	movs	r3, #0
 8008606:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2210      	movs	r2, #16
 800860c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	3301      	adds	r3, #1
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4a09      	ldr	r2, [pc, #36]	; (800863c <USB_FlushRxFifo+0x40>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d901      	bls.n	8008620 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e006      	b.n	800862e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	f003 0310 	and.w	r3, r3, #16
 8008628:	2b10      	cmp	r3, #16
 800862a:	d0f0      	beq.n	800860e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	00030d40 	.word	0x00030d40

08008640 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	68f9      	ldr	r1, [r7, #12]
 800865c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008660:	4313      	orrs	r3, r2
 8008662:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008672:	b480      	push	{r7}
 8008674:	b087      	sub	sp, #28
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f003 0306 	and.w	r3, r3, #6
 800868a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d102      	bne.n	8008698 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008692:	2300      	movs	r3, #0
 8008694:	75fb      	strb	r3, [r7, #23]
 8008696:	e00a      	b.n	80086ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b02      	cmp	r3, #2
 800869c:	d002      	beq.n	80086a4 <USB_GetDevSpeed+0x32>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b06      	cmp	r3, #6
 80086a2:	d102      	bne.n	80086aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80086a4:	2302      	movs	r3, #2
 80086a6:	75fb      	strb	r3, [r7, #23]
 80086a8:	e001      	b.n	80086ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80086aa:	230f      	movs	r3, #15
 80086ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	785b      	ldrb	r3, [r3, #1]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d13a      	bne.n	800874e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086de:	69da      	ldr	r2, [r3, #28]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	f003 030f 	and.w	r3, r3, #15
 80086e8:	2101      	movs	r1, #1
 80086ea:	fa01 f303 	lsl.w	r3, r1, r3
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	68f9      	ldr	r1, [r7, #12]
 80086f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086f6:	4313      	orrs	r3, r2
 80086f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d155      	bne.n	80087bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	78db      	ldrb	r3, [r3, #3]
 800872a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800872c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	059b      	lsls	r3, r3, #22
 8008732:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008734:	4313      	orrs	r3, r2
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	0151      	lsls	r1, r2, #5
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	440a      	add	r2, r1
 800873e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800874a:	6013      	str	r3, [r2, #0]
 800874c:	e036      	b.n	80087bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008754:	69da      	ldr	r2, [r3, #28]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	f003 030f 	and.w	r3, r3, #15
 800875e:	2101      	movs	r1, #1
 8008760:	fa01 f303 	lsl.w	r3, r1, r3
 8008764:	041b      	lsls	r3, r3, #16
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800876c:	4313      	orrs	r3, r2
 800876e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d11a      	bne.n	80087bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	4413      	add	r3, r2
 800878e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	78db      	ldrb	r3, [r3, #3]
 80087a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087a2:	430b      	orrs	r3, r1
 80087a4:	4313      	orrs	r3, r2
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	0151      	lsls	r1, r2, #5
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	440a      	add	r2, r1
 80087ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
	...

080087cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	785b      	ldrb	r3, [r3, #1]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d161      	bne.n	80088ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	015a      	lsls	r2, r3, #5
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4413      	add	r3, r2
 80087f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087fe:	d11f      	bne.n	8008840 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	0151      	lsls	r1, r2, #5
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	440a      	add	r2, r1
 8008816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800881a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800881e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	015a      	lsls	r2, r3, #5
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	4413      	add	r3, r2
 8008828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	0151      	lsls	r1, r2, #5
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	440a      	add	r2, r1
 8008836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800883a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800883e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	f003 030f 	and.w	r3, r3, #15
 8008850:	2101      	movs	r1, #1
 8008852:	fa01 f303 	lsl.w	r3, r1, r3
 8008856:	b29b      	uxth	r3, r3
 8008858:	43db      	mvns	r3, r3
 800885a:	68f9      	ldr	r1, [r7, #12]
 800885c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008860:	4013      	ands	r3, r2
 8008862:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800886a:	69da      	ldr	r2, [r3, #28]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	f003 030f 	and.w	r3, r3, #15
 8008874:	2101      	movs	r1, #1
 8008876:	fa01 f303 	lsl.w	r3, r1, r3
 800887a:	b29b      	uxth	r3, r3
 800887c:	43db      	mvns	r3, r3
 800887e:	68f9      	ldr	r1, [r7, #12]
 8008880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008884:	4013      	ands	r3, r2
 8008886:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	0159      	lsls	r1, r3, #5
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	440b      	add	r3, r1
 800889e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a2:	4619      	mov	r1, r3
 80088a4:	4b35      	ldr	r3, [pc, #212]	; (800897c <USB_DeactivateEndpoint+0x1b0>)
 80088a6:	4013      	ands	r3, r2
 80088a8:	600b      	str	r3, [r1, #0]
 80088aa:	e060      	b.n	800896e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088c2:	d11f      	bne.n	8008904 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	0151      	lsls	r1, r2, #5
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	440a      	add	r2, r1
 80088da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	015a      	lsls	r2, r3, #5
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	0151      	lsls	r1, r2, #5
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	440a      	add	r2, r1
 80088fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008902:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	2101      	movs	r1, #1
 8008916:	fa01 f303 	lsl.w	r3, r1, r3
 800891a:	041b      	lsls	r3, r3, #16
 800891c:	43db      	mvns	r3, r3
 800891e:	68f9      	ldr	r1, [r7, #12]
 8008920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008924:	4013      	ands	r3, r2
 8008926:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892e:	69da      	ldr	r2, [r3, #28]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	f003 030f 	and.w	r3, r3, #15
 8008938:	2101      	movs	r1, #1
 800893a:	fa01 f303 	lsl.w	r3, r1, r3
 800893e:	041b      	lsls	r3, r3, #16
 8008940:	43db      	mvns	r3, r3
 8008942:	68f9      	ldr	r1, [r7, #12]
 8008944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008948:	4013      	ands	r3, r2
 800894a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	0159      	lsls	r1, r3, #5
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	440b      	add	r3, r1
 8008962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008966:	4619      	mov	r1, r3
 8008968:	4b05      	ldr	r3, [pc, #20]	; (8008980 <USB_DeactivateEndpoint+0x1b4>)
 800896a:	4013      	ands	r3, r2
 800896c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	ec337800 	.word	0xec337800
 8008980:	eff37800 	.word	0xeff37800

08008984 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08a      	sub	sp, #40	; 0x28
 8008988:	af02      	add	r7, sp, #8
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	4613      	mov	r3, r2
 8008990:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	785b      	ldrb	r3, [r3, #1]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	f040 815c 	bne.w	8008c5e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d132      	bne.n	8008a14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	69ba      	ldr	r2, [r7, #24]
 80089be:	0151      	lsls	r1, r2, #5
 80089c0:	69fa      	ldr	r2, [r7, #28]
 80089c2:	440a      	add	r2, r1
 80089c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	015a      	lsls	r2, r3, #5
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	0151      	lsls	r1, r2, #5
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	440a      	add	r2, r1
 80089e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	0151      	lsls	r1, r2, #5
 8008a04:	69fa      	ldr	r2, [r7, #28]
 8008a06:	440a      	add	r2, r1
 8008a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a0c:	0cdb      	lsrs	r3, r3, #19
 8008a0e:	04db      	lsls	r3, r3, #19
 8008a10:	6113      	str	r3, [r2, #16]
 8008a12:	e074      	b.n	8008afe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	0151      	lsls	r1, r2, #5
 8008a26:	69fa      	ldr	r2, [r7, #28]
 8008a28:	440a      	add	r2, r1
 8008a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a2e:	0cdb      	lsrs	r3, r3, #19
 8008a30:	04db      	lsls	r3, r3, #19
 8008a32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	0151      	lsls	r1, r2, #5
 8008a46:	69fa      	ldr	r2, [r7, #28]
 8008a48:	440a      	add	r2, r1
 8008a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a64:	691a      	ldr	r2, [r3, #16]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	6959      	ldr	r1, [r3, #20]
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	440b      	add	r3, r1
 8008a70:	1e59      	subs	r1, r3, #1
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a7a:	04d9      	lsls	r1, r3, #19
 8008a7c:	4b9d      	ldr	r3, [pc, #628]	; (8008cf4 <USB_EPStartXfer+0x370>)
 8008a7e:	400b      	ands	r3, r1
 8008a80:	69b9      	ldr	r1, [r7, #24]
 8008a82:	0148      	lsls	r0, r1, #5
 8008a84:	69f9      	ldr	r1, [r7, #28]
 8008a86:	4401      	add	r1, r0
 8008a88:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9c:	691a      	ldr	r2, [r3, #16]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aa6:	69b9      	ldr	r1, [r7, #24]
 8008aa8:	0148      	lsls	r0, r1, #5
 8008aaa:	69f9      	ldr	r1, [r7, #28]
 8008aac:	4401      	add	r1, r0
 8008aae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	78db      	ldrb	r3, [r3, #3]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d11f      	bne.n	8008afe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	0151      	lsls	r1, r2, #5
 8008ad0:	69fa      	ldr	r2, [r7, #28]
 8008ad2:	440a      	add	r2, r1
 8008ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008adc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	69fa      	ldr	r2, [r7, #28]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008afc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d14b      	bne.n	8008b9c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d009      	beq.n	8008b20 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b18:	461a      	mov	r2, r3
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	78db      	ldrb	r3, [r3, #3]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d128      	bne.n	8008b7a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d110      	bne.n	8008b5a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	0151      	lsls	r1, r2, #5
 8008b4a:	69fa      	ldr	r2, [r7, #28]
 8008b4c:	440a      	add	r2, r1
 8008b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	e00f      	b.n	8008b7a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b78:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	0151      	lsls	r1, r2, #5
 8008b8c:	69fa      	ldr	r2, [r7, #28]
 8008b8e:	440a      	add	r2, r1
 8008b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	e12f      	b.n	8008dfc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	69ba      	ldr	r2, [r7, #24]
 8008bac:	0151      	lsls	r1, r2, #5
 8008bae:	69fa      	ldr	r2, [r7, #28]
 8008bb0:	440a      	add	r2, r1
 8008bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	78db      	ldrb	r3, [r3, #3]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d015      	beq.n	8008bf0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 8117 	beq.w	8008dfc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	f003 030f 	and.w	r3, r3, #15
 8008bde:	2101      	movs	r1, #1
 8008be0:	fa01 f303 	lsl.w	r3, r1, r3
 8008be4:	69f9      	ldr	r1, [r7, #28]
 8008be6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bea:	4313      	orrs	r3, r2
 8008bec:	634b      	str	r3, [r1, #52]	; 0x34
 8008bee:	e105      	b.n	8008dfc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d110      	bne.n	8008c22 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c1e:	6013      	str	r3, [r2, #0]
 8008c20:	e00f      	b.n	8008c42 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	0151      	lsls	r1, r2, #5
 8008c34:	69fa      	ldr	r2, [r7, #28]
 8008c36:	440a      	add	r2, r1
 8008c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c40:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	68d9      	ldr	r1, [r3, #12]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	781a      	ldrb	r2, [r3, #0]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	b298      	uxth	r0, r3
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	4603      	mov	r3, r0
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 fa2b 	bl	80090b2 <USB_WritePacket>
 8008c5c:	e0ce      	b.n	8008dfc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	0151      	lsls	r1, r2, #5
 8008c70:	69fa      	ldr	r2, [r7, #28]
 8008c72:	440a      	add	r2, r1
 8008c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c78:	0cdb      	lsrs	r3, r3, #19
 8008c7a:	04db      	lsls	r3, r3, #19
 8008c7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	0151      	lsls	r1, r2, #5
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	440a      	add	r2, r1
 8008c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ca0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d126      	bne.n	8008cf8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	015a      	lsls	r2, r3, #5
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb6:	691a      	ldr	r2, [r3, #16]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cc0:	69b9      	ldr	r1, [r7, #24]
 8008cc2:	0148      	lsls	r0, r1, #5
 8008cc4:	69f9      	ldr	r1, [r7, #28]
 8008cc6:	4401      	add	r1, r0
 8008cc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	015a      	lsls	r2, r3, #5
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	0151      	lsls	r1, r2, #5
 8008ce2:	69fa      	ldr	r2, [r7, #28]
 8008ce4:	440a      	add	r2, r1
 8008ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cee:	6113      	str	r3, [r2, #16]
 8008cf0:	e036      	b.n	8008d60 <USB_EPStartXfer+0x3dc>
 8008cf2:	bf00      	nop
 8008cf4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	695a      	ldr	r2, [r3, #20]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	4413      	add	r3, r2
 8008d02:	1e5a      	subs	r2, r3, #1
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1a:	691a      	ldr	r2, [r3, #16]
 8008d1c:	8afb      	ldrh	r3, [r7, #22]
 8008d1e:	04d9      	lsls	r1, r3, #19
 8008d20:	4b39      	ldr	r3, [pc, #228]	; (8008e08 <USB_EPStartXfer+0x484>)
 8008d22:	400b      	ands	r3, r1
 8008d24:	69b9      	ldr	r1, [r7, #24]
 8008d26:	0148      	lsls	r0, r1, #5
 8008d28:	69f9      	ldr	r1, [r7, #28]
 8008d2a:	4401      	add	r1, r0
 8008d2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d30:	4313      	orrs	r3, r2
 8008d32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d40:	691a      	ldr	r2, [r3, #16]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	8af9      	ldrh	r1, [r7, #22]
 8008d48:	fb01 f303 	mul.w	r3, r1, r3
 8008d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d50:	69b9      	ldr	r1, [r7, #24]
 8008d52:	0148      	lsls	r0, r1, #5
 8008d54:	69f9      	ldr	r1, [r7, #28]
 8008d56:	4401      	add	r1, r0
 8008d58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d60:	79fb      	ldrb	r3, [r7, #7]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d10d      	bne.n	8008d82 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d009      	beq.n	8008d82 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	68d9      	ldr	r1, [r3, #12]
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7e:	460a      	mov	r2, r1
 8008d80:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	78db      	ldrb	r3, [r3, #3]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d128      	bne.n	8008ddc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d110      	bne.n	8008dbc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	0151      	lsls	r1, r2, #5
 8008dac:	69fa      	ldr	r2, [r7, #28]
 8008dae:	440a      	add	r2, r1
 8008db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008db4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	e00f      	b.n	8008ddc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	0151      	lsls	r1, r2, #5
 8008dce:	69fa      	ldr	r2, [r7, #28]
 8008dd0:	440a      	add	r2, r1
 8008dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dda:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	0151      	lsls	r1, r2, #5
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	440a      	add	r2, r1
 8008df2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008df6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008dfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3720      	adds	r7, #32
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	1ff80000 	.word	0x1ff80000

08008e0c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	4613      	mov	r3, r2
 8008e18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	785b      	ldrb	r3, [r3, #1]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	f040 80cd 	bne.w	8008fc8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d132      	bne.n	8008e9c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	0151      	lsls	r1, r2, #5
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	440a      	add	r2, r1
 8008e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	0151      	lsls	r1, r2, #5
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	440a      	add	r2, r1
 8008e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	0151      	lsls	r1, r2, #5
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	440a      	add	r2, r1
 8008e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e94:	0cdb      	lsrs	r3, r3, #19
 8008e96:	04db      	lsls	r3, r3, #19
 8008e98:	6113      	str	r3, [r2, #16]
 8008e9a:	e04e      	b.n	8008f3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	0151      	lsls	r1, r2, #5
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	440a      	add	r2, r1
 8008eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eb6:	0cdb      	lsrs	r3, r3, #19
 8008eb8:	04db      	lsls	r3, r3, #19
 8008eba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	0151      	lsls	r1, r2, #5
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	440a      	add	r2, r1
 8008ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ed6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008eda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ede:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	695a      	ldr	r2, [r3, #20]
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d903      	bls.n	8008ef4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	0151      	lsls	r1, r2, #5
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	440a      	add	r2, r1
 8008f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f20:	691a      	ldr	r2, [r3, #16]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f2a:	6939      	ldr	r1, [r7, #16]
 8008f2c:	0148      	lsls	r0, r1, #5
 8008f2e:	6979      	ldr	r1, [r7, #20]
 8008f30:	4401      	add	r1, r0
 8008f32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f36:	4313      	orrs	r3, r2
 8008f38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d11e      	bne.n	8008f7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d009      	beq.n	8008f5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f54:	461a      	mov	r2, r3
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	0151      	lsls	r1, r2, #5
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	440a      	add	r2, r1
 8008f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	e092      	b.n	80090a4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	0151      	lsls	r1, r2, #5
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	440a      	add	r2, r1
 8008f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d07e      	beq.n	80090a4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	f003 030f 	and.w	r3, r3, #15
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fbc:	6979      	ldr	r1, [r7, #20]
 8008fbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	634b      	str	r3, [r1, #52]	; 0x34
 8008fc6:	e06d      	b.n	80090a4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	0151      	lsls	r1, r2, #5
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	440a      	add	r2, r1
 8008fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fe2:	0cdb      	lsrs	r3, r3, #19
 8008fe4:	04db      	lsls	r3, r3, #19
 8008fe6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	0151      	lsls	r1, r2, #5
 8008ffa:	697a      	ldr	r2, [r7, #20]
 8008ffc:	440a      	add	r2, r1
 8008ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009002:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009006:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800900a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	689a      	ldr	r2, [r3, #8]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	0151      	lsls	r1, r2, #5
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	440a      	add	r2, r1
 8009032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009036:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800903a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	015a      	lsls	r2, r3, #5
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	4413      	add	r3, r2
 8009044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009048:	691a      	ldr	r2, [r3, #16]
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009052:	6939      	ldr	r1, [r7, #16]
 8009054:	0148      	lsls	r0, r1, #5
 8009056:	6979      	ldr	r1, [r7, #20]
 8009058:	4401      	add	r1, r0
 800905a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800905e:	4313      	orrs	r3, r2
 8009060:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d10d      	bne.n	8009084 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d009      	beq.n	8009084 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	68d9      	ldr	r1, [r3, #12]
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	4413      	add	r3, r2
 800907c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009080:	460a      	mov	r2, r1
 8009082:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	4413      	add	r3, r2
 800908c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	0151      	lsls	r1, r2, #5
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	440a      	add	r2, r1
 800909a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800909e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b089      	sub	sp, #36	; 0x24
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	4611      	mov	r1, r2
 80090be:	461a      	mov	r2, r3
 80090c0:	460b      	mov	r3, r1
 80090c2:	71fb      	strb	r3, [r7, #7]
 80090c4:	4613      	mov	r3, r2
 80090c6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80090d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d11a      	bne.n	800910e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80090d8:	88bb      	ldrh	r3, [r7, #4]
 80090da:	3303      	adds	r3, #3
 80090dc:	089b      	lsrs	r3, r3, #2
 80090de:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80090e0:	2300      	movs	r3, #0
 80090e2:	61bb      	str	r3, [r7, #24]
 80090e4:	e00f      	b.n	8009106 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	031a      	lsls	r2, r3, #12
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f2:	461a      	mov	r2, r3
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	3304      	adds	r3, #4
 80090fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	3301      	adds	r3, #1
 8009104:	61bb      	str	r3, [r7, #24]
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	429a      	cmp	r2, r3
 800910c:	d3eb      	bcc.n	80090e6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3724      	adds	r7, #36	; 0x24
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800911c:	b480      	push	{r7}
 800911e:	b089      	sub	sp, #36	; 0x24
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	4613      	mov	r3, r2
 8009128:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009132:	88fb      	ldrh	r3, [r7, #6]
 8009134:	3303      	adds	r3, #3
 8009136:	089b      	lsrs	r3, r3, #2
 8009138:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800913a:	2300      	movs	r3, #0
 800913c:	61bb      	str	r3, [r7, #24]
 800913e:	e00b      	b.n	8009158 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	601a      	str	r2, [r3, #0]
    pDest++;
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	3304      	adds	r3, #4
 8009150:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	3301      	adds	r3, #1
 8009156:	61bb      	str	r3, [r7, #24]
 8009158:	69ba      	ldr	r2, [r7, #24]
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	429a      	cmp	r2, r3
 800915e:	d3ef      	bcc.n	8009140 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009160:	69fb      	ldr	r3, [r7, #28]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3724      	adds	r7, #36	; 0x24
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800916e:	b480      	push	{r7}
 8009170:	b085      	sub	sp, #20
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	785b      	ldrb	r3, [r3, #1]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d12c      	bne.n	80091e4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	015a      	lsls	r2, r3, #5
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	4413      	add	r3, r2
 8009192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	db12      	blt.n	80091c2 <USB_EPSetStall+0x54>
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00f      	beq.n	80091c2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	015a      	lsls	r2, r3, #5
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	4413      	add	r3, r2
 80091aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	0151      	lsls	r1, r2, #5
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	440a      	add	r2, r1
 80091b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091c0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	015a      	lsls	r2, r3, #5
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	0151      	lsls	r1, r2, #5
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	440a      	add	r2, r1
 80091d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80091e0:	6013      	str	r3, [r2, #0]
 80091e2:	e02b      	b.n	800923c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	015a      	lsls	r2, r3, #5
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4413      	add	r3, r2
 80091ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	db12      	blt.n	800921c <USB_EPSetStall+0xae>
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00f      	beq.n	800921c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	0151      	lsls	r1, r2, #5
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	440a      	add	r2, r1
 8009212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009216:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800921a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	0151      	lsls	r1, r2, #5
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	440a      	add	r2, r1
 8009232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009236:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800923a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800924a:	b480      	push	{r7}
 800924c:	b085      	sub	sp, #20
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	785b      	ldrb	r3, [r3, #1]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d128      	bne.n	80092b8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	0151      	lsls	r1, r2, #5
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	440a      	add	r2, r1
 800927c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009280:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009284:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	78db      	ldrb	r3, [r3, #3]
 800928a:	2b03      	cmp	r3, #3
 800928c:	d003      	beq.n	8009296 <USB_EPClearStall+0x4c>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	78db      	ldrb	r3, [r3, #3]
 8009292:	2b02      	cmp	r3, #2
 8009294:	d138      	bne.n	8009308 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	0151      	lsls	r1, r2, #5
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	440a      	add	r2, r1
 80092ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	e027      	b.n	8009308 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	0151      	lsls	r1, r2, #5
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	440a      	add	r2, r1
 80092ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	78db      	ldrb	r3, [r3, #3]
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d003      	beq.n	80092e8 <USB_EPClearStall+0x9e>
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	78db      	ldrb	r3, [r3, #3]
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d10f      	bne.n	8009308 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	0151      	lsls	r1, r2, #5
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	440a      	add	r2, r1
 80092fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009306:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009316:	b480      	push	{r7}
 8009318:	b085      	sub	sp, #20
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	460b      	mov	r3, r1
 8009320:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009334:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009338:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	78fb      	ldrb	r3, [r7, #3]
 8009344:	011b      	lsls	r3, r3, #4
 8009346:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800934a:	68f9      	ldr	r1, [r7, #12]
 800934c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009350:	4313      	orrs	r3, r2
 8009352:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800937c:	f023 0302 	bic.w	r3, r3, #2
 8009380:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009382:	2003      	movs	r0, #3
 8009384:	f7f8 ffda 	bl	800233c <HAL_Delay>

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b084      	sub	sp, #16
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093ac:	f043 0302 	orr.w	r3, r3, #2
 80093b0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80093b2:	2003      	movs	r0, #3
 80093b4:	f7f8 ffc2 	bl	800233c <HAL_Delay>

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b085      	sub	sp, #20
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4013      	ands	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80093da:	68fb      	ldr	r3, [r7, #12]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009404:	69db      	ldr	r3, [r3, #28]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	4013      	ands	r3, r2
 800940a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	0c1b      	lsrs	r3, r3, #16
}
 8009410:	4618      	mov	r0, r3
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	4013      	ands	r3, r2
 800943e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	b29b      	uxth	r3, r3
}
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	460b      	mov	r3, r1
 800945a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009460:	78fb      	ldrb	r3, [r7, #3]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	4013      	ands	r3, r2
 800947c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800947e:	68bb      	ldr	r3, [r7, #8]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800948c:	b480      	push	{r7}
 800948e:	b087      	sub	sp, #28
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	f003 030f 	and.w	r3, r3, #15
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	fa22 f303 	lsr.w	r3, r2, r3
 80094bc:	01db      	lsls	r3, r3, #7
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80094c6:	78fb      	ldrb	r3, [r7, #3]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4013      	ands	r3, r2
 80094d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094da:	68bb      	ldr	r3, [r7, #8]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	371c      	adds	r7, #28
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	f003 0301 	and.w	r3, r3, #1
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009522:	f023 0307 	bic.w	r3, r3, #7
 8009526:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800953a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
	...

0800954c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800954c:	b480      	push	{r7}
 800954e:	b087      	sub	sp, #28
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	460b      	mov	r3, r1
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	333c      	adds	r3, #60	; 0x3c
 8009562:	3304      	adds	r3, #4
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	4a26      	ldr	r2, [pc, #152]	; (8009604 <USB_EP0_OutStart+0xb8>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d90a      	bls.n	8009586 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800957c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009580:	d101      	bne.n	8009586 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	e037      	b.n	80095f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958c:	461a      	mov	r2, r3
 800958e:	2300      	movs	r3, #0
 8009590:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095b4:	f043 0318 	orr.w	r3, r3, #24
 80095b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80095cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80095ce:	7afb      	ldrb	r3, [r7, #11]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d10f      	bne.n	80095f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095da:	461a      	mov	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80095f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	4f54300a 	.word	0x4f54300a

08009608 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009610:	2300      	movs	r3, #0
 8009612:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	3301      	adds	r3, #1
 8009618:	60fb      	str	r3, [r7, #12]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	4a13      	ldr	r2, [pc, #76]	; (800966c <USB_CoreReset+0x64>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d901      	bls.n	8009626 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e01b      	b.n	800965e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	daf2      	bge.n	8009614 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800962e:	2300      	movs	r3, #0
 8009630:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	f043 0201 	orr.w	r2, r3, #1
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3301      	adds	r3, #1
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	4a09      	ldr	r2, [pc, #36]	; (800966c <USB_CoreReset+0x64>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d901      	bls.n	8009650 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800964c:	2303      	movs	r3, #3
 800964e:	e006      	b.n	800965e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	f003 0301 	and.w	r3, r3, #1
 8009658:	2b01      	cmp	r3, #1
 800965a:	d0f0      	beq.n	800963e <USB_CoreReset+0x36>

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	00030d40 	.word	0x00030d40

08009670 <USBD_AUDIO_Init>:
* @retval status
*/

static uint8_t  USBD_AUDIO_Init (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	70fb      	strb	r3, [r7, #3]
  if(haudioInstance.state!=STATE_USB_WAITING_FOR_INIT)
 800967c:	4b25      	ldr	r3, [pc, #148]	; (8009714 <USBD_AUDIO_Init+0xa4>)
 800967e:	7d1b      	ldrb	r3, [r3, #20]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <USBD_AUDIO_Init+0x18>
  {
    return USBD_FAIL; 
 8009684:	2303      	movs	r3, #3
 8009686:	e041      	b.n	800970c <USBD_AUDIO_Init+0x9c>
  }
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  pdev->pClassData = &haudioInstance;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a22      	ldr	r2, [pc, #136]	; (8009714 <USBD_AUDIO_Init+0xa4>)
 800968c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009696:	60fb      	str	r3, [r7, #12]
  uint16_t packet_dim = haudio->paketDimension;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8a5b      	ldrh	r3, [r3, #18]
 800969c:	817b      	strh	r3, [r7, #10]
  uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * haudio->dataAmount / haudio->paketDimension;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	8a1b      	ldrh	r3, [r3, #16]
 80096a2:	461a      	mov	r2, r3
 80096a4:	4613      	mov	r3, r2
 80096a6:	005b      	lsls	r3, r3, #1
 80096a8:	4413      	add	r3, r2
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	8a52      	ldrh	r2, [r2, #18]
 80096ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80096b2:	813b      	strh	r3, [r7, #8]
  haudio->wr_ptr=wr_rd_offset * packet_dim;
 80096b4:	893a      	ldrh	r2, [r7, #8]
 80096b6:	897b      	ldrh	r3, [r7, #10]
 80096b8:	fb12 f303 	smulbb	r3, r2, r3
 80096bc:	b29a      	uxth	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	831a      	strh	r2, [r3, #24]
  haudio->rd_ptr = 0;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	82da      	strh	r2, [r3, #22]
  haudio->timeout = 0;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	819a      	strh	r2, [r3, #12]
  
  ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(haudio->frequency,0,haudio->channels);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	6890      	ldr	r0, [r2, #8]
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	7912      	ldrb	r2, [r2, #4]
 80096de:	2100      	movs	r1, #0
 80096e0:	4798      	blx	r3
  
  USBD_LL_OpenEP(pdev,
 80096e2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80096e6:	2201      	movs	r2, #1
 80096e8:	2181      	movs	r1, #129	; 0x81
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f003 f925 	bl	800c93a <USBD_LL_OpenEP>
                 AUDIO_IN_EP,
                 USBD_EP_TYPE_ISOC,
                 AUDIO_IN_PACKET);
  
  USBD_LL_FlushEP(pdev, AUDIO_IN_EP);
 80096f0:	2181      	movs	r1, #129	; 0x81
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f003 f94e 	bl	800c994 <USBD_LL_FlushEP>
  
  
  USBD_LL_Transmit(pdev, AUDIO_IN_EP,
 80096f8:	897b      	ldrh	r3, [r7, #10]
 80096fa:	4a07      	ldr	r2, [pc, #28]	; (8009718 <USBD_AUDIO_Init+0xa8>)
 80096fc:	2181      	movs	r1, #129	; 0x81
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f003 f9c0 	bl	800ca84 <USBD_LL_Transmit>
                   IsocInBuffDummy,                        
                   packet_dim);      
  
  haudio->state=STATE_USB_IDLE;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2201      	movs	r2, #1
 8009708:	751a      	strb	r2, [r3, #20]
  return USBD_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	20001af8 	.word	0x20001af8
 8009718:	20001974 	.word	0x20001974

0800971c <USBD_AUDIO_DeInit>:
* @param  cfgidx: Configuration index
* @retval status
*/
static uint8_t  USBD_AUDIO_DeInit (USBD_HandleTypeDef *pdev, 
                                   uint8_t cfgidx)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	460b      	mov	r3, r1
 8009726:	70fb      	strb	r3, [r7, #3]
  /* Close EP IN */
  USBD_LL_CloseEP(pdev,AUDIO_IN_EP);  
 8009728:	2181      	movs	r1, #129	; 0x81
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f003 f91f 	bl	800c96e <USBD_LL_CloseEP>
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009736:	2b00      	cmp	r3, #0
 8009738:	d008      	beq.n	800974c <USBD_AUDIO_DeInit+0x30>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	2000      	movs	r0, #0
 8009744:	4798      	blx	r3
    haudioInstance.state = STATE_USB_WAITING_FOR_INIT; 
 8009746:	4b04      	ldr	r3, [pc, #16]	; (8009758 <USBD_AUDIO_DeInit+0x3c>)
 8009748:	2200      	movs	r2, #0
 800974a:	751a      	strb	r2, [r3, #20]
  }
  return USBD_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20001af8 	.word	0x20001af8

0800975c <USBD_AUDIO_Setup>:
* @param  req: usb requests
* @retval status
*/
static uint8_t  USBD_AUDIO_Setup (USBD_HandleTypeDef *pdev, 
                                  USBD_SetupReqTypedef *req)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint8_t ret = USBD_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	75fb      	strb	r3, [r7, #23]
  haudio = pdev->pClassData;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009770:	613b      	str	r3, [r7, #16]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800977a:	2b00      	cmp	r3, #0
 800977c:	d031      	beq.n	80097e2 <USBD_AUDIO_Setup+0x86>
 800977e:	2b20      	cmp	r3, #32
 8009780:	d166      	bne.n	8009850 <USBD_AUDIO_Setup+0xf4>
  {
    /* AUDIO Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :    
    switch (req->bRequest)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	785b      	ldrb	r3, [r3, #1]
 8009786:	2b82      	cmp	r3, #130	; 0x82
 8009788:	d015      	beq.n	80097b6 <USBD_AUDIO_Setup+0x5a>
 800978a:	2b82      	cmp	r3, #130	; 0x82
 800978c:	dc04      	bgt.n	8009798 <USBD_AUDIO_Setup+0x3c>
 800978e:	2b01      	cmp	r3, #1
 8009790:	d00c      	beq.n	80097ac <USBD_AUDIO_Setup+0x50>
 8009792:	2b81      	cmp	r3, #129	; 0x81
 8009794:	d005      	beq.n	80097a2 <USBD_AUDIO_Setup+0x46>
 8009796:	e01d      	b.n	80097d4 <USBD_AUDIO_Setup+0x78>
 8009798:	2b83      	cmp	r3, #131	; 0x83
 800979a:	d011      	beq.n	80097c0 <USBD_AUDIO_Setup+0x64>
 800979c:	2b84      	cmp	r3, #132	; 0x84
 800979e:	d014      	beq.n	80097ca <USBD_AUDIO_Setup+0x6e>
 80097a0:	e018      	b.n	80097d4 <USBD_AUDIO_Setup+0x78>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f9ed 	bl	8009b84 <AUDIO_REQ_GetCurrent>
      break;
 80097aa:	e019      	b.n	80097e0 <USBD_AUDIO_Setup+0x84>
      
    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);   
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fa10 	bl	8009bd4 <AUDIO_REQ_SetCurrent>
      break;
 80097b4:	e014      	b.n	80097e0 <USBD_AUDIO_Setup+0x84>
      
    case AUDIO_REQ_GET_MIN:
      AUDIO_REQ_GetMinimum(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f9ab 	bl	8009b14 <AUDIO_REQ_GetMinimum>
      break;
 80097be:	e00f      	b.n	80097e0 <USBD_AUDIO_Setup+0x84>
      
    case AUDIO_REQ_GET_MAX:
      AUDIO_REQ_GetMaximum(pdev, req);
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f98a 	bl	8009adc <AUDIO_REQ_GetMaximum>
      break;
 80097c8:	e00a      	b.n	80097e0 <USBD_AUDIO_Setup+0x84>
      
    case AUDIO_REQ_GET_RES:
      AUDIO_REQ_GetResolution(pdev, req);
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f9bd 	bl	8009b4c <AUDIO_REQ_GetResolution>
      break;
 80097d2:	e005      	b.n	80097e0 <USBD_AUDIO_Setup+0x84>
      
    default:
      USBD_CtlError (pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f001 fe44 	bl	800b464 <USBD_CtlError>
      return USBD_FAIL;
 80097dc:	2303      	movs	r3, #3
 80097de:	e038      	b.n	8009852 <USBD_AUDIO_Setup+0xf6>
    }
    break; 
 80097e0:	e036      	b.n	8009850 <USBD_AUDIO_Setup+0xf4>
    
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	2b0a      	cmp	r3, #10
 80097e8:	d018      	beq.n	800981c <USBD_AUDIO_Setup+0xc0>
 80097ea:	2b0b      	cmp	r3, #11
 80097ec:	d01e      	beq.n	800982c <USBD_AUDIO_Setup+0xd0>
 80097ee:	2b06      	cmp	r3, #6
 80097f0:	d12e      	bne.n	8009850 <USBD_AUDIO_Setup+0xf4>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	885b      	ldrh	r3, [r3, #2]
 80097f6:	0a1b      	lsrs	r3, r3, #8
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	2b21      	cmp	r3, #33	; 0x21
 80097fc:	d127      	bne.n	800984e <USBD_AUDIO_Setup+0xf2>
      {
        
        pbuf = USBD_AUDIO_CfgDesc + 18;
 80097fe:	4b17      	ldr	r3, [pc, #92]	; (800985c <USBD_AUDIO_Setup+0x100>)
 8009800:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ , req->wLength);   
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	88db      	ldrh	r3, [r3, #6]
 8009806:	2b09      	cmp	r3, #9
 8009808:	bf28      	it	cs
 800980a:	2309      	movcs	r3, #9
 800980c:	817b      	strh	r3, [r7, #10]
        
        USBD_CtlSendData (pdev, 
 800980e:	897b      	ldrh	r3, [r7, #10]
 8009810:	461a      	mov	r2, r3
 8009812:	68f9      	ldr	r1, [r7, #12]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f001 fe96 	bl	800b546 <USBD_CtlSendData>
                          pbuf,
                          len);
      }
      break;
 800981a:	e018      	b.n	800984e <USBD_AUDIO_Setup+0xf2>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)haudio->alt_setting,
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	681b      	ldr	r3, [r3, #0]
      USBD_CtlSendData (pdev,
 8009820:	2201      	movs	r2, #1
 8009822:	4619      	mov	r1, r3
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 fe8e 	bl	800b546 <USBD_CtlSendData>
                        1);
      break;
 800982a:	e011      	b.n	8009850 <USBD_AUDIO_Setup+0xf4>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_MAX_NUM_INTERFACES)
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	885b      	ldrh	r3, [r3, #2]
 8009830:	b2db      	uxtb	r3, r3
 8009832:	2b01      	cmp	r3, #1
 8009834:	d806      	bhi.n	8009844 <USBD_AUDIO_Setup+0xe8>
      {
        haudio->alt_setting = (uint8_t)(req->wValue);
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	885b      	ldrh	r3, [r3, #2]
 800983a:	b2db      	uxtb	r3, r3
 800983c:	461a      	mov	r2, r3
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;
 8009842:	e005      	b.n	8009850 <USBD_AUDIO_Setup+0xf4>
        USBD_CtlError (pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f001 fe0c 	bl	800b464 <USBD_CtlError>
      break;
 800984c:	e000      	b.n	8009850 <USBD_AUDIO_Setup+0xf4>
      break;
 800984e:	bf00      	nop
    }
  }
  return ret;
 8009850:	7dfb      	ldrb	r3, [r7, #23]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	20001b6e 	.word	0x20001b6e

08009860 <USBD_AUDIO_GetCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_CfgDesc);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2276      	movs	r2, #118	; 0x76
 800986c:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_CfgDesc;
 800986e:	4b03      	ldr	r3, [pc, #12]	; (800987c <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8009870:	4618      	mov	r0, r3
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr
 800987c:	20001b5c 	.word	0x20001b5c

08009880 <USBD_AUDIO_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_AUDIO_DataIn (USBD_HandleTypeDef *pdev,
                                  uint8_t epnum)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b088      	sub	sp, #32
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	70fb      	strb	r3, [r7, #3]
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009892:	617b      	str	r3, [r7, #20]
  uint32_t length_usb_pck;
  uint16_t app;
  uint16_t IsocInWr_app = haudio->wr_ptr;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	8b1b      	ldrh	r3, [r3, #24]
 8009898:	827b      	strh	r3, [r7, #18]
  uint16_t true_dim = haudio->buffer_length;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	89db      	ldrh	r3, [r3, #14]
 800989e:	823b      	strh	r3, [r7, #16]
  uint16_t packet_dim = haudio->paketDimension;
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	8a5b      	ldrh	r3, [r3, #18]
 80098a4:	81fb      	strh	r3, [r7, #14]
  uint16_t channels = haudio->channels;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	791b      	ldrb	r3, [r3, #4]
 80098aa:	81bb      	strh	r3, [r7, #12]
  length_usb_pck = packet_dim;  
 80098ac:	89fb      	ldrh	r3, [r7, #14]
 80098ae:	61fb      	str	r3, [r7, #28]
  haudio->timeout=0;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	2200      	movs	r2, #0
 80098b4:	819a      	strh	r2, [r3, #12]
  if (epnum == (AUDIO_IN_EP & 0x7F))
 80098b6:	78fb      	ldrb	r3, [r7, #3]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	f040 8085 	bne.w	80099c8 <USBD_AUDIO_DataIn+0x148>
  {    
    if (haudio->state == STATE_USB_IDLE) 
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	7d1b      	ldrb	r3, [r3, #20]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d107      	bne.n	80098d6 <USBD_AUDIO_DataIn+0x56>
    {
      haudio->state=STATE_USB_REQUESTS_STARTED;
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2202      	movs	r2, #2
 80098ca:	751a      	strb	r2, [r3, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Record();      
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	4798      	blx	r3
    }    
    if (haudio->state == STATE_USB_BUFFER_WRITE_STARTED)   
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	7d1b      	ldrb	r3, [r3, #20]
 80098da:	2b03      	cmp	r3, #3
 80098dc:	d16e      	bne.n	80099bc <USBD_AUDIO_DataIn+0x13c>
    {      
      haudio->rd_ptr = haudio->rd_ptr % (true_dim);              
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	8adb      	ldrh	r3, [r3, #22]
 80098e2:	8a3a      	ldrh	r2, [r7, #16]
 80098e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80098e8:	fb02 f201 	mul.w	r2, r2, r1
 80098ec:	1a9b      	subs	r3, r3, r2
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	82da      	strh	r2, [r3, #22]
      if(IsocInWr_app<haudio->rd_ptr){
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	8adb      	ldrh	r3, [r3, #22]
 80098f8:	8a7a      	ldrh	r2, [r7, #18]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d208      	bcs.n	8009910 <USBD_AUDIO_DataIn+0x90>
        app = ((true_dim) - haudio->rd_ptr) +  IsocInWr_app;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	8adb      	ldrh	r3, [r3, #22]
 8009902:	8a3a      	ldrh	r2, [r7, #16]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	b29a      	uxth	r2, r3
 8009908:	8a7b      	ldrh	r3, [r7, #18]
 800990a:	4413      	add	r3, r2
 800990c:	837b      	strh	r3, [r7, #26]
 800990e:	e004      	b.n	800991a <USBD_AUDIO_DataIn+0x9a>
      }else{
        app = IsocInWr_app - haudio->rd_ptr;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	8adb      	ldrh	r3, [r3, #22]
 8009914:	8a7a      	ldrh	r2, [r7, #18]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	837b      	strh	r3, [r7, #26]
      }        
      if(app >= (packet_dim*haudio->upper_treshold)){       
 800991a:	8b7a      	ldrh	r2, [r7, #26]
 800991c:	89fb      	ldrh	r3, [r7, #14]
 800991e:	6979      	ldr	r1, [r7, #20]
 8009920:	7e89      	ldrb	r1, [r1, #26]
 8009922:	fb01 f303 	mul.w	r3, r1, r3
 8009926:	429a      	cmp	r2, r3
 8009928:	db06      	blt.n	8009938 <USBD_AUDIO_DataIn+0xb8>
        length_usb_pck += channels*2;
 800992a:	89bb      	ldrh	r3, [r7, #12]
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	461a      	mov	r2, r3
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	4413      	add	r3, r2
 8009934:	61fb      	str	r3, [r7, #28]
 8009936:	e00d      	b.n	8009954 <USBD_AUDIO_DataIn+0xd4>
      }else if(app <= (packet_dim*haudio->lower_treshold)){
 8009938:	8b7a      	ldrh	r2, [r7, #26]
 800993a:	89fb      	ldrh	r3, [r7, #14]
 800993c:	6979      	ldr	r1, [r7, #20]
 800993e:	7ec9      	ldrb	r1, [r1, #27]
 8009940:	fb01 f303 	mul.w	r3, r1, r3
 8009944:	429a      	cmp	r2, r3
 8009946:	dc05      	bgt.n	8009954 <USBD_AUDIO_DataIn+0xd4>
        length_usb_pck -= channels*2;
 8009948:	89bb      	ldrh	r3, [r7, #12]
 800994a:	005b      	lsls	r3, r3, #1
 800994c:	461a      	mov	r2, r3
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	1a9b      	subs	r3, r3, r2
 8009952:	61fb      	str	r3, [r7, #28]
      }     
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
                        (uint8_t*)(&haudio->buffer[haudio->rd_ptr]),
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	8ad2      	ldrh	r2, [r2, #22]
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 800995c:	441a      	add	r2, r3
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	2181      	movs	r1, #129	; 0x81
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f003 f88e 	bl	800ca84 <USBD_LL_Transmit>
                        length_usb_pck);      
      haudio->rd_ptr += length_usb_pck;      
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	8ada      	ldrh	r2, [r3, #22]
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	b29b      	uxth	r3, r3
 8009970:	4413      	add	r3, r2
 8009972:	b29a      	uxth	r2, r3
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	82da      	strh	r2, [r3, #22]

      if(app < haudio->buffer_length/10)
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	89db      	ldrh	r3, [r3, #14]
 800997c:	4a15      	ldr	r2, [pc, #84]	; (80099d4 <USBD_AUDIO_DataIn+0x154>)
 800997e:	fba2 2303 	umull	r2, r3, r2, r3
 8009982:	08db      	lsrs	r3, r3, #3
 8009984:	b29b      	uxth	r3, r3
 8009986:	8b7a      	ldrh	r2, [r7, #26]
 8009988:	429a      	cmp	r2, r3
 800998a:	d21d      	bcs.n	80099c8 <USBD_AUDIO_DataIn+0x148>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Stop();
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	4798      	blx	r3
        haudio->state = STATE_USB_IDLE; 
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2201      	movs	r2, #1
 800999a:	751a      	strb	r2, [r3, #20]
        haudio->timeout=0;
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	2200      	movs	r2, #0
 80099a0:	819a      	strh	r2, [r3, #12]
        memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	89db      	ldrh	r3, [r3, #14]
 80099aa:	461a      	mov	r2, r3
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	8a1b      	ldrh	r3, [r3, #16]
 80099b0:	4413      	add	r3, r2
 80099b2:	461a      	mov	r2, r3
 80099b4:	2100      	movs	r1, #0
 80099b6:	f005 f8d8 	bl	800eb6a <memset>
 80099ba:	e005      	b.n	80099c8 <USBD_AUDIO_DataIn+0x148>
      }       
    }
    else 
    {      
      USBD_LL_Transmit (pdev,AUDIO_IN_EP,
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	4a06      	ldr	r2, [pc, #24]	; (80099d8 <USBD_AUDIO_DataIn+0x158>)
 80099c0:	2181      	movs	r1, #129	; 0x81
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f003 f85e 	bl	800ca84 <USBD_LL_Transmit>
                        IsocInBuffDummy,
                        length_usb_pck);      
    }    
  }
  return USBD_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3720      	adds	r7, #32
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	cccccccd 	.word	0xcccccccd
 80099d8:	20001974 	.word	0x20001974

080099dc <USBD_AUDIO_EP0_RxReady>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t  USBD_AUDIO_EP0_RxReady (USBD_HandleTypeDef *pdev)
{  
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099ea:	60fb      	str	r3, [r7, #12]
  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	7f1b      	ldrb	r3, [r3, #28]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d11e      	bne.n	8009a32 <USBD_AUDIO_EP0_RxReady+0x56>
  {    
    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d119      	bne.n	8009a32 <USBD_AUDIO_EP0_RxReady+0x56>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->VolumeCtl(VOL_CUR);    
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	4a0d      	ldr	r2, [pc, #52]	; (8009a3c <USBD_AUDIO_EP0_RxReady+0x60>)
 8009a08:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4798      	blx	r3
      
      haudio->control.cmd = 0;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	771a      	strb	r2, [r3, #28]
      haudio->control.len = 0;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      haudio->control.unit = 0;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
      haudio->control.data[0]=0;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	775a      	strb	r2, [r3, #29]
      haudio->control.data[0]=0;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	775a      	strb	r2, [r3, #29]
    }
  }    
  return USBD_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	20001af4 	.word	0x20001af4

08009a40 <USBD_AUDIO_EP0_TxReady>:
*         handle EP0 TRx Ready event
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <USBD_AUDIO_SOF>:
*         handle SOF event
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_AUDIO_SOF (USBD_HandleTypeDef *pdev)
{  
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <USBD_AUDIO_IsoINIncomplete>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{  
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <USBD_AUDIO_IsoOutIncomplete>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{  
 8009a86:	b480      	push	{r7}
 8009a88:	b083      	sub	sp, #12
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	460b      	mov	r3, r1
 8009a90:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <USBD_AUDIO_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t  USBD_AUDIO_DataOut (USBD_HandleTypeDef *pdev, 
                                    uint8_t epnum)
{  
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
	...

08009abc <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	220a      	movs	r2, #10
 8009ac8:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
 8009aca:	4b03      	ldr	r3, [pc, #12]	; (8009ad8 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr
 8009ad8:	200005e4 	.word	0x200005e4

08009adc <AUDIO_REQ_GetMaximum>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetMaximum(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009aec:	60fb      	str	r3, [r7, #12]
  
  (haudio->control.data)[0] = (uint16_t)VOL_MAX & 0xFF;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_MAX & 0xFF00 ) >> 8;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	779a      	strb	r2, [r3, #30]
  
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);  
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 8009b04:	461a      	mov	r2, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f001 fd1d 	bl	800b546 <USBD_CtlSendData>
}
 8009b0c:	bf00      	nop
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <AUDIO_REQ_GetMinimum>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetMinimum(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b24:	60fb      	str	r3, [r7, #12]
  (haudio->control.data)[0] = (uint16_t)VOL_MIN & 0xFF;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	22e0      	movs	r2, #224	; 0xe0
 8009b2a:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_MIN & 0xFF00 ) >> 8;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	22db      	movs	r2, #219	; 0xdb
 8009b30:	779a      	strb	r2, [r3, #30]
  /* Send the current mute state */
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);   
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f001 fd01 	bl	800b546 <USBD_CtlSendData>
}
 8009b44:	bf00      	nop
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <AUDIO_REQ_GetResolution>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetResolution(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b5c:	60fb      	str	r3, [r7, #12]
  (haudio->control.data)[0] = (uint16_t)VOL_RES & 0xFF;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2223      	movs	r2, #35	; 0x23
 8009b62:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_RES & 0xFF00 ) >> 8;  
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	779a      	strb	r2, [r3, #30]
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 8009b74:	461a      	mov	r2, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f001 fce5 	bl	800b546 <USBD_CtlSendData>
}
 8009b7c:	bf00      	nop
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <AUDIO_REQ_GetCurrent>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{  
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b94:	60fb      	str	r3, [r7, #12]
  
  (haudio->control.data)[0] = (uint16_t)VOL_CUR & 0xFF;
 8009b96:	4b0e      	ldr	r3, [pc, #56]	; (8009bd0 <AUDIO_REQ_GetCurrent+0x4c>)
 8009b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_CUR & 0xFF00 ) >> 8;
 8009ba2:	4b0b      	ldr	r3, [pc, #44]	; (8009bd0 <AUDIO_REQ_GetCurrent+0x4c>)
 8009ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	0a1b      	lsrs	r3, r3, #8
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	779a      	strb	r2, [r3, #30]
  
  USBD_CtlSendData (pdev, 
                    haudio->control.data,
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f103 011d 	add.w	r1, r3, #29
                    req->wLength);  
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData (pdev, 
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f001 fcc0 	bl	800b546 <USBD_CtlSendData>
}
 8009bc6:	bf00      	nop
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	20001af4 	.word	0x20001af4

08009bd4 <AUDIO_REQ_SetCurrent>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{ 
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = pdev->pClassData;  
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009be4:	60fb      	str	r3, [r7, #12]
  if (req->wLength)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	88db      	ldrh	r3, [r3, #6]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d017      	beq.n	8009c1e <AUDIO_REQ_SetCurrent+0x4a>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx (pdev,
                       (uint8_t *)&VOL_CUR,
                       req->wLength);
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	88db      	ldrh	r3, [r3, #6]
    USBD_CtlPrepareRx (pdev,
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	490c      	ldr	r1, [pc, #48]	; (8009c28 <AUDIO_REQ_SetCurrent+0x54>)
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f001 fcd1 	bl	800b59e <USBD_CtlPrepareRx>
    
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	771a      	strb	r2, [r3, #28]
    haudio->control.len = req->wLength;          /* Set the request data length */
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	88db      	ldrh	r3, [r3, #6]
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	889b      	ldrh	r3, [r3, #4]
 8009c12:	0a1b      	lsrs	r3, r3, #8
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  }
}
 8009c1e:	bf00      	nop
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20001af4 	.word	0x20001af4

08009c2c <USBD_AUDIO_Data_Transfer>:
*       you can pass 16 PCM samples if the function is called each millisecond, 
*       32 samples if called every 2 milliseconds and so on. 
* @retval status
*/
uint8_t  USBD_AUDIO_Data_Transfer(USBD_HandleTypeDef *pdev, int16_t * audioData, uint16_t PCMSamples)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b088      	sub	sp, #32
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	4613      	mov	r3, r2
 8009c38:	80fb      	strh	r3, [r7, #6]
  
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c40:	61fb      	str	r3, [r7, #28]
  
  if(haudioInstance.state==STATE_USB_WAITING_FOR_INIT){    
 8009c42:	4b60      	ldr	r3, [pc, #384]	; (8009dc4 <USBD_AUDIO_Data_Transfer+0x198>)
 8009c44:	7d1b      	ldrb	r3, [r3, #20]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <USBD_AUDIO_Data_Transfer+0x22>
    return USBD_BUSY;    
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e0b6      	b.n	8009dbc <USBD_AUDIO_Data_Transfer+0x190>
  }  
  uint16_t dataAmount = PCMSamples * 2; /*Bytes*/
 8009c4e:	88fb      	ldrh	r3, [r7, #6]
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	837b      	strh	r3, [r7, #26]
  uint16_t true_dim = haudio->buffer_length;
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	89db      	ldrh	r3, [r3, #14]
 8009c58:	833b      	strh	r3, [r7, #24]
  uint16_t current_data_Amount = haudio->dataAmount;
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	8a1b      	ldrh	r3, [r3, #16]
 8009c5e:	82fb      	strh	r3, [r7, #22]
  uint16_t packet_dim = haudio->paketDimension;
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	8a5b      	ldrh	r3, [r3, #18]
 8009c64:	82bb      	strh	r3, [r7, #20]
  
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	7d1b      	ldrb	r3, [r3, #20]
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d003      	beq.n	8009c76 <USBD_AUDIO_Data_Transfer+0x4a>
 8009c6e:	8afa      	ldrh	r2, [r7, #22]
 8009c70:	8b7b      	ldrh	r3, [r7, #26]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d05c      	beq.n	8009d30 <USBD_AUDIO_Data_Transfer+0x104>
    
    /*USB parameters definition, based on the amount of data passed*/
    haudio->dataAmount=dataAmount;                  
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	8b7a      	ldrh	r2, [r7, #26]
 8009c7a:	821a      	strh	r2, [r3, #16]
    uint16_t wr_rd_offset = (AUDIO_IN_PACKET_NUM/2) * dataAmount / packet_dim; 
 8009c7c:	8b7a      	ldrh	r2, [r7, #26]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	005b      	lsls	r3, r3, #1
 8009c82:	441a      	add	r2, r3
 8009c84:	8abb      	ldrh	r3, [r7, #20]
 8009c86:	fb92 f3f3 	sdiv	r3, r2, r3
 8009c8a:	827b      	strh	r3, [r7, #18]
    haudio->wr_ptr=wr_rd_offset * packet_dim;
 8009c8c:	8a7a      	ldrh	r2, [r7, #18]
 8009c8e:	8abb      	ldrh	r3, [r7, #20]
 8009c90:	fb12 f303 	smulbb	r3, r2, r3
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	831a      	strh	r2, [r3, #24]
    haudio->rd_ptr = 0;
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	82da      	strh	r2, [r3, #22]
    haudio->upper_treshold = wr_rd_offset + 1;
 8009ca0:	8a7b      	ldrh	r3, [r7, #18]
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	769a      	strb	r2, [r3, #26]
    haudio->lower_treshold = wr_rd_offset - 1;
 8009cac:	8a7b      	ldrh	r3, [r7, #18]
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	b2da      	uxtb	r2, r3
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	76da      	strb	r2, [r3, #27]
    haudio->buffer_length = (packet_dim * (dataAmount / packet_dim) * AUDIO_IN_PACKET_NUM);
 8009cb8:	8b7a      	ldrh	r2, [r7, #26]
 8009cba:	8abb      	ldrh	r3, [r7, #20]
 8009cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	8aba      	ldrh	r2, [r7, #20]
 8009cc4:	fb12 f303 	smulbb	r3, r2, r3
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	461a      	mov	r2, r3
 8009ccc:	0052      	lsls	r2, r2, #1
 8009cce:	4413      	add	r3, r2
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	81da      	strh	r2, [r3, #14]
    
    /*Memory allocation for data buffer, depending (also) on data amount passed to the transfer function*/
    if(haudio->buffer != NULL)
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d004      	beq.n	8009cea <USBD_AUDIO_Data_Transfer+0xbe>
    {
      USBD_free(haudio->buffer);      
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f004 ff2d 	bl	800eb44 <free>
    }
    haudio->buffer = USBD_malloc(haudio->buffer_length + haudio->dataAmount);
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	89db      	ldrh	r3, [r3, #14]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	8a1b      	ldrh	r3, [r3, #16]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f004 ff1c 	bl	800eb34 <malloc>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	461a      	mov	r2, r3
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	661a      	str	r2, [r3, #96]	; 0x60
    if(haudio->buffer == NULL)
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d101      	bne.n	8009d10 <USBD_AUDIO_Data_Transfer+0xe4>
    {
      return USBD_FAIL;       
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e055      	b.n	8009dbc <USBD_AUDIO_Data_Transfer+0x190>
    }
    memset(haudio->buffer,0,(haudio->buffer_length + haudio->dataAmount));
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	89db      	ldrh	r3, [r3, #14]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	8a1b      	ldrh	r3, [r3, #16]
 8009d1e:	4413      	add	r3, r2
 8009d20:	461a      	mov	r2, r3
 8009d22:	2100      	movs	r1, #0
 8009d24:	f004 ff21 	bl	800eb6a <memset>
    haudio->state=STATE_USB_BUFFER_WRITE_STARTED;
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	2203      	movs	r2, #3
 8009d2c:	751a      	strb	r2, [r3, #20]
  if(haudio->state==STATE_USB_REQUESTS_STARTED  || current_data_Amount!=dataAmount){   
 8009d2e:	e044      	b.n	8009dba <USBD_AUDIO_Data_Transfer+0x18e>
    
    
  }else if(haudio->state==STATE_USB_BUFFER_WRITE_STARTED){
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	7d1b      	ldrb	r3, [r3, #20]
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	d140      	bne.n	8009dba <USBD_AUDIO_Data_Transfer+0x18e>
    if(haudio->timeout++==TIMEOUT_VALUE){
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	899b      	ldrh	r3, [r3, #12]
 8009d3c:	b21b      	sxth	r3, r3
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	3201      	adds	r2, #1
 8009d42:	b292      	uxth	r2, r2
 8009d44:	b211      	sxth	r1, r2
 8009d46:	69fa      	ldr	r2, [r7, #28]
 8009d48:	8191      	strh	r1, [r2, #12]
 8009d4a:	2bc8      	cmp	r3, #200	; 0xc8
 8009d4c:	d10a      	bne.n	8009d64 <USBD_AUDIO_Data_Transfer+0x138>
      haudio->state=STATE_USB_IDLE;
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	2201      	movs	r2, #1
 8009d52:	751a      	strb	r2, [r3, #20]
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Stop();   
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	4798      	blx	r3
     haudio->timeout=0;
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	2200      	movs	r2, #0
 8009d62:	819a      	strh	r2, [r3, #12]
    }
    memcpy((uint8_t * )&haudio->buffer[haudio->wr_ptr], (uint8_t *)(audioData), dataAmount);    
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d68:	69fa      	ldr	r2, [r7, #28]
 8009d6a:	8b12      	ldrh	r2, [r2, #24]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	8b7a      	ldrh	r2, [r7, #26]
 8009d70:	68b9      	ldr	r1, [r7, #8]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f004 feee 	bl	800eb54 <memcpy>
    haudio->wr_ptr += dataAmount;
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	8b1a      	ldrh	r2, [r3, #24]
 8009d7c:	8b7b      	ldrh	r3, [r7, #26]
 8009d7e:	4413      	add	r3, r2
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	831a      	strh	r2, [r3, #24]
    haudio->wr_ptr = haudio->wr_ptr % (true_dim);    
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	8b1b      	ldrh	r3, [r3, #24]
 8009d8a:	8b3a      	ldrh	r2, [r7, #24]
 8009d8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d90:	fb02 f201 	mul.w	r2, r2, r1
 8009d94:	1a9b      	subs	r3, r3, r2
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	831a      	strh	r2, [r3, #24]
    if((haudio->wr_ptr-dataAmount) == 0){
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	8b1b      	ldrh	r3, [r3, #24]
 8009da0:	8b7a      	ldrh	r2, [r7, #26]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d109      	bne.n	8009dba <USBD_AUDIO_Data_Transfer+0x18e>
      memcpy((uint8_t *)(((uint8_t *)haudio->buffer)+true_dim),(uint8_t *)haudio->buffer, dataAmount);
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009daa:	8b3b      	ldrh	r3, [r7, #24]
 8009dac:	18d0      	adds	r0, r2, r3
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009db2:	8b7a      	ldrh	r2, [r7, #26]
 8009db4:	4619      	mov	r1, r3
 8009db6:	f004 fecd 	bl	800eb54 <memcpy>
    }
  }
  return USBD_OK;  
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3720      	adds	r7, #32
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20001af8 	.word	0x20001af8

08009dc8 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                        USBD_AUDIO_ItfTypeDef *fops)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d003      	beq.n	8009de0 <USBD_AUDIO_RegisterInterface+0x18>
  {
    pdev->pUserData= fops;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  }
  return 0;}
 8009de0:	2300      	movs	r3, #0
 8009de2:	4618      	mov	r0, r3
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
	...

08009df0 <USBD_AUDIO_Init_Microphone_Descriptor>:
* @param  samplingFrequency: sampling frequency
* @param  Channels: number of channels
* @retval status
*/
void USBD_AUDIO_Init_Microphone_Descriptor(USBD_HandleTypeDef   *pdev, uint32_t samplingFrequency, uint8_t Channels)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b087      	sub	sp, #28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	71fb      	strb	r3, [r7, #7]
  uint16_t index;
  uint8_t AUDIO_CONTROLS;   
  USBD_AUDIO_CfgDesc[0] = 0x09;                                                /* bLength */
 8009dfe:	4b5c      	ldr	r3, [pc, #368]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e00:	2209      	movs	r2, #9
 8009e02:	701a      	strb	r2, [r3, #0]
  USBD_AUDIO_CfgDesc[1] = 0x02;                                                /* bDescriptorType */
 8009e04:	4b5a      	ldr	r3, [pc, #360]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e06:	2202      	movs	r2, #2
 8009e08:	705a      	strb	r2, [r3, #1]
  USBD_AUDIO_CfgDesc[2] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)&0xff);       /* wTotalLength */
 8009e0a:	79fb      	ldrb	r3, [r7, #7]
 8009e0c:	336c      	adds	r3, #108	; 0x6c
 8009e0e:	b2da      	uxtb	r2, r3
 8009e10:	4b57      	ldr	r3, [pc, #348]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e12:	709a      	strb	r2, [r3, #2]
  USBD_AUDIO_CfgDesc[3] = ((USB_AUDIO_CONFIG_DESC_SIZ+Channels-1)>>8);
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	336c      	adds	r3, #108	; 0x6c
 8009e18:	121b      	asrs	r3, r3, #8
 8009e1a:	b2da      	uxtb	r2, r3
 8009e1c:	4b54      	ldr	r3, [pc, #336]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e1e:	70da      	strb	r2, [r3, #3]
  USBD_AUDIO_CfgDesc[4] = 0x02;                                                /* bNumInterfaces */
 8009e20:	4b53      	ldr	r3, [pc, #332]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e22:	2202      	movs	r2, #2
 8009e24:	711a      	strb	r2, [r3, #4]
  USBD_AUDIO_CfgDesc[5] = 0x01;                                                /* bConfigurationValue */
 8009e26:	4b52      	ldr	r3, [pc, #328]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e28:	2201      	movs	r2, #1
 8009e2a:	715a      	strb	r2, [r3, #5]
  USBD_AUDIO_CfgDesc[6] = 0x00;                                                /* iConfiguration */
 8009e2c:	4b50      	ldr	r3, [pc, #320]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	719a      	strb	r2, [r3, #6]
  USBD_AUDIO_CfgDesc[7] = 0x80;                                                /* bmAttributes  BUS Powered*/
 8009e32:	4b4f      	ldr	r3, [pc, #316]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e34:	2280      	movs	r2, #128	; 0x80
 8009e36:	71da      	strb	r2, [r3, #7]
  USBD_AUDIO_CfgDesc[8] = 0x32;                                                /* bMaxPower = 100 mA*/   
 8009e38:	4b4d      	ldr	r3, [pc, #308]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e3a:	2232      	movs	r2, #50	; 0x32
 8009e3c:	721a      	strb	r2, [r3, #8]
  /* USB Microphone Standard interface descriptor */
  USBD_AUDIO_CfgDesc[9] = 9;                                                   /* bLength */
 8009e3e:	4b4c      	ldr	r3, [pc, #304]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e40:	2209      	movs	r2, #9
 8009e42:	725a      	strb	r2, [r3, #9]
  USBD_AUDIO_CfgDesc[10] = USB_INTERFACE_DESCRIPTOR_TYPE;                      /* bDescriptorType */
 8009e44:	4b4a      	ldr	r3, [pc, #296]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e46:	2204      	movs	r2, #4
 8009e48:	729a      	strb	r2, [r3, #10]
  USBD_AUDIO_CfgDesc[11] = 0x00;                                               /* bInterfaceNumber */
 8009e4a:	4b49      	ldr	r3, [pc, #292]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	72da      	strb	r2, [r3, #11]
  USBD_AUDIO_CfgDesc[12] = 0x00;                                               /* bAlternateSetting */
 8009e50:	4b47      	ldr	r3, [pc, #284]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e52:	2200      	movs	r2, #0
 8009e54:	731a      	strb	r2, [r3, #12]
  USBD_AUDIO_CfgDesc[13] = 0x00;                                               /* bNumEndpoints */
 8009e56:	4b46      	ldr	r3, [pc, #280]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	735a      	strb	r2, [r3, #13]
  USBD_AUDIO_CfgDesc[14] = USB_DEVICE_CLASS_AUDIO;                             /* bInterfaceClass */
 8009e5c:	4b44      	ldr	r3, [pc, #272]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e5e:	2201      	movs	r2, #1
 8009e60:	739a      	strb	r2, [r3, #14]
  USBD_AUDIO_CfgDesc[15] = AUDIO_SUBCLASS_AUDIOCONTROL;                        /* bInterfaceSubClass */
 8009e62:	4b43      	ldr	r3, [pc, #268]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e64:	2201      	movs	r2, #1
 8009e66:	73da      	strb	r2, [r3, #15]
  USBD_AUDIO_CfgDesc[16] = AUDIO_PROTOCOL_UNDEFINED;                           /* bInterfaceProtocol */
 8009e68:	4b41      	ldr	r3, [pc, #260]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	741a      	strb	r2, [r3, #16]
  USBD_AUDIO_CfgDesc[17] = 0x00;                                               /* iInterface */   
 8009e6e:	4b40      	ldr	r3, [pc, #256]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	745a      	strb	r2, [r3, #17]
  /* USB Microphone Class-specific AC Interface Descriptor */
  USBD_AUDIO_CfgDesc[18] = 9;                                                  /* bLength */
 8009e74:	4b3e      	ldr	r3, [pc, #248]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e76:	2209      	movs	r2, #9
 8009e78:	749a      	strb	r2, [r3, #18]
  USBD_AUDIO_CfgDesc[19] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 8009e7a:	4b3d      	ldr	r3, [pc, #244]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e7c:	2224      	movs	r2, #36	; 0x24
 8009e7e:	74da      	strb	r2, [r3, #19]
  USBD_AUDIO_CfgDesc[20] = AUDIO_CONTROL_HEADER;                               /* bDescriptorSubtype */
 8009e80:	4b3b      	ldr	r3, [pc, #236]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e82:	2201      	movs	r2, #1
 8009e84:	751a      	strb	r2, [r3, #20]
  USBD_AUDIO_CfgDesc[21] = 0x00;       /* 1.00 */                              /* bcdADC */
 8009e86:	4b3a      	ldr	r3, [pc, #232]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	755a      	strb	r2, [r3, #21]
  USBD_AUDIO_CfgDesc[22] = 0x01;
 8009e8c:	4b38      	ldr	r3, [pc, #224]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e8e:	2201      	movs	r2, #1
 8009e90:	759a      	strb	r2, [r3, #22]
  USBD_AUDIO_CfgDesc[23] = 0x25+Channels;                                      /* wTotalLength = 37+AUDIO_CHANNELS*/
 8009e92:	79fb      	ldrb	r3, [r7, #7]
 8009e94:	3325      	adds	r3, #37	; 0x25
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	4b35      	ldr	r3, [pc, #212]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e9a:	75da      	strb	r2, [r3, #23]
  USBD_AUDIO_CfgDesc[24] = 0x00;
 8009e9c:	4b34      	ldr	r3, [pc, #208]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	761a      	strb	r2, [r3, #24]
  USBD_AUDIO_CfgDesc[25] = 0x01;                                               /* bInCollection */
 8009ea2:	4b33      	ldr	r3, [pc, #204]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	765a      	strb	r2, [r3, #25]
  USBD_AUDIO_CfgDesc[26] = 0x01;                                               /* baInterfaceNr */   
 8009ea8:	4b31      	ldr	r3, [pc, #196]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009eaa:	2201      	movs	r2, #1
 8009eac:	769a      	strb	r2, [r3, #26]
  /* USB Microphone Input Terminal Descriptor */
  USBD_AUDIO_CfgDesc[27] = AUDIO_INPUT_TERMINAL_DESC_SIZE;                     /* bLength */
 8009eae:	4b30      	ldr	r3, [pc, #192]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009eb0:	220c      	movs	r2, #12
 8009eb2:	76da      	strb	r2, [r3, #27]
  USBD_AUDIO_CfgDesc[28] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 8009eb4:	4b2e      	ldr	r3, [pc, #184]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009eb6:	2224      	movs	r2, #36	; 0x24
 8009eb8:	771a      	strb	r2, [r3, #28]
  USBD_AUDIO_CfgDesc[29] = AUDIO_CONTROL_INPUT_TERMINAL;                       /* bDescriptorSubtype */
 8009eba:	4b2d      	ldr	r3, [pc, #180]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	775a      	strb	r2, [r3, #29]
  USBD_AUDIO_CfgDesc[30] = 0x01;                                               /* bTerminalID */
 8009ec0:	4b2b      	ldr	r3, [pc, #172]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	779a      	strb	r2, [r3, #30]
  USBD_AUDIO_CfgDesc[31] = 0x01;                                               /* wTerminalType AUDIO_TERMINAL_USB_MICROPHONE   0x0201 */
 8009ec6:	4b2a      	ldr	r3, [pc, #168]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009ec8:	2201      	movs	r2, #1
 8009eca:	77da      	strb	r2, [r3, #31]
  USBD_AUDIO_CfgDesc[32] = 0x02;
 8009ecc:	4b28      	ldr	r3, [pc, #160]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009ece:	2202      	movs	r2, #2
 8009ed0:	f883 2020 	strb.w	r2, [r3, #32]
  USBD_AUDIO_CfgDesc[33] = 0x00;                                               /* bAssocTerminal */
 8009ed4:	4b26      	ldr	r3, [pc, #152]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  USBD_AUDIO_CfgDesc[34] = Channels;                                           /* bNrChannels */   
 8009edc:	4a24      	ldr	r2, [pc, #144]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009ede:	79fb      	ldrb	r3, [r7, #7]
 8009ee0:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
  if(Channels != 2)
 8009ee4:	79fb      	ldrb	r3, [r7, #7]
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d008      	beq.n	8009efc <USBD_AUDIO_Init_Microphone_Descriptor+0x10c>
  {
    USBD_AUDIO_CfgDesc[35] = 0x00;                                             /* wChannelConfig 0x0000  Mono */
 8009eea:	4b21      	ldr	r3, [pc, #132]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
 8009ef2:	4b1f      	ldr	r3, [pc, #124]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009efa:	e007      	b.n	8009f0c <USBD_AUDIO_Init_Microphone_Descriptor+0x11c>
  }
  else
  {
    USBD_AUDIO_CfgDesc[35] = 0x03;                                             /* wChannelConfig 0x0003  Stereo */
 8009efc:	4b1c      	ldr	r3, [pc, #112]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009efe:	2203      	movs	r2, #3
 8009f00:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    USBD_AUDIO_CfgDesc[36] = 0x00;
 8009f04:	4b1a      	ldr	r3, [pc, #104]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }   
  USBD_AUDIO_CfgDesc[37] = 0x00;                                               /* iChannelNames */
 8009f0c:	4b18      	ldr	r3, [pc, #96]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  USBD_AUDIO_CfgDesc[38] = 0x00;                                               /* iTerminal */   
 8009f14:	4b16      	ldr	r3, [pc, #88]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  /* USB Microphone Audio Feature Unit Descriptor */
  USBD_AUDIO_CfgDesc[39] = 0x07+Channels+1;                                    /* bLength */
 8009f1c:	79fb      	ldrb	r3, [r7, #7]
 8009f1e:	3308      	adds	r3, #8
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	4b13      	ldr	r3, [pc, #76]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009f24:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  USBD_AUDIO_CfgDesc[40] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;                    /* bDescriptorType */
 8009f28:	4b11      	ldr	r3, [pc, #68]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009f2a:	2224      	movs	r2, #36	; 0x24
 8009f2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  USBD_AUDIO_CfgDesc[41] = AUDIO_CONTROL_FEATURE_UNIT;                         /* bDescriptorSubtype */
 8009f30:	4b0f      	ldr	r3, [pc, #60]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009f32:	2206      	movs	r2, #6
 8009f34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  USBD_AUDIO_CfgDesc[42] = 0x02;                                               /* bUnitID */
 8009f38:	4b0d      	ldr	r3, [pc, #52]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  USBD_AUDIO_CfgDesc[43] = 0x01;                                               /* bSourceID */
 8009f40:	4b0b      	ldr	r3, [pc, #44]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  USBD_AUDIO_CfgDesc[44] = 0x01;                                               /* bControlSize */   
 8009f48:	4b09      	ldr	r3, [pc, #36]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  index = 47;   
 8009f50:	232f      	movs	r3, #47	; 0x2f
 8009f52:	82fb      	strh	r3, [r7, #22]
  if(Channels == 1)
 8009f54:	79fb      	ldrb	r3, [r7, #7]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d10c      	bne.n	8009f74 <USBD_AUDIO_Init_Microphone_Descriptor+0x184>
  {
    AUDIO_CONTROLS = (0x02);     
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	757b      	strb	r3, [r7, #21]
    USBD_AUDIO_CfgDesc[45] = AUDIO_CONTROLS;
 8009f5e:	4a04      	ldr	r2, [pc, #16]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009f60:	7d7b      	ldrb	r3, [r7, #21]
 8009f62:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
    USBD_AUDIO_CfgDesc[46] = 0x00;     
 8009f66:	4b02      	ldr	r3, [pc, #8]	; (8009f70 <USBD_AUDIO_Init_Microphone_Descriptor+0x180>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8009f6e:	e012      	b.n	8009f96 <USBD_AUDIO_Init_Microphone_Descriptor+0x1a6>
 8009f70:	20001b5c 	.word	0x20001b5c
  }
  else
  {
    AUDIO_CONTROLS = (0x02);     
 8009f74:	2302      	movs	r3, #2
 8009f76:	757b      	strb	r3, [r7, #21]
    USBD_AUDIO_CfgDesc[45] = 0x00;
 8009f78:	4bae      	ldr	r3, [pc, #696]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    USBD_AUDIO_CfgDesc[46] = AUDIO_CONTROLS;
 8009f80:	4aac      	ldr	r2, [pc, #688]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009f82:	7d7b      	ldrb	r3, [r7, #21]
 8009f84:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009f88:	8afb      	ldrh	r3, [r7, #22]
 8009f8a:	49aa      	ldr	r1, [pc, #680]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009f8c:	7d7a      	ldrb	r2, [r7, #21]
 8009f8e:	54ca      	strb	r2, [r1, r3]
    index++;
 8009f90:	8afb      	ldrh	r3, [r7, #22]
 8009f92:	3301      	adds	r3, #1
 8009f94:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 2)
 8009f96:	79fb      	ldrb	r3, [r7, #7]
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d906      	bls.n	8009faa <USBD_AUDIO_Init_Microphone_Descriptor+0x1ba>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009f9c:	8afb      	ldrh	r3, [r7, #22]
 8009f9e:	49a5      	ldr	r1, [pc, #660]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009fa0:	7d7a      	ldrb	r2, [r7, #21]
 8009fa2:	54ca      	strb	r2, [r1, r3]
    index++;
 8009fa4:	8afb      	ldrh	r3, [r7, #22]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 3)
 8009faa:	79fb      	ldrb	r3, [r7, #7]
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d906      	bls.n	8009fbe <USBD_AUDIO_Init_Microphone_Descriptor+0x1ce>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009fb0:	8afb      	ldrh	r3, [r7, #22]
 8009fb2:	49a0      	ldr	r1, [pc, #640]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009fb4:	7d7a      	ldrb	r2, [r7, #21]
 8009fb6:	54ca      	strb	r2, [r1, r3]
    index++;
 8009fb8:	8afb      	ldrh	r3, [r7, #22]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 4)
 8009fbe:	79fb      	ldrb	r3, [r7, #7]
 8009fc0:	2b04      	cmp	r3, #4
 8009fc2:	d906      	bls.n	8009fd2 <USBD_AUDIO_Init_Microphone_Descriptor+0x1e2>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009fc4:	8afb      	ldrh	r3, [r7, #22]
 8009fc6:	499b      	ldr	r1, [pc, #620]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009fc8:	7d7a      	ldrb	r2, [r7, #21]
 8009fca:	54ca      	strb	r2, [r1, r3]
    index++;
 8009fcc:	8afb      	ldrh	r3, [r7, #22]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 5)
 8009fd2:	79fb      	ldrb	r3, [r7, #7]
 8009fd4:	2b05      	cmp	r3, #5
 8009fd6:	d906      	bls.n	8009fe6 <USBD_AUDIO_Init_Microphone_Descriptor+0x1f6>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009fd8:	8afb      	ldrh	r3, [r7, #22]
 8009fda:	4996      	ldr	r1, [pc, #600]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009fdc:	7d7a      	ldrb	r2, [r7, #21]
 8009fde:	54ca      	strb	r2, [r1, r3]
    index++;
 8009fe0:	8afb      	ldrh	r3, [r7, #22]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 6)
 8009fe6:	79fb      	ldrb	r3, [r7, #7]
 8009fe8:	2b06      	cmp	r3, #6
 8009fea:	d906      	bls.n	8009ffa <USBD_AUDIO_Init_Microphone_Descriptor+0x20a>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 8009fec:	8afb      	ldrh	r3, [r7, #22]
 8009fee:	4991      	ldr	r1, [pc, #580]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 8009ff0:	7d7a      	ldrb	r2, [r7, #21]
 8009ff2:	54ca      	strb	r2, [r1, r3]
    index++;
 8009ff4:	8afb      	ldrh	r3, [r7, #22]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	82fb      	strh	r3, [r7, #22]
  }   
  if(Channels > 7)
 8009ffa:	79fb      	ldrb	r3, [r7, #7]
 8009ffc:	2b07      	cmp	r3, #7
 8009ffe:	d906      	bls.n	800a00e <USBD_AUDIO_Init_Microphone_Descriptor+0x21e>
  {
    USBD_AUDIO_CfgDesc[index] = AUDIO_CONTROLS;
 800a000:	8afb      	ldrh	r3, [r7, #22]
 800a002:	498c      	ldr	r1, [pc, #560]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a004:	7d7a      	ldrb	r2, [r7, #21]
 800a006:	54ca      	strb	r2, [r1, r3]
    index++;
 800a008:	8afb      	ldrh	r3, [r7, #22]
 800a00a:	3301      	adds	r3, #1
 800a00c:	82fb      	strh	r3, [r7, #22]
  }   
  USBD_AUDIO_CfgDesc[index] = 0x00;                                            /* iTerminal */
 800a00e:	8afb      	ldrh	r3, [r7, #22]
 800a010:	4a88      	ldr	r2, [pc, #544]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a012:	2100      	movs	r1, #0
 800a014:	54d1      	strb	r1, [r2, r3]
  index++;   
 800a016:	8afb      	ldrh	r3, [r7, #22]
 800a018:	3301      	adds	r3, #1
 800a01a:	82fb      	strh	r3, [r7, #22]
  /*USB Microphone Output Terminal Descriptor */
  USBD_AUDIO_CfgDesc[index++] = 0x09;                                          /* bLength */
 800a01c:	8afb      	ldrh	r3, [r7, #22]
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	82fa      	strh	r2, [r7, #22]
 800a022:	461a      	mov	r2, r3
 800a024:	4b83      	ldr	r3, [pc, #524]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a026:	2109      	movs	r1, #9
 800a028:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 800a02a:	8afb      	ldrh	r3, [r7, #22]
 800a02c:	1c5a      	adds	r2, r3, #1
 800a02e:	82fa      	strh	r2, [r7, #22]
 800a030:	461a      	mov	r2, r3
 800a032:	4b80      	ldr	r3, [pc, #512]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a034:	2124      	movs	r1, #36	; 0x24
 800a036:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_CONTROL_OUTPUT_TERMINAL;                 /* bDescriptorSubtype */
 800a038:	8afb      	ldrh	r3, [r7, #22]
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	82fa      	strh	r2, [r7, #22]
 800a03e:	461a      	mov	r2, r3
 800a040:	4b7c      	ldr	r3, [pc, #496]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a042:	2103      	movs	r1, #3
 800a044:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalID */
 800a046:	8afb      	ldrh	r3, [r7, #22]
 800a048:	1c5a      	adds	r2, r3, #1
 800a04a:	82fa      	strh	r2, [r7, #22]
 800a04c:	461a      	mov	r2, r3
 800a04e:	4b79      	ldr	r3, [pc, #484]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a050:	2103      	movs	r1, #3
 800a052:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wTerminalType AUDIO_TERMINAL_USB_STREAMING 0x0101*/
 800a054:	8afb      	ldrh	r3, [r7, #22]
 800a056:	1c5a      	adds	r2, r3, #1
 800a058:	82fa      	strh	r2, [r7, #22]
 800a05a:	461a      	mov	r2, r3
 800a05c:	4b75      	ldr	r3, [pc, #468]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a05e:	2101      	movs	r1, #1
 800a060:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;
 800a062:	8afb      	ldrh	r3, [r7, #22]
 800a064:	1c5a      	adds	r2, r3, #1
 800a066:	82fa      	strh	r2, [r7, #22]
 800a068:	461a      	mov	r2, r3
 800a06a:	4b72      	ldr	r3, [pc, #456]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a06c:	2101      	movs	r1, #1
 800a06e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;
 800a070:	8afb      	ldrh	r3, [r7, #22]
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	82fa      	strh	r2, [r7, #22]
 800a076:	461a      	mov	r2, r3
 800a078:	4b6e      	ldr	r3, [pc, #440]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a07a:	2100      	movs	r1, #0
 800a07c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x02;
 800a07e:	8afb      	ldrh	r3, [r7, #22]
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	82fa      	strh	r2, [r7, #22]
 800a084:	461a      	mov	r2, r3
 800a086:	4b6b      	ldr	r3, [pc, #428]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a088:	2102      	movs	r1, #2
 800a08a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 800a08c:	8afb      	ldrh	r3, [r7, #22]
 800a08e:	1c5a      	adds	r2, r3, #1
 800a090:	82fa      	strh	r2, [r7, #22]
 800a092:	461a      	mov	r2, r3
 800a094:	4b67      	ldr	r3, [pc, #412]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a096:	2100      	movs	r1, #0
 800a098:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Zero Bandwith */
  /* Interface 1, Alternate Setting 0                                             */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 800a09a:	8afb      	ldrh	r3, [r7, #22]
 800a09c:	1c5a      	adds	r2, r3, #1
 800a09e:	82fa      	strh	r2, [r7, #22]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	4b64      	ldr	r3, [pc, #400]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a0a4:	2109      	movs	r1, #9
 800a0a6:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 800a0a8:	8afb      	ldrh	r3, [r7, #22]
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	82fa      	strh	r2, [r7, #22]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	4b60      	ldr	r3, [pc, #384]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a0b2:	2104      	movs	r1, #4
 800a0b4:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 800a0b6:	8afb      	ldrh	r3, [r7, #22]
 800a0b8:	1c5a      	adds	r2, r3, #1
 800a0ba:	82fa      	strh	r2, [r7, #22]
 800a0bc:	461a      	mov	r2, r3
 800a0be:	4b5d      	ldr	r3, [pc, #372]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bAlternateSetting */
 800a0c4:	8afb      	ldrh	r3, [r7, #22]
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	82fa      	strh	r2, [r7, #22]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	4b59      	ldr	r3, [pc, #356]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bNumEndpoints */
 800a0d2:	8afb      	ldrh	r3, [r7, #22]
 800a0d4:	1c5a      	adds	r2, r3, #1
 800a0d6:	82fa      	strh	r2, [r7, #22]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	4b56      	ldr	r3, [pc, #344]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a0dc:	2100      	movs	r1, #0
 800a0de:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 800a0e0:	8afb      	ldrh	r3, [r7, #22]
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	82fa      	strh	r2, [r7, #22]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	4b52      	ldr	r3, [pc, #328]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a0ea:	2101      	movs	r1, #1
 800a0ec:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 800a0ee:	8afb      	ldrh	r3, [r7, #22]
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	82fa      	strh	r2, [r7, #22]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	4b4f      	ldr	r3, [pc, #316]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a0f8:	2102      	movs	r1, #2
 800a0fa:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 800a0fc:	8afb      	ldrh	r3, [r7, #22]
 800a0fe:	1c5a      	adds	r2, r3, #1
 800a100:	82fa      	strh	r2, [r7, #22]
 800a102:	461a      	mov	r2, r3
 800a104:	4b4b      	ldr	r3, [pc, #300]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a106:	2100      	movs	r1, #0
 800a108:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;   
 800a10a:	8afb      	ldrh	r3, [r7, #22]
 800a10c:	1c5a      	adds	r2, r3, #1
 800a10e:	82fa      	strh	r2, [r7, #22]
 800a110:	461a      	mov	r2, r3
 800a112:	4b48      	ldr	r3, [pc, #288]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a114:	2100      	movs	r1, #0
 800a116:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Standard AS Interface Descriptor - Audio Streaming Operational */
  /* Interface 1, Alternate Setting 1                                           */
  USBD_AUDIO_CfgDesc[index++] = 9;                                             /* bLength */
 800a118:	8afb      	ldrh	r3, [r7, #22]
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	82fa      	strh	r2, [r7, #22]
 800a11e:	461a      	mov	r2, r3
 800a120:	4b44      	ldr	r3, [pc, #272]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a122:	2109      	movs	r1, #9
 800a124:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_INTERFACE_DESCRIPTOR_TYPE;                 /* bDescriptorType */
 800a126:	8afb      	ldrh	r3, [r7, #22]
 800a128:	1c5a      	adds	r2, r3, #1
 800a12a:	82fa      	strh	r2, [r7, #22]
 800a12c:	461a      	mov	r2, r3
 800a12e:	4b41      	ldr	r3, [pc, #260]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a130:	2104      	movs	r1, #4
 800a132:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterfaceNumber */
 800a134:	8afb      	ldrh	r3, [r7, #22]
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	82fa      	strh	r2, [r7, #22]
 800a13a:	461a      	mov	r2, r3
 800a13c:	4b3d      	ldr	r3, [pc, #244]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a13e:	2101      	movs	r1, #1
 800a140:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bAlternateSetting */
 800a142:	8afb      	ldrh	r3, [r7, #22]
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	82fa      	strh	r2, [r7, #22]
 800a148:	461a      	mov	r2, r3
 800a14a:	4b3a      	ldr	r3, [pc, #232]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a14c:	2101      	movs	r1, #1
 800a14e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bNumEndpoints */
 800a150:	8afb      	ldrh	r3, [r7, #22]
 800a152:	1c5a      	adds	r2, r3, #1
 800a154:	82fa      	strh	r2, [r7, #22]
 800a156:	461a      	mov	r2, r3
 800a158:	4b36      	ldr	r3, [pc, #216]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a15a:	2101      	movs	r1, #1
 800a15c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = USB_DEVICE_CLASS_AUDIO;                        /* bInterfaceClass */
 800a15e:	8afb      	ldrh	r3, [r7, #22]
 800a160:	1c5a      	adds	r2, r3, #1
 800a162:	82fa      	strh	r2, [r7, #22]
 800a164:	461a      	mov	r2, r3
 800a166:	4b33      	ldr	r3, [pc, #204]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a168:	2101      	movs	r1, #1
 800a16a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_SUBCLASS_AUDIOSTREAMING;                 /* bInterfaceSubClass */
 800a16c:	8afb      	ldrh	r3, [r7, #22]
 800a16e:	1c5a      	adds	r2, r3, #1
 800a170:	82fa      	strh	r2, [r7, #22]
 800a172:	461a      	mov	r2, r3
 800a174:	4b2f      	ldr	r3, [pc, #188]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a176:	2102      	movs	r1, #2
 800a178:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_PROTOCOL_UNDEFINED;                      /* bInterfaceProtocol */
 800a17a:	8afb      	ldrh	r3, [r7, #22]
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	82fa      	strh	r2, [r7, #22]
 800a180:	461a      	mov	r2, r3
 800a182:	4b2c      	ldr	r3, [pc, #176]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a184:	2100      	movs	r1, #0
 800a186:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* iInterface */   
 800a188:	8afb      	ldrh	r3, [r7, #22]
 800a18a:	1c5a      	adds	r2, r3, #1
 800a18c:	82fa      	strh	r2, [r7, #22]
 800a18e:	461a      	mov	r2, r3
 800a190:	4b28      	ldr	r3, [pc, #160]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a192:	2100      	movs	r1, #0
 800a194:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Audio Streaming Interface Descriptor */
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_INTERFACE_DESC_SIZE;           /* bLength */
 800a196:	8afb      	ldrh	r3, [r7, #22]
 800a198:	1c5a      	adds	r2, r3, #1
 800a19a:	82fa      	strh	r2, [r7, #22]
 800a19c:	461a      	mov	r2, r3
 800a19e:	4b25      	ldr	r3, [pc, #148]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a1a0:	2107      	movs	r1, #7
 800a1a2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 800a1a4:	8afb      	ldrh	r3, [r7, #22]
 800a1a6:	1c5a      	adds	r2, r3, #1
 800a1a8:	82fa      	strh	r2, [r7, #22]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	4b21      	ldr	r3, [pc, #132]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a1ae:	2124      	movs	r1, #36	; 0x24
 800a1b0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_GENERAL;                       /* bDescriptorSubtype */
 800a1b2:	8afb      	ldrh	r3, [r7, #22]
 800a1b4:	1c5a      	adds	r2, r3, #1
 800a1b6:	82fa      	strh	r2, [r7, #22]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4b1e      	ldr	r3, [pc, #120]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a1bc:	2101      	movs	r1, #1
 800a1be:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x03;                                          /* bTerminalLink */
 800a1c0:	8afb      	ldrh	r3, [r7, #22]
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	82fa      	strh	r2, [r7, #22]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	4b1a      	ldr	r3, [pc, #104]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a1ca:	2103      	movs	r1, #3
 800a1cc:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bDelay */
 800a1ce:	8afb      	ldrh	r3, [r7, #22]
 800a1d0:	1c5a      	adds	r2, r3, #1
 800a1d2:	82fa      	strh	r2, [r7, #22]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	4b17      	ldr	r3, [pc, #92]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a1d8:	2101      	movs	r1, #1
 800a1da:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* wFormatTag AUDIO_FORMAT_PCM  0x0001*/
 800a1dc:	8afb      	ldrh	r3, [r7, #22]
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	82fa      	strh	r2, [r7, #22]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	4b13      	ldr	r3, [pc, #76]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                
 800a1ea:	8afb      	ldrh	r3, [r7, #22]
 800a1ec:	1c5a      	adds	r2, r3, #1
 800a1ee:	82fa      	strh	r2, [r7, #22]
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	4b10      	ldr	r3, [pc, #64]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	5499      	strb	r1, [r3, r2]
  /* USB Microphone Audio Type I Format Interface Descriptor */                
  USBD_AUDIO_CfgDesc[index++] = 0x0B;                                          /* bLength */
 800a1f8:	8afb      	ldrh	r3, [r7, #22]
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	82fa      	strh	r2, [r7, #22]
 800a1fe:	461a      	mov	r2, r3
 800a200:	4b0c      	ldr	r3, [pc, #48]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a202:	210b      	movs	r1, #11
 800a204:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_INTERFACE_DESCRIPTOR_TYPE;               /* bDescriptorType */
 800a206:	8afb      	ldrh	r3, [r7, #22]
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	82fa      	strh	r2, [r7, #22]
 800a20c:	461a      	mov	r2, r3
 800a20e:	4b09      	ldr	r3, [pc, #36]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a210:	2124      	movs	r1, #36	; 0x24
 800a212:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_FORMAT_TYPE;                   /* bDescriptorSubtype */
 800a214:	8afb      	ldrh	r3, [r7, #22]
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	82fa      	strh	r2, [r7, #22]
 800a21a:	461a      	mov	r2, r3
 800a21c:	4b05      	ldr	r3, [pc, #20]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a21e:	2102      	movs	r1, #2
 800a220:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_FORMAT_TYPE_I;                           /* bFormatType */
 800a222:	8afb      	ldrh	r3, [r7, #22]
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	82fa      	strh	r2, [r7, #22]
 800a228:	461a      	mov	r2, r3
 800a22a:	4b02      	ldr	r3, [pc, #8]	; (800a234 <USBD_AUDIO_Init_Microphone_Descriptor+0x444>)
 800a22c:	2101      	movs	r1, #1
 800a22e:	5499      	strb	r1, [r3, r2]
 800a230:	e002      	b.n	800a238 <USBD_AUDIO_Init_Microphone_Descriptor+0x448>
 800a232:	bf00      	nop
 800a234:	20001b5c 	.word	0x20001b5c
  USBD_AUDIO_CfgDesc[index++] = Channels;                                      /* bNrChannels */
 800a238:	8afb      	ldrh	r3, [r7, #22]
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	82fa      	strh	r2, [r7, #22]
 800a23e:	4619      	mov	r1, r3
 800a240:	4a7b      	ldr	r2, [pc, #492]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a242:	79fb      	ldrb	r3, [r7, #7]
 800a244:	5453      	strb	r3, [r2, r1]
  USBD_AUDIO_CfgDesc[index++] = 0x02;                                          /* bSubFrameSize */
 800a246:	8afb      	ldrh	r3, [r7, #22]
 800a248:	1c5a      	adds	r2, r3, #1
 800a24a:	82fa      	strh	r2, [r7, #22]
 800a24c:	461a      	mov	r2, r3
 800a24e:	4b78      	ldr	r3, [pc, #480]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a250:	2102      	movs	r1, #2
 800a252:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 16;                                            /* bBitResolution */
 800a254:	8afb      	ldrh	r3, [r7, #22]
 800a256:	1c5a      	adds	r2, r3, #1
 800a258:	82fa      	strh	r2, [r7, #22]
 800a25a:	461a      	mov	r2, r3
 800a25c:	4b74      	ldr	r3, [pc, #464]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a25e:	2110      	movs	r1, #16
 800a260:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                           /* bSamFreqType */
 800a262:	8afb      	ldrh	r3, [r7, #22]
 800a264:	1c5a      	adds	r2, r3, #1
 800a266:	82fa      	strh	r2, [r7, #22]
 800a268:	461a      	mov	r2, r3
 800a26a:	4b71      	ldr	r3, [pc, #452]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a26c:	2101      	movs	r1, #1
 800a26e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency&0xff;                        /* tSamFreq 8000 = 0x1F40 */
 800a270:	8afb      	ldrh	r3, [r7, #22]
 800a272:	1c5a      	adds	r2, r3, #1
 800a274:	82fa      	strh	r2, [r7, #22]
 800a276:	461a      	mov	r2, r3
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	b2d9      	uxtb	r1, r3
 800a27c:	4b6c      	ldr	r3, [pc, #432]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a27e:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = (samplingFrequency>>8)&0xff;
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	0a19      	lsrs	r1, r3, #8
 800a284:	8afb      	ldrh	r3, [r7, #22]
 800a286:	1c5a      	adds	r2, r3, #1
 800a288:	82fa      	strh	r2, [r7, #22]
 800a28a:	461a      	mov	r2, r3
 800a28c:	b2c9      	uxtb	r1, r1
 800a28e:	4b68      	ldr	r3, [pc, #416]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a290:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = samplingFrequency>>16;   
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	0c19      	lsrs	r1, r3, #16
 800a296:	8afb      	ldrh	r3, [r7, #22]
 800a298:	1c5a      	adds	r2, r3, #1
 800a29a:	82fa      	strh	r2, [r7, #22]
 800a29c:	461a      	mov	r2, r3
 800a29e:	b2c9      	uxtb	r1, r1
 800a2a0:	4b63      	ldr	r3, [pc, #396]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a2a2:	5499      	strb	r1, [r3, r2]
  /* Endpoint 1 - Standard Descriptor */
  USBD_AUDIO_CfgDesc[index++] =  AUDIO_STANDARD_ENDPOINT_DESC_SIZE;            /* bLength */
 800a2a4:	8afb      	ldrh	r3, [r7, #22]
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	82fa      	strh	r2, [r7, #22]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	4b60      	ldr	r3, [pc, #384]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a2ae:	2109      	movs	r1, #9
 800a2b0:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bDescriptorType */
 800a2b2:	8afb      	ldrh	r3, [r7, #22]
 800a2b4:	1c5a      	adds	r2, r3, #1
 800a2b6:	82fa      	strh	r2, [r7, #22]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	4b5d      	ldr	r3, [pc, #372]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a2bc:	2105      	movs	r1, #5
 800a2be:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_IN_EP;                                   /* bEndpointAddress 1 in endpoint*/
 800a2c0:	8afb      	ldrh	r3, [r7, #22]
 800a2c2:	1c5a      	adds	r2, r3, #1
 800a2c4:	82fa      	strh	r2, [r7, #22]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	4b59      	ldr	r3, [pc, #356]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a2ca:	2181      	movs	r1, #129	; 0x81
 800a2cc:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x05;                                          /* bmAttributes */
 800a2ce:	8afb      	ldrh	r3, [r7, #22]
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	82fa      	strh	r2, [r7, #22]
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	4b56      	ldr	r3, [pc, #344]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a2d8:	2105      	movs	r1, #5
 800a2da:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)&0xFF;  /* wMaxPacketSize */ 
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	4a55      	ldr	r2, [pc, #340]	; (800a434 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 800a2e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e4:	099b      	lsrs	r3, r3, #6
 800a2e6:	3302      	adds	r3, #2
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	79fa      	ldrb	r2, [r7, #7]
 800a2ec:	fb12 f303 	smulbb	r3, r2, r3
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	8afb      	ldrh	r3, [r7, #22]
 800a2f4:	1c59      	adds	r1, r3, #1
 800a2f6:	82f9      	strh	r1, [r7, #22]
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	0053      	lsls	r3, r2, #1
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	4b4c      	ldr	r3, [pc, #304]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a300:	545a      	strb	r2, [r3, r1]
  USBD_AUDIO_CfgDesc[index++] = ((samplingFrequency/1000+2)*Channels*2)>>8; 
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	4a4b      	ldr	r2, [pc, #300]	; (800a434 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 800a306:	fba2 2303 	umull	r2, r3, r2, r3
 800a30a:	099b      	lsrs	r3, r3, #6
 800a30c:	3302      	adds	r3, #2
 800a30e:	79fa      	ldrb	r2, [r7, #7]
 800a310:	fb02 f303 	mul.w	r3, r2, r3
 800a314:	005b      	lsls	r3, r3, #1
 800a316:	0a19      	lsrs	r1, r3, #8
 800a318:	8afb      	ldrh	r3, [r7, #22]
 800a31a:	1c5a      	adds	r2, r3, #1
 800a31c:	82fa      	strh	r2, [r7, #22]
 800a31e:	461a      	mov	r2, r3
 800a320:	b2c9      	uxtb	r1, r1
 800a322:	4b43      	ldr	r3, [pc, #268]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a324:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x01;                                          /* bInterval */
 800a326:	8afb      	ldrh	r3, [r7, #22]
 800a328:	1c5a      	adds	r2, r3, #1
 800a32a:	82fa      	strh	r2, [r7, #22]
 800a32c:	461a      	mov	r2, r3
 800a32e:	4b40      	ldr	r3, [pc, #256]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a330:	2101      	movs	r1, #1
 800a332:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bRefresh */
 800a334:	8afb      	ldrh	r3, [r7, #22]
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	82fa      	strh	r2, [r7, #22]
 800a33a:	461a      	mov	r2, r3
 800a33c:	4b3c      	ldr	r3, [pc, #240]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a33e:	2100      	movs	r1, #0
 800a340:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bSynchAddress */   
 800a342:	8afb      	ldrh	r3, [r7, #22]
 800a344:	1c5a      	adds	r2, r3, #1
 800a346:	82fa      	strh	r2, [r7, #22]
 800a348:	461a      	mov	r2, r3
 800a34a:	4b39      	ldr	r3, [pc, #228]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a34c:	2100      	movs	r1, #0
 800a34e:	5499      	strb	r1, [r3, r2]
  /* Endpoint - Audio Streaming Descriptor*/
  USBD_AUDIO_CfgDesc[index++] = AUDIO_STREAMING_ENDPOINT_DESC_SIZE;            /* bLength */
 800a350:	8afb      	ldrh	r3, [r7, #22]
 800a352:	1c5a      	adds	r2, r3, #1
 800a354:	82fa      	strh	r2, [r7, #22]
 800a356:	461a      	mov	r2, r3
 800a358:	4b35      	ldr	r3, [pc, #212]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a35a:	2107      	movs	r1, #7
 800a35c:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_DESCRIPTOR_TYPE;                /* bDescriptorType */
 800a35e:	8afb      	ldrh	r3, [r7, #22]
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	82fa      	strh	r2, [r7, #22]
 800a364:	461a      	mov	r2, r3
 800a366:	4b32      	ldr	r3, [pc, #200]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a368:	2125      	movs	r1, #37	; 0x25
 800a36a:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = AUDIO_ENDPOINT_GENERAL;                        /* bDescriptor */
 800a36c:	8afb      	ldrh	r3, [r7, #22]
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	82fa      	strh	r2, [r7, #22]
 800a372:	461a      	mov	r2, r3
 800a374:	4b2e      	ldr	r3, [pc, #184]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a376:	2101      	movs	r1, #1
 800a378:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bmAttributes */
 800a37a:	8afb      	ldrh	r3, [r7, #22]
 800a37c:	1c5a      	adds	r2, r3, #1
 800a37e:	82fa      	strh	r2, [r7, #22]
 800a380:	461a      	mov	r2, r3
 800a382:	4b2b      	ldr	r3, [pc, #172]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a384:	2100      	movs	r1, #0
 800a386:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* bLockDelayUnits */
 800a388:	8afb      	ldrh	r3, [r7, #22]
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	82fa      	strh	r2, [r7, #22]
 800a38e:	461a      	mov	r2, r3
 800a390:	4b27      	ldr	r3, [pc, #156]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a392:	2100      	movs	r1, #0
 800a394:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;                                          /* wLockDelay */
 800a396:	8afb      	ldrh	r3, [r7, #22]
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	82fa      	strh	r2, [r7, #22]
 800a39c:	461a      	mov	r2, r3
 800a39e:	4b24      	ldr	r3, [pc, #144]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	5499      	strb	r1, [r3, r2]
  USBD_AUDIO_CfgDesc[index++] = 0x00;    
 800a3a4:	8afb      	ldrh	r3, [r7, #22]
 800a3a6:	1c5a      	adds	r2, r3, #1
 800a3a8:	82fa      	strh	r2, [r7, #22]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	4b20      	ldr	r3, [pc, #128]	; (800a430 <USBD_AUDIO_Init_Microphone_Descriptor+0x640>)
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	5499      	strb	r1, [r3, r2]
    
  haudioInstance.paketDimension = (samplingFrequency/1000*Channels*2);
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	4a1f      	ldr	r2, [pc, #124]	; (800a434 <USBD_AUDIO_Init_Microphone_Descriptor+0x644>)
 800a3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ba:	099b      	lsrs	r3, r3, #6
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	79fb      	ldrb	r3, [r7, #7]
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	fb12 f303 	smulbb	r3, r2, r3
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	4b1a      	ldr	r3, [pc, #104]	; (800a438 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 800a3ce:	825a      	strh	r2, [r3, #18]
  haudioInstance.frequency=samplingFrequency;
 800a3d0:	4a19      	ldr	r2, [pc, #100]	; (800a438 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	6093      	str	r3, [r2, #8]
  haudioInstance.buffer_length = haudioInstance.paketDimension * AUDIO_IN_PACKET_NUM;
 800a3d6:	4b18      	ldr	r3, [pc, #96]	; (800a438 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 800a3d8:	8a5b      	ldrh	r3, [r3, #18]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	0052      	lsls	r2, r2, #1
 800a3de:	4413      	add	r3, r2
 800a3e0:	005b      	lsls	r3, r3, #1
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	4b14      	ldr	r3, [pc, #80]	; (800a438 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 800a3e6:	81da      	strh	r2, [r3, #14]
  haudioInstance.channels=Channels;  
 800a3e8:	4a13      	ldr	r2, [pc, #76]	; (800a438 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	7113      	strb	r3, [r2, #4]
  haudioInstance.upper_treshold = 5;
 800a3ee:	4b12      	ldr	r3, [pc, #72]	; (800a438 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 800a3f0:	2205      	movs	r2, #5
 800a3f2:	769a      	strb	r2, [r3, #26]
  haudioInstance.lower_treshold = 2;
 800a3f4:	4b10      	ldr	r3, [pc, #64]	; (800a438 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	76da      	strb	r2, [r3, #27]
  haudioInstance.state = STATE_USB_WAITING_FOR_INIT;
 800a3fa:	4b0f      	ldr	r3, [pc, #60]	; (800a438 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	751a      	strb	r2, [r3, #20]
  haudioInstance.wr_ptr = 3 * haudioInstance.paketDimension;
 800a400:	4b0d      	ldr	r3, [pc, #52]	; (800a438 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 800a402:	8a5b      	ldrh	r3, [r3, #18]
 800a404:	461a      	mov	r2, r3
 800a406:	0052      	lsls	r2, r2, #1
 800a408:	4413      	add	r3, r2
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	4b0a      	ldr	r3, [pc, #40]	; (800a438 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 800a40e:	831a      	strh	r2, [r3, #24]
  haudioInstance.rd_ptr = 0;  
 800a410:	4b09      	ldr	r3, [pc, #36]	; (800a438 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 800a412:	2200      	movs	r2, #0
 800a414:	82da      	strh	r2, [r3, #22]
  haudioInstance.dataAmount=0;
 800a416:	4b08      	ldr	r3, [pc, #32]	; (800a438 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 800a418:	2200      	movs	r2, #0
 800a41a:	821a      	strh	r2, [r3, #16]
  haudioInstance.buffer = 0;
 800a41c:	4b06      	ldr	r3, [pc, #24]	; (800a438 <USBD_AUDIO_Init_Microphone_Descriptor+0x648>)
 800a41e:	2200      	movs	r2, #0
 800a420:	661a      	str	r2, [r3, #96]	; 0x60
}
 800a422:	bf00      	nop
 800a424:	371c      	adds	r7, #28
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	20001b5c 	.word	0x20001b5c
 800a434:	10624dd3 	.word	0x10624dd3
 800a438:	20001af8 	.word	0x20001af8

0800a43c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b086      	sub	sp, #24
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	4613      	mov	r3, r2
 800a448:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d101      	bne.n	800a454 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a450:	2303      	movs	r3, #3
 800a452:	e025      	b.n	800a4a0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d003      	beq.n	800a466 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d003      	beq.n	800a478 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d003      	beq.n	800a486 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2201      	movs	r2, #1
 800a48a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	79fa      	ldrb	r2, [r7, #7]
 800a492:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f002 f9f9 	bl	800c88c <USBD_LL_Init>
 800a49a:	4603      	mov	r3, r0
 800a49c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a49e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3718      	adds	r7, #24
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e010      	b.n	800a4e2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d0:	f107 020e 	add.w	r2, r7, #14
 800a4d4:	4610      	mov	r0, r2
 800a4d6:	4798      	blx	r3
 800a4d8:	4602      	mov	r2, r0
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f002 fa12 	bl	800c91c <USBD_LL_Start>
 800a4f8:	4603      	mov	r3, r0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a502:	b480      	push	{r7}
 800a504:	b083      	sub	sp, #12
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a524:	2303      	movs	r3, #3
 800a526:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d009      	beq.n	800a546 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	78fa      	ldrb	r2, [r7, #3]
 800a53c:	4611      	mov	r1, r2
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	4798      	blx	r3
 800a542:	4603      	mov	r3, r0
 800a544:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a546:	7bfb      	ldrb	r3, [r7, #15]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	460b      	mov	r3, r1
 800a55a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a562:	2b00      	cmp	r3, #0
 800a564:	d007      	beq.n	800a576 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	78fa      	ldrb	r2, [r7, #3]
 800a570:	4611      	mov	r1, r2
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	4798      	blx	r3
  }

  return USBD_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a590:	6839      	ldr	r1, [r7, #0]
 800a592:	4618      	mov	r0, r3
 800a594:	f000 ff2c 	bl	800b3f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5b4:	f003 031f 	and.w	r3, r3, #31
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d00e      	beq.n	800a5da <USBD_LL_SetupStage+0x5a>
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d302      	bcc.n	800a5c6 <USBD_LL_SetupStage+0x46>
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d014      	beq.n	800a5ee <USBD_LL_SetupStage+0x6e>
 800a5c4:	e01d      	b.n	800a602 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fa18 	bl	800aa04 <USBD_StdDevReq>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5d8:	e020      	b.n	800a61c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 fa7c 	bl	800aae0 <USBD_StdItfReq>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ec:	e016      	b.n	800a61c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fab8 	bl	800ab6c <USBD_StdEPReq>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a600:	e00c      	b.n	800a61c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a608:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f002 f9d2 	bl	800c9ba <USBD_LL_StallEP>
 800a616:	4603      	mov	r3, r0
 800a618:	73fb      	strb	r3, [r7, #15]
      break;
 800a61a:	bf00      	nop
  }

  return ret;
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b086      	sub	sp, #24
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	460b      	mov	r3, r1
 800a630:	607a      	str	r2, [r7, #4]
 800a632:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a634:	7afb      	ldrb	r3, [r7, #11]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d137      	bne.n	800a6aa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a640:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a648:	2b03      	cmp	r3, #3
 800a64a:	d14a      	bne.n	800a6e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	689a      	ldr	r2, [r3, #8]
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	429a      	cmp	r2, r3
 800a656:	d913      	bls.n	800a680 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	689a      	ldr	r2, [r3, #8]
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	1ad2      	subs	r2, r2, r3
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	68da      	ldr	r2, [r3, #12]
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	4293      	cmp	r3, r2
 800a670:	bf28      	it	cs
 800a672:	4613      	movcs	r3, r2
 800a674:	461a      	mov	r2, r3
 800a676:	6879      	ldr	r1, [r7, #4]
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 ffad 	bl	800b5d8 <USBD_CtlContinueRx>
 800a67e:	e030      	b.n	800a6e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00a      	beq.n	800a6a2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a692:	2b03      	cmp	r3, #3
 800a694:	d105      	bne.n	800a6a2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f000 ffa9 	bl	800b5fa <USBD_CtlSendStatus>
 800a6a8:	e01b      	b.n	800a6e2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d013      	beq.n	800a6de <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a6bc:	2b03      	cmp	r3, #3
 800a6be:	d10e      	bne.n	800a6de <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	7afa      	ldrb	r2, [r7, #11]
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	4798      	blx	r3
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a6d4:	7dfb      	ldrb	r3, [r7, #23]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a6da:	7dfb      	ldrb	r3, [r7, #23]
 800a6dc:	e002      	b.n	800a6e4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e000      	b.n	800a6e4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3718      	adds	r7, #24
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	607a      	str	r2, [r7, #4]
 800a6f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a6fa:	7afb      	ldrb	r3, [r7, #11]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d16a      	bne.n	800a7d6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	3314      	adds	r3, #20
 800a704:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d155      	bne.n	800a7bc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d914      	bls.n	800a746 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	689a      	ldr	r2, [r3, #8]
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	1ad2      	subs	r2, r2, r3
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	461a      	mov	r2, r3
 800a730:	6879      	ldr	r1, [r7, #4]
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 ff22 	bl	800b57c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a738:	2300      	movs	r3, #0
 800a73a:	2200      	movs	r2, #0
 800a73c:	2100      	movs	r1, #0
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f002 f9b5 	bl	800caae <USBD_LL_PrepareReceive>
 800a744:	e03a      	b.n	800a7bc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	68da      	ldr	r2, [r3, #12]
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d11c      	bne.n	800a78c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d316      	bcc.n	800a78c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a768:	429a      	cmp	r2, r3
 800a76a:	d20f      	bcs.n	800a78c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a76c:	2200      	movs	r2, #0
 800a76e:	2100      	movs	r1, #0
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 ff03 	bl	800b57c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a77e:	2300      	movs	r3, #0
 800a780:	2200      	movs	r2, #0
 800a782:	2100      	movs	r1, #0
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f002 f992 	bl	800caae <USBD_LL_PrepareReceive>
 800a78a:	e017      	b.n	800a7bc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00a      	beq.n	800a7ae <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	d105      	bne.n	800a7ae <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7ae:	2180      	movs	r1, #128	; 0x80
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f002 f902 	bl	800c9ba <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f000 ff32 	bl	800b620 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d123      	bne.n	800a80e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f7ff fe9b 	bl	800a502 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a7d4:	e01b      	b.n	800a80e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d013      	beq.n	800a80a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a7e8:	2b03      	cmp	r3, #3
 800a7ea:	d10e      	bne.n	800a80a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	7afa      	ldrb	r2, [r7, #11]
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	4798      	blx	r3
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a800:	7dfb      	ldrb	r3, [r7, #23]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d003      	beq.n	800a80e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a806:	7dfb      	ldrb	r3, [r7, #23]
 800a808:	e002      	b.n	800a810 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e000      	b.n	800a810 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3718      	adds	r7, #24
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a844:	2b00      	cmp	r3, #0
 800a846:	d009      	beq.n	800a85c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	6852      	ldr	r2, [r2, #4]
 800a854:	b2d2      	uxtb	r2, r2
 800a856:	4611      	mov	r1, r2
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a85c:	2340      	movs	r3, #64	; 0x40
 800a85e:	2200      	movs	r2, #0
 800a860:	2100      	movs	r1, #0
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f002 f869 	bl	800c93a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2240      	movs	r2, #64	; 0x40
 800a874:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a878:	2340      	movs	r3, #64	; 0x40
 800a87a:	2200      	movs	r2, #0
 800a87c:	2180      	movs	r1, #128	; 0x80
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f002 f85b 	bl	800c93a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2240      	movs	r2, #64	; 0x40
 800a88e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b083      	sub	sp, #12
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	78fa      	ldrb	r2, [r7, #3]
 800a8aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b083      	sub	sp, #12
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2204      	movs	r2, #4
 800a8d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8f2:	2b04      	cmp	r3, #4
 800a8f4:	d105      	bne.n	800a902 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a91e:	2b03      	cmp	r3, #3
 800a920:	d10b      	bne.n	800a93a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d005      	beq.n	800a93a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	460b      	mov	r3, r1
 800a94e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	370c      	adds	r7, #12
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr

0800a95e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a95e:	b480      	push	{r7}
 800a960:	b083      	sub	sp, #12
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	460b      	mov	r3, r1
 800a968:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d009      	beq.n	800a9bc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	6852      	ldr	r2, [r2, #4]
 800a9b4:	b2d2      	uxtb	r2, r2
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	4798      	blx	r3
  }

  return USBD_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b087      	sub	sp, #28
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a9e4:	8a3b      	ldrh	r3, [r7, #16]
 800a9e6:	021b      	lsls	r3, r3, #8
 800a9e8:	b21a      	sxth	r2, r3
 800a9ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	b21b      	sxth	r3, r3
 800a9f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a9f4:	89fb      	ldrh	r3, [r7, #14]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	371c      	adds	r7, #28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
	...

0800aa04 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa1a:	2b20      	cmp	r3, #32
 800aa1c:	d004      	beq.n	800aa28 <USBD_StdDevReq+0x24>
 800aa1e:	2b40      	cmp	r3, #64	; 0x40
 800aa20:	d002      	beq.n	800aa28 <USBD_StdDevReq+0x24>
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00a      	beq.n	800aa3c <USBD_StdDevReq+0x38>
 800aa26:	e050      	b.n	800aaca <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	4798      	blx	r3
 800aa36:	4603      	mov	r3, r0
 800aa38:	73fb      	strb	r3, [r7, #15]
    break;
 800aa3a:	e04b      	b.n	800aad4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	785b      	ldrb	r3, [r3, #1]
 800aa40:	2b09      	cmp	r3, #9
 800aa42:	d83c      	bhi.n	800aabe <USBD_StdDevReq+0xba>
 800aa44:	a201      	add	r2, pc, #4	; (adr r2, 800aa4c <USBD_StdDevReq+0x48>)
 800aa46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4a:	bf00      	nop
 800aa4c:	0800aaa1 	.word	0x0800aaa1
 800aa50:	0800aab5 	.word	0x0800aab5
 800aa54:	0800aabf 	.word	0x0800aabf
 800aa58:	0800aaab 	.word	0x0800aaab
 800aa5c:	0800aabf 	.word	0x0800aabf
 800aa60:	0800aa7f 	.word	0x0800aa7f
 800aa64:	0800aa75 	.word	0x0800aa75
 800aa68:	0800aabf 	.word	0x0800aabf
 800aa6c:	0800aa97 	.word	0x0800aa97
 800aa70:	0800aa89 	.word	0x0800aa89
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f9ce 	bl	800ae18 <USBD_GetDescriptor>
      break;
 800aa7c:	e024      	b.n	800aac8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800aa7e:	6839      	ldr	r1, [r7, #0]
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 fb33 	bl	800b0ec <USBD_SetAddress>
      break;
 800aa86:	e01f      	b.n	800aac8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800aa88:	6839      	ldr	r1, [r7, #0]
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 fb70 	bl	800b170 <USBD_SetConfig>
 800aa90:	4603      	mov	r3, r0
 800aa92:	73fb      	strb	r3, [r7, #15]
      break;
 800aa94:	e018      	b.n	800aac8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800aa96:	6839      	ldr	r1, [r7, #0]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fc0d 	bl	800b2b8 <USBD_GetConfig>
      break;
 800aa9e:	e013      	b.n	800aac8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fc3c 	bl	800b320 <USBD_GetStatus>
      break;
 800aaa8:	e00e      	b.n	800aac8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fc6a 	bl	800b386 <USBD_SetFeature>
      break;
 800aab2:	e009      	b.n	800aac8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800aab4:	6839      	ldr	r1, [r7, #0]
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fc79 	bl	800b3ae <USBD_ClrFeature>
      break;
 800aabc:	e004      	b.n	800aac8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800aabe:	6839      	ldr	r1, [r7, #0]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 fccf 	bl	800b464 <USBD_CtlError>
      break;
 800aac6:	bf00      	nop
    }
    break;
 800aac8:	e004      	b.n	800aad4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fcc9 	bl	800b464 <USBD_CtlError>
    break;
 800aad2:	bf00      	nop
  }

  return ret;
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop

0800aae0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aaea:	2300      	movs	r3, #0
 800aaec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aaf6:	2b20      	cmp	r3, #32
 800aaf8:	d003      	beq.n	800ab02 <USBD_StdItfReq+0x22>
 800aafa:	2b40      	cmp	r3, #64	; 0x40
 800aafc:	d001      	beq.n	800ab02 <USBD_StdItfReq+0x22>
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d12a      	bne.n	800ab58 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d81d      	bhi.n	800ab4a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	889b      	ldrh	r3, [r3, #4]
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d813      	bhi.n	800ab40 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	6839      	ldr	r1, [r7, #0]
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	4798      	blx	r3
 800ab26:	4603      	mov	r3, r0
 800ab28:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	88db      	ldrh	r3, [r3, #6]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d110      	bne.n	800ab54 <USBD_StdItfReq+0x74>
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10d      	bne.n	800ab54 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fd5e 	bl	800b5fa <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ab3e:	e009      	b.n	800ab54 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fc8e 	bl	800b464 <USBD_CtlError>
      break;
 800ab48:	e004      	b.n	800ab54 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fc89 	bl	800b464 <USBD_CtlError>
      break;
 800ab52:	e000      	b.n	800ab56 <USBD_StdItfReq+0x76>
      break;
 800ab54:	bf00      	nop
    }
    break;
 800ab56:	e004      	b.n	800ab62 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fc82 	bl	800b464 <USBD_CtlError>
    break;
 800ab60:	bf00      	nop
  }

  return ret;
 800ab62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	889b      	ldrh	r3, [r3, #4]
 800ab7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab88:	2b20      	cmp	r3, #32
 800ab8a:	d004      	beq.n	800ab96 <USBD_StdEPReq+0x2a>
 800ab8c:	2b40      	cmp	r3, #64	; 0x40
 800ab8e:	d002      	beq.n	800ab96 <USBD_StdEPReq+0x2a>
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00a      	beq.n	800abaa <USBD_StdEPReq+0x3e>
 800ab94:	e135      	b.n	800ae02 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	4798      	blx	r3
 800aba4:	4603      	mov	r3, r0
 800aba6:	73fb      	strb	r3, [r7, #15]
    break;
 800aba8:	e130      	b.n	800ae0c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	785b      	ldrb	r3, [r3, #1]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d03e      	beq.n	800ac30 <USBD_StdEPReq+0xc4>
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	d002      	beq.n	800abbc <USBD_StdEPReq+0x50>
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d077      	beq.n	800acaa <USBD_StdEPReq+0x13e>
 800abba:	e11c      	b.n	800adf6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	d002      	beq.n	800abcc <USBD_StdEPReq+0x60>
 800abc6:	2b03      	cmp	r3, #3
 800abc8:	d015      	beq.n	800abf6 <USBD_StdEPReq+0x8a>
 800abca:	e02b      	b.n	800ac24 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00c      	beq.n	800abec <USBD_StdEPReq+0x80>
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	2b80      	cmp	r3, #128	; 0x80
 800abd6:	d009      	beq.n	800abec <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
 800abda:	4619      	mov	r1, r3
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f001 feec 	bl	800c9ba <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800abe2:	2180      	movs	r1, #128	; 0x80
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f001 fee8 	bl	800c9ba <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800abea:	e020      	b.n	800ac2e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800abec:	6839      	ldr	r1, [r7, #0]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fc38 	bl	800b464 <USBD_CtlError>
        break;
 800abf4:	e01b      	b.n	800ac2e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	885b      	ldrh	r3, [r3, #2]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10e      	bne.n	800ac1c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800abfe:	7bbb      	ldrb	r3, [r7, #14]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00b      	beq.n	800ac1c <USBD_StdEPReq+0xb0>
 800ac04:	7bbb      	ldrb	r3, [r7, #14]
 800ac06:	2b80      	cmp	r3, #128	; 0x80
 800ac08:	d008      	beq.n	800ac1c <USBD_StdEPReq+0xb0>
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	88db      	ldrh	r3, [r3, #6]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d104      	bne.n	800ac1c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac12:	7bbb      	ldrb	r3, [r7, #14]
 800ac14:	4619      	mov	r1, r3
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f001 fecf 	bl	800c9ba <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 fcec 	bl	800b5fa <USBD_CtlSendStatus>

        break;
 800ac22:	e004      	b.n	800ac2e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ac24:	6839      	ldr	r1, [r7, #0]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fc1c 	bl	800b464 <USBD_CtlError>
        break;
 800ac2c:	bf00      	nop
      }
      break;
 800ac2e:	e0e7      	b.n	800ae00 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d002      	beq.n	800ac40 <USBD_StdEPReq+0xd4>
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d015      	beq.n	800ac6a <USBD_StdEPReq+0xfe>
 800ac3e:	e02d      	b.n	800ac9c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac40:	7bbb      	ldrb	r3, [r7, #14]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00c      	beq.n	800ac60 <USBD_StdEPReq+0xf4>
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
 800ac48:	2b80      	cmp	r3, #128	; 0x80
 800ac4a:	d009      	beq.n	800ac60 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f001 feb2 	bl	800c9ba <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac56:	2180      	movs	r1, #128	; 0x80
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f001 feae 	bl	800c9ba <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ac5e:	e023      	b.n	800aca8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 fbfe 	bl	800b464 <USBD_CtlError>
        break;
 800ac68:	e01e      	b.n	800aca8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	885b      	ldrh	r3, [r3, #2]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d119      	bne.n	800aca6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ac72:	7bbb      	ldrb	r3, [r7, #14]
 800ac74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d004      	beq.n	800ac86 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac7c:	7bbb      	ldrb	r3, [r7, #14]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f001 fead 	bl	800c9e0 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 fcb7 	bl	800b5fa <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	4798      	blx	r3
        }
        break;
 800ac9a:	e004      	b.n	800aca6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800ac9c:	6839      	ldr	r1, [r7, #0]
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 fbe0 	bl	800b464 <USBD_CtlError>
        break;
 800aca4:	e000      	b.n	800aca8 <USBD_StdEPReq+0x13c>
        break;
 800aca6:	bf00      	nop
      }
      break;
 800aca8:	e0aa      	b.n	800ae00 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	d002      	beq.n	800acba <USBD_StdEPReq+0x14e>
 800acb4:	2b03      	cmp	r3, #3
 800acb6:	d032      	beq.n	800ad1e <USBD_StdEPReq+0x1b2>
 800acb8:	e097      	b.n	800adea <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acba:	7bbb      	ldrb	r3, [r7, #14]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d007      	beq.n	800acd0 <USBD_StdEPReq+0x164>
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	2b80      	cmp	r3, #128	; 0x80
 800acc4:	d004      	beq.n	800acd0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800acc6:	6839      	ldr	r1, [r7, #0]
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fbcb 	bl	800b464 <USBD_CtlError>
          break;
 800acce:	e091      	b.n	800adf4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	da0b      	bge.n	800acf0 <USBD_StdEPReq+0x184>
 800acd8:	7bbb      	ldrb	r3, [r7, #14]
 800acda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acde:	4613      	mov	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	3310      	adds	r3, #16
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	4413      	add	r3, r2
 800acec:	3304      	adds	r3, #4
 800acee:	e00b      	b.n	800ad08 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800acf0:	7bbb      	ldrb	r3, [r7, #14]
 800acf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acf6:	4613      	mov	r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	4413      	add	r3, r2
 800ad06:	3304      	adds	r3, #4
 800ad08:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	2202      	movs	r2, #2
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fc15 	bl	800b546 <USBD_CtlSendData>
        break;
 800ad1c:	e06a      	b.n	800adf4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ad1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	da11      	bge.n	800ad4a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	f003 020f 	and.w	r2, r3, #15
 800ad2c:	6879      	ldr	r1, [r7, #4]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	440b      	add	r3, r1
 800ad38:	3324      	adds	r3, #36	; 0x24
 800ad3a:	881b      	ldrh	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d117      	bne.n	800ad70 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fb8e 	bl	800b464 <USBD_CtlError>
            break;
 800ad48:	e054      	b.n	800adf4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad4a:	7bbb      	ldrb	r3, [r7, #14]
 800ad4c:	f003 020f 	and.w	r2, r3, #15
 800ad50:	6879      	ldr	r1, [r7, #4]
 800ad52:	4613      	mov	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	440b      	add	r3, r1
 800ad5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad60:	881b      	ldrh	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d104      	bne.n	800ad70 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fb7b 	bl	800b464 <USBD_CtlError>
            break;
 800ad6e:	e041      	b.n	800adf4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	da0b      	bge.n	800ad90 <USBD_StdEPReq+0x224>
 800ad78:	7bbb      	ldrb	r3, [r7, #14]
 800ad7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad7e:	4613      	mov	r3, r2
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	3310      	adds	r3, #16
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	e00b      	b.n	800ada8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ad90:	7bbb      	ldrb	r3, [r7, #14]
 800ad92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad96:	4613      	mov	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	4413      	add	r3, r2
 800ada6:	3304      	adds	r3, #4
 800ada8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800adaa:	7bbb      	ldrb	r3, [r7, #14]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <USBD_StdEPReq+0x24a>
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
 800adb2:	2b80      	cmp	r3, #128	; 0x80
 800adb4:	d103      	bne.n	800adbe <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2200      	movs	r2, #0
 800adba:	601a      	str	r2, [r3, #0]
 800adbc:	e00e      	b.n	800addc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800adbe:	7bbb      	ldrb	r3, [r7, #14]
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f001 fe1f 	bl	800ca06 <USBD_LL_IsStallEP>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d003      	beq.n	800add6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	2201      	movs	r2, #1
 800add2:	601a      	str	r2, [r3, #0]
 800add4:	e002      	b.n	800addc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2200      	movs	r2, #0
 800adda:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2202      	movs	r2, #2
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fbaf 	bl	800b546 <USBD_CtlSendData>
          break;
 800ade8:	e004      	b.n	800adf4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800adea:	6839      	ldr	r1, [r7, #0]
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 fb39 	bl	800b464 <USBD_CtlError>
        break;
 800adf2:	bf00      	nop
      }
      break;
 800adf4:	e004      	b.n	800ae00 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fb33 	bl	800b464 <USBD_CtlError>
      break;
 800adfe:	bf00      	nop
    }
    break;
 800ae00:	e004      	b.n	800ae0c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fb2d 	bl	800b464 <USBD_CtlError>
    break;
 800ae0a:	bf00      	nop
  }

  return ret;
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
	...

0800ae18 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae22:	2300      	movs	r3, #0
 800ae24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae26:	2300      	movs	r3, #0
 800ae28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	885b      	ldrh	r3, [r3, #2]
 800ae32:	0a1b      	lsrs	r3, r3, #8
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	3b01      	subs	r3, #1
 800ae38:	2b06      	cmp	r3, #6
 800ae3a:	f200 8128 	bhi.w	800b08e <USBD_GetDescriptor+0x276>
 800ae3e:	a201      	add	r2, pc, #4	; (adr r2, 800ae44 <USBD_GetDescriptor+0x2c>)
 800ae40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae44:	0800ae61 	.word	0x0800ae61
 800ae48:	0800ae79 	.word	0x0800ae79
 800ae4c:	0800aeb9 	.word	0x0800aeb9
 800ae50:	0800b08f 	.word	0x0800b08f
 800ae54:	0800b08f 	.word	0x0800b08f
 800ae58:	0800b02f 	.word	0x0800b02f
 800ae5c:	0800b05b 	.word	0x0800b05b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	7c12      	ldrb	r2, [r2, #16]
 800ae6c:	f107 0108 	add.w	r1, r7, #8
 800ae70:	4610      	mov	r0, r2
 800ae72:	4798      	blx	r3
 800ae74:	60f8      	str	r0, [r7, #12]
    break;
 800ae76:	e112      	b.n	800b09e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	7c1b      	ldrb	r3, [r3, #16]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10d      	bne.n	800ae9c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae88:	f107 0208 	add.w	r2, r7, #8
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	4798      	blx	r3
 800ae90:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	3301      	adds	r3, #1
 800ae96:	2202      	movs	r2, #2
 800ae98:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ae9a:	e100      	b.n	800b09e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea4:	f107 0208 	add.w	r2, r7, #8
 800aea8:	4610      	mov	r0, r2
 800aeaa:	4798      	blx	r3
 800aeac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	701a      	strb	r2, [r3, #0]
    break;
 800aeb6:	e0f2      	b.n	800b09e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	885b      	ldrh	r3, [r3, #2]
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b05      	cmp	r3, #5
 800aec0:	f200 80ac 	bhi.w	800b01c <USBD_GetDescriptor+0x204>
 800aec4:	a201      	add	r2, pc, #4	; (adr r2, 800aecc <USBD_GetDescriptor+0xb4>)
 800aec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeca:	bf00      	nop
 800aecc:	0800aee5 	.word	0x0800aee5
 800aed0:	0800af19 	.word	0x0800af19
 800aed4:	0800af4d 	.word	0x0800af4d
 800aed8:	0800af81 	.word	0x0800af81
 800aedc:	0800afb5 	.word	0x0800afb5
 800aee0:	0800afe9 	.word	0x0800afe9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00b      	beq.n	800af08 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	7c12      	ldrb	r2, [r2, #16]
 800aefc:	f107 0108 	add.w	r1, r7, #8
 800af00:	4610      	mov	r0, r2
 800af02:	4798      	blx	r3
 800af04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af06:	e091      	b.n	800b02c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 faaa 	bl	800b464 <USBD_CtlError>
        err++;
 800af10:	7afb      	ldrb	r3, [r7, #11]
 800af12:	3301      	adds	r3, #1
 800af14:	72fb      	strb	r3, [r7, #11]
      break;
 800af16:	e089      	b.n	800b02c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00b      	beq.n	800af3c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	7c12      	ldrb	r2, [r2, #16]
 800af30:	f107 0108 	add.w	r1, r7, #8
 800af34:	4610      	mov	r0, r2
 800af36:	4798      	blx	r3
 800af38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af3a:	e077      	b.n	800b02c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fa90 	bl	800b464 <USBD_CtlError>
        err++;
 800af44:	7afb      	ldrb	r3, [r7, #11]
 800af46:	3301      	adds	r3, #1
 800af48:	72fb      	strb	r3, [r7, #11]
      break;
 800af4a:	e06f      	b.n	800b02c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00b      	beq.n	800af70 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	7c12      	ldrb	r2, [r2, #16]
 800af64:	f107 0108 	add.w	r1, r7, #8
 800af68:	4610      	mov	r0, r2
 800af6a:	4798      	blx	r3
 800af6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af6e:	e05d      	b.n	800b02c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fa76 	bl	800b464 <USBD_CtlError>
        err++;
 800af78:	7afb      	ldrb	r3, [r7, #11]
 800af7a:	3301      	adds	r3, #1
 800af7c:	72fb      	strb	r3, [r7, #11]
      break;
 800af7e:	e055      	b.n	800b02c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00b      	beq.n	800afa4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	7c12      	ldrb	r2, [r2, #16]
 800af98:	f107 0108 	add.w	r1, r7, #8
 800af9c:	4610      	mov	r0, r2
 800af9e:	4798      	blx	r3
 800afa0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afa2:	e043      	b.n	800b02c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fa5c 	bl	800b464 <USBD_CtlError>
        err++;
 800afac:	7afb      	ldrb	r3, [r7, #11]
 800afae:	3301      	adds	r3, #1
 800afb0:	72fb      	strb	r3, [r7, #11]
      break;
 800afb2:	e03b      	b.n	800b02c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afba:	695b      	ldr	r3, [r3, #20]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00b      	beq.n	800afd8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	7c12      	ldrb	r2, [r2, #16]
 800afcc:	f107 0108 	add.w	r1, r7, #8
 800afd0:	4610      	mov	r0, r2
 800afd2:	4798      	blx	r3
 800afd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afd6:	e029      	b.n	800b02c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800afd8:	6839      	ldr	r1, [r7, #0]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fa42 	bl	800b464 <USBD_CtlError>
        err++;
 800afe0:	7afb      	ldrb	r3, [r7, #11]
 800afe2:	3301      	adds	r3, #1
 800afe4:	72fb      	strb	r3, [r7, #11]
      break;
 800afe6:	e021      	b.n	800b02c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afee:	699b      	ldr	r3, [r3, #24]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00b      	beq.n	800b00c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	7c12      	ldrb	r2, [r2, #16]
 800b000:	f107 0108 	add.w	r1, r7, #8
 800b004:	4610      	mov	r0, r2
 800b006:	4798      	blx	r3
 800b008:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b00a:	e00f      	b.n	800b02c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b00c:	6839      	ldr	r1, [r7, #0]
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fa28 	bl	800b464 <USBD_CtlError>
        err++;
 800b014:	7afb      	ldrb	r3, [r7, #11]
 800b016:	3301      	adds	r3, #1
 800b018:	72fb      	strb	r3, [r7, #11]
      break;
 800b01a:	e007      	b.n	800b02c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fa20 	bl	800b464 <USBD_CtlError>
      err++;
 800b024:	7afb      	ldrb	r3, [r7, #11]
 800b026:	3301      	adds	r3, #1
 800b028:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b02a:	bf00      	nop
    }
    break;
 800b02c:	e037      	b.n	800b09e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	7c1b      	ldrb	r3, [r3, #16]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d109      	bne.n	800b04a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b03e:	f107 0208 	add.w	r2, r7, #8
 800b042:	4610      	mov	r0, r2
 800b044:	4798      	blx	r3
 800b046:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b048:	e029      	b.n	800b09e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fa09 	bl	800b464 <USBD_CtlError>
      err++;
 800b052:	7afb      	ldrb	r3, [r7, #11]
 800b054:	3301      	adds	r3, #1
 800b056:	72fb      	strb	r3, [r7, #11]
    break;
 800b058:	e021      	b.n	800b09e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	7c1b      	ldrb	r3, [r3, #16]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10d      	bne.n	800b07e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b06a:	f107 0208 	add.w	r2, r7, #8
 800b06e:	4610      	mov	r0, r2
 800b070:	4798      	blx	r3
 800b072:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3301      	adds	r3, #1
 800b078:	2207      	movs	r2, #7
 800b07a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b07c:	e00f      	b.n	800b09e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 f9ef 	bl	800b464 <USBD_CtlError>
      err++;
 800b086:	7afb      	ldrb	r3, [r7, #11]
 800b088:	3301      	adds	r3, #1
 800b08a:	72fb      	strb	r3, [r7, #11]
    break;
 800b08c:	e007      	b.n	800b09e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 f9e7 	bl	800b464 <USBD_CtlError>
    err++;
 800b096:	7afb      	ldrb	r3, [r7, #11]
 800b098:	3301      	adds	r3, #1
 800b09a:	72fb      	strb	r3, [r7, #11]
    break;
 800b09c:	bf00      	nop
  }

  if (err != 0U)
 800b09e:	7afb      	ldrb	r3, [r7, #11]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d11e      	bne.n	800b0e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	88db      	ldrh	r3, [r3, #6]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d016      	beq.n	800b0da <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800b0ac:	893b      	ldrh	r3, [r7, #8]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00e      	beq.n	800b0d0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	88da      	ldrh	r2, [r3, #6]
 800b0b6:	893b      	ldrh	r3, [r7, #8]
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	bf28      	it	cs
 800b0bc:	4613      	movcs	r3, r2
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b0c2:	893b      	ldrh	r3, [r7, #8]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	68f9      	ldr	r1, [r7, #12]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 fa3c 	bl	800b546 <USBD_CtlSendData>
 800b0ce:	e009      	b.n	800b0e4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f9c6 	bl	800b464 <USBD_CtlError>
 800b0d8:	e004      	b.n	800b0e4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 fa8d 	bl	800b5fa <USBD_CtlSendStatus>
 800b0e0:	e000      	b.n	800b0e4 <USBD_GetDescriptor+0x2cc>
    return;
 800b0e2:	bf00      	nop
    }
  }
}
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop

0800b0ec <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	889b      	ldrh	r3, [r3, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d130      	bne.n	800b160 <USBD_SetAddress+0x74>
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	88db      	ldrh	r3, [r3, #6]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d12c      	bne.n	800b160 <USBD_SetAddress+0x74>
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	885b      	ldrh	r3, [r3, #2]
 800b10a:	2b7f      	cmp	r3, #127	; 0x7f
 800b10c:	d828      	bhi.n	800b160 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	885b      	ldrh	r3, [r3, #2]
 800b112:	b2db      	uxtb	r3, r3
 800b114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b118:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b120:	2b03      	cmp	r3, #3
 800b122:	d104      	bne.n	800b12e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f99c 	bl	800b464 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b12c:	e01c      	b.n	800b168 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	7bfa      	ldrb	r2, [r7, #15]
 800b132:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b136:	7bfb      	ldrb	r3, [r7, #15]
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f001 fc8f 	bl	800ca5e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fa5a 	bl	800b5fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b146:	7bfb      	ldrb	r3, [r7, #15]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d004      	beq.n	800b156 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2202      	movs	r2, #2
 800b150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b154:	e008      	b.n	800b168 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2201      	movs	r2, #1
 800b15a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b15e:	e003      	b.n	800b168 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f97e 	bl	800b464 <USBD_CtlError>
  }
}
 800b168:	bf00      	nop
 800b16a:	3710      	adds	r7, #16
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	885b      	ldrh	r3, [r3, #2]
 800b182:	b2da      	uxtb	r2, r3
 800b184:	4b4b      	ldr	r3, [pc, #300]	; (800b2b4 <USBD_SetConfig+0x144>)
 800b186:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b188:	4b4a      	ldr	r3, [pc, #296]	; (800b2b4 <USBD_SetConfig+0x144>)
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d905      	bls.n	800b19c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f966 	bl	800b464 <USBD_CtlError>
    return USBD_FAIL;
 800b198:	2303      	movs	r3, #3
 800b19a:	e087      	b.n	800b2ac <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d002      	beq.n	800b1ac <USBD_SetConfig+0x3c>
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	d025      	beq.n	800b1f6 <USBD_SetConfig+0x86>
 800b1aa:	e071      	b.n	800b290 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b1ac:	4b41      	ldr	r3, [pc, #260]	; (800b2b4 <USBD_SetConfig+0x144>)
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d01c      	beq.n	800b1ee <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b1b4:	4b3f      	ldr	r3, [pc, #252]	; (800b2b4 <USBD_SetConfig+0x144>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b1be:	4b3d      	ldr	r3, [pc, #244]	; (800b2b4 <USBD_SetConfig+0x144>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f7ff f9a7 	bl	800a518 <USBD_SetClassConfig>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d004      	beq.n	800b1de <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 f944 	bl	800b464 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b1dc:	e065      	b.n	800b2aa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fa0b 	bl	800b5fa <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2203      	movs	r2, #3
 800b1e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b1ec:	e05d      	b.n	800b2aa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fa03 	bl	800b5fa <USBD_CtlSendStatus>
    break;
 800b1f4:	e059      	b.n	800b2aa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b1f6:	4b2f      	ldr	r3, [pc, #188]	; (800b2b4 <USBD_SetConfig+0x144>)
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d112      	bne.n	800b224 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2202      	movs	r2, #2
 800b202:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b206:	4b2b      	ldr	r3, [pc, #172]	; (800b2b4 <USBD_SetConfig+0x144>)
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	461a      	mov	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b210:	4b28      	ldr	r3, [pc, #160]	; (800b2b4 <USBD_SetConfig+0x144>)
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	4619      	mov	r1, r3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f7ff f99a 	bl	800a550 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f9ec 	bl	800b5fa <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b222:	e042      	b.n	800b2aa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b224:	4b23      	ldr	r3, [pc, #140]	; (800b2b4 <USBD_SetConfig+0x144>)
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	461a      	mov	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d02a      	beq.n	800b288 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	b2db      	uxtb	r3, r3
 800b238:	4619      	mov	r1, r3
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f7ff f988 	bl	800a550 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b240:	4b1c      	ldr	r3, [pc, #112]	; (800b2b4 <USBD_SetConfig+0x144>)
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	461a      	mov	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b24a:	4b1a      	ldr	r3, [pc, #104]	; (800b2b4 <USBD_SetConfig+0x144>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7ff f961 	bl	800a518 <USBD_SetClassConfig>
 800b256:	4603      	mov	r3, r0
 800b258:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00f      	beq.n	800b280 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f8fe 	bl	800b464 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	4619      	mov	r1, r3
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff f96d 	bl	800a550 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2202      	movs	r2, #2
 800b27a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b27e:	e014      	b.n	800b2aa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 f9ba 	bl	800b5fa <USBD_CtlSendStatus>
    break;
 800b286:	e010      	b.n	800b2aa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 f9b6 	bl	800b5fa <USBD_CtlSendStatus>
    break;
 800b28e:	e00c      	b.n	800b2aa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b290:	6839      	ldr	r1, [r7, #0]
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f8e6 	bl	800b464 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b298:	4b06      	ldr	r3, [pc, #24]	; (800b2b4 <USBD_SetConfig+0x144>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	4619      	mov	r1, r3
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7ff f956 	bl	800a550 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a8:	bf00      	nop
  }

  return ret;
 800b2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	20001bd2 	.word	0x20001bd2

0800b2b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	88db      	ldrh	r3, [r3, #6]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d004      	beq.n	800b2d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f8c9 	bl	800b464 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b2d2:	e021      	b.n	800b318 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	db17      	blt.n	800b30e <USBD_GetConfig+0x56>
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	dd02      	ble.n	800b2e8 <USBD_GetConfig+0x30>
 800b2e2:	2b03      	cmp	r3, #3
 800b2e4:	d00b      	beq.n	800b2fe <USBD_GetConfig+0x46>
 800b2e6:	e012      	b.n	800b30e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f925 	bl	800b546 <USBD_CtlSendData>
      break;
 800b2fc:	e00c      	b.n	800b318 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	3304      	adds	r3, #4
 800b302:	2201      	movs	r2, #1
 800b304:	4619      	mov	r1, r3
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f91d 	bl	800b546 <USBD_CtlSendData>
      break;
 800b30c:	e004      	b.n	800b318 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f8a7 	bl	800b464 <USBD_CtlError>
      break;
 800b316:	bf00      	nop
}
 800b318:	bf00      	nop
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b330:	3b01      	subs	r3, #1
 800b332:	2b02      	cmp	r3, #2
 800b334:	d81e      	bhi.n	800b374 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	88db      	ldrh	r3, [r3, #6]
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d004      	beq.n	800b348 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b33e:	6839      	ldr	r1, [r7, #0]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f88f 	bl	800b464 <USBD_CtlError>
      break;
 800b346:	e01a      	b.n	800b37e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b354:	2b00      	cmp	r3, #0
 800b356:	d005      	beq.n	800b364 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	f043 0202 	orr.w	r2, r3, #2
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	330c      	adds	r3, #12
 800b368:	2202      	movs	r2, #2
 800b36a:	4619      	mov	r1, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f8ea 	bl	800b546 <USBD_CtlSendData>
    break;
 800b372:	e004      	b.n	800b37e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f874 	bl	800b464 <USBD_CtlError>
    break;
 800b37c:	bf00      	nop
  }
}
 800b37e:	bf00      	nop
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b082      	sub	sp, #8
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	885b      	ldrh	r3, [r3, #2]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d106      	bne.n	800b3a6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 f92a 	bl	800b5fa <USBD_CtlSendStatus>
  }
}
 800b3a6:	bf00      	nop
 800b3a8:	3708      	adds	r7, #8
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b082      	sub	sp, #8
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d80b      	bhi.n	800b3dc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	885b      	ldrh	r3, [r3, #2]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d10c      	bne.n	800b3e6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f910 	bl	800b5fa <USBD_CtlSendStatus>
      }
      break;
 800b3da:	e004      	b.n	800b3e6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b3dc:	6839      	ldr	r1, [r7, #0]
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f840 	bl	800b464 <USBD_CtlError>
      break;
 800b3e4:	e000      	b.n	800b3e8 <USBD_ClrFeature+0x3a>
      break;
 800b3e6:	bf00      	nop
  }
}
 800b3e8:	bf00      	nop
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	781a      	ldrb	r2, [r3, #0]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3301      	adds	r3, #1
 800b40a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	781a      	ldrb	r2, [r3, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	3301      	adds	r3, #1
 800b418:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f7ff fad3 	bl	800a9c6 <SWAPBYTE>
 800b420:	4603      	mov	r3, r0
 800b422:	461a      	mov	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	3301      	adds	r3, #1
 800b42c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	3301      	adds	r3, #1
 800b432:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f7ff fac6 	bl	800a9c6 <SWAPBYTE>
 800b43a:	4603      	mov	r3, r0
 800b43c:	461a      	mov	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	3301      	adds	r3, #1
 800b446:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3301      	adds	r3, #1
 800b44c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f7ff fab9 	bl	800a9c6 <SWAPBYTE>
 800b454:	4603      	mov	r3, r0
 800b456:	461a      	mov	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	80da      	strh	r2, [r3, #6]
}
 800b45c:	bf00      	nop
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b46e:	2180      	movs	r1, #128	; 0x80
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f001 faa2 	bl	800c9ba <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b476:	2100      	movs	r1, #0
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f001 fa9e 	bl	800c9ba <USBD_LL_StallEP>
}
 800b47e:	bf00      	nop
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b086      	sub	sp, #24
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	60f8      	str	r0, [r7, #12]
 800b48e:	60b9      	str	r1, [r7, #8]
 800b490:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b492:	2300      	movs	r3, #0
 800b494:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d036      	beq.n	800b50a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b4a0:	6938      	ldr	r0, [r7, #16]
 800b4a2:	f000 f836 	bl	800b512 <USBD_GetLen>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	005b      	lsls	r3, r3, #1
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b4b4:	7dfb      	ldrb	r3, [r7, #23]
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	7812      	ldrb	r2, [r2, #0]
 800b4be:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4c0:	7dfb      	ldrb	r3, [r7, #23]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b4c6:	7dfb      	ldrb	r3, [r7, #23]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	2203      	movs	r2, #3
 800b4ce:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4d0:	7dfb      	ldrb	r3, [r7, #23]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b4d6:	e013      	b.n	800b500 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b4d8:	7dfb      	ldrb	r3, [r7, #23]
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	4413      	add	r3, r2
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	7812      	ldrb	r2, [r2, #0]
 800b4e2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	613b      	str	r3, [r7, #16]
    idx++;
 800b4ea:	7dfb      	ldrb	r3, [r7, #23]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b4f0:	7dfb      	ldrb	r3, [r7, #23]
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	701a      	strb	r2, [r3, #0]
    idx++;
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1e7      	bne.n	800b4d8 <USBD_GetString+0x52>
 800b508:	e000      	b.n	800b50c <USBD_GetString+0x86>
    return;
 800b50a:	bf00      	nop
  }
}
 800b50c:	3718      	adds	r7, #24
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b512:	b480      	push	{r7}
 800b514:	b085      	sub	sp, #20
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b51a:	2300      	movs	r3, #0
 800b51c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b522:	e005      	b.n	800b530 <USBD_GetLen+0x1e>
  {
    len++;
 800b524:	7bfb      	ldrb	r3, [r7, #15]
 800b526:	3301      	adds	r3, #1
 800b528:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	3301      	adds	r3, #1
 800b52e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1f5      	bne.n	800b524 <USBD_GetLen+0x12>
  }

  return len;
 800b538:	7bfb      	ldrb	r3, [r7, #15]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr

0800b546 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b084      	sub	sp, #16
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	60f8      	str	r0, [r7, #12]
 800b54e:	60b9      	str	r1, [r7, #8]
 800b550:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2202      	movs	r2, #2
 800b556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	2100      	movs	r1, #0
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f001 fa89 	bl	800ca84 <USBD_LL_Transmit>

  return USBD_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	2100      	movs	r1, #0
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f001 fa78 	bl	800ca84 <USBD_LL_Transmit>

  return USBD_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b084      	sub	sp, #16
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	60f8      	str	r0, [r7, #12]
 800b5a6:	60b9      	str	r1, [r7, #8]
 800b5a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2203      	movs	r2, #3
 800b5ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f001 fa70 	bl	800caae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68ba      	ldr	r2, [r7, #8]
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f001 fa5f 	bl	800caae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b082      	sub	sp, #8
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2204      	movs	r2, #4
 800b606:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b60a:	2300      	movs	r3, #0
 800b60c:	2200      	movs	r2, #0
 800b60e:	2100      	movs	r1, #0
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f001 fa37 	bl	800ca84 <USBD_LL_Transmit>

  return USBD_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3708      	adds	r7, #8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2205      	movs	r2, #5
 800b62c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b630:	2300      	movs	r3, #0
 800b632:	2200      	movs	r2, #0
 800b634:	2100      	movs	r1, #0
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f001 fa39 	bl	800caae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <arm_fir_decimate_init_q15>:
  uint16_t numTaps,
  uint8_t M,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b086      	sub	sp, #24
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	60f8      	str	r0, [r7, #12]
 800b64e:	607b      	str	r3, [r7, #4]
 800b650:	460b      	mov	r3, r1
 800b652:	817b      	strh	r3, [r7, #10]
 800b654:	4613      	mov	r3, r2
 800b656:	727b      	strb	r3, [r7, #9]

  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 800b658:	7a7a      	ldrb	r2, [r7, #9]
 800b65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b660:	fb02 f201 	mul.w	r2, r2, r1
 800b664:	1a9b      	subs	r3, r3, r2
 800b666:	2b00      	cmp	r3, #0
 800b668:	d002      	beq.n	800b670 <arm_fir_decimate_init_q15+0x2a>
  {
    /* Set status as ARM_MATH_LENGTH_ERROR */
    status = ARM_MATH_LENGTH_ERROR;
 800b66a:	23fe      	movs	r3, #254	; 0xfe
 800b66c:	75fb      	strb	r3, [r7, #23]
 800b66e:	e019      	b.n	800b6a4 <arm_fir_decimate_init_q15+0x5e>
  }
  else
  {
    /* Assign filter taps */
    S->numTaps = numTaps;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	897a      	ldrh	r2, [r7, #10]
 800b674:	805a      	strh	r2, [r3, #2]

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	605a      	str	r2, [r3, #4]

    /* Clear the state buffer.  The size of buffer is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(q15_t));
 800b67c:	897a      	ldrh	r2, [r7, #10]
 800b67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b680:	4413      	add	r3, r2
 800b682:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b686:	3b01      	subs	r3, #1
 800b688:	005b      	lsls	r3, r3, #1
 800b68a:	461a      	mov	r2, r3
 800b68c:	2100      	movs	r1, #0
 800b68e:	6a38      	ldr	r0, [r7, #32]
 800b690:	f003 fa6b 	bl	800eb6a <memset>

    /* Assign state pointer */
    S->pState = pState;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6a3a      	ldr	r2, [r7, #32]
 800b698:	609a      	str	r2, [r3, #8]

    /* Assign Decimation factor */
    S->M = M;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	7a7a      	ldrb	r2, [r7, #9]
 800b69e:	701a      	strb	r2, [r3, #0]

    status = ARM_MATH_SUCCESS;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 800b6a4:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3718      	adds	r7, #24
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <arm_fir_decimate_q15>:
void arm_fir_decimate_q15(
  const arm_fir_decimate_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 800b6b0:	b490      	push	{r4, r7}
 800b6b2:	b0d8      	sub	sp, #352	; 0x160
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	f107 040c 	add.w	r4, r7, #12
 800b6ba:	6020      	str	r0, [r4, #0]
 800b6bc:	f107 0008 	add.w	r0, r7, #8
 800b6c0:	6001      	str	r1, [r0, #0]
 800b6c2:	1d39      	adds	r1, r7, #4
 800b6c4:	600a      	str	r2, [r1, #0]
 800b6c6:	463a      	mov	r2, r7
 800b6c8:	6013      	str	r3, [r2, #0]
  q15_t *pState = S->pState;                     /* State pointer */
 800b6ca:	f107 030c 	add.w	r3, r7, #12
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 800b6d4:	f107 030c 	add.w	r3, r7, #12
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  q31_t x0, x1, c0, c1;                          /* Temporary variables to hold state and coefficient values */
  q63_t sum0;                                    /* Accumulators */
  q63_t acc0, acc1;
  q15_t *px0, *px1;
  uint32_t blkCntN3;
  uint32_t numTaps = S->numTaps;                 /* Number of taps */
 800b6e0:	f107 030c 	add.w	r3, r7, #12
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	885b      	ldrh	r3, [r3, #2]
 800b6e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  uint32_t i, blkCnt, tapCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 800b6ec:	f107 030c 	add.w	r3, r7, #12
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	463b      	mov	r3, r7
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c


  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = S->pState + (numTaps - 1U);
 800b702:	f107 030c 	add.w	r3, r7, #12
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689a      	ldr	r2, [r3, #8]
 800b70a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b70e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b712:	3b01      	subs	r3, #1
 800b714:	005b      	lsls	r3, r3, #1
 800b716:	4413      	add	r3, r2
 800b718:	66bb      	str	r3, [r7, #104]	; 0x68


  /* Total number of output samples to be computed */
  blkCnt = outBlockSize / 2;
 800b71a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b71e:	085b      	lsrs	r3, r3, #1
 800b720:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  blkCntN3 = outBlockSize - (2 * blkCnt);
 800b724:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800b728:	005b      	lsls	r3, r3, #1
 800b72a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144


  while (blkCnt > 0U)
 800b734:	e20c      	b.n	800bb50 <arm_fir_decimate_q15+0x4a0>
  {
    /* Copy decimation factor number of new input samples into the state buffer */
    i = 2 * S->M;
 800b736:	f107 030c 	add.w	r3, r7, #12
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    do
    {
      *pStateCurnt++ = *pSrc++;
 800b744:	f107 0308 	add.w	r3, r7, #8
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	f107 0308 	add.w	r3, r7, #8
 800b74e:	1c91      	adds	r1, r2, #2
 800b750:	6019      	str	r1, [r3, #0]
 800b752:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b754:	1c99      	adds	r1, r3, #2
 800b756:	66b9      	str	r1, [r7, #104]	; 0x68
 800b758:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b75c:	801a      	strh	r2, [r3, #0]

    } while (--i);
 800b75e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b762:	3b01      	subs	r3, #1
 800b764:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800b768:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1e9      	bne.n	800b744 <arm_fir_decimate_q15+0x94>

    /* Set accumulator to zero */
    acc0 = 0;
 800b770:	f04f 0300 	mov.w	r3, #0
 800b774:	f04f 0400 	mov.w	r4, #0
 800b778:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800b77c:	e9c2 3400 	strd	r3, r4, [r2]
    acc1 = 0;
 800b780:	f04f 0300 	mov.w	r3, #0
 800b784:	f04f 0400 	mov.w	r4, #0
 800b788:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b78c:	e9c2 3400 	strd	r3, r4, [r2]

    /* Initialize state pointer */
    px0 = pState;
 800b790:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b792:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b796:	601a      	str	r2, [r3, #0]

    px1 = pState + S->M;
 800b798:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b79a:	f107 030c 	add.w	r3, r7, #12
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	005b      	lsls	r3, r3, #1
 800b7a4:	441a      	add	r2, r3
 800b7a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b7aa:	601a      	str	r2, [r3, #0]


    /* Initialize coeff pointer */
    pb = pCoeffs;
 800b7ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b7b0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800b7b4:	601a      	str	r2, [r3, #0]

    /* Loop unrolling.  Process 4 taps at a time. */
    tapCnt = numTaps >> 2;
 800b7b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b7ba:	089b      	lsrs	r3, r3, #2
 800b7bc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Loop over the number of taps.  Unroll by a factor of 4.
     ** Repeat until we've computed numTaps-4 coefficients. */
    while (tapCnt > 0U)
 800b7c0:	e0ec      	b.n	800b99c <arm_fir_decimate_q15+0x2ec>
    {
      /* Read the Read b[numTaps-1] and b[numTaps-2]  coefficients */
      c0 = *__SIMD32(pb)++;
 800b7c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b7c6:	6813      	ldr	r3, [r2, #0]
 800b7c8:	1d19      	adds	r1, r3, #4
 800b7ca:	6011      	str	r1, [r2, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

      /* Read x[n-numTaps-1] and x[n-numTaps-2]sample */
      x0 = *__SIMD32(px0)++;
 800b7d2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800b7d6:	6813      	ldr	r3, [r2, #0]
 800b7d8:	1d19      	adds	r1, r3, #4
 800b7da:	6011      	str	r1, [r2, #0]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      x1 = *__SIMD32(px1)++;
 800b7e2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b7e6:	6813      	ldr	r3, [r2, #0]
 800b7e8:	1d19      	adds	r1, r3, #4
 800b7ea:	6011      	str	r1, [r2, #0]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

      /* Perform the multiply-accumulate */
      acc0 = __SMLALD(x0, c0, acc0);
 800b7f2:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b7f6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b7fa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800b7fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b802:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800b806:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800b80a:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;
 800b80e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b812:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800b816:	e9c2 3400 	strd	r3, r4, [r2]

#ifndef __ARMEB__   /* Little endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800b81a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800b82a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800b82e:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800b832:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b836:	600a      	str	r2, [r1, #0]
 800b838:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b83c:	6053      	str	r3, [r2, #4]
#else               /* Big endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[1]), "=r" (llr.w32[0]): "r" (op1), "r" (op2) , "0" (llr.w32[1]), "1" (llr.w32[0]) );
#endif

  return(llr.w64);
 800b83e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b842:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b846:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800b84a:	e9c2 3400 	strd	r3, r4, [r2]

      acc1 = __SMLALD(x1, c0, acc1);
 800b84e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800b852:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b856:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b85a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b85e:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800b862:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800b866:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
  llr.w64 = acc;
 800b86a:	f107 0220 	add.w	r2, r7, #32
 800b86e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800b872:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800b876:	f107 0320 	add.w	r3, r7, #32
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	f107 0320 	add.w	r3, r7, #32
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800b886:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800b88a:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800b88e:	f107 0120 	add.w	r1, r7, #32
 800b892:	600a      	str	r2, [r1, #0]
 800b894:	f107 0220 	add.w	r2, r7, #32
 800b898:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800b89a:	f107 0320 	add.w	r3, r7, #32
 800b89e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b8a2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b8a6:	e9c2 3400 	strd	r3, r4, [r2]

      /* Read the b[numTaps-3] and b[numTaps-4] coefficient */
      c0 = *__SIMD32(pb)++;
 800b8aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b8ae:	6813      	ldr	r3, [r2, #0]
 800b8b0:	1d19      	adds	r1, r3, #4
 800b8b2:	6011      	str	r1, [r2, #0]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

      /* Read x[n-numTaps-2] and x[n-numTaps-3] sample */
      x0 = *__SIMD32(px0)++;
 800b8ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800b8be:	6813      	ldr	r3, [r2, #0]
 800b8c0:	1d19      	adds	r1, r3, #4
 800b8c2:	6011      	str	r1, [r2, #0]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      x1 = *__SIMD32(px1)++;
 800b8ca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b8ce:	6813      	ldr	r3, [r2, #0]
 800b8d0:	1d19      	adds	r1, r3, #4
 800b8d2:	6011      	str	r1, [r2, #0]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

      /* Perform the multiply-accumulate */
      acc0 = __SMLALD(x0, c0, acc0);
 800b8da:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b8de:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b8e2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800b8e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b8ea:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800b8ee:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800b8f2:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
  llr.w64 = acc;
 800b8f6:	f107 0218 	add.w	r2, r7, #24
 800b8fa:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800b8fe:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800b902:	f107 0318 	add.w	r3, r7, #24
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	f107 0318 	add.w	r3, r7, #24
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800b912:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800b916:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800b91a:	f107 0118 	add.w	r1, r7, #24
 800b91e:	600a      	str	r2, [r1, #0]
 800b920:	f107 0218 	add.w	r2, r7, #24
 800b924:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800b926:	f107 0318 	add.w	r3, r7, #24
 800b92a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b92e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800b932:	e9c2 3400 	strd	r3, r4, [r2]

      acc1 = __SMLALD(x1, c0, acc1);
 800b936:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800b93a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b93e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b942:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b946:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800b94a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800b94e:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
  llr.w64 = acc;
 800b952:	f107 0210 	add.w	r2, r7, #16
 800b956:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800b95a:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800b95e:	f107 0310 	add.w	r3, r7, #16
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	f107 0310 	add.w	r3, r7, #16
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800b96e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800b972:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800b976:	f107 0110 	add.w	r1, r7, #16
 800b97a:	600a      	str	r2, [r1, #0]
 800b97c:	f107 0210 	add.w	r2, r7, #16
 800b980:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800b982:	f107 0310 	add.w	r3, r7, #16
 800b986:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b98a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b98e:	e9c2 3400 	strd	r3, r4, [r2]

      /* Decrement the loop counter */
      tapCnt--;
 800b992:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b996:	3b01      	subs	r3, #1
 800b998:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    while (tapCnt > 0U)
 800b99c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f47f af0e 	bne.w	800b7c2 <arm_fir_decimate_q15+0x112>
    }

    /* If the filter length is not a multiple of 4, compute the remaining filter taps */
    tapCnt = numTaps % 0x4U;
 800b9a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b9aa:	f003 0303 	and.w	r3, r3, #3
 800b9ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    while (tapCnt > 0U)
 800b9b2:	e081      	b.n	800bab8 <arm_fir_decimate_q15+0x408>
    {
      /* Read coefficients */
      c0 = *pb++;
 800b9b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	1c99      	adds	r1, r3, #2
 800b9bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b9c0:	6011      	str	r1, [r2, #0]
 800b9c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

      /* Fetch 1 state variable */
      x0 = *px0++;
 800b9ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	1c99      	adds	r1, r3, #2
 800b9d2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800b9d6:	6011      	str	r1, [r2, #0]
 800b9d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      x1 = *px1++;
 800b9e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	1c99      	adds	r1, r3, #2
 800b9e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b9ec:	6011      	str	r1, [r2, #0]
 800b9ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

      /* Perform the multiply-accumulate */
      acc0 = __SMLALD(x0, c0, acc0);
 800b9f6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b9fa:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b9fe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800ba02:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba06:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800ba0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ba0e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
  llr.w64 = acc;
 800ba12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ba16:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800ba1a:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800ba1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800ba2e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800ba32:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800ba36:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ba3a:	600a      	str	r2, [r1, #0]
 800ba3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ba40:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800ba42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ba46:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba4a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800ba4e:	e9c2 3400 	strd	r3, r4, [r2]
      acc1 = __SMLALD(x1, c0, acc1);
 800ba52:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800ba56:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800ba5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ba5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba62:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 800ba66:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800ba6a:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
  llr.w64 = acc;
 800ba6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ba72:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800ba76:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800ba7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800ba8a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800ba8e:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800ba92:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800ba96:	600a      	str	r2, [r1, #0]
 800ba98:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ba9c:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800ba9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800baa2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800baa6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800baaa:	e9c2 3400 	strd	r3, r4, [r2]

      /* Decrement the loop counter */
      tapCnt--;
 800baae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bab2:	3b01      	subs	r3, #1
 800bab4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    while (tapCnt > 0U)
 800bab8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800babc:	2b00      	cmp	r3, #0
 800babe:	f47f af79 	bne.w	800b9b4 <arm_fir_decimate_q15+0x304>
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M * 2;
 800bac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bac4:	f107 020c 	add.w	r2, r7, #12
 800bac8:	6812      	ldr	r2, [r2, #0]
 800baca:	7812      	ldrb	r2, [r2, #0]
 800bacc:	0092      	lsls	r2, r2, #2
 800bace:	4413      	add	r3, r2
 800bad0:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Store filter output, smlad returns the values in 2.14 format */
    /* so downsacle by 15 to get output in 1.15 */
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 800bad2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800bad6:	e9d3 1200 	ldrd	r1, r2, [r3]
 800bada:	f04f 0300 	mov.w	r3, #0
 800bade:	f04f 0400 	mov.w	r4, #0
 800bae2:	0bcb      	lsrs	r3, r1, #15
 800bae4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800bae8:	13d4      	asrs	r4, r2, #15
 800baea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800baee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baf2:	f303 030f 	ssat	r3, #16, r3
 800baf6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800bafa:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800bafe:	1d3b      	adds	r3, r7, #4
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	1d3a      	adds	r2, r7, #4
 800bb04:	1c99      	adds	r1, r3, #2
 800bb06:	6011      	str	r1, [r2, #0]
 800bb08:	b202      	sxth	r2, r0
 800bb0a:	801a      	strh	r2, [r3, #0]
    *pDst++ = (q15_t) (__SSAT((acc1 >> 15), 16));
 800bb0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bb10:	e9d3 1200 	ldrd	r1, r2, [r3]
 800bb14:	f04f 0300 	mov.w	r3, #0
 800bb18:	f04f 0400 	mov.w	r4, #0
 800bb1c:	0bcb      	lsrs	r3, r1, #15
 800bb1e:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800bb22:	13d4      	asrs	r4, r2, #15
 800bb24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800bb28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb2c:	f303 030f 	ssat	r3, #16, r3
 800bb30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800bb34:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800bb38:	1d3b      	adds	r3, r7, #4
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	1d3a      	adds	r2, r7, #4
 800bb3e:	1c99      	adds	r1, r3, #2
 800bb40:	6011      	str	r1, [r2, #0]
 800bb42:	b202      	sxth	r2, r0
 800bb44:	801a      	strh	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 800bb46:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  while (blkCnt > 0U)
 800bb50:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f47f adee 	bne.w	800b736 <arm_fir_decimate_q15+0x86>
  }



  while (blkCntN3 > 0U)
 800bb5a:	e12c      	b.n	800bdb6 <arm_fir_decimate_q15+0x706>
  {
    /* Copy decimation factor number of new input samples into the state buffer */
    i = S->M;
 800bb5c:	f107 030c 	add.w	r3, r7, #12
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    do
    {
      *pStateCurnt++ = *pSrc++;
 800bb68:	f107 0308 	add.w	r3, r7, #8
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	f107 0308 	add.w	r3, r7, #8
 800bb72:	1c91      	adds	r1, r2, #2
 800bb74:	6019      	str	r1, [r3, #0]
 800bb76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb78:	1c99      	adds	r1, r3, #2
 800bb7a:	66b9      	str	r1, [r7, #104]	; 0x68
 800bb7c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800bb80:	801a      	strh	r2, [r3, #0]

    } while (--i);
 800bb82:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bb86:	3b01      	subs	r3, #1
 800bb88:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800bb8c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1e9      	bne.n	800bb68 <arm_fir_decimate_q15+0x4b8>

    /*Set sum to zero */
    sum0 = 0;
 800bb94:	f04f 0300 	mov.w	r3, #0
 800bb98:	f04f 0400 	mov.w	r4, #0
 800bb9c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bba0:	e9c2 3400 	strd	r3, r4, [r2]

    /* Initialize state pointer */
    px = pState;
 800bba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bba6:	667b      	str	r3, [r7, #100]	; 0x64

    /* Initialize coeff pointer */
    pb = pCoeffs;
 800bba8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bbac:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800bbb0:	601a      	str	r2, [r3, #0]

    /* Loop unrolling.  Process 4 taps at a time. */
    tapCnt = numTaps >> 2;
 800bbb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bbb6:	089b      	lsrs	r3, r3, #2
 800bbb8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Loop over the number of taps.  Unroll by a factor of 4.
     ** Repeat until we've computed numTaps-4 coefficients. */
    while (tapCnt > 0U)
 800bbbc:	e080      	b.n	800bcc0 <arm_fir_decimate_q15+0x610>
    {
      /* Read the Read b[numTaps-1] and b[numTaps-2]  coefficients */
      c0 = *__SIMD32(pb)++;
 800bbbe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800bbc2:	6813      	ldr	r3, [r2, #0]
 800bbc4:	1d19      	adds	r1, r3, #4
 800bbc6:	6011      	str	r1, [r2, #0]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

      /* Read x[n-numTaps-1] and x[n-numTaps-2]sample */
      x0 = *__SIMD32(px)++;
 800bbce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800bbd2:	6813      	ldr	r3, [r2, #0]
 800bbd4:	1d19      	adds	r1, r3, #4
 800bbd6:	6011      	str	r1, [r2, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      /* Read the b[numTaps-3] and b[numTaps-4] coefficient */
      c1 = *__SIMD32(pb)++;
 800bbde:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800bbe2:	6813      	ldr	r3, [r2, #0]
 800bbe4:	1d19      	adds	r1, r3, #4
 800bbe6:	6011      	str	r1, [r2, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

      /* Perform the multiply-accumulate */
      sum0 = __SMLALD(x0, c0, sum0);
 800bbee:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800bbf2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800bbf6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800bbfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bbfe:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800bc02:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800bc06:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
  llr.w64 = acc;
 800bc0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800bc0e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800bc12:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800bc16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800bc26:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800bc2a:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800bc2e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800bc32:	600a      	str	r2, [r1, #0]
 800bc34:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800bc38:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800bc3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bc3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bc42:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bc46:	e9c2 3400 	strd	r3, r4, [r2]

      /* Read x[n-numTaps-2] and x[n-numTaps-3] sample */
      x0 = *__SIMD32(px)++;
 800bc4a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800bc4e:	6813      	ldr	r3, [r2, #0]
 800bc50:	1d19      	adds	r1, r3, #4
 800bc52:	6011      	str	r1, [r2, #0]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      /* Perform the multiply-accumulate */
      sum0 = __SMLALD(x0, c1, sum0);
 800bc5a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800bc5e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800bc62:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800bc66:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bc6a:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800bc6e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800bc72:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
  llr.w64 = acc;
 800bc76:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bc7a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800bc7e:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800bc82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800bc92:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800bc96:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800bc9a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800bc9e:	600a      	str	r2, [r1, #0]
 800bca0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bca4:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800bca6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bcaa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bcae:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bcb2:	e9c2 3400 	strd	r3, r4, [r2]

      /* Decrement the loop counter */
      tapCnt--;
 800bcb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    while (tapCnt > 0U)
 800bcc0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f47f af7a 	bne.w	800bbbe <arm_fir_decimate_q15+0x50e>
    }

    /* If the filter length is not a multiple of 4, compute the remaining filter taps */
    tapCnt = numTaps % 0x4U;
 800bcca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bcce:	f003 0303 	and.w	r3, r3, #3
 800bcd2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    while (tapCnt > 0U)
 800bcd6:	e040      	b.n	800bd5a <arm_fir_decimate_q15+0x6aa>
    {
      /* Read coefficients */
      c0 = *pb++;
 800bcd8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	1c99      	adds	r1, r3, #2
 800bce0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800bce4:	6011      	str	r1, [r2, #0]
 800bce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

      /* Fetch 1 state variable */
      x0 = *px++;
 800bcee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcf0:	1c9a      	adds	r2, r3, #2
 800bcf2:	667a      	str	r2, [r7, #100]	; 0x64
 800bcf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcf8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      /* Perform the multiply-accumulate */
      sum0 = __SMLALD(x0, c0, sum0);
 800bcfc:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800bd00:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800bd04:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800bd08:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd0c:	67f9      	str	r1, [r7, #124]	; 0x7c
 800bd0e:	67ba      	str	r2, [r7, #120]	; 0x78
 800bd10:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
  llr.w64 = acc;
 800bd14:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800bd18:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800bd1c:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800bd20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd2e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800bd30:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800bd34:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800bd38:	600a      	str	r2, [r1, #0]
 800bd3a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800bd3e:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 800bd40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bd44:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd48:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bd4c:	e9c2 3400 	strd	r3, r4, [r2]

      /* Decrement the loop counter */
      tapCnt--;
 800bd50:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bd54:	3b01      	subs	r3, #1
 800bd56:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    while (tapCnt > 0U)
 800bd5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1ba      	bne.n	800bcd8 <arm_fir_decimate_q15+0x628>
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 800bd62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd64:	f107 030c 	add.w	r3, r7, #12
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	005b      	lsls	r3, r3, #1
 800bd6e:	4413      	add	r3, r2
 800bd70:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Store filter output, smlad returns the values in 2.14 format */
    /* so downsacle by 15 to get output in 1.15 */
    *pDst++ = (q15_t) (__SSAT((sum0 >> 15), 16));
 800bd72:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800bd76:	e9d3 1200 	ldrd	r1, r2, [r3]
 800bd7a:	f04f 0300 	mov.w	r3, #0
 800bd7e:	f04f 0400 	mov.w	r4, #0
 800bd82:	0bcb      	lsrs	r3, r1, #15
 800bd84:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800bd88:	13d4      	asrs	r4, r2, #15
 800bd8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bd8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd92:	f303 030f 	ssat	r3, #16, r3
 800bd96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800bd9a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800bd9e:	1d3b      	adds	r3, r7, #4
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	1d3a      	adds	r2, r7, #4
 800bda4:	1c99      	adds	r1, r3, #2
 800bda6:	6011      	str	r1, [r2, #0]
 800bda8:	b202      	sxth	r2, r0
 800bdaa:	801a      	strh	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCntN3--;
 800bdac:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800bdb0:	3b01      	subs	r3, #1
 800bdb2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  while (blkCntN3 > 0U)
 800bdb6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f47f aece 	bne.w	800bb5c <arm_fir_decimate_q15+0x4ac>
  /* Processing is complete.
   ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.
   ** This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 800bdc0:	f107 030c 	add.w	r3, r7, #12
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	66bb      	str	r3, [r7, #104]	; 0x68

  i = (numTaps - 1U) >> 2U;
 800bdca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	089b      	lsrs	r3, r3, #2
 800bdd2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

  /* copy data */
  while (i > 0U)
 800bdd6:	e01c      	b.n	800be12 <arm_fir_decimate_q15+0x762>
  {
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
 800bdd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	1d11      	adds	r1, r2, #4
 800bde0:	6019      	str	r1, [r3, #0]
 800bde2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800bde6:	680b      	ldr	r3, [r1, #0]
 800bde8:	1d18      	adds	r0, r3, #4
 800bdea:	6008      	str	r0, [r1, #0]
 800bdec:	6812      	ldr	r2, [r2, #0]
 800bdee:	601a      	str	r2, [r3, #0]
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
 800bdf0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	1d11      	adds	r1, r2, #4
 800bdf8:	6019      	str	r1, [r3, #0]
 800bdfa:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800bdfe:	680b      	ldr	r3, [r1, #0]
 800be00:	1d18      	adds	r0, r3, #4
 800be02:	6008      	str	r0, [r1, #0]
 800be04:	6812      	ldr	r2, [r2, #0]
 800be06:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    i--;
 800be08:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800be0c:	3b01      	subs	r3, #1
 800be0e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  while (i > 0U)
 800be12:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1de      	bne.n	800bdd8 <arm_fir_decimate_q15+0x728>
  }

  i = (numTaps - 1U) % 0x04U;
 800be1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800be1e:	3b01      	subs	r3, #1
 800be20:	f003 0303 	and.w	r3, r3, #3
 800be24:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

  /* copy data */
  while (i > 0U)
 800be28:	e00d      	b.n	800be46 <arm_fir_decimate_q15+0x796>
  {
    *pStateCurnt++ = *pState++;
 800be2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be2c:	1c93      	adds	r3, r2, #2
 800be2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be32:	1c99      	adds	r1, r3, #2
 800be34:	66b9      	str	r1, [r7, #104]	; 0x68
 800be36:	f9b2 2000 	ldrsh.w	r2, [r2]
 800be3a:	801a      	strh	r2, [r3, #0]

    /* Decrement the loop counter */
    i--;
 800be3c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800be40:	3b01      	subs	r3, #1
 800be42:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  while (i > 0U)
 800be46:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1ed      	bne.n	800be2a <arm_fir_decimate_q15+0x77a>
  }
}
 800be4e:	bf00      	nop
 800be50:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800be54:	46bd      	mov	sp, r7
 800be56:	bc90      	pop	{r4, r7}
 800be58:	4770      	bx	lr

0800be5a <CCA02M1_AUDIO_IN_HalfTransfer_CallBack>:
* @brief  Half Transfer user callback, called by BSP functions.
* @param  None
* @retval None
*/
void CCA02M1_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{  
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b082      	sub	sp, #8
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
  AudioProcess();
 800be62:	f000 f80f 	bl	800be84 <AudioProcess>
}
 800be66:	bf00      	nop
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <CCA02M1_AUDIO_IN_TransferComplete_CallBack>:
* @brief  Transfer Complete user callback, called by BSP functions.
* @param  None
* @retval None
*/
void CCA02M1_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{  
 800be6e:	b580      	push	{r7, lr}
 800be70:	b082      	sub	sp, #8
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
  AudioProcess();
 800be76:	f000 f805 	bl	800be84 <AudioProcess>
}
 800be7a:	bf00      	nop
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
	...

0800be84 <AudioProcess>:
int i;
int j = 0;
int jj = 0;

void AudioProcess(void)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	af00      	add	r7, sp, #0
	if (jj<3000)
 800be88:	4b2c      	ldr	r3, [pc, #176]	; (800bf3c <AudioProcess+0xb8>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800be90:	4293      	cmp	r3, r2
 800be92:	dc0e      	bgt.n	800beb2 <AudioProcess+0x2e>
	{
		CCA02M1_AUDIO_IN_PDMToPCM(CCA02M1_AUDIO_INSTANCE,(uint16_t * )PDM_Buffer,PCM_Buffer);
 800be94:	4a2a      	ldr	r2, [pc, #168]	; (800bf40 <AudioProcess+0xbc>)
 800be96:	492b      	ldr	r1, [pc, #172]	; (800bf44 <AudioProcess+0xc0>)
 800be98:	2000      	movs	r0, #0
 800be9a:	f7f5 fca3 	bl	80017e4 <CCA02M1_AUDIO_IN_PDMToPCM>
		Send_Audio_to_USB((int16_t *)PCM_Buffer, (AUDIO_IN_SAMPLING_FREQUENCY/1000)*AUDIO_IN_CHANNELS * N_MS );
 800be9e:	2160      	movs	r1, #96	; 0x60
 800bea0:	4827      	ldr	r0, [pc, #156]	; (800bf40 <AudioProcess+0xbc>)
 800bea2:	f000 fb91 	bl	800c5c8 <Send_Audio_to_USB>
		jj++;
 800bea6:	4b25      	ldr	r3, [pc, #148]	; (800bf3c <AudioProcess+0xb8>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	3301      	adds	r3, #1
 800beac:	4a23      	ldr	r2, [pc, #140]	; (800bf3c <AudioProcess+0xb8>)
 800beae:	6013      	str	r3, [r2, #0]
//			PCM_Buffer_int[i]=(int16_t * ) PCM_Buffer[i];
//		}
		Send_Audio_to_USB((int16_t *)PCM_Buffer, (AUDIO_IN_SAMPLING_FREQUENCY/1000)*AUDIO_IN_CHANNELS * N_MS );
		abc+=96;
	}
}
 800beb0:	e042      	b.n	800bf38 <AudioProcess+0xb4>
	else if(abc<9600)
 800beb2:	4b25      	ldr	r3, [pc, #148]	; (800bf48 <AudioProcess+0xc4>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800beba:	da3d      	bge.n	800bf38 <AudioProcess+0xb4>
		j=0;
 800bebc:	4b23      	ldr	r3, [pc, #140]	; (800bf4c <AudioProcess+0xc8>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	601a      	str	r2, [r3, #0]
		CCA02M1_AUDIO_IN_PDMToPCM(CCA02M1_AUDIO_INSTANCE,(uint16_t * )PDM_Buffer,PCM_Buffer);
 800bec2:	4a1f      	ldr	r2, [pc, #124]	; (800bf40 <AudioProcess+0xbc>)
 800bec4:	491f      	ldr	r1, [pc, #124]	; (800bf44 <AudioProcess+0xc0>)
 800bec6:	2000      	movs	r0, #0
 800bec8:	f7f5 fc8c 	bl	80017e4 <CCA02M1_AUDIO_IN_PDMToPCM>
		for (i = abc;i<abc+96;i++)
 800becc:	4b1e      	ldr	r3, [pc, #120]	; (800bf48 <AudioProcess+0xc4>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a1f      	ldr	r2, [pc, #124]	; (800bf50 <AudioProcess+0xcc>)
 800bed2:	6013      	str	r3, [r2, #0]
 800bed4:	e01f      	b.n	800bf16 <AudioProcess+0x92>
			(data[i]) = (int16_t * )(PCM_Buffer[j]);
 800bed6:	4b1d      	ldr	r3, [pc, #116]	; (800bf4c <AudioProcess+0xc8>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a19      	ldr	r2, [pc, #100]	; (800bf40 <AudioProcess+0xbc>)
 800bedc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800bee0:	4b1b      	ldr	r3, [pc, #108]	; (800bf50 <AudioProcess+0xcc>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	b211      	sxth	r1, r2
 800bee6:	4a1b      	ldr	r2, [pc, #108]	; (800bf54 <AudioProcess+0xd0>)
 800bee8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			PCM_Buffer_int[j]=(int16_t * ) PCM_Buffer[j];
 800beec:	4b17      	ldr	r3, [pc, #92]	; (800bf4c <AudioProcess+0xc8>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a13      	ldr	r2, [pc, #76]	; (800bf40 <AudioProcess+0xbc>)
 800bef2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800bef6:	4b15      	ldr	r3, [pc, #84]	; (800bf4c <AudioProcess+0xc8>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	b211      	sxth	r1, r2
 800befc:	4a16      	ldr	r2, [pc, #88]	; (800bf58 <AudioProcess+0xd4>)
 800befe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			j++;
 800bf02:	4b12      	ldr	r3, [pc, #72]	; (800bf4c <AudioProcess+0xc8>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	3301      	adds	r3, #1
 800bf08:	4a10      	ldr	r2, [pc, #64]	; (800bf4c <AudioProcess+0xc8>)
 800bf0a:	6013      	str	r3, [r2, #0]
		for (i = abc;i<abc+96;i++)
 800bf0c:	4b10      	ldr	r3, [pc, #64]	; (800bf50 <AudioProcess+0xcc>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	3301      	adds	r3, #1
 800bf12:	4a0f      	ldr	r2, [pc, #60]	; (800bf50 <AudioProcess+0xcc>)
 800bf14:	6013      	str	r3, [r2, #0]
 800bf16:	4b0c      	ldr	r3, [pc, #48]	; (800bf48 <AudioProcess+0xc4>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800bf1e:	4b0c      	ldr	r3, [pc, #48]	; (800bf50 <AudioProcess+0xcc>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	dcd7      	bgt.n	800bed6 <AudioProcess+0x52>
		Send_Audio_to_USB((int16_t *)PCM_Buffer, (AUDIO_IN_SAMPLING_FREQUENCY/1000)*AUDIO_IN_CHANNELS * N_MS );
 800bf26:	2160      	movs	r1, #96	; 0x60
 800bf28:	4805      	ldr	r0, [pc, #20]	; (800bf40 <AudioProcess+0xbc>)
 800bf2a:	f000 fb4d 	bl	800c5c8 <Send_Audio_to_USB>
		abc+=96;
 800bf2e:	4b06      	ldr	r3, [pc, #24]	; (800bf48 <AudioProcess+0xc4>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	3360      	adds	r3, #96	; 0x60
 800bf34:	4a04      	ldr	r2, [pc, #16]	; (800bf48 <AudioProcess+0xc4>)
 800bf36:	6013      	str	r3, [r2, #0]
}
 800bf38:	bf00      	nop
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	20001bd8 	.word	0x20001bd8
 800bf40:	20001d10 	.word	0x20001d10
 800bf44:	20001dd4 	.word	0x20001dd4
 800bf48:	20001bdc 	.word	0x20001bdc
 800bf4c:	20001bd4 	.word	0x20001bd4
 800bf50:	20001dd0 	.word	0x20001dd0
 800bf54:	200026a4 	.word	0x200026a4
 800bf58:	20001c3c 	.word	0x20001c3c

0800bf5c <Init_Acquisition_Peripherals>:
* 		  User can add his own code here to perform some DSP or audio analysis.
* @param  none
* @retval None
*/
void Init_Acquisition_Peripherals(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{  
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
  MicParams.BitsPerSample = 16;
 800bf68:	4b0b      	ldr	r3, [pc, #44]	; (800bf98 <Init_Acquisition_Peripherals+0x3c>)
 800bf6a:	2210      	movs	r2, #16
 800bf6c:	609a      	str	r2, [r3, #8]
  MicParams.ChannelsNbr = ChnlNbrIn;
 800bf6e:	4a0a      	ldr	r2, [pc, #40]	; (800bf98 <Init_Acquisition_Peripherals+0x3c>)
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	60d3      	str	r3, [r2, #12]
  MicParams.Device = AUDIO_IN_DIGITAL_MIC;
 800bf74:	4b08      	ldr	r3, [pc, #32]	; (800bf98 <Init_Acquisition_Peripherals+0x3c>)
 800bf76:	22f0      	movs	r2, #240	; 0xf0
 800bf78:	601a      	str	r2, [r3, #0]
  MicParams.SampleRate = AudioFreq;
 800bf7a:	4a07      	ldr	r2, [pc, #28]	; (800bf98 <Init_Acquisition_Peripherals+0x3c>)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6053      	str	r3, [r2, #4]
  MicParams.Volume = AUDIO_VOLUME_INPUT;
 800bf80:	4b05      	ldr	r3, [pc, #20]	; (800bf98 <Init_Acquisition_Peripherals+0x3c>)
 800bf82:	2240      	movs	r2, #64	; 0x40
 800bf84:	611a      	str	r2, [r3, #16]
  
  CCA02M1_AUDIO_IN_Init(CCA02M1_AUDIO_INSTANCE, &MicParams);  
 800bf86:	4904      	ldr	r1, [pc, #16]	; (800bf98 <Init_Acquisition_Peripherals+0x3c>)
 800bf88:	2000      	movs	r0, #0
 800bf8a:	f7f5 f81d 	bl	8000fc8 <CCA02M1_AUDIO_IN_Init>
}
 800bf8e:	bf00      	nop
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	20001cfc 	.word	0x20001cfc

0800bf9c <Start_Acquisition>:
* 		  User can add his own code here to perform some DSP or audio analysis.
* @param  none
* @retval None
*/
void Start_Acquisition(void)
{  
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	af00      	add	r7, sp, #0
  CCA02M1_AUDIO_IN_Record(CCA02M1_AUDIO_INSTANCE, (uint8_t *) PDM_Buffer, AUDIO_IN_BUFFER_SIZE);
 800bfa0:	2260      	movs	r2, #96	; 0x60
 800bfa2:	4903      	ldr	r1, [pc, #12]	; (800bfb0 <Start_Acquisition+0x14>)
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	f7f5 fca1 	bl	80018ec <CCA02M1_AUDIO_IN_Record>
}
 800bfaa:	bf00      	nop
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	20001dd4 	.word	0x20001dd4

0800bfb4 <SystemClock_Config>:
* @brief  System Clock Configuration
* @param  None
* @retval None
*/
void SystemClock_Config(void)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b094      	sub	sp, #80	; 0x50
 800bfb8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 800bfba:	2300      	movs	r3, #0
 800bfbc:	607b      	str	r3, [r7, #4]
 800bfbe:	4b24      	ldr	r3, [pc, #144]	; (800c050 <SystemClock_Config+0x9c>)
 800bfc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc2:	4a23      	ldr	r2, [pc, #140]	; (800c050 <SystemClock_Config+0x9c>)
 800bfc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfc8:	6413      	str	r3, [r2, #64]	; 0x40
 800bfca:	4b21      	ldr	r3, [pc, #132]	; (800c050 <SystemClock_Config+0x9c>)
 800bfcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfd2:	607b      	str	r3, [r7, #4]
 800bfd4:	687b      	ldr	r3, [r7, #4]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
  clocked below the maximum system frequency, to update the voltage scaling value 
  regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);  
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	603b      	str	r3, [r7, #0]
 800bfda:	4b1e      	ldr	r3, [pc, #120]	; (800c054 <SystemClock_Config+0xa0>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800bfe2:	4a1c      	ldr	r2, [pc, #112]	; (800c054 <SystemClock_Config+0xa0>)
 800bfe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfe8:	6013      	str	r3, [r2, #0]
 800bfea:	4b1a      	ldr	r3, [pc, #104]	; (800c054 <SystemClock_Config+0xa0>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bff2:	603b      	str	r3, [r7, #0]
 800bff4:	683b      	ldr	r3, [r7, #0]
  
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800bff6:	2301      	movs	r3, #1
 800bff8:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800bffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bffe:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c000:	2302      	movs	r3, #2
 800c002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c004:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c008:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 8;
 800c00a:	2308      	movs	r3, #8
 800c00c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 336;
 800c00e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800c012:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800c014:	2304      	movs	r3, #4
 800c016:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800c018:	2307      	movs	r3, #7
 800c01a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800c01c:	f107 0308 	add.w	r3, r7, #8
 800c020:	4618      	mov	r0, r3
 800c022:	f7f9 fde3 	bl	8005bec <HAL_RCC_OscConfig>
  
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800c026:	230d      	movs	r3, #13
 800c028:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c02a:	2302      	movs	r3, #2
 800c02c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c02e:	2300      	movs	r3, #0
 800c030:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c036:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c038:	2300      	movs	r3, #0
 800c03a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800c03c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c040:	2102      	movs	r1, #2
 800c042:	4618      	mov	r0, r3
 800c044:	f7f8 fd0a 	bl	8004a5c <HAL_RCC_ClockConfig>
}
 800c048:	bf00      	nop
 800c04a:	3750      	adds	r7, #80	; 0x50
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	40023800 	.word	0x40023800
 800c054:	40007000 	.word	0x40007000

0800c058 <__io_putchar>:
/**
* @}
*/
# include <stdio.h>
int __io_putchar(int ch)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
	uint8_t c=ch;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	b2db      	uxtb	r3, r3
 800c064:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, 100);
 800c066:	f107 010f 	add.w	r1, r7, #15
 800c06a:	2364      	movs	r3, #100	; 0x64
 800c06c:	2201      	movs	r2, #1
 800c06e:	4804      	ldr	r0, [pc, #16]	; (800c080 <__io_putchar+0x28>)
 800c070:	f7fb fb91 	bl	8007796 <HAL_UART_Transmit>
	return ch;
 800c074:	687b      	ldr	r3, [r7, #4]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	20007204 	.word	0x20007204

0800c084 <main>:
* @brief  Main program
* @param  None
* @retval None
*/
int main(void)
{
 800c084:	b598      	push	{r3, r4, r7, lr}
 800c086:	af00      	add	r7, sp, #0
  /* STM32F4xx HAL library initialization:
  - Configure the Flash prefetch, instruction and Data caches
  - Configure the Systick to generate an interrupt each 1 msec
  - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 800c088:	f7f6 f8de 	bl	8002248 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800c08c:	f7ff ff92 	bl	800bfb4 <SystemClock_Config>
  /* Initialize USB descriptor basing on channels number and sampling frequency */
  USBD_AUDIO_Init_Microphone_Descriptor(&hUSBDDevice, AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_IN_CHANNELS);
 800c090:	2202      	movs	r2, #2
 800c092:	f64b 3180 	movw	r1, #48000	; 0xbb80
 800c096:	482c      	ldr	r0, [pc, #176]	; (800c148 <main+0xc4>)
 800c098:	f7fd feaa 	bl	8009df0 <USBD_AUDIO_Init_Microphone_Descriptor>
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &AUDIO_Desc, 0);
 800c09c:	2200      	movs	r2, #0
 800c09e:	492b      	ldr	r1, [pc, #172]	; (800c14c <main+0xc8>)
 800c0a0:	4829      	ldr	r0, [pc, #164]	; (800c148 <main+0xc4>)
 800c0a2:	f7fe f9cb 	bl	800a43c <USBD_Init>
  /* Add Supported Class */
  USBD_RegisterClass(&hUSBDDevice, &USBD_AUDIO);
 800c0a6:	492a      	ldr	r1, [pc, #168]	; (800c150 <main+0xcc>)
 800c0a8:	4827      	ldr	r0, [pc, #156]	; (800c148 <main+0xc4>)
 800c0aa:	f7fe f9fd 	bl	800a4a8 <USBD_RegisterClass>
  /* Add Interface callbacks for AUDIO Class */
  USBD_AUDIO_RegisterInterface(&hUSBDDevice, &USBD_AUDIO_fops);
 800c0ae:	4929      	ldr	r1, [pc, #164]	; (800c154 <main+0xd0>)
 800c0b0:	4825      	ldr	r0, [pc, #148]	; (800c148 <main+0xc4>)
 800c0b2:	f7fd fe89 	bl	8009dc8 <USBD_AUDIO_RegisterInterface>
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 800c0b6:	4824      	ldr	r0, [pc, #144]	; (800c148 <main+0xc4>)
 800c0b8:	f7fe fa17 	bl	800a4ea <USBD_Start>

  MX_USART1_UART_Init();
 800c0bc:	f000 f94a 	bl	800c354 <MX_USART1_UART_Init>
//    }
//      printf("%X\r\n",et.l);

  /* Start audio acquisition and streaming */
#ifdef DISABLE_USB_DRIVEN_ACQUISITION
  Init_Acquisition_Peripherals(AUDIO_IN_SAMPLING_FREQUENCY, AUDIO_IN_CHANNELS, 0);
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	2102      	movs	r1, #2
 800c0c4:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800c0c8:	f7ff ff48 	bl	800bf5c <Init_Acquisition_Peripherals>
  Start_Acquisition();
 800c0cc:	f7ff ff66 	bl	800bf9c <Start_Acquisition>
#endif
  while (1)
  {
	  if (abc == 9600)
 800c0d0:	4b21      	ldr	r3, [pc, #132]	; (800c158 <main+0xd4>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800c0d8:	d1fa      	bne.n	800c0d0 <main+0x4c>
	  {
		  for(i=0;i<9600;i++)
 800c0da:	4b20      	ldr	r3, [pc, #128]	; (800c15c <main+0xd8>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	601a      	str	r2, [r3, #0]
 800c0e0:	e026      	b.n	800c130 <main+0xac>
		  {
//			  st.sixteen = *data[i];
//			  printf("%d %x%x\r\n",i,st.eight[1],st.eight[0]);
			  out = (float)data[i];
 800c0e2:	4b1e      	ldr	r3, [pc, #120]	; (800c15c <main+0xd8>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a1e      	ldr	r2, [pc, #120]	; (800c160 <main+0xdc>)
 800c0e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c0ec:	ee07 3a90 	vmov	s15, r3
 800c0f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0f4:	4b1b      	ldr	r3, [pc, #108]	; (800c164 <main+0xe0>)
 800c0f6:	edc3 7a00 	vstr	s15, [r3]
			  printf("%d %f\r\n",i,out/fiftheen);
 800c0fa:	4b18      	ldr	r3, [pc, #96]	; (800c15c <main+0xd8>)
 800c0fc:	681c      	ldr	r4, [r3, #0]
 800c0fe:	4b19      	ldr	r3, [pc, #100]	; (800c164 <main+0xe0>)
 800c100:	edd3 7a00 	vldr	s15, [r3]
 800c104:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800c168 <main+0xe4>
 800c108:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c10c:	ee16 0a90 	vmov	r0, s13
 800c110:	f7f4 fa3a 	bl	8000588 <__aeabi_f2d>
 800c114:	4602      	mov	r2, r0
 800c116:	460b      	mov	r3, r1
 800c118:	4621      	mov	r1, r4
 800c11a:	4814      	ldr	r0, [pc, #80]	; (800c16c <main+0xe8>)
 800c11c:	f003 fc14 	bl	800f948 <iprintf>
			  HAL_Delay(10);
 800c120:	200a      	movs	r0, #10
 800c122:	f7f6 f90b 	bl	800233c <HAL_Delay>
		  for(i=0;i<9600;i++)
 800c126:	4b0d      	ldr	r3, [pc, #52]	; (800c15c <main+0xd8>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	3301      	adds	r3, #1
 800c12c:	4a0b      	ldr	r2, [pc, #44]	; (800c15c <main+0xd8>)
 800c12e:	6013      	str	r3, [r2, #0]
 800c130:	4b0a      	ldr	r3, [pc, #40]	; (800c15c <main+0xd8>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800c138:	dbd3      	blt.n	800c0e2 <main+0x5e>
		  }
		  abc++;
 800c13a:	4b07      	ldr	r3, [pc, #28]	; (800c158 <main+0xd4>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	3301      	adds	r3, #1
 800c140:	4a05      	ldr	r2, [pc, #20]	; (800c158 <main+0xd4>)
 800c142:	6013      	str	r3, [r2, #0]
	  if (abc == 9600)
 800c144:	e7c4      	b.n	800c0d0 <main+0x4c>
 800c146:	bf00      	nop
 800c148:	200023d4 	.word	0x200023d4
 800c14c:	20000618 	.word	0x20000618
 800c150:	200005ac 	.word	0x200005ac
 800c154:	200005f4 	.word	0x200005f4
 800c158:	20001bdc 	.word	0x20001bdc
 800c15c:	20001dd0 	.word	0x20001dd0
 800c160:	200026a4 	.word	0x200026a4
 800c164:	20001be0 	.word	0x20001be0
 800c168:	47000000 	.word	0x47000000
 800c16c:	08013978 	.word	0x08013978

0800c170 <Error_Handler>:
#endif
/**
* @}
*/
void Error_Handler(void)
{
 800c170:	b480      	push	{r7}
 800c172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c174:	bf00      	nop
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800c17e:	b480      	push	{r7}
 800c180:	af00      	add	r7, sp, #0
}
 800c182:	bf00      	nop
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800c18c:	b480      	push	{r7}
 800c18e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800c190:	e7fe      	b.n	800c190 <HardFault_Handler+0x4>

0800c192 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800c192:	b480      	push	{r7}
 800c194:	af00      	add	r7, sp, #0
}
 800c196:	bf00      	nop
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	af00      	add	r7, sp, #0
}
 800c1a4:	bf00      	nop
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr

0800c1ae <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800c1ae:	b480      	push	{r7}
 800c1b0:	af00      	add	r7, sp, #0
}
 800c1b2:	bf00      	nop
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800c1c0:	f7f6 f89c 	bl	80022fc <HAL_IncTick>
}
 800c1c4:	bf00      	nop
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB Handler.
  * @param  None
  * @retval None
  */
void USB_IRQHandler(void)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 800c1cc:	4802      	ldr	r0, [pc, #8]	; (800c1d8 <OTG_FS_IRQHandler+0x10>)
 800c1ce:	f7f7 fbac 	bl	800392a <HAL_PCD_IRQHandler>
}
 800c1d2:	bf00      	nop
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	20007244 	.word	0x20007244

0800c1dc <DMA1_Stream3_IRQHandler>:
  * @brief  This function handles DMA Stream interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_I2S_IRQHandler(void)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 800c1e0:	4b03      	ldr	r3, [pc, #12]	; (800c1f0 <DMA1_Stream3_IRQHandler+0x14>)
 800c1e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7f6 fb41 	bl	800286c <HAL_DMA_IRQHandler>
}
 800c1ea:	bf00      	nop
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	20001bf0 	.word	0x20001bf0

0800c1f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c200:	2300      	movs	r3, #0
 800c202:	617b      	str	r3, [r7, #20]
 800c204:	e00a      	b.n	800c21c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800c206:	f3af 8000 	nop.w
 800c20a:	4601      	mov	r1, r0
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	1c5a      	adds	r2, r3, #1
 800c210:	60ba      	str	r2, [r7, #8]
 800c212:	b2ca      	uxtb	r2, r1
 800c214:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	3301      	adds	r3, #1
 800c21a:	617b      	str	r3, [r7, #20]
 800c21c:	697a      	ldr	r2, [r7, #20]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	429a      	cmp	r2, r3
 800c222:	dbf0      	blt.n	800c206 <_read+0x12>
	}

return len;
 800c224:	687b      	ldr	r3, [r7, #4]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b086      	sub	sp, #24
 800c232:	af00      	add	r7, sp, #0
 800c234:	60f8      	str	r0, [r7, #12]
 800c236:	60b9      	str	r1, [r7, #8]
 800c238:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c23a:	2300      	movs	r3, #0
 800c23c:	617b      	str	r3, [r7, #20]
 800c23e:	e009      	b.n	800c254 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	1c5a      	adds	r2, r3, #1
 800c244:	60ba      	str	r2, [r7, #8]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	4618      	mov	r0, r3
 800c24a:	f7ff ff05 	bl	800c058 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	3301      	adds	r3, #1
 800c252:	617b      	str	r3, [r7, #20]
 800c254:	697a      	ldr	r2, [r7, #20]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	429a      	cmp	r2, r3
 800c25a:	dbf1      	blt.n	800c240 <_write+0x12>
	}
	return len;
 800c25c:	687b      	ldr	r3, [r7, #4]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3718      	adds	r7, #24
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <_close>:

int _close(int file)
{
 800c266:	b480      	push	{r7}
 800c268:	b083      	sub	sp, #12
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
	return -1;
 800c26e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c272:	4618      	mov	r0, r3
 800c274:	370c      	adds	r7, #12
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr

0800c27e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c27e:	b480      	push	{r7}
 800c280:	b083      	sub	sp, #12
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
 800c286:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c28e:	605a      	str	r2, [r3, #4]
	return 0;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr

0800c29e <_isatty>:

int _isatty(int file)
{
 800c29e:	b480      	push	{r7}
 800c2a0:	b083      	sub	sp, #12
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
	return 1;
 800c2a6:	2301      	movs	r3, #1
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	370c      	adds	r7, #12
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
	return 0;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
	...

0800c2d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c2d8:	4b11      	ldr	r3, [pc, #68]	; (800c320 <_sbrk+0x50>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d102      	bne.n	800c2e6 <_sbrk+0x16>
		heap_end = &end;
 800c2e0:	4b0f      	ldr	r3, [pc, #60]	; (800c320 <_sbrk+0x50>)
 800c2e2:	4a10      	ldr	r2, [pc, #64]	; (800c324 <_sbrk+0x54>)
 800c2e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c2e6:	4b0e      	ldr	r3, [pc, #56]	; (800c320 <_sbrk+0x50>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c2ec:	4b0c      	ldr	r3, [pc, #48]	; (800c320 <_sbrk+0x50>)
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	466a      	mov	r2, sp
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d907      	bls.n	800c30a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c2fa:	f002 fbf1 	bl	800eae0 <__errno>
 800c2fe:	4602      	mov	r2, r0
 800c300:	230c      	movs	r3, #12
 800c302:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c304:	f04f 33ff 	mov.w	r3, #4294967295
 800c308:	e006      	b.n	800c318 <_sbrk+0x48>
	}

	heap_end += incr;
 800c30a:	4b05      	ldr	r3, [pc, #20]	; (800c320 <_sbrk+0x50>)
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4413      	add	r3, r2
 800c312:	4a03      	ldr	r2, [pc, #12]	; (800c320 <_sbrk+0x50>)
 800c314:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c316:	68fb      	ldr	r3, [r7, #12]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	20001be4 	.word	0x20001be4
 800c324:	20007718 	.word	0x20007718

0800c328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c328:	b480      	push	{r7}
 800c32a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c32c:	4b08      	ldr	r3, [pc, #32]	; (800c350 <SystemInit+0x28>)
 800c32e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c332:	4a07      	ldr	r2, [pc, #28]	; (800c350 <SystemInit+0x28>)
 800c334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c33c:	4b04      	ldr	r3, [pc, #16]	; (800c350 <SystemInit+0x28>)
 800c33e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c342:	609a      	str	r2, [r3, #8]
#endif
}
 800c344:	bf00      	nop
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr
 800c34e:	bf00      	nop
 800c350:	e000ed00 	.word	0xe000ed00

0800c354 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800c358:	4b15      	ldr	r3, [pc, #84]	; (800c3b0 <MX_USART1_UART_Init+0x5c>)
 800c35a:	4a16      	ldr	r2, [pc, #88]	; (800c3b4 <MX_USART1_UART_Init+0x60>)
 800c35c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c35e:	4b14      	ldr	r3, [pc, #80]	; (800c3b0 <MX_USART1_UART_Init+0x5c>)
 800c360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c364:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c366:	4b12      	ldr	r3, [pc, #72]	; (800c3b0 <MX_USART1_UART_Init+0x5c>)
 800c368:	2200      	movs	r2, #0
 800c36a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c36c:	4b10      	ldr	r3, [pc, #64]	; (800c3b0 <MX_USART1_UART_Init+0x5c>)
 800c36e:	2200      	movs	r2, #0
 800c370:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c372:	4b0f      	ldr	r3, [pc, #60]	; (800c3b0 <MX_USART1_UART_Init+0x5c>)
 800c374:	2200      	movs	r2, #0
 800c376:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c378:	4b0d      	ldr	r3, [pc, #52]	; (800c3b0 <MX_USART1_UART_Init+0x5c>)
 800c37a:	220c      	movs	r2, #12
 800c37c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c37e:	4b0c      	ldr	r3, [pc, #48]	; (800c3b0 <MX_USART1_UART_Init+0x5c>)
 800c380:	2200      	movs	r2, #0
 800c382:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c384:	4b0a      	ldr	r3, [pc, #40]	; (800c3b0 <MX_USART1_UART_Init+0x5c>)
 800c386:	2200      	movs	r2, #0
 800c388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c38a:	4809      	ldr	r0, [pc, #36]	; (800c3b0 <MX_USART1_UART_Init+0x5c>)
 800c38c:	f7fb f9b6 	bl	80076fc <HAL_UART_Init>
 800c390:	4603      	mov	r3, r0
 800c392:	2b00      	cmp	r3, #0
 800c394:	d001      	beq.n	800c39a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c396:	f7ff feeb 	bl	800c170 <Error_Handler>
  }

  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 800c39a:	4b05      	ldr	r3, [pc, #20]	; (800c3b0 <MX_USART1_UART_Init+0x5c>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68da      	ldr	r2, [r3, #12]
 800c3a0:	4b03      	ldr	r3, [pc, #12]	; (800c3b0 <MX_USART1_UART_Init+0x5c>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f042 0220 	orr.w	r2, r2, #32
 800c3a8:	60da      	str	r2, [r3, #12]

}
 800c3aa:	bf00      	nop
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	20007204 	.word	0x20007204
 800c3b4:	40011000 	.word	0x40011000

0800c3b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b08a      	sub	sp, #40	; 0x28
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3c0:	f107 0314 	add.w	r3, r7, #20
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	601a      	str	r2, [r3, #0]
 800c3c8:	605a      	str	r2, [r3, #4]
 800c3ca:	609a      	str	r2, [r3, #8]
 800c3cc:	60da      	str	r2, [r3, #12]
 800c3ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a35      	ldr	r2, [pc, #212]	; (800c4ac <HAL_UART_MspInit+0xf4>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d164      	bne.n	800c4a4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c3da:	2300      	movs	r3, #0
 800c3dc:	613b      	str	r3, [r7, #16]
 800c3de:	4b34      	ldr	r3, [pc, #208]	; (800c4b0 <HAL_UART_MspInit+0xf8>)
 800c3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3e2:	4a33      	ldr	r2, [pc, #204]	; (800c4b0 <HAL_UART_MspInit+0xf8>)
 800c3e4:	f043 0310 	orr.w	r3, r3, #16
 800c3e8:	6453      	str	r3, [r2, #68]	; 0x44
 800c3ea:	4b31      	ldr	r3, [pc, #196]	; (800c4b0 <HAL_UART_MspInit+0xf8>)
 800c3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ee:	f003 0310 	and.w	r3, r3, #16
 800c3f2:	613b      	str	r3, [r7, #16]
 800c3f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	60fb      	str	r3, [r7, #12]
 800c3fa:	4b2d      	ldr	r3, [pc, #180]	; (800c4b0 <HAL_UART_MspInit+0xf8>)
 800c3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3fe:	4a2c      	ldr	r2, [pc, #176]	; (800c4b0 <HAL_UART_MspInit+0xf8>)
 800c400:	f043 0301 	orr.w	r3, r3, #1
 800c404:	6313      	str	r3, [r2, #48]	; 0x30
 800c406:	4b2a      	ldr	r3, [pc, #168]	; (800c4b0 <HAL_UART_MspInit+0xf8>)
 800c408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	60fb      	str	r3, [r7, #12]
 800c410:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800c412:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c418:	2302      	movs	r3, #2
 800c41a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c41c:	2301      	movs	r3, #1
 800c41e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c420:	2303      	movs	r3, #3
 800c422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c424:	2307      	movs	r3, #7
 800c426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c428:	f107 0314 	add.w	r3, r7, #20
 800c42c:	4619      	mov	r1, r3
 800c42e:	4821      	ldr	r0, [pc, #132]	; (800c4b4 <HAL_UART_MspInit+0xfc>)
 800c430:	f7f6 fc84 	bl	8002d3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800c434:	4b20      	ldr	r3, [pc, #128]	; (800c4b8 <HAL_UART_MspInit+0x100>)
 800c436:	4a21      	ldr	r2, [pc, #132]	; (800c4bc <HAL_UART_MspInit+0x104>)
 800c438:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800c43a:	4b1f      	ldr	r3, [pc, #124]	; (800c4b8 <HAL_UART_MspInit+0x100>)
 800c43c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c440:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c442:	4b1d      	ldr	r3, [pc, #116]	; (800c4b8 <HAL_UART_MspInit+0x100>)
 800c444:	2240      	movs	r2, #64	; 0x40
 800c446:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c448:	4b1b      	ldr	r3, [pc, #108]	; (800c4b8 <HAL_UART_MspInit+0x100>)
 800c44a:	2200      	movs	r2, #0
 800c44c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c44e:	4b1a      	ldr	r3, [pc, #104]	; (800c4b8 <HAL_UART_MspInit+0x100>)
 800c450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c454:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c456:	4b18      	ldr	r3, [pc, #96]	; (800c4b8 <HAL_UART_MspInit+0x100>)
 800c458:	2200      	movs	r2, #0
 800c45a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c45c:	4b16      	ldr	r3, [pc, #88]	; (800c4b8 <HAL_UART_MspInit+0x100>)
 800c45e:	2200      	movs	r2, #0
 800c460:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800c462:	4b15      	ldr	r3, [pc, #84]	; (800c4b8 <HAL_UART_MspInit+0x100>)
 800c464:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c468:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800c46a:	4b13      	ldr	r3, [pc, #76]	; (800c4b8 <HAL_UART_MspInit+0x100>)
 800c46c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c470:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c472:	4b11      	ldr	r3, [pc, #68]	; (800c4b8 <HAL_UART_MspInit+0x100>)
 800c474:	2200      	movs	r2, #0
 800c476:	625a      	str	r2, [r3, #36]	; 0x24
    /*存储器突发传输 16个节拍*/
//    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
//    /*外设突发传输 1个节拍*/
//    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800c478:	480f      	ldr	r0, [pc, #60]	; (800c4b8 <HAL_UART_MspInit+0x100>)
 800c47a:	f7f6 f893 	bl	80025a4 <HAL_DMA_Init>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d001      	beq.n	800c488 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800c484:	f7ff fe74 	bl	800c170 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	4a0b      	ldr	r2, [pc, #44]	; (800c4b8 <HAL_UART_MspInit+0x100>)
 800c48c:	631a      	str	r2, [r3, #48]	; 0x30
 800c48e:	4a0a      	ldr	r2, [pc, #40]	; (800c4b8 <HAL_UART_MspInit+0x100>)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c494:	2200      	movs	r2, #0
 800c496:	2100      	movs	r1, #0
 800c498:	2025      	movs	r0, #37	; 0x25
 800c49a:	f7f6 f84c 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c49e:	2025      	movs	r0, #37	; 0x25
 800c4a0:	f7f6 f865 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800c4a4:	bf00      	nop
 800c4a6:	3728      	adds	r7, #40	; 0x28
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	40011000 	.word	0x40011000
 800c4b0:	40023800 	.word	0x40023800
 800c4b4:	40020000 	.word	0x40020000
 800c4b8:	200071a4 	.word	0x200071a4
 800c4bc:	400264b8 	.word	0x400264b8

0800c4c0 <Audio_Init>:
* @param  BitRes: desired bit resolution
* @param  ChnlNbr: number of channel to be configured
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_Init(uint32_t  AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
#ifndef DISABLE_USB_DRIVEN_ACQUISITION 
  return CCA02M1_AUDIO_IN_Init(CCA02M1_AUDIO_INSTANCE, &MicParams);
#else
  return BSP_ERROR_NONE;
 800c4cc:	2300      	movs	r3, #0
#endif
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3714      	adds	r7, #20
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr

0800c4da <Audio_DeInit>:
* @brief  De-Initializes the AUDIO media low layer.      
* @param  options: Reserved for future use
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_DeInit(uint32_t options)
{
 800c4da:	b480      	push	{r7}
 800c4dc:	b083      	sub	sp, #12
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
  return BSP_ERROR_NONE;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <Audio_Record>:
/**
* @brief  Start audio recording engine
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_Record(void)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	af00      	add	r7, sp, #0
#ifndef DISABLE_USB_DRIVEN_ACQUISITION  
  return CCA02M1_AUDIO_IN_Record(CCA02M1_AUDIO_INSTANCE, (uint8_t *) PDM_Buffer, 0);
#else
  return BSP_ERROR_NONE;
 800c4f4:	2300      	movs	r3, #0
#endif
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <Audio_VolumeCtl>:
* @brief  Controls AUDIO Volume.             
* @param  vol: Volume level
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_VolumeCtl(int16_t Volume)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	4603      	mov	r3, r0
 800c508:	80fb      	strh	r3, [r7, #6]
  /* Call low layer volume setting function */
  uint32_t j, mic_instance;
  
  j = 0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	60fb      	str	r3, [r7, #12]
  /* Find the setting nearest to the desired setting */
  while(j<64 &&
 800c50e:	e002      	b.n	800c516 <Audio_VolumeCtl+0x16>
        abs(Volume-vol_table[j]) > abs(Volume-vol_table[j+1])) {
          j++;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	3301      	adds	r3, #1
 800c514:	60fb      	str	r3, [r7, #12]
  while(j<64 &&
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2b3f      	cmp	r3, #63	; 0x3f
 800c51a:	d817      	bhi.n	800c54c <Audio_VolumeCtl+0x4c>
        abs(Volume-vol_table[j]) > abs(Volume-vol_table[j+1])) {
 800c51c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c520:	4910      	ldr	r1, [pc, #64]	; (800c564 <Audio_VolumeCtl+0x64>)
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800c528:	1a9b      	subs	r3, r3, r2
 800c52a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800c52e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800c532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c536:	68f9      	ldr	r1, [r7, #12]
 800c538:	3101      	adds	r1, #1
 800c53a:	480a      	ldr	r0, [pc, #40]	; (800c564 <Audio_VolumeCtl+0x64>)
 800c53c:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c540:	1a5b      	subs	r3, r3, r1
 800c542:	2b00      	cmp	r3, #0
 800c544:	bfb8      	it	lt
 800c546:	425b      	neglt	r3, r3
  while(j<64 &&
 800c548:	429a      	cmp	r2, r3
 800c54a:	dce1      	bgt.n	800c510 <Audio_VolumeCtl+0x10>
        }
  mic_instance = 0;
 800c54c:	2300      	movs	r3, #0
 800c54e:	60bb      	str	r3, [r7, #8]
  /* Now do the volume adjustment */
  return CCA02M1_AUDIO_IN_SetVolume(mic_instance, j);  
 800c550:	68f9      	ldr	r1, [r7, #12]
 800c552:	68b8      	ldr	r0, [r7, #8]
 800c554:	f7f5 fa48 	bl	80019e8 <CCA02M1_AUDIO_IN_SetVolume>
 800c558:	4603      	mov	r3, r0
 800c55a:	b25b      	sxtb	r3, r3
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	08013a74 	.word	0x08013a74

0800c568 <Audio_MuteCtl>:
* @brief  Controls AUDIO Mute.              
* @param  cmd: Command opcode
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_MuteCtl(uint8_t cmd)
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	4603      	mov	r3, r0
 800c570:	71fb      	strb	r3, [r7, #7]
  return BSP_ERROR_NONE;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <Audio_Stop>:
* @brief  Stops audio acquisition
* @param  none
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_Stop(void)
{  
 800c580:	b480      	push	{r7}
 800c582:	af00      	add	r7, sp, #0
#ifndef DISABLE_USB_DRIVEN_ACQUISITION  
  return CCA02M1_AUDIO_IN_Stop(CCA02M1_AUDIO_INSTANCE);  
#else
  return BSP_ERROR_NONE;
 800c584:	2300      	movs	r3, #0
#endif
}
 800c586:	4618      	mov	r0, r3
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <Audio_Pause>:
* @param  none
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/

static int8_t Audio_Pause(void)
{
 800c590:	b480      	push	{r7}
 800c592:	af00      	add	r7, sp, #0
  return 0;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr

0800c5a0 <Audio_Resume>:
* @brief  Resumes audio acquisition
* @param  none
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_Resume(void)
{  
 800c5a0:	b480      	push	{r7}
 800c5a2:	af00      	add	r7, sp, #0
  return BSP_ERROR_NONE;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <Audio_CommandMgr>:
* @param  None
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/

static int8_t Audio_CommandMgr(uint8_t cmd)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	71fb      	strb	r3, [r7, #7]
  return BSP_ERROR_NONE;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <Send_Audio_to_USB>:
* @note Depending on the calling frequency, a coherent amount of samples must be passed to
*       the function. E.g.: assuming a Sampling frequency of 16 KHz and 1 channel,
*       you can pass 16 PCM samples if the function is called each millisecond,
*       32 samples if called every 2 milliseconds and so on.
*/
void Send_Audio_to_USB(int16_t * audioData, uint16_t PCMSamples){
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	807b      	strh	r3, [r7, #2]
  
  USBD_AUDIO_Data_Transfer(&hUSBDDevice, (int16_t *)audioData, PCMSamples);
 800c5d4:	887b      	ldrh	r3, [r7, #2]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	6879      	ldr	r1, [r7, #4]
 800c5da:	4803      	ldr	r0, [pc, #12]	; (800c5e8 <Send_Audio_to_USB+0x20>)
 800c5dc:	f7fd fb26 	bl	8009c2c <USBD_AUDIO_Data_Transfer>
}
 800c5e0:	bf00      	nop
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	200023d4 	.word	0x200023d4

0800c5ec <__NVIC_SetPriority>:
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	6039      	str	r1, [r7, #0]
 800c5f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c5f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	db0a      	blt.n	800c616 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	b2da      	uxtb	r2, r3
 800c604:	490c      	ldr	r1, [pc, #48]	; (800c638 <__NVIC_SetPriority+0x4c>)
 800c606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c60a:	0112      	lsls	r2, r2, #4
 800c60c:	b2d2      	uxtb	r2, r2
 800c60e:	440b      	add	r3, r1
 800c610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c614:	e00a      	b.n	800c62c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	b2da      	uxtb	r2, r3
 800c61a:	4908      	ldr	r1, [pc, #32]	; (800c63c <__NVIC_SetPriority+0x50>)
 800c61c:	79fb      	ldrb	r3, [r7, #7]
 800c61e:	f003 030f 	and.w	r3, r3, #15
 800c622:	3b04      	subs	r3, #4
 800c624:	0112      	lsls	r2, r2, #4
 800c626:	b2d2      	uxtb	r2, r2
 800c628:	440b      	add	r3, r1
 800c62a:	761a      	strb	r2, [r3, #24]
}
 800c62c:	bf00      	nop
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr
 800c638:	e000e100 	.word	0xe000e100
 800c63c:	e000ed00 	.word	0xe000ed00

0800c640 <HAL_PCD_MspInit>:
* @brief  Initializes the PCD MSP.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b08a      	sub	sp, #40	; 0x28
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  /* Note: On STM32F401-Discovery board only USB OTG FS core is supported. */
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hpcd->Instance == USB_OTG_FS)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c650:	d13a      	bne.n	800c6c8 <HAL_PCD_MspInit+0x88>
  {
    /* Configure USB FS GPIOs */
    __GPIOA_CLK_ENABLE();
 800c652:	2300      	movs	r3, #0
 800c654:	613b      	str	r3, [r7, #16]
 800c656:	4b1e      	ldr	r3, [pc, #120]	; (800c6d0 <HAL_PCD_MspInit+0x90>)
 800c658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c65a:	4a1d      	ldr	r2, [pc, #116]	; (800c6d0 <HAL_PCD_MspInit+0x90>)
 800c65c:	f043 0301 	orr.w	r3, r3, #1
 800c660:	6313      	str	r3, [r2, #48]	; 0x30
 800c662:	4b1b      	ldr	r3, [pc, #108]	; (800c6d0 <HAL_PCD_MspInit+0x90>)
 800c664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c666:	f003 0301 	and.w	r3, r3, #1
 800c66a:	613b      	str	r3, [r7, #16]
 800c66c:	693b      	ldr	r3, [r7, #16]
    
    /* Configure DM DP Pins */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800c66e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c674:	2303      	movs	r3, #3
 800c676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c678:	2302      	movs	r3, #2
 800c67a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c67c:	2300      	movs	r3, #0
 800c67e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c680:	230a      	movs	r3, #10
 800c682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800c684:	f107 0314 	add.w	r3, r7, #20
 800c688:	4619      	mov	r1, r3
 800c68a:	4812      	ldr	r0, [pc, #72]	; (800c6d4 <HAL_PCD_MspInit+0x94>)
 800c68c:	f7f6 fb56 	bl	8002d3c <HAL_GPIO_Init>
    
    /* Enable USB FS Clocks */ 
    __USB_OTG_FS_CLK_ENABLE();
 800c690:	4b0f      	ldr	r3, [pc, #60]	; (800c6d0 <HAL_PCD_MspInit+0x90>)
 800c692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c694:	4a0e      	ldr	r2, [pc, #56]	; (800c6d0 <HAL_PCD_MspInit+0x90>)
 800c696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c69a:	6353      	str	r3, [r2, #52]	; 0x34
 800c69c:	2300      	movs	r3, #0
 800c69e:	60fb      	str	r3, [r7, #12]
 800c6a0:	4b0b      	ldr	r3, [pc, #44]	; (800c6d0 <HAL_PCD_MspInit+0x90>)
 800c6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6a4:	4a0a      	ldr	r2, [pc, #40]	; (800c6d0 <HAL_PCD_MspInit+0x90>)
 800c6a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c6aa:	6453      	str	r3, [r2, #68]	; 0x44
 800c6ac:	4b08      	ldr	r3, [pc, #32]	; (800c6d0 <HAL_PCD_MspInit+0x90>)
 800c6ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6b4:	60fb      	str	r3, [r7, #12]
 800c6b6:	68fb      	ldr	r3, [r7, #12]
    
    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	2105      	movs	r1, #5
 800c6bc:	2043      	movs	r0, #67	; 0x43
 800c6be:	f7f5 ff3a 	bl	8002536 <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c6c2:	2043      	movs	r0, #67	; 0x43
 800c6c4:	f7f5 ff53 	bl	800256e <HAL_NVIC_EnableIRQ>
  } 
}
 800c6c8:	bf00      	nop
 800c6ca:	3728      	adds	r7, #40	; 0x28
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	40023800 	.word	0x40023800
 800c6d4:	40020000 	.word	0x40020000

0800c6d8 <HAL_PCD_SetupStageCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	4610      	mov	r0, r2
 800c6f0:	f7fd ff46 	bl	800a580 <USBD_LL_SetupStage>
}
 800c6f4:	bf00      	nop
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <HAL_PCD_DataOutStageCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	460b      	mov	r3, r1
 800c706:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c70e:	78fa      	ldrb	r2, [r7, #3]
 800c710:	6879      	ldr	r1, [r7, #4]
 800c712:	4613      	mov	r3, r2
 800c714:	00db      	lsls	r3, r3, #3
 800c716:	1a9b      	subs	r3, r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	440b      	add	r3, r1
 800c71c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	78fb      	ldrb	r3, [r7, #3]
 800c724:	4619      	mov	r1, r3
 800c726:	f7fd ff7e 	bl	800a626 <USBD_LL_DataOutStage>
}
 800c72a:	bf00      	nop
 800c72c:	3708      	adds	r7, #8
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}

0800c732 <HAL_PCD_DataInStageCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c732:	b580      	push	{r7, lr}
 800c734:	b082      	sub	sp, #8
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
 800c73a:	460b      	mov	r3, r1
 800c73c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c744:	78fa      	ldrb	r2, [r7, #3]
 800c746:	6879      	ldr	r1, [r7, #4]
 800c748:	4613      	mov	r3, r2
 800c74a:	00db      	lsls	r3, r3, #3
 800c74c:	1a9b      	subs	r3, r3, r2
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	440b      	add	r3, r1
 800c752:	3348      	adds	r3, #72	; 0x48
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	78fb      	ldrb	r3, [r7, #3]
 800c758:	4619      	mov	r1, r3
 800c75a:	f7fd ffc7 	bl	800a6ec <USBD_LL_DataInStage>
} 
 800c75e:	bf00      	nop
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <HAL_PCD_SOFCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b082      	sub	sp, #8
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c774:	4618      	mov	r0, r3
 800c776:	f7fe f8cb 	bl	800a910 <USBD_LL_SOF>
}
 800c77a:	bf00      	nop
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <HAL_PCD_ResetCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800c782:	b580      	push	{r7, lr}
 800c784:	b084      	sub	sp, #16
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c78a:	2301      	movs	r3, #1
 800c78c:	73fb      	strb	r3, [r7, #15]
  
  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d002      	beq.n	800c79c <HAL_PCD_ResetCallback+0x1a>
 800c796:	2b02      	cmp	r3, #2
 800c798:	d003      	beq.n	800c7a2 <HAL_PCD_ResetCallback+0x20>
 800c79a:	e005      	b.n	800c7a8 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 800c79c:	2300      	movs	r3, #0
 800c79e:	73fb      	strb	r3, [r7, #15]
    break;
 800c7a0:	e005      	b.n	800c7ae <HAL_PCD_ResetCallback+0x2c>
    
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c7a6:	e002      	b.n	800c7ae <HAL_PCD_ResetCallback+0x2c>
    
  default:
    speed = USBD_SPEED_FULL;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c7ac:	bf00      	nop
  }
  USBD_LL_SetSpeed(hpcd->pData, speed);  
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7b4:	7bfa      	ldrb	r2, [r7, #15]
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe f86e 	bl	800a89a <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset(hpcd->pData);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7fe f827 	bl	800a818 <USBD_LL_Reset>
}
 800c7ca:	bf00      	nop
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <HAL_PCD_SuspendCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b082      	sub	sp, #8
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fe f86a 	bl	800a8ba <USBD_LL_Suspend>
}
 800c7e6:	bf00      	nop
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <HAL_PCD_ResumeCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b082      	sub	sp, #8
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fe f871 	bl	800a8e4 <USBD_LL_Resume>
}
 800c802:	bf00      	nop
 800c804:	3708      	adds	r7, #8
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <HAL_PCD_ISOOUTIncompleteCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b082      	sub	sp, #8
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	460b      	mov	r3, r1
 800c814:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c81c:	78fa      	ldrb	r2, [r7, #3]
 800c81e:	4611      	mov	r1, r2
 800c820:	4618      	mov	r0, r3
 800c822:	f7fe f89c 	bl	800a95e <USBD_LL_IsoOUTIncomplete>
}
 800c826:	bf00      	nop
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <HAL_PCD_ISOINIncompleteCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b082      	sub	sp, #8
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
 800c836:	460b      	mov	r3, r1
 800c838:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c840:	78fa      	ldrb	r2, [r7, #3]
 800c842:	4611      	mov	r1, r2
 800c844:	4618      	mov	r0, r3
 800c846:	f7fe f87d 	bl	800a944 <USBD_LL_IsoINIncomplete>
}
 800c84a:	bf00      	nop
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}

0800c852 <HAL_PCD_ConnectCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b082      	sub	sp, #8
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c860:	4618      	mov	r0, r3
 800c862:	f7fe f889 	bl	800a978 <USBD_LL_DevConnected>
}
 800c866:	bf00      	nop
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <HAL_PCD_DisconnectCallback>:
* @brief  SOF callback.
* @param  hpcd: PCD handle
* @retval None
*/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b082      	sub	sp, #8
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fe f886 	bl	800a98e <USBD_LL_DevDisconnected>
}
 800c882:	bf00      	nop
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
	...

0800c88c <USBD_LL_Init>:
*         Initialize the Low Level portion of the Device driver.
* @param  pdev: Device handle
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  /* Change Systick prioity */
  NVIC_SetPriority (SysTick_IRQn, 0);  
 800c894:	2100      	movs	r1, #0
 800c896:	f04f 30ff 	mov.w	r0, #4294967295
 800c89a:	f7ff fea7 	bl	800c5ec <__NVIC_SetPriority>
  
  /*Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 800c89e:	4b1e      	ldr	r3, [pc, #120]	; (800c918 <USBD_LL_Init+0x8c>)
 800c8a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c8a4:	601a      	str	r2, [r3, #0]
  hpcd.Init.dev_endpoints = 3; 
 800c8a6:	4b1c      	ldr	r3, [pc, #112]	; (800c918 <USBD_LL_Init+0x8c>)
 800c8a8:	2203      	movs	r2, #3
 800c8aa:	605a      	str	r2, [r3, #4]
  hpcd.Init.use_dedicated_ep1 = 0;
 800c8ac:	4b1a      	ldr	r3, [pc, #104]	; (800c918 <USBD_LL_Init+0x8c>)
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;  
 800c8b2:	4b19      	ldr	r3, [pc, #100]	; (800c918 <USBD_LL_Init+0x8c>)
 800c8b4:	2240      	movs	r2, #64	; 0x40
 800c8b6:	615a      	str	r2, [r3, #20]
  hpcd.Init.dma_enable = 0;
 800c8b8:	4b17      	ldr	r3, [pc, #92]	; (800c918 <USBD_LL_Init+0x8c>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	611a      	str	r2, [r3, #16]
  hpcd.Init.low_power_enable = 0;
 800c8be:	4b16      	ldr	r3, [pc, #88]	; (800c918 <USBD_LL_Init+0x8c>)
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	621a      	str	r2, [r3, #32]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED; 
 800c8c4:	4b14      	ldr	r3, [pc, #80]	; (800c918 <USBD_LL_Init+0x8c>)
 800c8c6:	2202      	movs	r2, #2
 800c8c8:	619a      	str	r2, [r3, #24]
  hpcd.Init.Sof_enable = 0;
 800c8ca:	4b13      	ldr	r3, [pc, #76]	; (800c918 <USBD_LL_Init+0x8c>)
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	61da      	str	r2, [r3, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800c8d0:	4b11      	ldr	r3, [pc, #68]	; (800c918 <USBD_LL_Init+0x8c>)
 800c8d2:	2202      	movs	r2, #2
 800c8d4:	60da      	str	r2, [r3, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 800c8d6:	4b10      	ldr	r3, [pc, #64]	; (800c918 <USBD_LL_Init+0x8c>)
 800c8d8:	2200      	movs	r2, #0
 800c8da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 800c8dc:	4a0e      	ldr	r2, [pc, #56]	; (800c918 <USBD_LL_Init+0x8c>)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	4a0c      	ldr	r2, [pc, #48]	; (800c918 <USBD_LL_Init+0x8c>)
 800c8e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  /*Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 800c8ec:	480a      	ldr	r0, [pc, #40]	; (800c918 <USBD_LL_Init+0x8c>)
 800c8ee:	f7f6 fec5 	bl	800367c <HAL_PCD_Init>
  
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 800c8f2:	2180      	movs	r1, #128	; 0x80
 800c8f4:	4808      	ldr	r0, [pc, #32]	; (800c918 <USBD_LL_Init+0x8c>)
 800c8f6:	f7f8 f870 	bl	80049da <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 800c8fa:	2240      	movs	r2, #64	; 0x40
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	4806      	ldr	r0, [pc, #24]	; (800c918 <USBD_LL_Init+0x8c>)
 800c900:	f7f8 f824 	bl	800494c <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x64);
 800c904:	2264      	movs	r2, #100	; 0x64
 800c906:	2101      	movs	r1, #1
 800c908:	4803      	ldr	r0, [pc, #12]	; (800c918 <USBD_LL_Init+0x8c>)
 800c90a:	f7f8 f81f 	bl	800494c <HAL_PCDEx_SetTxFiFo>

  
  return USBD_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	20007244 	.word	0x20007244

0800c91c <USBD_LL_Start>:
*         Start the Low Level portion of the Device driver.
* @param  pdev: Device handle
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7f6 ffca 	bl	80038c4 <HAL_PCD_Start>
  return USBD_OK; 
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3708      	adds	r7, #8
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <USBD_LL_OpenEP>:
*/
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                     uint8_t  ep_addr,                                      
                                     uint8_t  ep_type,
                                     uint16_t ep_mps)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b082      	sub	sp, #8
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
 800c942:	4608      	mov	r0, r1
 800c944:	4611      	mov	r1, r2
 800c946:	461a      	mov	r2, r3
 800c948:	4603      	mov	r3, r0
 800c94a:	70fb      	strb	r3, [r7, #3]
 800c94c:	460b      	mov	r3, r1
 800c94e:	70bb      	strb	r3, [r7, #2]
 800c950:	4613      	mov	r3, r2
 800c952:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData, 
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c95a:	78bb      	ldrb	r3, [r7, #2]
 800c95c:	883a      	ldrh	r2, [r7, #0]
 800c95e:	78f9      	ldrb	r1, [r7, #3]
 800c960:	f7f7 fbe7 	bl	8004132 <HAL_PCD_EP_Open>
                  ep_addr, 
                  ep_mps, 
                  ep_type);
  
  return USBD_OK; 
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <USBD_LL_CloseEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b082      	sub	sp, #8
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
 800c976:	460b      	mov	r3, r1
 800c978:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c980:	78fa      	ldrb	r2, [r7, #3]
 800c982:	4611      	mov	r1, r2
 800c984:	4618      	mov	r0, r3
 800c986:	f7f7 fc3c 	bl	8004202 <HAL_PCD_EP_Close>
  return USBD_OK; 
 800c98a:	2300      	movs	r3, #0
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <USBD_LL_FlushEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_FlushEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	460b      	mov	r3, r1
 800c99e:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9a6:	78fa      	ldrb	r2, [r7, #3]
 800c9a8:	4611      	mov	r1, r2
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7f7 fdc2 	bl	8004534 <HAL_PCD_EP_Flush>
  return USBD_OK; 
 800c9b0:	2300      	movs	r3, #0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBD_LL_StallEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b082      	sub	sp, #8
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9cc:	78fa      	ldrb	r2, [r7, #3]
 800c9ce:	4611      	mov	r1, r2
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7f7 fcf5 	bl	80043c0 <HAL_PCD_EP_SetStall>
  return USBD_OK; 
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <USBD_LL_ClearStallEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9f2:	78fa      	ldrb	r2, [r7, #3]
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7f7 fd46 	bl	8004488 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <USBD_LL_IsStallEP>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval Stall (1: yes, 0: No)
*/
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800ca06:	b480      	push	{r7}
 800ca08:	b085      	sub	sp, #20
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
 800ca0e:	460b      	mov	r3, r1
 800ca10:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData; 
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca18:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800ca1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	da0b      	bge.n	800ca3a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800ca22:	78fb      	ldrb	r3, [r7, #3]
 800ca24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca28:	68f9      	ldr	r1, [r7, #12]
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	00db      	lsls	r3, r3, #3
 800ca2e:	1a9b      	subs	r3, r3, r2
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	440b      	add	r3, r1
 800ca34:	333e      	adds	r3, #62	; 0x3e
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	e00b      	b.n	800ca52 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800ca3a:	78fb      	ldrb	r3, [r7, #3]
 800ca3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca40:	68f9      	ldr	r1, [r7, #12]
 800ca42:	4613      	mov	r3, r2
 800ca44:	00db      	lsls	r3, r3, #3
 800ca46:	1a9b      	subs	r3, r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	440b      	add	r3, r1
 800ca4c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca50:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3714      	adds	r7, #20
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr

0800ca5e <USBD_LL_SetUSBAddress>:
* @param  pdev: device handle
* @param  ep_addr: Endpoint Number      
* @retval USBD Status
*/
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b082      	sub	sp, #8
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
 800ca66:	460b      	mov	r3, r1
 800ca68:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca70:	78fa      	ldrb	r2, [r7, #3]
 800ca72:	4611      	mov	r1, r2
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7f7 fb37 	bl	80040e8 <HAL_PCD_SetAddress>
  return USBD_OK; 
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <USBD_LL_Transmit>:
*/
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint32_t  size)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	607a      	str	r2, [r7, #4]
 800ca8e:	603b      	str	r3, [r7, #0]
 800ca90:	460b      	mov	r3, r1
 800ca92:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca9a:	7af9      	ldrb	r1, [r7, #11]
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	f7f7 fc44 	bl	800432c <HAL_PCD_EP_Transmit>
  return USBD_OK;   
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <USBD_LL_PrepareReceive>:
*/
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint32_t  size)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b084      	sub	sp, #16
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	60f8      	str	r0, [r7, #12]
 800cab6:	607a      	str	r2, [r7, #4]
 800cab8:	603b      	str	r3, [r7, #0]
 800caba:	460b      	mov	r3, r1
 800cabc:	72fb      	strb	r3, [r7, #11]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cac4:	7af9      	ldrb	r1, [r7, #11]
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	f7f7 fbe4 	bl	8004296 <HAL_PCD_EP_Receive>
  return USBD_OK;   
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3710      	adds	r7, #16
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <USBD_AUDIO_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	4603      	mov	r3, r0
 800cae0:	6039      	str	r1, [r7, #0]
 800cae2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(hUSBDDeviceDesc);
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	2212      	movs	r2, #18
 800cae8:	801a      	strh	r2, [r3, #0]
  return hUSBDDeviceDesc;
 800caea:	4b03      	ldr	r3, [pc, #12]	; (800caf8 <USBD_AUDIO_DeviceDescriptor+0x20>)
}
 800caec:	4618      	mov	r0, r3
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr
 800caf8:	20000634 	.word	0x20000634

0800cafc <USBD_AUDIO_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	4603      	mov	r3, r0
 800cb04:	6039      	str	r1, [r7, #0]
 800cb06:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);  
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	2204      	movs	r2, #4
 800cb0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb0e:	4b03      	ldr	r3, [pc, #12]	; (800cb1c <USBD_AUDIO_LangIDStrDescriptor+0x20>)
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	20000648 	.word	0x20000648

0800cb20 <USBD_AUDIO_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	4603      	mov	r3, r0
 800cb28:	6039      	str	r1, [r7, #0]
 800cb2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb2c:	79fb      	ldrb	r3, [r7, #7]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d105      	bne.n	800cb3e <USBD_AUDIO_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800cb32:	683a      	ldr	r2, [r7, #0]
 800cb34:	4907      	ldr	r1, [pc, #28]	; (800cb54 <USBD_AUDIO_ProductStrDescriptor+0x34>)
 800cb36:	4808      	ldr	r0, [pc, #32]	; (800cb58 <USBD_AUDIO_ProductStrDescriptor+0x38>)
 800cb38:	f7fe fca5 	bl	800b486 <USBD_GetString>
 800cb3c:	e004      	b.n	800cb48 <USBD_AUDIO_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800cb3e:	683a      	ldr	r2, [r7, #0]
 800cb40:	4904      	ldr	r1, [pc, #16]	; (800cb54 <USBD_AUDIO_ProductStrDescriptor+0x34>)
 800cb42:	4806      	ldr	r0, [pc, #24]	; (800cb5c <USBD_AUDIO_ProductStrDescriptor+0x3c>)
 800cb44:	f7fe fc9f 	bl	800b486 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb48:	4b02      	ldr	r3, [pc, #8]	; (800cb54 <USBD_AUDIO_ProductStrDescriptor+0x34>)
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	2000764c 	.word	0x2000764c
 800cb58:	08013980 	.word	0x08013980
 800cb5c:	080139a4 	.word	0x080139a4

0800cb60 <USBD_AUDIO_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	4603      	mov	r3, r0
 800cb68:	6039      	str	r1, [r7, #0]
 800cb6a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cb6c:	683a      	ldr	r2, [r7, #0]
 800cb6e:	4904      	ldr	r1, [pc, #16]	; (800cb80 <USBD_AUDIO_ManufacturerStrDescriptor+0x20>)
 800cb70:	4804      	ldr	r0, [pc, #16]	; (800cb84 <USBD_AUDIO_ManufacturerStrDescriptor+0x24>)
 800cb72:	f7fe fc88 	bl	800b486 <USBD_GetString>
  return USBD_StrDesc;
 800cb76:	4b02      	ldr	r3, [pc, #8]	; (800cb80 <USBD_AUDIO_ManufacturerStrDescriptor+0x20>)
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	2000764c 	.word	0x2000764c
 800cb84:	080139c8 	.word	0x080139c8

0800cb88 <USBD_AUDIO_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	4603      	mov	r3, r0
 800cb90:	6039      	str	r1, [r7, #0]
 800cb92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cb94:	79fb      	ldrb	r3, [r7, #7]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d105      	bne.n	800cba6 <USBD_AUDIO_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 800cb9a:	683a      	ldr	r2, [r7, #0]
 800cb9c:	4907      	ldr	r1, [pc, #28]	; (800cbbc <USBD_AUDIO_SerialStrDescriptor+0x34>)
 800cb9e:	4808      	ldr	r0, [pc, #32]	; (800cbc0 <USBD_AUDIO_SerialStrDescriptor+0x38>)
 800cba0:	f7fe fc71 	bl	800b486 <USBD_GetString>
 800cba4:	e004      	b.n	800cbb0 <USBD_AUDIO_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 800cba6:	683a      	ldr	r2, [r7, #0]
 800cba8:	4904      	ldr	r1, [pc, #16]	; (800cbbc <USBD_AUDIO_SerialStrDescriptor+0x34>)
 800cbaa:	4806      	ldr	r0, [pc, #24]	; (800cbc4 <USBD_AUDIO_SerialStrDescriptor+0x3c>)
 800cbac:	f7fe fc6b 	bl	800b486 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbb0:	4b02      	ldr	r3, [pc, #8]	; (800cbbc <USBD_AUDIO_SerialStrDescriptor+0x34>)
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	2000764c 	.word	0x2000764c
 800cbc0:	080139dc 	.word	0x080139dc
 800cbc4:	080139ec 	.word	0x080139ec

0800cbc8 <USBD_AUDIO_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	4603      	mov	r3, r0
 800cbd0:	6039      	str	r1, [r7, #0]
 800cbd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cbd4:	79fb      	ldrb	r3, [r7, #7]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d105      	bne.n	800cbe6 <USBD_AUDIO_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800cbda:	683a      	ldr	r2, [r7, #0]
 800cbdc:	4907      	ldr	r1, [pc, #28]	; (800cbfc <USBD_AUDIO_ConfigStrDescriptor+0x34>)
 800cbde:	4808      	ldr	r0, [pc, #32]	; (800cc00 <USBD_AUDIO_ConfigStrDescriptor+0x38>)
 800cbe0:	f7fe fc51 	bl	800b486 <USBD_GetString>
 800cbe4:	e004      	b.n	800cbf0 <USBD_AUDIO_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800cbe6:	683a      	ldr	r2, [r7, #0]
 800cbe8:	4904      	ldr	r1, [pc, #16]	; (800cbfc <USBD_AUDIO_ConfigStrDescriptor+0x34>)
 800cbea:	4805      	ldr	r0, [pc, #20]	; (800cc00 <USBD_AUDIO_ConfigStrDescriptor+0x38>)
 800cbec:	f7fe fc4b 	bl	800b486 <USBD_GetString>
  }
  return USBD_StrDesc;  
 800cbf0:	4b02      	ldr	r3, [pc, #8]	; (800cbfc <USBD_AUDIO_ConfigStrDescriptor+0x34>)
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3708      	adds	r7, #8
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	2000764c 	.word	0x2000764c
 800cc00:	080139fc 	.word	0x080139fc

0800cc04 <USBD_AUDIO_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	6039      	str	r1, [r7, #0]
 800cc0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc10:	79fb      	ldrb	r3, [r7, #7]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d105      	bne.n	800cc22 <USBD_AUDIO_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	4907      	ldr	r1, [pc, #28]	; (800cc38 <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
 800cc1a:	4808      	ldr	r0, [pc, #32]	; (800cc3c <USBD_AUDIO_InterfaceStrDescriptor+0x38>)
 800cc1c:	f7fe fc33 	bl	800b486 <USBD_GetString>
 800cc20:	e004      	b.n	800cc2c <USBD_AUDIO_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800cc22:	683a      	ldr	r2, [r7, #0]
 800cc24:	4904      	ldr	r1, [pc, #16]	; (800cc38 <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
 800cc26:	4805      	ldr	r0, [pc, #20]	; (800cc3c <USBD_AUDIO_InterfaceStrDescriptor+0x38>)
 800cc28:	f7fe fc2d 	bl	800b486 <USBD_GetString>
  }
  return USBD_StrDesc;  
 800cc2c:	4b02      	ldr	r3, [pc, #8]	; (800cc38 <USBD_AUDIO_InterfaceStrDescriptor+0x34>)
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	2000764c 	.word	0x2000764c
 800cc3c:	08013a0c 	.word	0x08013a0c

0800cc40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800cc40:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cc78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800cc44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800cc46:	e003      	b.n	800cc50 <LoopCopyDataInit>

0800cc48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800cc48:	4b0c      	ldr	r3, [pc, #48]	; (800cc7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800cc4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800cc4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800cc4e:	3104      	adds	r1, #4

0800cc50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800cc50:	480b      	ldr	r0, [pc, #44]	; (800cc80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800cc52:	4b0c      	ldr	r3, [pc, #48]	; (800cc84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800cc54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800cc56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800cc58:	d3f6      	bcc.n	800cc48 <CopyDataInit>
  ldr  r2, =_sbss
 800cc5a:	4a0b      	ldr	r2, [pc, #44]	; (800cc88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800cc5c:	e002      	b.n	800cc64 <LoopFillZerobss>

0800cc5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800cc5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800cc60:	f842 3b04 	str.w	r3, [r2], #4

0800cc64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800cc64:	4b09      	ldr	r3, [pc, #36]	; (800cc8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800cc66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800cc68:	d3f9      	bcc.n	800cc5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800cc6a:	f7ff fb5d 	bl	800c328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cc6e:	f001 ff3d 	bl	800eaec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cc72:	f7ff fa07 	bl	800c084 <main>
  bx  lr    
 800cc76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800cc78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800cc7c:	08013e4c 	.word	0x08013e4c
  ldr  r0, =_sdata
 800cc80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800cc84:	20000820 	.word	0x20000820
  ldr  r2, =_sbss
 800cc88:	20000820 	.word	0x20000820
  ldr  r3, = _ebss
 800cc8c:	20007718 	.word	0x20007718

0800cc90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cc90:	e7fe      	b.n	800cc90 <ADC_IRQHandler>
	...

0800cc94 <D16_GENERIC>:
 800cc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc98:	b089      	sub	sp, #36	; 0x24
 800cc9a:	68d4      	ldr	r4, [r2, #12]
 800cc9c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800cc9e:	6993      	ldr	r3, [r2, #24]
 800cca0:	9407      	str	r4, [sp, #28]
 800cca2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800cca4:	9306      	str	r3, [sp, #24]
 800cca6:	9402      	str	r4, [sp, #8]
 800cca8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800ccac:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800ccb0:	69d3      	ldr	r3, [r2, #28]
 800ccb2:	6896      	ldr	r6, [r2, #8]
 800ccb4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ccb6:	9103      	str	r1, [sp, #12]
 800ccb8:	2d00      	cmp	r5, #0
 800ccba:	d066      	beq.n	800cd8a <D16_GENERIC+0xf6>
 800ccbc:	f004 0510 	and.w	r5, r4, #16
 800ccc0:	f004 0420 	and.w	r4, r4, #32
 800ccc4:	9504      	str	r5, [sp, #16]
 800ccc6:	4938      	ldr	r1, [pc, #224]	; (800cda8 <D16_GENERIC+0x114>)
 800ccc8:	9405      	str	r4, [sp, #20]
 800ccca:	f04f 0e00 	mov.w	lr, #0
 800ccce:	4635      	mov	r5, r6
 800ccd0:	e04f      	b.n	800cd72 <D16_GENERIC+0xde>
 800ccd2:	5d87      	ldrb	r7, [r0, r6]
 800ccd4:	7804      	ldrb	r4, [r0, #0]
 800ccd6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800ccda:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800ccde:	b2e6      	uxtb	r6, r4
 800cce0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800cce4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800cce8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800ccec:	4433      	add	r3, r6
 800ccee:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800ccf2:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800ccf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ccfa:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800ccfe:	0aa3      	lsrs	r3, r4, #10
 800cd00:	4c2a      	ldr	r4, [pc, #168]	; (800cdac <D16_GENERIC+0x118>)
 800cd02:	fb26 5404 	smlad	r4, r6, r4, r5
 800cd06:	4d2a      	ldr	r5, [pc, #168]	; (800cdb0 <D16_GENERIC+0x11c>)
 800cd08:	fb26 f505 	smuad	r5, r6, r5
 800cd0c:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800cd10:	eb04 080a 	add.w	r8, r4, sl
 800cd14:	eba8 080b 	sub.w	r8, r8, fp
 800cd18:	4646      	mov	r6, r8
 800cd1a:	17f7      	asrs	r7, r6, #31
 800cd1c:	e9cd 6700 	strd	r6, r7, [sp]
 800cd20:	9e04      	ldr	r6, [sp, #16]
 800cd22:	f10e 0c01 	add.w	ip, lr, #1
 800cd26:	b16e      	cbz	r6, 800cd44 <D16_GENERIC+0xb0>
 800cd28:	6a16      	ldr	r6, [r2, #32]
 800cd2a:	9f01      	ldr	r7, [sp, #4]
 800cd2c:	fba8 8906 	umull	r8, r9, r8, r6
 800cd30:	fb06 9907 	mla	r9, r6, r7, r9
 800cd34:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800cd38:	f149 0900 	adc.w	r9, r9, #0
 800cd3c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800cd40:	46a3      	mov	fp, r4
 800cd42:	4654      	mov	r4, sl
 800cd44:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800cd46:	9f02      	ldr	r7, [sp, #8]
 800cd48:	0424      	lsls	r4, r4, #16
 800cd4a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800cd4e:	f04f 0900 	mov.w	r9, #0
 800cd52:	fb0e fe06 	mul.w	lr, lr, r6
 800cd56:	fbc7 8904 	smlal	r8, r9, r7, r4
 800cd5a:	9e03      	ldr	r6, [sp, #12]
 800cd5c:	464f      	mov	r7, r9
 800cd5e:	10bc      	asrs	r4, r7, #2
 800cd60:	f304 040f 	ssat	r4, #16, r4
 800cd64:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800cd68:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800cd6a:	fa1f fe8c 	uxth.w	lr, ip
 800cd6e:	4574      	cmp	r4, lr
 800cd70:	d90a      	bls.n	800cd88 <D16_GENERIC+0xf4>
 800cd72:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800cd74:	2c01      	cmp	r4, #1
 800cd76:	b2e6      	uxtb	r6, r4
 800cd78:	d1ab      	bne.n	800ccd2 <D16_GENERIC+0x3e>
 800cd7a:	9e05      	ldr	r6, [sp, #20]
 800cd7c:	f850 4b02 	ldr.w	r4, [r0], #2
 800cd80:	2e00      	cmp	r6, #0
 800cd82:	d0ac      	beq.n	800ccde <D16_GENERIC+0x4a>
 800cd84:	ba64      	rev16	r4, r4
 800cd86:	e7aa      	b.n	800ccde <D16_GENERIC+0x4a>
 800cd88:	462e      	mov	r6, r5
 800cd8a:	9907      	ldr	r1, [sp, #28]
 800cd8c:	61d3      	str	r3, [r2, #28]
 800cd8e:	9b06      	ldr	r3, [sp, #24]
 800cd90:	6096      	str	r6, [r2, #8]
 800cd92:	2000      	movs	r0, #0
 800cd94:	60d1      	str	r1, [r2, #12]
 800cd96:	f8c2 a010 	str.w	sl, [r2, #16]
 800cd9a:	f8c2 b014 	str.w	fp, [r2, #20]
 800cd9e:	6193      	str	r3, [r2, #24]
 800cda0:	b009      	add	sp, #36	; 0x24
 800cda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda6:	bf00      	nop
 800cda8:	20000000 	.word	0x20000000
 800cdac:	00030001 	.word	0x00030001
 800cdb0:	00010003 	.word	0x00010003

0800cdb4 <D24_GENERIC>:
 800cdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb8:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800cdba:	6993      	ldr	r3, [r2, #24]
 800cdbc:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800cdbe:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800cdc2:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800cdc6:	6894      	ldr	r4, [r2, #8]
 800cdc8:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800cdcc:	b089      	sub	sp, #36	; 0x24
 800cdce:	9307      	str	r3, [sp, #28]
 800cdd0:	9503      	str	r5, [sp, #12]
 800cdd2:	69d3      	ldr	r3, [r2, #28]
 800cdd4:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800cdd6:	9104      	str	r1, [sp, #16]
 800cdd8:	2e00      	cmp	r6, #0
 800cdda:	f000 8096 	beq.w	800cf0a <D24_GENERIC+0x156>
 800cdde:	f005 0610 	and.w	r6, r5, #16
 800cde2:	f005 0520 	and.w	r5, r5, #32
 800cde6:	4954      	ldr	r1, [pc, #336]	; (800cf38 <D24_GENERIC+0x184>)
 800cde8:	9605      	str	r6, [sp, #20]
 800cdea:	9506      	str	r5, [sp, #24]
 800cdec:	f04f 0e00 	mov.w	lr, #0
 800cdf0:	f8cd 9008 	str.w	r9, [sp, #8]
 800cdf4:	e06a      	b.n	800cecc <D24_GENERIC+0x118>
 800cdf6:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800cdfa:	f810 8007 	ldrb.w	r8, [r0, r7]
 800cdfe:	f890 c000 	ldrb.w	ip, [r0]
 800ce02:	042d      	lsls	r5, r5, #16
 800ce04:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800ce08:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800ce0c:	44ac      	add	ip, r5
 800ce0e:	4438      	add	r0, r7
 800ce10:	fa5f f68c 	uxtb.w	r6, ip
 800ce14:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800ce18:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800ce1c:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800ce20:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ce24:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800ce28:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800ce2c:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800ce30:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800ce34:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ce38:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800ce3c:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800ce40:	4d3e      	ldr	r5, [pc, #248]	; (800cf3c <D24_GENERIC+0x188>)
 800ce42:	fb26 b705 	smlad	r7, r6, r5, fp
 800ce46:	4d3e      	ldr	r5, [pc, #248]	; (800cf40 <D24_GENERIC+0x18c>)
 800ce48:	fb26 4b05 	smlad	fp, r6, r5, r4
 800ce4c:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800ce50:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800ce54:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800ce58:	2401      	movs	r4, #1
 800ce5a:	fb26 f604 	smuad	r6, r6, r4
 800ce5e:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800ce62:	9f02      	ldr	r7, [sp, #8]
 800ce64:	eb0e 0c04 	add.w	ip, lr, r4
 800ce68:	eb08 0406 	add.w	r4, r8, r6
 800ce6c:	eb05 060a 	add.w	r6, r5, sl
 800ce70:	1bf6      	subs	r6, r6, r7
 800ce72:	4637      	mov	r7, r6
 800ce74:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800ce78:	e9cd 7800 	strd	r7, r8, [sp]
 800ce7c:	9f05      	ldr	r7, [sp, #20]
 800ce7e:	b177      	cbz	r7, 800ce9e <D24_GENERIC+0xea>
 800ce80:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800ce84:	9502      	str	r5, [sp, #8]
 800ce86:	fba6 9a08 	umull	r9, sl, r6, r8
 800ce8a:	9e01      	ldr	r6, [sp, #4]
 800ce8c:	fb08 aa06 	mla	sl, r8, r6, sl
 800ce90:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800ce94:	f14a 0700 	adc.w	r7, sl, #0
 800ce98:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800ce9c:	4655      	mov	r5, sl
 800ce9e:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800cea0:	9f03      	ldr	r7, [sp, #12]
 800cea2:	03ad      	lsls	r5, r5, #14
 800cea4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800cea8:	f04f 0900 	mov.w	r9, #0
 800ceac:	fb0e fe06 	mul.w	lr, lr, r6
 800ceb0:	fbc7 8905 	smlal	r8, r9, r7, r5
 800ceb4:	9e04      	ldr	r6, [sp, #16]
 800ceb6:	464f      	mov	r7, r9
 800ceb8:	10bd      	asrs	r5, r7, #2
 800ceba:	f305 050f 	ssat	r5, #16, r5
 800cebe:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800cec2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800cec4:	fa1f fe8c 	uxth.w	lr, ip
 800cec8:	4575      	cmp	r5, lr
 800ceca:	d91c      	bls.n	800cf06 <D24_GENERIC+0x152>
 800cecc:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800cece:	b2ef      	uxtb	r7, r5
 800ced0:	2d01      	cmp	r5, #1
 800ced2:	b23e      	sxth	r6, r7
 800ced4:	d18f      	bne.n	800cdf6 <D24_GENERIC+0x42>
 800ced6:	9d06      	ldr	r5, [sp, #24]
 800ced8:	b15d      	cbz	r5, 800cef2 <D24_GENERIC+0x13e>
 800ceda:	f01e 0f01 	tst.w	lr, #1
 800cede:	d122      	bne.n	800cf26 <D24_GENERIC+0x172>
 800cee0:	7805      	ldrb	r5, [r0, #0]
 800cee2:	78c7      	ldrb	r7, [r0, #3]
 800cee4:	7846      	ldrb	r6, [r0, #1]
 800cee6:	022d      	lsls	r5, r5, #8
 800cee8:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800ceec:	44b4      	add	ip, r6
 800ceee:	3002      	adds	r0, #2
 800cef0:	e78e      	b.n	800ce10 <D24_GENERIC+0x5c>
 800cef2:	7846      	ldrb	r6, [r0, #1]
 800cef4:	f890 c002 	ldrb.w	ip, [r0, #2]
 800cef8:	f810 5b03 	ldrb.w	r5, [r0], #3
 800cefc:	0236      	lsls	r6, r6, #8
 800cefe:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800cf02:	44ac      	add	ip, r5
 800cf04:	e784      	b.n	800ce10 <D24_GENERIC+0x5c>
 800cf06:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800cf0a:	61d3      	str	r3, [r2, #28]
 800cf0c:	9b07      	ldr	r3, [sp, #28]
 800cf0e:	6094      	str	r4, [r2, #8]
 800cf10:	2000      	movs	r0, #0
 800cf12:	f8c2 b00c 	str.w	fp, [r2, #12]
 800cf16:	f8c2 a010 	str.w	sl, [r2, #16]
 800cf1a:	f8c2 9014 	str.w	r9, [r2, #20]
 800cf1e:	6193      	str	r3, [r2, #24]
 800cf20:	b009      	add	sp, #36	; 0x24
 800cf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf26:	78c5      	ldrb	r5, [r0, #3]
 800cf28:	7887      	ldrb	r7, [r0, #2]
 800cf2a:	f810 6b04 	ldrb.w	r6, [r0], #4
 800cf2e:	022d      	lsls	r5, r5, #8
 800cf30:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800cf34:	44b4      	add	ip, r6
 800cf36:	e76b      	b.n	800ce10 <D24_GENERIC+0x5c>
 800cf38:	20000000 	.word	0x20000000
 800cf3c:	00030001 	.word	0x00030001
 800cf40:	00060007 	.word	0x00060007

0800cf44 <D32_GENERIC>:
 800cf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf48:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800cf4a:	6993      	ldr	r3, [r2, #24]
 800cf4c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800cf4e:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800cf52:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800cf56:	69d6      	ldr	r6, [r2, #28]
 800cf58:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800cf5c:	b089      	sub	sp, #36	; 0x24
 800cf5e:	9307      	str	r3, [sp, #28]
 800cf60:	9403      	str	r4, [sp, #12]
 800cf62:	6893      	ldr	r3, [r2, #8]
 800cf64:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800cf66:	9104      	str	r1, [sp, #16]
 800cf68:	2d00      	cmp	r5, #0
 800cf6a:	f000 809f 	beq.w	800d0ac <D32_GENERIC+0x168>
 800cf6e:	f004 0510 	and.w	r5, r4, #16
 800cf72:	f004 0420 	and.w	r4, r4, #32
 800cf76:	9505      	str	r5, [sp, #20]
 800cf78:	4953      	ldr	r1, [pc, #332]	; (800d0c8 <D32_GENERIC+0x184>)
 800cf7a:	9406      	str	r4, [sp, #24]
 800cf7c:	f04f 0c00 	mov.w	ip, #0
 800cf80:	f8cd 9008 	str.w	r9, [sp, #8]
 800cf84:	461d      	mov	r5, r3
 800cf86:	4617      	mov	r7, r2
 800cf88:	e077      	b.n	800d07a <D32_GENERIC+0x136>
 800cf8a:	f818 3003 	ldrb.w	r3, [r8, r3]
 800cf8e:	f810 800e 	ldrb.w	r8, [r0, lr]
 800cf92:	f810 e002 	ldrb.w	lr, [r0, r2]
 800cf96:	7800      	ldrb	r0, [r0, #0]
 800cf98:	041b      	lsls	r3, r3, #16
 800cf9a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800cf9e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800cfa2:	4403      	add	r3, r0
 800cfa4:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800cfa8:	b2dc      	uxtb	r4, r3
 800cfaa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800cfae:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800cfb2:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800cfb6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cfba:	0e1b      	lsrs	r3, r3, #24
 800cfbc:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800cfc0:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800cfc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cfc8:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800cfcc:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800cfd0:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800cfd4:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800cfd8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800cfdc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800cfe0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800cfe4:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800cfe8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cfec:	4b37      	ldr	r3, [pc, #220]	; (800d0cc <D32_GENERIC+0x188>)
 800cfee:	fb22 b403 	smlad	r4, r2, r3, fp
 800cff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cff6:	fb2e 4803 	smlad	r8, lr, r3, r4
 800cffa:	4b35      	ldr	r3, [pc, #212]	; (800d0d0 <D32_GENERIC+0x18c>)
 800cffc:	fb22 5503 	smlad	r5, r2, r3, r5
 800d000:	4b34      	ldr	r3, [pc, #208]	; (800d0d4 <D32_GENERIC+0x190>)
 800d002:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800d006:	2301      	movs	r3, #1
 800d008:	fb22 f203 	smuad	r2, r2, r3
 800d00c:	4b32      	ldr	r3, [pc, #200]	; (800d0d8 <D32_GENERIC+0x194>)
 800d00e:	fb2e 2503 	smlad	r5, lr, r3, r2
 800d012:	9b02      	ldr	r3, [sp, #8]
 800d014:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800d018:	eb04 080a 	add.w	r8, r4, sl
 800d01c:	eba8 0803 	sub.w	r8, r8, r3
 800d020:	4642      	mov	r2, r8
 800d022:	17d3      	asrs	r3, r2, #31
 800d024:	e9cd 2300 	strd	r2, r3, [sp]
 800d028:	9b05      	ldr	r3, [sp, #20]
 800d02a:	f10c 0e01 	add.w	lr, ip, #1
 800d02e:	b16b      	cbz	r3, 800d04c <D32_GENERIC+0x108>
 800d030:	6a3a      	ldr	r2, [r7, #32]
 800d032:	9b01      	ldr	r3, [sp, #4]
 800d034:	9402      	str	r4, [sp, #8]
 800d036:	fba8 8902 	umull	r8, r9, r8, r2
 800d03a:	fb02 9903 	mla	r9, r2, r3, r9
 800d03e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800d042:	f149 0900 	adc.w	r9, r9, #0
 800d046:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800d04a:	4654      	mov	r4, sl
 800d04c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d04e:	9a04      	ldr	r2, [sp, #16]
 800d050:	fb0c fc03 	mul.w	ip, ip, r3
 800d054:	9b03      	ldr	r3, [sp, #12]
 800d056:	0364      	lsls	r4, r4, #13
 800d058:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d05c:	f04f 0900 	mov.w	r9, #0
 800d060:	fbc3 8904 	smlal	r8, r9, r3, r4
 800d064:	464b      	mov	r3, r9
 800d066:	109b      	asrs	r3, r3, #2
 800d068:	f303 030f 	ssat	r3, #16, r3
 800d06c:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800d070:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d072:	fa1f fc8e 	uxth.w	ip, lr
 800d076:	4563      	cmp	r3, ip
 800d078:	d914      	bls.n	800d0a4 <D32_GENERIC+0x160>
 800d07a:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800d07c:	b2e2      	uxtb	r2, r4
 800d07e:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800d082:	eb00 080e 	add.w	r8, r0, lr
 800d086:	4253      	negs	r3, r2
 800d088:	2c01      	cmp	r4, #1
 800d08a:	eb08 0403 	add.w	r4, r8, r3
 800d08e:	f47f af7c 	bne.w	800cf8a <D32_GENERIC+0x46>
 800d092:	1d02      	adds	r2, r0, #4
 800d094:	6803      	ldr	r3, [r0, #0]
 800d096:	9806      	ldr	r0, [sp, #24]
 800d098:	b110      	cbz	r0, 800d0a0 <D32_GENERIC+0x15c>
 800d09a:	ba5b      	rev16	r3, r3
 800d09c:	4610      	mov	r0, r2
 800d09e:	e783      	b.n	800cfa8 <D32_GENERIC+0x64>
 800d0a0:	4610      	mov	r0, r2
 800d0a2:	e781      	b.n	800cfa8 <D32_GENERIC+0x64>
 800d0a4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d0a8:	462b      	mov	r3, r5
 800d0aa:	463a      	mov	r2, r7
 800d0ac:	6093      	str	r3, [r2, #8]
 800d0ae:	9b07      	ldr	r3, [sp, #28]
 800d0b0:	f8c2 b00c 	str.w	fp, [r2, #12]
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	61d6      	str	r6, [r2, #28]
 800d0b8:	f8c2 a010 	str.w	sl, [r2, #16]
 800d0bc:	f8c2 9014 	str.w	r9, [r2, #20]
 800d0c0:	6193      	str	r3, [r2, #24]
 800d0c2:	b009      	add	sp, #36	; 0x24
 800d0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c8:	20000000 	.word	0x20000000
 800d0cc:	00060003 	.word	0x00060003
 800d0d0:	000a000c 	.word	0x000a000c
 800d0d4:	000c000a 	.word	0x000c000a
 800d0d8:	00030006 	.word	0x00030006

0800d0dc <D48_GENERIC>:
 800d0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e0:	b089      	sub	sp, #36	; 0x24
 800d0e2:	6953      	ldr	r3, [r2, #20]
 800d0e4:	68d4      	ldr	r4, [r2, #12]
 800d0e6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800d0e8:	9302      	str	r3, [sp, #8]
 800d0ea:	9400      	str	r4, [sp, #0]
 800d0ec:	6993      	ldr	r3, [r2, #24]
 800d0ee:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800d0f0:	9307      	str	r3, [sp, #28]
 800d0f2:	9403      	str	r4, [sp, #12]
 800d0f4:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800d0f8:	69d6      	ldr	r6, [r2, #28]
 800d0fa:	6893      	ldr	r3, [r2, #8]
 800d0fc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d0fe:	9104      	str	r1, [sp, #16]
 800d100:	2d00      	cmp	r5, #0
 800d102:	f000 80c5 	beq.w	800d290 <D48_GENERIC+0x1b4>
 800d106:	f004 0510 	and.w	r5, r4, #16
 800d10a:	f004 0420 	and.w	r4, r4, #32
 800d10e:	4967      	ldr	r1, [pc, #412]	; (800d2ac <D48_GENERIC+0x1d0>)
 800d110:	9505      	str	r5, [sp, #20]
 800d112:	9406      	str	r4, [sp, #24]
 800d114:	f04f 0c00 	mov.w	ip, #0
 800d118:	4657      	mov	r7, sl
 800d11a:	9301      	str	r3, [sp, #4]
 800d11c:	e09c      	b.n	800d258 <D48_GENERIC+0x17c>
 800d11e:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800d122:	f810 b009 	ldrb.w	fp, [r0, r9]
 800d126:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800d12a:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800d12e:	7800      	ldrb	r0, [r0, #0]
 800d130:	0424      	lsls	r4, r4, #16
 800d132:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800d136:	f818 4005 	ldrb.w	r4, [r8, r5]
 800d13a:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800d13e:	44a8      	add	r8, r5
 800d140:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800d144:	eb0b 0500 	add.w	r5, fp, r0
 800d148:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800d14c:	fa5f f885 	uxtb.w	r8, r5
 800d150:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800d154:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800d158:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800d15c:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800d160:	0e2d      	lsrs	r5, r5, #24
 800d162:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800d166:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800d16a:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800d16e:	b2e6      	uxtb	r6, r4
 800d170:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800d174:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800d178:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800d17c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800d180:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800d184:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800d188:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800d18c:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800d190:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d194:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d198:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800d19c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d1a0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d1a4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d1a8:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800d1ac:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800d1b0:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800d1b4:	4c3e      	ldr	r4, [pc, #248]	; (800d2b0 <D48_GENERIC+0x1d4>)
 800d1b6:	9d00      	ldr	r5, [sp, #0]
 800d1b8:	fb2a 5404 	smlad	r4, sl, r4, r5
 800d1bc:	4d3d      	ldr	r5, [pc, #244]	; (800d2b4 <D48_GENERIC+0x1d8>)
 800d1be:	fb28 4405 	smlad	r4, r8, r5, r4
 800d1c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d1c6:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800d1ca:	4c3b      	ldr	r4, [pc, #236]	; (800d2b8 <D48_GENERIC+0x1dc>)
 800d1cc:	9b01      	ldr	r3, [sp, #4]
 800d1ce:	fb2a 3304 	smlad	r3, sl, r4, r3
 800d1d2:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800d1d6:	fb28 3304 	smlad	r3, r8, r4, r3
 800d1da:	4c38      	ldr	r4, [pc, #224]	; (800d2bc <D48_GENERIC+0x1e0>)
 800d1dc:	fb2e 3304 	smlad	r3, lr, r4, r3
 800d1e0:	2501      	movs	r5, #1
 800d1e2:	9300      	str	r3, [sp, #0]
 800d1e4:	fb2a fa05 	smuad	sl, sl, r5
 800d1e8:	4b35      	ldr	r3, [pc, #212]	; (800d2c0 <D48_GENERIC+0x1e4>)
 800d1ea:	fb28 a803 	smlad	r8, r8, r3, sl
 800d1ee:	4b35      	ldr	r3, [pc, #212]	; (800d2c4 <D48_GENERIC+0x1e8>)
 800d1f0:	fb2e 8303 	smlad	r3, lr, r3, r8
 800d1f4:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800d1f8:	9301      	str	r3, [sp, #4]
 800d1fa:	9b02      	ldr	r3, [sp, #8]
 800d1fc:	eb04 0807 	add.w	r8, r4, r7
 800d200:	eba8 0803 	sub.w	r8, r8, r3
 800d204:	9b05      	ldr	r3, [sp, #20]
 800d206:	4465      	add	r5, ip
 800d208:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800d20c:	b163      	cbz	r3, 800d228 <D48_GENERIC+0x14c>
 800d20e:	6a17      	ldr	r7, [r2, #32]
 800d210:	9402      	str	r4, [sp, #8]
 800d212:	fba8 8907 	umull	r8, r9, r8, r7
 800d216:	fb07 990b 	mla	r9, r7, fp, r9
 800d21a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800d21e:	f149 0900 	adc.w	r9, r9, #0
 800d222:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800d226:	463c      	mov	r4, r7
 800d228:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800d22c:	9b03      	ldr	r3, [sp, #12]
 800d22e:	02e4      	lsls	r4, r4, #11
 800d230:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d234:	f04f 0900 	mov.w	r9, #0
 800d238:	fb0c fc0e 	mul.w	ip, ip, lr
 800d23c:	fbc3 8904 	smlal	r8, r9, r3, r4
 800d240:	9b04      	ldr	r3, [sp, #16]
 800d242:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800d246:	f304 040f 	ssat	r4, #16, r4
 800d24a:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800d24e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800d250:	fa1f fc85 	uxth.w	ip, r5
 800d254:	4564      	cmp	r4, ip
 800d256:	d919      	bls.n	800d28c <D48_GENERIC+0x1b0>
 800d258:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800d25a:	fa5f fe84 	uxtb.w	lr, r4
 800d25e:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800d262:	f1ce 0500 	rsb	r5, lr, #0
 800d266:	eb00 0b09 	add.w	fp, r0, r9
 800d26a:	eb0b 0a05 	add.w	sl, fp, r5
 800d26e:	2c01      	cmp	r4, #1
 800d270:	eb0a 0809 	add.w	r8, sl, r9
 800d274:	f47f af53 	bne.w	800d11e <D48_GENERIC+0x42>
 800d278:	9b06      	ldr	r3, [sp, #24]
 800d27a:	6805      	ldr	r5, [r0, #0]
 800d27c:	6844      	ldr	r4, [r0, #4]
 800d27e:	3006      	adds	r0, #6
 800d280:	2b00      	cmp	r3, #0
 800d282:	f43f af63 	beq.w	800d14c <D48_GENERIC+0x70>
 800d286:	ba6d      	rev16	r5, r5
 800d288:	ba64      	rev16	r4, r4
 800d28a:	e75f      	b.n	800d14c <D48_GENERIC+0x70>
 800d28c:	9b01      	ldr	r3, [sp, #4]
 800d28e:	46ba      	mov	sl, r7
 800d290:	6093      	str	r3, [r2, #8]
 800d292:	9b00      	ldr	r3, [sp, #0]
 800d294:	60d3      	str	r3, [r2, #12]
 800d296:	9b02      	ldr	r3, [sp, #8]
 800d298:	6153      	str	r3, [r2, #20]
 800d29a:	9b07      	ldr	r3, [sp, #28]
 800d29c:	61d6      	str	r6, [r2, #28]
 800d29e:	2000      	movs	r0, #0
 800d2a0:	f8c2 a010 	str.w	sl, [r2, #16]
 800d2a4:	6193      	str	r3, [r2, #24]
 800d2a6:	b009      	add	sp, #36	; 0x24
 800d2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ac:	20000000 	.word	0x20000000
 800d2b0:	000f000a 	.word	0x000f000a
 800d2b4:	00060003 	.word	0x00060003
 800d2b8:	00150019 	.word	0x00150019
 800d2bc:	00190015 	.word	0x00190015
 800d2c0:	00030006 	.word	0x00030006
 800d2c4:	000a000f 	.word	0x000a000f

0800d2c8 <D64_GENERIC>:
 800d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2cc:	b089      	sub	sp, #36	; 0x24
 800d2ce:	6913      	ldr	r3, [r2, #16]
 800d2d0:	6895      	ldr	r5, [r2, #8]
 800d2d2:	9303      	str	r3, [sp, #12]
 800d2d4:	9501      	str	r5, [sp, #4]
 800d2d6:	6953      	ldr	r3, [r2, #20]
 800d2d8:	68d5      	ldr	r5, [r2, #12]
 800d2da:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800d2dc:	9304      	str	r3, [sp, #16]
 800d2de:	9500      	str	r5, [sp, #0]
 800d2e0:	6993      	ldr	r3, [r2, #24]
 800d2e2:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800d2e4:	9307      	str	r3, [sp, #28]
 800d2e6:	9505      	str	r5, [sp, #20]
 800d2e8:	69d3      	ldr	r3, [r2, #28]
 800d2ea:	9106      	str	r1, [sp, #24]
 800d2ec:	2c00      	cmp	r4, #0
 800d2ee:	f000 80d9 	beq.w	800d4a4 <D64_GENERIC+0x1dc>
 800d2f2:	6a11      	ldr	r1, [r2, #32]
 800d2f4:	9102      	str	r1, [sp, #8]
 800d2f6:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800d4e4 <D64_GENERIC+0x21c>
 800d2fa:	f04f 0c00 	mov.w	ip, #0
 800d2fe:	4681      	mov	r9, r0
 800d300:	e0c1      	b.n	800d486 <D64_GENERIC+0x1be>
 800d302:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800d306:	4274      	negs	r4, r6
 800d308:	eb09 0708 	add.w	r7, r9, r8
 800d30c:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800d310:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800d314:	5d38      	ldrb	r0, [r7, r4]
 800d316:	5d29      	ldrb	r1, [r5, r4]
 800d318:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800d31c:	f819 a008 	ldrb.w	sl, [r9, r8]
 800d320:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800d324:	f899 7000 	ldrb.w	r7, [r9]
 800d328:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800d32c:	4425      	add	r5, r4
 800d32e:	0409      	lsls	r1, r1, #16
 800d330:	0400      	lsls	r0, r0, #16
 800d332:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800d336:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800d33a:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800d33e:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800d342:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800d346:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800d34a:	4459      	add	r1, fp
 800d34c:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800d350:	4438      	add	r0, r7
 800d352:	b2c5      	uxtb	r5, r0
 800d354:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800d358:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800d35c:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800d360:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800d364:	0e00      	lsrs	r0, r0, #24
 800d366:	eb03 0806 	add.w	r8, r3, r6
 800d36a:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800d36e:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800d372:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800d376:	b2c8      	uxtb	r0, r1
 800d378:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800d37c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800d380:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800d384:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800d388:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800d38c:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800d390:	0e09      	lsrs	r1, r1, #24
 800d392:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800d396:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800d39a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800d39e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800d3a2:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800d3a6:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800d3aa:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800d3ae:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d3b2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d3b6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d3ba:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800d3be:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d3c2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d3c6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d3ca:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800d3ce:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800d3d2:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800d3d6:	0a8b      	lsrs	r3, r1, #10
 800d3d8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800d3dc:	4939      	ldr	r1, [pc, #228]	; (800d4c4 <D64_GENERIC+0x1fc>)
 800d3de:	9c00      	ldr	r4, [sp, #0]
 800d3e0:	fb28 4101 	smlad	r1, r8, r1, r4
 800d3e4:	4c38      	ldr	r4, [pc, #224]	; (800d4c8 <D64_GENERIC+0x200>)
 800d3e6:	fb27 1104 	smlad	r1, r7, r4, r1
 800d3ea:	4c38      	ldr	r4, [pc, #224]	; (800d4cc <D64_GENERIC+0x204>)
 800d3ec:	fb20 1104 	smlad	r1, r0, r4, r1
 800d3f0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800d3f4:	fb2a 1106 	smlad	r1, sl, r6, r1
 800d3f8:	4c35      	ldr	r4, [pc, #212]	; (800d4d0 <D64_GENERIC+0x208>)
 800d3fa:	9d01      	ldr	r5, [sp, #4]
 800d3fc:	fb28 5404 	smlad	r4, r8, r4, r5
 800d400:	4d33      	ldr	r5, [pc, #204]	; (800d4d0 <D64_GENERIC+0x208>)
 800d402:	fb2a 4415 	smladx	r4, sl, r5, r4
 800d406:	4d33      	ldr	r5, [pc, #204]	; (800d4d4 <D64_GENERIC+0x20c>)
 800d408:	fb27 4405 	smlad	r4, r7, r5, r4
 800d40c:	fb20 4415 	smladx	r4, r0, r5, r4
 800d410:	2501      	movs	r5, #1
 800d412:	9400      	str	r4, [sp, #0]
 800d414:	fb28 f805 	smuad	r8, r8, r5
 800d418:	4c2f      	ldr	r4, [pc, #188]	; (800d4d8 <D64_GENERIC+0x210>)
 800d41a:	fb27 8704 	smlad	r7, r7, r4, r8
 800d41e:	4c2f      	ldr	r4, [pc, #188]	; (800d4dc <D64_GENERIC+0x214>)
 800d420:	fb20 7004 	smlad	r0, r0, r4, r7
 800d424:	4c2e      	ldr	r4, [pc, #184]	; (800d4e0 <D64_GENERIC+0x218>)
 800d426:	fb2a 0004 	smlad	r0, sl, r4, r0
 800d42a:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800d42e:	9902      	ldr	r1, [sp, #8]
 800d430:	9001      	str	r0, [sp, #4]
 800d432:	b189      	cbz	r1, 800d458 <D64_GENERIC+0x190>
 800d434:	9803      	ldr	r0, [sp, #12]
 800d436:	9c04      	ldr	r4, [sp, #16]
 800d438:	9604      	str	r6, [sp, #16]
 800d43a:	4430      	add	r0, r6
 800d43c:	1b00      	subs	r0, r0, r4
 800d43e:	17c5      	asrs	r5, r0, #31
 800d440:	460f      	mov	r7, r1
 800d442:	fba0 0101 	umull	r0, r1, r0, r1
 800d446:	fb07 1105 	mla	r1, r7, r5, r1
 800d44a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800d44e:	f141 0100 	adc.w	r1, r1, #0
 800d452:	0049      	lsls	r1, r1, #1
 800d454:	9103      	str	r1, [sp, #12]
 800d456:	460e      	mov	r6, r1
 800d458:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800d45a:	9905      	ldr	r1, [sp, #20]
 800d45c:	9806      	ldr	r0, [sp, #24]
 800d45e:	02b6      	lsls	r6, r6, #10
 800d460:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800d464:	f04f 0800 	mov.w	r8, #0
 800d468:	fb0c f404 	mul.w	r4, ip, r4
 800d46c:	fbc1 7806 	smlal	r7, r8, r1, r6
 800d470:	4641      	mov	r1, r8
 800d472:	1089      	asrs	r1, r1, #2
 800d474:	f301 010f 	ssat	r1, #16, r1
 800d478:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800d47c:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800d47e:	f10c 0c01 	add.w	ip, ip, #1
 800d482:	4561      	cmp	r1, ip
 800d484:	dd0e      	ble.n	800d4a4 <D64_GENERIC+0x1dc>
 800d486:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800d488:	2e01      	cmp	r6, #1
 800d48a:	f47f af3a 	bne.w	800d302 <D64_GENERIC+0x3a>
 800d48e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800d490:	06b4      	lsls	r4, r6, #26
 800d492:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d496:	f109 0908 	add.w	r9, r9, #8
 800d49a:	f57f af5a 	bpl.w	800d352 <D64_GENERIC+0x8a>
 800d49e:	ba40      	rev16	r0, r0
 800d4a0:	ba49      	rev16	r1, r1
 800d4a2:	e756      	b.n	800d352 <D64_GENERIC+0x8a>
 800d4a4:	61d3      	str	r3, [r2, #28]
 800d4a6:	9b03      	ldr	r3, [sp, #12]
 800d4a8:	9901      	ldr	r1, [sp, #4]
 800d4aa:	6113      	str	r3, [r2, #16]
 800d4ac:	9b04      	ldr	r3, [sp, #16]
 800d4ae:	6091      	str	r1, [r2, #8]
 800d4b0:	6153      	str	r3, [r2, #20]
 800d4b2:	9900      	ldr	r1, [sp, #0]
 800d4b4:	9b07      	ldr	r3, [sp, #28]
 800d4b6:	60d1      	str	r1, [r2, #12]
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	6193      	str	r3, [r2, #24]
 800d4bc:	b009      	add	sp, #36	; 0x24
 800d4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c2:	bf00      	nop
 800d4c4:	001c0015 	.word	0x001c0015
 800d4c8:	000f000a 	.word	0x000f000a
 800d4cc:	00060003 	.word	0x00060003
 800d4d0:	0024002a 	.word	0x0024002a
 800d4d4:	002e0030 	.word	0x002e0030
 800d4d8:	00030006 	.word	0x00030006
 800d4dc:	000a000f 	.word	0x000a000f
 800d4e0:	0015001c 	.word	0x0015001c
 800d4e4:	20000000 	.word	0x20000000

0800d4e8 <D80_GENERIC>:
 800d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ec:	b08b      	sub	sp, #44	; 0x2c
 800d4ee:	6914      	ldr	r4, [r2, #16]
 800d4f0:	9404      	str	r4, [sp, #16]
 800d4f2:	6954      	ldr	r4, [r2, #20]
 800d4f4:	9405      	str	r4, [sp, #20]
 800d4f6:	6994      	ldr	r4, [r2, #24]
 800d4f8:	9409      	str	r4, [sp, #36]	; 0x24
 800d4fa:	6894      	ldr	r4, [r2, #8]
 800d4fc:	9402      	str	r4, [sp, #8]
 800d4fe:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d500:	68d4      	ldr	r4, [r2, #12]
 800d502:	9401      	str	r4, [sp, #4]
 800d504:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800d506:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800d50a:	9406      	str	r4, [sp, #24]
 800d50c:	9107      	str	r1, [sp, #28]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	f000 810f 	beq.w	800d732 <D80_GENERIC+0x24a>
 800d514:	6a13      	ldr	r3, [r2, #32]
 800d516:	9308      	str	r3, [sp, #32]
 800d518:	2300      	movs	r3, #0
 800d51a:	9200      	str	r2, [sp, #0]
 800d51c:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800d784 <D80_GENERIC+0x29c>
 800d520:	f8cd b00c 	str.w	fp, [sp, #12]
 800d524:	461a      	mov	r2, r3
 800d526:	e0ed      	b.n	800d704 <D80_GENERIC+0x21c>
 800d528:	fa5f fc8c 	uxtb.w	ip, ip
 800d52c:	fa0f f48c 	sxth.w	r4, ip
 800d530:	0066      	lsls	r6, r4, #1
 800d532:	eb06 0804 	add.w	r8, r6, r4
 800d536:	f1cc 0500 	rsb	r5, ip, #0
 800d53a:	eb00 0108 	add.w	r1, r0, r8
 800d53e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800d542:	194b      	adds	r3, r1, r5
 800d544:	5d49      	ldrb	r1, [r1, r5]
 800d546:	f810 a008 	ldrb.w	sl, [r0, r8]
 800d54a:	f813 b004 	ldrb.w	fp, [r3, r4]
 800d54e:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800d552:	f890 8000 	ldrb.w	r8, [r0]
 800d556:	eb03 0e04 	add.w	lr, r3, r4
 800d55a:	eb0e 0705 	add.w	r7, lr, r5
 800d55e:	0409      	lsls	r1, r1, #16
 800d560:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800d564:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800d568:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800d56c:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800d570:	eb0a 0004 	add.w	r0, sl, r4
 800d574:	041b      	lsls	r3, r3, #16
 800d576:	f81a a004 	ldrb.w	sl, [sl, r4]
 800d57a:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800d57e:	5d44      	ldrb	r4, [r0, r5]
 800d580:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800d584:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800d588:	4428      	add	r0, r5
 800d58a:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800d58e:	4441      	add	r1, r8
 800d590:	4430      	add	r0, r6
 800d592:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800d596:	441f      	add	r7, r3
 800d598:	b2cd      	uxtb	r5, r1
 800d59a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800d59e:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800d5a2:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800d5a6:	9b03      	ldr	r3, [sp, #12]
 800d5a8:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800d5ac:	0e09      	lsrs	r1, r1, #24
 800d5ae:	4433      	add	r3, r6
 800d5b0:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800d5b4:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800d5b8:	b2fd      	uxtb	r5, r7
 800d5ba:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800d5be:	469b      	mov	fp, r3
 800d5c0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800d5c4:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800d5c8:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800d5cc:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800d5d0:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800d5d4:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800d5d8:	0e3b      	lsrs	r3, r7, #24
 800d5da:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800d5de:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800d5e2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d5e6:	fa5f fe84 	uxtb.w	lr, r4
 800d5ea:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800d5ee:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800d5f2:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800d5f6:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800d5fa:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800d5fe:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800d602:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800d606:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800d60a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d60e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d612:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d616:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d61a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d61e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d622:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800d626:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800d62a:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800d62e:	0aa3      	lsrs	r3, r4, #10
 800d630:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d634:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d638:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d63c:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800d640:	9303      	str	r3, [sp, #12]
 800d642:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800d646:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800d64a:	4b42      	ldr	r3, [pc, #264]	; (800d754 <D80_GENERIC+0x26c>)
 800d64c:	9901      	ldr	r1, [sp, #4]
 800d64e:	fb2b 1303 	smlad	r3, fp, r3, r1
 800d652:	4941      	ldr	r1, [pc, #260]	; (800d758 <D80_GENERIC+0x270>)
 800d654:	fb28 3301 	smlad	r3, r8, r1, r3
 800d658:	4940      	ldr	r1, [pc, #256]	; (800d75c <D80_GENERIC+0x274>)
 800d65a:	fb2c 3301 	smlad	r3, ip, r1, r3
 800d65e:	4940      	ldr	r1, [pc, #256]	; (800d760 <D80_GENERIC+0x278>)
 800d660:	fb27 3301 	smlad	r3, r7, r1, r3
 800d664:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d668:	fb2e 3301 	smlad	r3, lr, r1, r3
 800d66c:	493d      	ldr	r1, [pc, #244]	; (800d764 <D80_GENERIC+0x27c>)
 800d66e:	9c02      	ldr	r4, [sp, #8]
 800d670:	fb2b 4401 	smlad	r4, fp, r1, r4
 800d674:	493c      	ldr	r1, [pc, #240]	; (800d768 <D80_GENERIC+0x280>)
 800d676:	fb28 4401 	smlad	r4, r8, r1, r4
 800d67a:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800d67e:	fb2c 4101 	smlad	r1, ip, r1, r4
 800d682:	4c3a      	ldr	r4, [pc, #232]	; (800d76c <D80_GENERIC+0x284>)
 800d684:	fb27 1104 	smlad	r1, r7, r4, r1
 800d688:	4c39      	ldr	r4, [pc, #228]	; (800d770 <D80_GENERIC+0x288>)
 800d68a:	fb2e 1104 	smlad	r1, lr, r4, r1
 800d68e:	9101      	str	r1, [sp, #4]
 800d690:	2101      	movs	r1, #1
 800d692:	fb2b fb01 	smuad	fp, fp, r1
 800d696:	4937      	ldr	r1, [pc, #220]	; (800d774 <D80_GENERIC+0x28c>)
 800d698:	fb28 b801 	smlad	r8, r8, r1, fp
 800d69c:	4d36      	ldr	r5, [pc, #216]	; (800d778 <D80_GENERIC+0x290>)
 800d69e:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800d6a2:	4d36      	ldr	r5, [pc, #216]	; (800d77c <D80_GENERIC+0x294>)
 800d6a4:	fb27 c705 	smlad	r7, r7, r5, ip
 800d6a8:	4d35      	ldr	r5, [pc, #212]	; (800d780 <D80_GENERIC+0x298>)
 800d6aa:	fb2e 7105 	smlad	r1, lr, r5, r7
 800d6ae:	9102      	str	r1, [sp, #8]
 800d6b0:	9908      	ldr	r1, [sp, #32]
 800d6b2:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800d6b6:	b181      	cbz	r1, 800d6da <D80_GENERIC+0x1f2>
 800d6b8:	9c04      	ldr	r4, [sp, #16]
 800d6ba:	9d05      	ldr	r5, [sp, #20]
 800d6bc:	9305      	str	r3, [sp, #20]
 800d6be:	441c      	add	r4, r3
 800d6c0:	1b64      	subs	r4, r4, r5
 800d6c2:	17e7      	asrs	r7, r4, #31
 800d6c4:	fba4 4501 	umull	r4, r5, r4, r1
 800d6c8:	fb01 5507 	mla	r5, r1, r7, r5
 800d6cc:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800d6d0:	f145 0500 	adc.w	r5, r5, #0
 800d6d4:	0069      	lsls	r1, r5, #1
 800d6d6:	9104      	str	r1, [sp, #16]
 800d6d8:	460b      	mov	r3, r1
 800d6da:	9e00      	ldr	r6, [sp, #0]
 800d6dc:	9f06      	ldr	r7, [sp, #24]
 800d6de:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800d6e0:	025b      	lsls	r3, r3, #9
 800d6e2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d6e6:	2500      	movs	r5, #0
 800d6e8:	fb02 f101 	mul.w	r1, r2, r1
 800d6ec:	fbc7 4503 	smlal	r4, r5, r7, r3
 800d6f0:	9c07      	ldr	r4, [sp, #28]
 800d6f2:	10ab      	asrs	r3, r5, #2
 800d6f4:	f303 030f 	ssat	r3, #16, r3
 800d6f8:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800d6fc:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800d6fe:	3201      	adds	r2, #1
 800d700:	4293      	cmp	r3, r2
 800d702:	dd13      	ble.n	800d72c <D80_GENERIC+0x244>
 800d704:	9b00      	ldr	r3, [sp, #0]
 800d706:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800d70a:	f1bc 0f01 	cmp.w	ip, #1
 800d70e:	f47f af0b 	bne.w	800d528 <D80_GENERIC+0x40>
 800d712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d714:	6884      	ldr	r4, [r0, #8]
 800d716:	069b      	lsls	r3, r3, #26
 800d718:	e890 0082 	ldmia.w	r0, {r1, r7}
 800d71c:	f100 000a 	add.w	r0, r0, #10
 800d720:	f57f af3a 	bpl.w	800d598 <D80_GENERIC+0xb0>
 800d724:	ba49      	rev16	r1, r1
 800d726:	ba7f      	rev16	r7, r7
 800d728:	ba64      	rev16	r4, r4
 800d72a:	e735      	b.n	800d598 <D80_GENERIC+0xb0>
 800d72c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d730:	4632      	mov	r2, r6
 800d732:	9b02      	ldr	r3, [sp, #8]
 800d734:	6093      	str	r3, [r2, #8]
 800d736:	9b01      	ldr	r3, [sp, #4]
 800d738:	60d3      	str	r3, [r2, #12]
 800d73a:	9b04      	ldr	r3, [sp, #16]
 800d73c:	6113      	str	r3, [r2, #16]
 800d73e:	9b05      	ldr	r3, [sp, #20]
 800d740:	6153      	str	r3, [r2, #20]
 800d742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d744:	f8c2 b01c 	str.w	fp, [r2, #28]
 800d748:	2000      	movs	r0, #0
 800d74a:	6193      	str	r3, [r2, #24]
 800d74c:	b00b      	add	sp, #44	; 0x2c
 800d74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d752:	bf00      	nop
 800d754:	002d0024 	.word	0x002d0024
 800d758:	001c0015 	.word	0x001c0015
 800d75c:	000f000a 	.word	0x000f000a
 800d760:	00060003 	.word	0x00060003
 800d764:	0037003f 	.word	0x0037003f
 800d768:	00450049 	.word	0x00450049
 800d76c:	00490045 	.word	0x00490045
 800d770:	003f0037 	.word	0x003f0037
 800d774:	00030006 	.word	0x00030006
 800d778:	000a000f 	.word	0x000a000f
 800d77c:	0015001c 	.word	0x0015001c
 800d780:	0024002d 	.word	0x0024002d
 800d784:	20000000 	.word	0x20000000

0800d788 <D128_GENERIC>:
 800d788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d78c:	b093      	sub	sp, #76	; 0x4c
 800d78e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d790:	9005      	str	r0, [sp, #20]
 800d792:	4610      	mov	r0, r2
 800d794:	9201      	str	r2, [sp, #4]
 800d796:	6912      	ldr	r2, [r2, #16]
 800d798:	920c      	str	r2, [sp, #48]	; 0x30
 800d79a:	4602      	mov	r2, r0
 800d79c:	6940      	ldr	r0, [r0, #20]
 800d79e:	900d      	str	r0, [sp, #52]	; 0x34
 800d7a0:	4610      	mov	r0, r2
 800d7a2:	4614      	mov	r4, r2
 800d7a4:	6992      	ldr	r2, [r2, #24]
 800d7a6:	9211      	str	r2, [sp, #68]	; 0x44
 800d7a8:	69c2      	ldr	r2, [r0, #28]
 800d7aa:	9202      	str	r2, [sp, #8]
 800d7ac:	68e2      	ldr	r2, [r4, #12]
 800d7ae:	6880      	ldr	r0, [r0, #8]
 800d7b0:	9203      	str	r2, [sp, #12]
 800d7b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d7b4:	9004      	str	r0, [sp, #16]
 800d7b6:	920e      	str	r2, [sp, #56]	; 0x38
 800d7b8:	910f      	str	r1, [sp, #60]	; 0x3c
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	f000 819b 	beq.w	800daf6 <D128_GENERIC+0x36e>
 800d7c0:	6a23      	ldr	r3, [r4, #32]
 800d7c2:	9310      	str	r3, [sp, #64]	; 0x40
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800db70 <D128_GENERIC+0x3e8>
 800d7ca:	9306      	str	r3, [sp, #24]
 800d7cc:	e17a      	b.n	800dac4 <D128_GENERIC+0x33c>
 800d7ce:	b2d2      	uxtb	r2, r2
 800d7d0:	9d05      	ldr	r5, [sp, #20]
 800d7d2:	b214      	sxth	r4, r2
 800d7d4:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800d7d8:	4250      	negs	r0, r2
 800d7da:	eb05 010a 	add.w	r1, r5, sl
 800d7de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d7e2:	eb01 0800 	add.w	r8, r1, r0
 800d7e6:	eb0b 0c04 	add.w	ip, fp, r4
 800d7ea:	eb08 070c 	add.w	r7, r8, ip
 800d7ee:	183b      	adds	r3, r7, r0
 800d7f0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800d7f4:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800d7f8:	eb0e 0604 	add.w	r6, lr, r4
 800d7fc:	9307      	str	r3, [sp, #28]
 800d7fe:	1833      	adds	r3, r6, r0
 800d800:	9305      	str	r3, [sp, #20]
 800d802:	462b      	mov	r3, r5
 800d804:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800d808:	f8cd a020 	str.w	sl, [sp, #32]
 800d80c:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800d810:	f813 c002 	ldrb.w	ip, [r3, r2]
 800d814:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800d818:	5c3a      	ldrb	r2, [r7, r0]
 800d81a:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800d81e:	781f      	ldrb	r7, [r3, #0]
 800d820:	9b07      	ldr	r3, [sp, #28]
 800d822:	9d05      	ldr	r5, [sp, #20]
 800d824:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800d828:	5c09      	ldrb	r1, [r1, r0]
 800d82a:	9709      	str	r7, [sp, #36]	; 0x24
 800d82c:	9307      	str	r3, [sp, #28]
 800d82e:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800d832:	5c33      	ldrb	r3, [r6, r0]
 800d834:	0412      	lsls	r2, r2, #16
 800d836:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800d83a:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800d83e:	9d08      	ldr	r5, [sp, #32]
 800d840:	eb06 0a04 	add.w	sl, r6, r4
 800d844:	0409      	lsls	r1, r1, #16
 800d846:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800d84a:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800d84e:	5d36      	ldrb	r6, [r6, r4]
 800d850:	9c05      	ldr	r4, [sp, #20]
 800d852:	042d      	lsls	r5, r5, #16
 800d854:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800d858:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800d85c:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800d860:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800d864:	eb0a 0c00 	add.w	ip, sl, r0
 800d868:	041b      	lsls	r3, r3, #16
 800d86a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800d86e:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800d872:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800d876:	9d07      	ldr	r5, [sp, #28]
 800d878:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800d87c:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800d880:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d882:	4458      	add	r0, fp
 800d884:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800d888:	9005      	str	r0, [sp, #20]
 800d88a:	4439      	add	r1, r7
 800d88c:	442a      	add	r2, r5
 800d88e:	44b2      	add	sl, r6
 800d890:	1918      	adds	r0, r3, r4
 800d892:	b2cb      	uxtb	r3, r1
 800d894:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d898:	9e02      	ldr	r6, [sp, #8]
 800d89a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d89e:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800d8a2:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800d8a6:	441e      	add	r6, r3
 800d8a8:	0e09      	lsrs	r1, r1, #24
 800d8aa:	4633      	mov	r3, r6
 800d8ac:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d8b0:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800d8b4:	b2d4      	uxtb	r4, r2
 800d8b6:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800d8ba:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d8be:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800d8c2:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d8c6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d8ca:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800d8ce:	0e12      	lsrs	r2, r2, #24
 800d8d0:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800d8d4:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800d8d8:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d8dc:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800d8e0:	9702      	str	r7, [sp, #8]
 800d8e2:	b2c2      	uxtb	r2, r0
 800d8e4:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800d8e8:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800d8ec:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800d8f0:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800d8f4:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800d8f8:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800d8fc:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d900:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800d904:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800d908:	0e00      	lsrs	r0, r0, #24
 800d90a:	fa5f f68a 	uxtb.w	r6, sl
 800d90e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d912:	9309      	str	r3, [sp, #36]	; 0x24
 800d914:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800d918:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800d91c:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800d920:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800d924:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d928:	950a      	str	r5, [sp, #40]	; 0x28
 800d92a:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800d92e:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800d932:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800d936:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d93a:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800d93e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d942:	920b      	str	r2, [sp, #44]	; 0x2c
 800d944:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800d948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d94a:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800d94e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d952:	9307      	str	r3, [sp, #28]
 800d954:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800d958:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800d95c:	9b02      	ldr	r3, [sp, #8]
 800d95e:	f8cd c008 	str.w	ip, [sp, #8]
 800d962:	4694      	mov	ip, r2
 800d964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d966:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800d96a:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800d96e:	9a02      	ldr	r2, [sp, #8]
 800d970:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d974:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800d978:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d97c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d97e:	f8cd a020 	str.w	sl, [sp, #32]
 800d982:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d986:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800d98a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d98e:	9b07      	ldr	r3, [sp, #28]
 800d990:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d994:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800d998:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800d99c:	9a08      	ldr	r2, [sp, #32]
 800d99e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d9a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d9a6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d9aa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d9ae:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800d9b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800d9b6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d9ba:	0a96      	lsrs	r6, r2, #10
 800d9bc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d9c0:	9602      	str	r6, [sp, #8]
 800d9c2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800d9c6:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800d9ca:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800d9ce:	4e53      	ldr	r6, [pc, #332]	; (800db1c <D128_GENERIC+0x394>)
 800d9d0:	9f03      	ldr	r7, [sp, #12]
 800d9d2:	fb2c 7606 	smlad	r6, ip, r6, r7
 800d9d6:	4f52      	ldr	r7, [pc, #328]	; (800db20 <D128_GENERIC+0x398>)
 800d9d8:	fb2a 6607 	smlad	r6, sl, r7, r6
 800d9dc:	4f51      	ldr	r7, [pc, #324]	; (800db24 <D128_GENERIC+0x39c>)
 800d9de:	fb21 6607 	smlad	r6, r1, r7, r6
 800d9e2:	4f51      	ldr	r7, [pc, #324]	; (800db28 <D128_GENERIC+0x3a0>)
 800d9e4:	fb24 6607 	smlad	r6, r4, r7, r6
 800d9e8:	4f50      	ldr	r7, [pc, #320]	; (800db2c <D128_GENERIC+0x3a4>)
 800d9ea:	fb28 6607 	smlad	r6, r8, r7, r6
 800d9ee:	4f50      	ldr	r7, [pc, #320]	; (800db30 <D128_GENERIC+0x3a8>)
 800d9f0:	fb20 6607 	smlad	r6, r0, r7, r6
 800d9f4:	4f4f      	ldr	r7, [pc, #316]	; (800db34 <D128_GENERIC+0x3ac>)
 800d9f6:	fb23 6607 	smlad	r6, r3, r7, r6
 800d9fa:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800d9fe:	fb25 6607 	smlad	r6, r5, r7, r6
 800da02:	4f4d      	ldr	r7, [pc, #308]	; (800db38 <D128_GENERIC+0x3b0>)
 800da04:	9a04      	ldr	r2, [sp, #16]
 800da06:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800da0a:	4a4c      	ldr	r2, [pc, #304]	; (800db3c <D128_GENERIC+0x3b4>)
 800da0c:	fb2a ee02 	smlad	lr, sl, r2, lr
 800da10:	4f4b      	ldr	r7, [pc, #300]	; (800db40 <D128_GENERIC+0x3b8>)
 800da12:	fb21 ee07 	smlad	lr, r1, r7, lr
 800da16:	4f4b      	ldr	r7, [pc, #300]	; (800db44 <D128_GENERIC+0x3bc>)
 800da18:	fb24 ee07 	smlad	lr, r4, r7, lr
 800da1c:	4f4a      	ldr	r7, [pc, #296]	; (800db48 <D128_GENERIC+0x3c0>)
 800da1e:	fb28 ee07 	smlad	lr, r8, r7, lr
 800da22:	4f4a      	ldr	r7, [pc, #296]	; (800db4c <D128_GENERIC+0x3c4>)
 800da24:	fb20 ee07 	smlad	lr, r0, r7, lr
 800da28:	4f49      	ldr	r7, [pc, #292]	; (800db50 <D128_GENERIC+0x3c8>)
 800da2a:	fb23 e707 	smlad	r7, r3, r7, lr
 800da2e:	f8df e144 	ldr.w	lr, [pc, #324]	; 800db74 <D128_GENERIC+0x3ec>
 800da32:	fb25 720e 	smlad	r2, r5, lr, r7
 800da36:	f04f 0b01 	mov.w	fp, #1
 800da3a:	9203      	str	r2, [sp, #12]
 800da3c:	fb2c fb0b 	smuad	fp, ip, fp
 800da40:	4f44      	ldr	r7, [pc, #272]	; (800db54 <D128_GENERIC+0x3cc>)
 800da42:	fb2a ba07 	smlad	sl, sl, r7, fp
 800da46:	4f44      	ldr	r7, [pc, #272]	; (800db58 <D128_GENERIC+0x3d0>)
 800da48:	fb21 aa07 	smlad	sl, r1, r7, sl
 800da4c:	4f43      	ldr	r7, [pc, #268]	; (800db5c <D128_GENERIC+0x3d4>)
 800da4e:	fb24 aa07 	smlad	sl, r4, r7, sl
 800da52:	4f43      	ldr	r7, [pc, #268]	; (800db60 <D128_GENERIC+0x3d8>)
 800da54:	fb28 a707 	smlad	r7, r8, r7, sl
 800da58:	4a42      	ldr	r2, [pc, #264]	; (800db64 <D128_GENERIC+0x3dc>)
 800da5a:	fb20 7702 	smlad	r7, r0, r2, r7
 800da5e:	4a42      	ldr	r2, [pc, #264]	; (800db68 <D128_GENERIC+0x3e0>)
 800da60:	fb23 7702 	smlad	r7, r3, r2, r7
 800da64:	4b41      	ldr	r3, [pc, #260]	; (800db6c <D128_GENERIC+0x3e4>)
 800da66:	fb25 7303 	smlad	r3, r5, r3, r7
 800da6a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800da6c:	9304      	str	r3, [sp, #16]
 800da6e:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800da72:	b185      	cbz	r5, 800da96 <D128_GENERIC+0x30e>
 800da74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da76:	990d      	ldr	r1, [sp, #52]	; 0x34
 800da78:	960d      	str	r6, [sp, #52]	; 0x34
 800da7a:	4432      	add	r2, r6
 800da7c:	1a52      	subs	r2, r2, r1
 800da7e:	17d1      	asrs	r1, r2, #31
 800da80:	fba2 2305 	umull	r2, r3, r2, r5
 800da84:	fb05 3301 	mla	r3, r5, r1, r3
 800da88:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800da8c:	f143 0300 	adc.w	r3, r3, #0
 800da90:	005b      	lsls	r3, r3, #1
 800da92:	930c      	str	r3, [sp, #48]	; 0x30
 800da94:	461e      	mov	r6, r3
 800da96:	9801      	ldr	r0, [sp, #4]
 800da98:	9c06      	ldr	r4, [sp, #24]
 800da9a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800da9c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800da9e:	01f6      	lsls	r6, r6, #7
 800daa0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800daa4:	2300      	movs	r3, #0
 800daa6:	fbc5 2306 	smlal	r2, r3, r5, r6
 800daaa:	fb04 f101 	mul.w	r1, r4, r1
 800daae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dab0:	109b      	asrs	r3, r3, #2
 800dab2:	f303 030f 	ssat	r3, #16, r3
 800dab6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800daba:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800dabc:	1c62      	adds	r2, r4, #1
 800dabe:	4293      	cmp	r3, r2
 800dac0:	9206      	str	r2, [sp, #24]
 800dac2:	dd18      	ble.n	800daf6 <D128_GENERIC+0x36e>
 800dac4:	9b01      	ldr	r3, [sp, #4]
 800dac6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dac8:	2a01      	cmp	r2, #1
 800daca:	f47f ae80 	bne.w	800d7ce <D128_GENERIC+0x46>
 800dace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad0:	9d05      	ldr	r5, [sp, #20]
 800dad2:	069b      	lsls	r3, r3, #26
 800dad4:	6829      	ldr	r1, [r5, #0]
 800dad6:	686a      	ldr	r2, [r5, #4]
 800dad8:	68a8      	ldr	r0, [r5, #8]
 800dada:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800dade:	f105 0410 	add.w	r4, r5, #16
 800dae2:	d506      	bpl.n	800daf2 <D128_GENERIC+0x36a>
 800dae4:	ba49      	rev16	r1, r1
 800dae6:	ba52      	rev16	r2, r2
 800dae8:	ba40      	rev16	r0, r0
 800daea:	fa9a fa9a 	rev16.w	sl, sl
 800daee:	9405      	str	r4, [sp, #20]
 800daf0:	e6cf      	b.n	800d892 <D128_GENERIC+0x10a>
 800daf2:	9405      	str	r4, [sp, #20]
 800daf4:	e6cd      	b.n	800d892 <D128_GENERIC+0x10a>
 800daf6:	9a01      	ldr	r2, [sp, #4]
 800daf8:	9904      	ldr	r1, [sp, #16]
 800dafa:	6091      	str	r1, [r2, #8]
 800dafc:	9903      	ldr	r1, [sp, #12]
 800dafe:	60d1      	str	r1, [r2, #12]
 800db00:	9b02      	ldr	r3, [sp, #8]
 800db02:	61d3      	str	r3, [r2, #28]
 800db04:	4611      	mov	r1, r2
 800db06:	4613      	mov	r3, r2
 800db08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db0a:	610a      	str	r2, [r1, #16]
 800db0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800db0e:	6159      	str	r1, [r3, #20]
 800db10:	9911      	ldr	r1, [sp, #68]	; 0x44
 800db12:	6199      	str	r1, [r3, #24]
 800db14:	2000      	movs	r0, #0
 800db16:	b013      	add	sp, #76	; 0x4c
 800db18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db1c:	00780069 	.word	0x00780069
 800db20:	005b004e 	.word	0x005b004e
 800db24:	00420037 	.word	0x00420037
 800db28:	002d0024 	.word	0x002d0024
 800db2c:	001c0015 	.word	0x001c0015
 800db30:	000f000a 	.word	0x000f000a
 800db34:	00060003 	.word	0x00060003
 800db38:	00880096 	.word	0x00880096
 800db3c:	00a200ac 	.word	0x00a200ac
 800db40:	00b400ba 	.word	0x00b400ba
 800db44:	00be00c0 	.word	0x00be00c0
 800db48:	00c000be 	.word	0x00c000be
 800db4c:	00ba00b4 	.word	0x00ba00b4
 800db50:	00ac00a2 	.word	0x00ac00a2
 800db54:	00030006 	.word	0x00030006
 800db58:	000a000f 	.word	0x000a000f
 800db5c:	0015001c 	.word	0x0015001c
 800db60:	0024002d 	.word	0x0024002d
 800db64:	00370042 	.word	0x00370042
 800db68:	004e005b 	.word	0x004e005b
 800db6c:	00690078 	.word	0x00690078
 800db70:	20000000 	.word	0x20000000
 800db74:	00960088 	.word	0x00960088

0800db78 <D16_1CH_HTONS_VOL_HP>:
 800db78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db7c:	4691      	mov	r9, r2
 800db7e:	b083      	sub	sp, #12
 800db80:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800db82:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800db86:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	4680      	mov	r8, r0
 800db8e:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800db92:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800db96:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800db9a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800db9e:	9401      	str	r4, [sp, #4]
 800dba0:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800dba4:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800dba8:	2a00      	cmp	r2, #0
 800dbaa:	d04e      	beq.n	800dc4a <D16_1CH_HTONS_VOL_HP+0xd2>
 800dbac:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800dc58 <D16_1CH_HTONS_VOL_HP+0xe0>
 800dbb0:	1e8c      	subs	r4, r1, #2
 800dbb2:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800dbb6:	f858 2b02 	ldr.w	r2, [r8], #2
 800dbba:	ba52      	rev16	r2, r2
 800dbbc:	b2d6      	uxtb	r6, r2
 800dbbe:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800dbc2:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800dbc6:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800dbca:	4413      	add	r3, r2
 800dbcc:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800dbd0:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800dbd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dbd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800dbdc:	0a93      	lsrs	r3, r2, #10
 800dbde:	4a1c      	ldr	r2, [pc, #112]	; (800dc50 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800dbe0:	fb21 5202 	smlad	r2, r1, r2, r5
 800dbe4:	4d1b      	ldr	r5, [pc, #108]	; (800dc54 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800dbe6:	fb21 f505 	smuad	r5, r1, r5
 800dbea:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800dbee:	4410      	add	r0, r2
 800dbf0:	1bc0      	subs	r0, r0, r7
 800dbf2:	17c7      	asrs	r7, r0, #31
 800dbf4:	fba0 010e 	umull	r0, r1, r0, lr
 800dbf8:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800dbfc:	fb0e 1107 	mla	r1, lr, r7, r1
 800dc00:	f141 0100 	adc.w	r1, r1, #0
 800dc04:	0448      	lsls	r0, r1, #17
 800dc06:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dc0a:	2700      	movs	r7, #0
 800dc0c:	fbc0 670a 	smlal	r6, r7, r0, sl
 800dc10:	45d8      	cmp	r8, fp
 800dc12:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800dc16:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800dc1a:	4617      	mov	r7, r2
 800dc1c:	f301 010f 	ssat	r1, #16, r1
 800dc20:	f824 1f02 	strh.w	r1, [r4, #2]!
 800dc24:	d1c7      	bne.n	800dbb6 <D16_1CH_HTONS_VOL_HP+0x3e>
 800dc26:	9901      	ldr	r1, [sp, #4]
 800dc28:	f8c9 301c 	str.w	r3, [r9, #28]
 800dc2c:	9b00      	ldr	r3, [sp, #0]
 800dc2e:	f8c9 0010 	str.w	r0, [r9, #16]
 800dc32:	2000      	movs	r0, #0
 800dc34:	f8c9 5008 	str.w	r5, [r9, #8]
 800dc38:	f8c9 100c 	str.w	r1, [r9, #12]
 800dc3c:	f8c9 2014 	str.w	r2, [r9, #20]
 800dc40:	f8c9 3018 	str.w	r3, [r9, #24]
 800dc44:	b003      	add	sp, #12
 800dc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4a:	463a      	mov	r2, r7
 800dc4c:	4621      	mov	r1, r4
 800dc4e:	e7eb      	b.n	800dc28 <D16_1CH_HTONS_VOL_HP+0xb0>
 800dc50:	00030001 	.word	0x00030001
 800dc54:	00010003 	.word	0x00010003
 800dc58:	20000000 	.word	0x20000000

0800dc5c <D24_1CH_HTONS_VOL_HP>:
 800dc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc60:	b089      	sub	sp, #36	; 0x24
 800dc62:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800dc64:	6996      	ldr	r6, [r2, #24]
 800dc66:	9304      	str	r3, [sp, #16]
 800dc68:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800dc6a:	9207      	str	r2, [sp, #28]
 800dc6c:	6915      	ldr	r5, [r2, #16]
 800dc6e:	6954      	ldr	r4, [r2, #20]
 800dc70:	9606      	str	r6, [sp, #24]
 800dc72:	6893      	ldr	r3, [r2, #8]
 800dc74:	69d6      	ldr	r6, [r2, #28]
 800dc76:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800dc7a:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800dc7e:	9a04      	ldr	r2, [sp, #16]
 800dc80:	9705      	str	r7, [sp, #20]
 800dc82:	2a00      	cmp	r2, #0
 800dc84:	d07e      	beq.n	800dd84 <D24_1CH_HTONS_VOL_HP+0x128>
 800dc86:	f1a1 0b02 	sub.w	fp, r1, #2
 800dc8a:	2700      	movs	r7, #0
 800dc8c:	46a8      	mov	r8, r5
 800dc8e:	f8cd b004 	str.w	fp, [sp, #4]
 800dc92:	4655      	mov	r5, sl
 800dc94:	46e3      	mov	fp, ip
 800dc96:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800dd90 <D24_1CH_HTONS_VOL_HP+0x134>
 800dc9a:	46ba      	mov	sl, r7
 800dc9c:	469c      	mov	ip, r3
 800dc9e:	e055      	b.n	800dd4c <D24_1CH_HTONS_VOL_HP+0xf0>
 800dca0:	7802      	ldrb	r2, [r0, #0]
 800dca2:	78c3      	ldrb	r3, [r0, #3]
 800dca4:	7841      	ldrb	r1, [r0, #1]
 800dca6:	0212      	lsls	r2, r2, #8
 800dca8:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800dcac:	440b      	add	r3, r1
 800dcae:	3002      	adds	r0, #2
 800dcb0:	b2d9      	uxtb	r1, r3
 800dcb2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dcb6:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800dcba:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800dcbe:	0c1b      	lsrs	r3, r3, #16
 800dcc0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800dcc4:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800dcc8:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800dccc:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800dcd0:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800dcd4:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800dcd8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800dcdc:	4a2a      	ldr	r2, [pc, #168]	; (800dd88 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800dcde:	fb23 b102 	smlad	r1, r3, r2, fp
 800dce2:	4a2a      	ldr	r2, [pc, #168]	; (800dd8c <D24_1CH_HTONS_VOL_HP+0x130>)
 800dce4:	fb23 cb02 	smlad	fp, r3, r2, ip
 800dce8:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800dcec:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800dcf0:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	fb23 f702 	smuad	r7, r3, r2
 800dcfa:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800dcfe:	eb01 0208 	add.w	r2, r1, r8
 800dd02:	1b12      	subs	r2, r2, r4
 800dd04:	17d4      	asrs	r4, r2, #31
 800dd06:	fba2 2305 	umull	r2, r3, r2, r5
 800dd0a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800dd0e:	fb05 3304 	mla	r3, r5, r4, r3
 800dd12:	f143 0300 	adc.w	r3, r3, #0
 800dd16:	9c05      	ldr	r4, [sp, #20]
 800dd18:	03da      	lsls	r2, r3, #15
 800dd1a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800dd1e:	f04f 0900 	mov.w	r9, #0
 800dd22:	fbc4 8902 	smlal	r8, r9, r4, r2
 800dd26:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800dd2a:	9a01      	ldr	r2, [sp, #4]
 800dd2c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800dd30:	9b03      	ldr	r3, [sp, #12]
 800dd32:	109b      	asrs	r3, r3, #2
 800dd34:	f303 030f 	ssat	r3, #16, r3
 800dd38:	f822 3f02 	strh.w	r3, [r2, #2]!
 800dd3c:	9b04      	ldr	r3, [sp, #16]
 800dd3e:	9201      	str	r2, [sp, #4]
 800dd40:	f10a 0a01 	add.w	sl, sl, #1
 800dd44:	459a      	cmp	sl, r3
 800dd46:	44bc      	add	ip, r7
 800dd48:	460c      	mov	r4, r1
 800dd4a:	d00b      	beq.n	800dd64 <D24_1CH_HTONS_VOL_HP+0x108>
 800dd4c:	f01a 0f01 	tst.w	sl, #1
 800dd50:	d0a6      	beq.n	800dca0 <D24_1CH_HTONS_VOL_HP+0x44>
 800dd52:	78c2      	ldrb	r2, [r0, #3]
 800dd54:	7883      	ldrb	r3, [r0, #2]
 800dd56:	f810 1b04 	ldrb.w	r1, [r0], #4
 800dd5a:	0212      	lsls	r2, r2, #8
 800dd5c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800dd60:	440b      	add	r3, r1
 800dd62:	e7a5      	b.n	800dcb0 <D24_1CH_HTONS_VOL_HP+0x54>
 800dd64:	4663      	mov	r3, ip
 800dd66:	4645      	mov	r5, r8
 800dd68:	46dc      	mov	ip, fp
 800dd6a:	9807      	ldr	r0, [sp, #28]
 800dd6c:	6141      	str	r1, [r0, #20]
 800dd6e:	9906      	ldr	r1, [sp, #24]
 800dd70:	6083      	str	r3, [r0, #8]
 800dd72:	f8c0 c00c 	str.w	ip, [r0, #12]
 800dd76:	61c6      	str	r6, [r0, #28]
 800dd78:	6105      	str	r5, [r0, #16]
 800dd7a:	6181      	str	r1, [r0, #24]
 800dd7c:	2000      	movs	r0, #0
 800dd7e:	b009      	add	sp, #36	; 0x24
 800dd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd84:	4621      	mov	r1, r4
 800dd86:	e7f0      	b.n	800dd6a <D24_1CH_HTONS_VOL_HP+0x10e>
 800dd88:	00030001 	.word	0x00030001
 800dd8c:	00060007 	.word	0x00060007
 800dd90:	20000000 	.word	0x20000000

0800dd94 <D32_1CH_HTONS_VOL_HP>:
 800dd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd98:	4692      	mov	sl, r2
 800dd9a:	b087      	sub	sp, #28
 800dd9c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800dd9e:	f8da 3018 	ldr.w	r3, [sl, #24]
 800dda2:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800dda6:	9304      	str	r3, [sp, #16]
 800dda8:	f8da 4010 	ldr.w	r4, [sl, #16]
 800ddac:	f8da 8014 	ldr.w	r8, [sl, #20]
 800ddb0:	f8da 601c 	ldr.w	r6, [sl, #28]
 800ddb4:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ddb8:	f8da e00c 	ldr.w	lr, [sl, #12]
 800ddbc:	9501      	str	r5, [sp, #4]
 800ddbe:	f8da c020 	ldr.w	ip, [sl, #32]
 800ddc2:	2a00      	cmp	r2, #0
 800ddc4:	d07b      	beq.n	800debe <D32_1CH_HTONS_VOL_HP+0x12a>
 800ddc6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800ddca:	4f3e      	ldr	r7, [pc, #248]	; (800dec4 <D32_1CH_HTONS_VOL_HP+0x130>)
 800ddcc:	f8cd c00c 	str.w	ip, [sp, #12]
 800ddd0:	9202      	str	r2, [sp, #8]
 800ddd2:	460d      	mov	r5, r1
 800ddd4:	46a1      	mov	r9, r4
 800ddd6:	4684      	mov	ip, r0
 800ddd8:	f8cd a014 	str.w	sl, [sp, #20]
 800dddc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dde0:	ba49      	rev16	r1, r1
 800dde2:	b2c8      	uxtb	r0, r1
 800dde4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800dde8:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800ddec:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800ddf0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800ddf4:	0e09      	lsrs	r1, r1, #24
 800ddf6:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800ddfa:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800ddfe:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800de02:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800de06:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800de0a:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800de0e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800de12:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800de16:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800de1a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800de1e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800de22:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800de26:	4a28      	ldr	r2, [pc, #160]	; (800dec8 <D32_1CH_HTONS_VOL_HP+0x134>)
 800de28:	fb20 e202 	smlad	r2, r0, r2, lr
 800de2c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800de30:	fb2a 2101 	smlad	r1, sl, r1, r2
 800de34:	4a25      	ldr	r2, [pc, #148]	; (800decc <D32_1CH_HTONS_VOL_HP+0x138>)
 800de36:	fb20 3302 	smlad	r3, r0, r2, r3
 800de3a:	4a25      	ldr	r2, [pc, #148]	; (800ded0 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800de3c:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800de40:	2301      	movs	r3, #1
 800de42:	fb20 f003 	smuad	r0, r0, r3
 800de46:	4b23      	ldr	r3, [pc, #140]	; (800ded4 <D32_1CH_HTONS_VOL_HP+0x140>)
 800de48:	fb2a 0303 	smlad	r3, sl, r3, r0
 800de4c:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800de50:	9c03      	ldr	r4, [sp, #12]
 800de52:	eb02 0009 	add.w	r0, r2, r9
 800de56:	eba0 0008 	sub.w	r0, r0, r8
 800de5a:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800de5e:	fba0 0104 	umull	r0, r1, r0, r4
 800de62:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800de66:	fb04 110b 	mla	r1, r4, fp, r1
 800de6a:	f141 0100 	adc.w	r1, r1, #0
 800de6e:	9c01      	ldr	r4, [sp, #4]
 800de70:	0388      	lsls	r0, r1, #14
 800de72:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800de76:	f04f 0900 	mov.w	r9, #0
 800de7a:	fbc0 8904 	smlal	r8, r9, r0, r4
 800de7e:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800de82:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800de86:	f300 000f 	ssat	r0, #16, r0
 800de8a:	9902      	ldr	r1, [sp, #8]
 800de8c:	f825 0b02 	strh.w	r0, [r5], #2
 800de90:	428d      	cmp	r5, r1
 800de92:	4690      	mov	r8, r2
 800de94:	d1a2      	bne.n	800dddc <D32_1CH_HTONS_VOL_HP+0x48>
 800de96:	f8dd a014 	ldr.w	sl, [sp, #20]
 800de9a:	464c      	mov	r4, r9
 800de9c:	f8ca 3008 	str.w	r3, [sl, #8]
 800dea0:	9b04      	ldr	r3, [sp, #16]
 800dea2:	f8ca e00c 	str.w	lr, [sl, #12]
 800dea6:	2000      	movs	r0, #0
 800dea8:	f8ca 601c 	str.w	r6, [sl, #28]
 800deac:	f8ca 4010 	str.w	r4, [sl, #16]
 800deb0:	f8ca 2014 	str.w	r2, [sl, #20]
 800deb4:	f8ca 3018 	str.w	r3, [sl, #24]
 800deb8:	b007      	add	sp, #28
 800deba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800debe:	4642      	mov	r2, r8
 800dec0:	e7ec      	b.n	800de9c <D32_1CH_HTONS_VOL_HP+0x108>
 800dec2:	bf00      	nop
 800dec4:	20000000 	.word	0x20000000
 800dec8:	00060003 	.word	0x00060003
 800decc:	000a000c 	.word	0x000a000c
 800ded0:	000c000a 	.word	0x000c000a
 800ded4:	00030006 	.word	0x00030006

0800ded8 <D48_1CH_HTONS_VOL_HP>:
 800ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dedc:	4613      	mov	r3, r2
 800dede:	461c      	mov	r4, r3
 800dee0:	b087      	sub	sp, #28
 800dee2:	4625      	mov	r5, r4
 800dee4:	4626      	mov	r6, r4
 800dee6:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800dee8:	9205      	str	r2, [sp, #20]
 800deea:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800deec:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800def0:	9501      	str	r5, [sp, #4]
 800def2:	4680      	mov	r8, r0
 800def4:	6a35      	ldr	r5, [r6, #32]
 800def6:	6918      	ldr	r0, [r3, #16]
 800def8:	699b      	ldr	r3, [r3, #24]
 800defa:	9304      	str	r3, [sp, #16]
 800defc:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800df00:	68a3      	ldr	r3, [r4, #8]
 800df02:	9502      	str	r5, [sp, #8]
 800df04:	68e4      	ldr	r4, [r4, #12]
 800df06:	2a00      	cmp	r2, #0
 800df08:	f000 808c 	beq.w	800e024 <D48_1CH_HTONS_VOL_HP+0x14c>
 800df0c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800df10:	4d45      	ldr	r5, [pc, #276]	; (800e028 <D48_1CH_HTONS_VOL_HP+0x150>)
 800df12:	9203      	str	r2, [sp, #12]
 800df14:	468c      	mov	ip, r1
 800df16:	e898 0044 	ldmia.w	r8, {r2, r6}
 800df1a:	f108 0806 	add.w	r8, r8, #6
 800df1e:	ba52      	rev16	r2, r2
 800df20:	ba76      	rev16	r6, r6
 800df22:	b2d7      	uxtb	r7, r2
 800df24:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800df28:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800df2c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800df30:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800df34:	0e12      	lsrs	r2, r2, #24
 800df36:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800df3a:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800df3e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800df42:	fa5f fb86 	uxtb.w	fp, r6
 800df46:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800df4a:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800df4e:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800df52:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800df56:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800df5a:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800df5e:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800df62:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800df66:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800df6a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800df6e:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800df72:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800df76:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800df7a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800df7e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800df82:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800df86:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800df8a:	4a28      	ldr	r2, [pc, #160]	; (800e02c <D48_1CH_HTONS_VOL_HP+0x154>)
 800df8c:	fb2a 4202 	smlad	r2, sl, r2, r4
 800df90:	4927      	ldr	r1, [pc, #156]	; (800e030 <D48_1CH_HTONS_VOL_HP+0x158>)
 800df92:	fb27 2201 	smlad	r2, r7, r1, r2
 800df96:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800df9a:	fb26 2201 	smlad	r2, r6, r1, r2
 800df9e:	4925      	ldr	r1, [pc, #148]	; (800e034 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800dfa0:	fb2a 3401 	smlad	r4, sl, r1, r3
 800dfa4:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800dfa8:	fb27 4403 	smlad	r4, r7, r3, r4
 800dfac:	4b22      	ldr	r3, [pc, #136]	; (800e038 <D48_1CH_HTONS_VOL_HP+0x160>)
 800dfae:	fb26 4403 	smlad	r4, r6, r3, r4
 800dfb2:	2101      	movs	r1, #1
 800dfb4:	fb2a fa01 	smuad	sl, sl, r1
 800dfb8:	4b20      	ldr	r3, [pc, #128]	; (800e03c <D48_1CH_HTONS_VOL_HP+0x164>)
 800dfba:	fb27 a703 	smlad	r7, r7, r3, sl
 800dfbe:	4b20      	ldr	r3, [pc, #128]	; (800e040 <D48_1CH_HTONS_VOL_HP+0x168>)
 800dfc0:	fb26 7303 	smlad	r3, r6, r3, r7
 800dfc4:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800dfc8:	9e02      	ldr	r6, [sp, #8]
 800dfca:	9f01      	ldr	r7, [sp, #4]
 800dfcc:	4410      	add	r0, r2
 800dfce:	eba0 0009 	sub.w	r0, r0, r9
 800dfd2:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800dfd6:	fba0 0106 	umull	r0, r1, r0, r6
 800dfda:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800dfde:	fb06 110a 	mla	r1, r6, sl, r1
 800dfe2:	f141 0100 	adc.w	r1, r1, #0
 800dfe6:	0308      	lsls	r0, r1, #12
 800dfe8:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800dfec:	f04f 0a00 	mov.w	sl, #0
 800dff0:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800dff4:	4657      	mov	r7, sl
 800dff6:	10b8      	asrs	r0, r7, #2
 800dff8:	f300 000f 	ssat	r0, #16, r0
 800dffc:	f82c 0b02 	strh.w	r0, [ip], #2
 800e000:	0048      	lsls	r0, r1, #1
 800e002:	9903      	ldr	r1, [sp, #12]
 800e004:	458c      	cmp	ip, r1
 800e006:	4691      	mov	r9, r2
 800e008:	d185      	bne.n	800df16 <D48_1CH_HTONS_VOL_HP+0x3e>
 800e00a:	9d05      	ldr	r5, [sp, #20]
 800e00c:	616a      	str	r2, [r5, #20]
 800e00e:	9a04      	ldr	r2, [sp, #16]
 800e010:	6128      	str	r0, [r5, #16]
 800e012:	2000      	movs	r0, #0
 800e014:	60ab      	str	r3, [r5, #8]
 800e016:	60ec      	str	r4, [r5, #12]
 800e018:	f8c5 e01c 	str.w	lr, [r5, #28]
 800e01c:	61aa      	str	r2, [r5, #24]
 800e01e:	b007      	add	sp, #28
 800e020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e024:	464a      	mov	r2, r9
 800e026:	e7f0      	b.n	800e00a <D48_1CH_HTONS_VOL_HP+0x132>
 800e028:	20000000 	.word	0x20000000
 800e02c:	000f000a 	.word	0x000f000a
 800e030:	00060003 	.word	0x00060003
 800e034:	00150019 	.word	0x00150019
 800e038:	00190015 	.word	0x00190015
 800e03c:	00030006 	.word	0x00030006
 800e040:	000a000f 	.word	0x000a000f

0800e044 <D64_1CH_HTONS_VOL_HP>:
 800e044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e048:	b089      	sub	sp, #36	; 0x24
 800e04a:	4614      	mov	r4, r2
 800e04c:	9207      	str	r2, [sp, #28]
 800e04e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800e050:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800e054:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800e058:	6992      	ldr	r2, [r2, #24]
 800e05a:	9206      	str	r2, [sp, #24]
 800e05c:	68e2      	ldr	r2, [r4, #12]
 800e05e:	9201      	str	r2, [sp, #4]
 800e060:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e062:	9203      	str	r2, [sp, #12]
 800e064:	6a22      	ldr	r2, [r4, #32]
 800e066:	69e5      	ldr	r5, [r4, #28]
 800e068:	68a6      	ldr	r6, [r4, #8]
 800e06a:	9204      	str	r2, [sp, #16]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f000 80b0 	beq.w	800e1d2 <D64_1CH_HTONS_VOL_HP+0x18e>
 800e072:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e076:	4f58      	ldr	r7, [pc, #352]	; (800e1d8 <D64_1CH_HTONS_VOL_HP+0x194>)
 800e078:	9305      	str	r3, [sp, #20]
 800e07a:	9102      	str	r1, [sp, #8]
 800e07c:	f850 2b08 	ldr.w	r2, [r0], #8
 800e080:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e084:	ba52      	rev16	r2, r2
 800e086:	fa93 f993 	rev16.w	r9, r3
 800e08a:	b2d4      	uxtb	r4, r2
 800e08c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e090:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800e094:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e098:	9901      	ldr	r1, [sp, #4]
 800e09a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800e09e:	0e12      	lsrs	r2, r2, #24
 800e0a0:	44ab      	add	fp, r5
 800e0a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e0a6:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800e0aa:	fa5f f289 	uxtb.w	r2, r9
 800e0ae:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800e0b2:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800e0b6:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800e0ba:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800e0be:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e0c2:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800e0c6:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800e0ca:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800e0ce:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800e0d2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800e0d6:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800e0da:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800e0de:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800e0e2:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800e0e6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e0ea:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800e0ee:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e0f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e0f6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e0fa:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800e0fe:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e102:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800e106:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e10a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800e10e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800e112:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e116:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800e11a:	4b30      	ldr	r3, [pc, #192]	; (800e1dc <D64_1CH_HTONS_VOL_HP+0x198>)
 800e11c:	fb2b 1303 	smlad	r3, fp, r3, r1
 800e120:	492f      	ldr	r1, [pc, #188]	; (800e1e0 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800e122:	fb24 3301 	smlad	r3, r4, r1, r3
 800e126:	492f      	ldr	r1, [pc, #188]	; (800e1e4 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800e128:	fb22 3301 	smlad	r3, r2, r1, r3
 800e12c:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800e130:	fb2e 390a 	smlad	r9, lr, sl, r3
 800e134:	4b2c      	ldr	r3, [pc, #176]	; (800e1e8 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800e136:	fb2b 6603 	smlad	r6, fp, r3, r6
 800e13a:	fb2e 6613 	smladx	r6, lr, r3, r6
 800e13e:	4b2b      	ldr	r3, [pc, #172]	; (800e1ec <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800e140:	fb24 6603 	smlad	r6, r4, r3, r6
 800e144:	fb22 6313 	smladx	r3, r2, r3, r6
 800e148:	f04f 0a01 	mov.w	sl, #1
 800e14c:	9301      	str	r3, [sp, #4]
 800e14e:	fb2b fb0a 	smuad	fp, fp, sl
 800e152:	4b27      	ldr	r3, [pc, #156]	; (800e1f0 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800e154:	fb24 ba03 	smlad	sl, r4, r3, fp
 800e158:	4b26      	ldr	r3, [pc, #152]	; (800e1f4 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800e15a:	fb22 a203 	smlad	r2, r2, r3, sl
 800e15e:	4b26      	ldr	r3, [pc, #152]	; (800e1f8 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800e160:	fb2e 2603 	smlad	r6, lr, r3, r2
 800e164:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800e168:	eb0a 020c 	add.w	r2, sl, ip
 800e16c:	9c04      	ldr	r4, [sp, #16]
 800e16e:	9903      	ldr	r1, [sp, #12]
 800e170:	eba2 0208 	sub.w	r2, r2, r8
 800e174:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800e178:	fba2 2304 	umull	r2, r3, r2, r4
 800e17c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800e180:	fb04 3309 	mla	r3, r4, r9, r3
 800e184:	f143 0300 	adc.w	r3, r3, #0
 800e188:	02da      	lsls	r2, r3, #11
 800e18a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800e18e:	f04f 0900 	mov.w	r9, #0
 800e192:	fbc1 8902 	smlal	r8, r9, r1, r2
 800e196:	9902      	ldr	r1, [sp, #8]
 800e198:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800e19c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e1a0:	f302 020f 	ssat	r2, #16, r2
 800e1a4:	9b05      	ldr	r3, [sp, #20]
 800e1a6:	f821 2b02 	strh.w	r2, [r1], #2
 800e1aa:	4299      	cmp	r1, r3
 800e1ac:	9102      	str	r1, [sp, #8]
 800e1ae:	46d0      	mov	r8, sl
 800e1b0:	f47f af64 	bne.w	800e07c <D64_1CH_HTONS_VOL_HP+0x38>
 800e1b4:	9a07      	ldr	r2, [sp, #28]
 800e1b6:	9901      	ldr	r1, [sp, #4]
 800e1b8:	60d1      	str	r1, [r2, #12]
 800e1ba:	9906      	ldr	r1, [sp, #24]
 800e1bc:	6096      	str	r6, [r2, #8]
 800e1be:	2000      	movs	r0, #0
 800e1c0:	61d5      	str	r5, [r2, #28]
 800e1c2:	f8c2 c010 	str.w	ip, [r2, #16]
 800e1c6:	f8c2 a014 	str.w	sl, [r2, #20]
 800e1ca:	6191      	str	r1, [r2, #24]
 800e1cc:	b009      	add	sp, #36	; 0x24
 800e1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d2:	46c2      	mov	sl, r8
 800e1d4:	4622      	mov	r2, r4
 800e1d6:	e7ee      	b.n	800e1b6 <D64_1CH_HTONS_VOL_HP+0x172>
 800e1d8:	20000000 	.word	0x20000000
 800e1dc:	001c0015 	.word	0x001c0015
 800e1e0:	000f000a 	.word	0x000f000a
 800e1e4:	00060003 	.word	0x00060003
 800e1e8:	0024002a 	.word	0x0024002a
 800e1ec:	002e0030 	.word	0x002e0030
 800e1f0:	00030006 	.word	0x00030006
 800e1f4:	000a000f 	.word	0x000a000f
 800e1f8:	0015001c 	.word	0x0015001c

0800e1fc <D80_1CH_HTONS_VOL_HP>:
 800e1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e200:	4613      	mov	r3, r2
 800e202:	b089      	sub	sp, #36	; 0x24
 800e204:	4686      	mov	lr, r0
 800e206:	6918      	ldr	r0, [r3, #16]
 800e208:	9000      	str	r0, [sp, #0]
 800e20a:	4618      	mov	r0, r3
 800e20c:	461c      	mov	r4, r3
 800e20e:	695b      	ldr	r3, [r3, #20]
 800e210:	9302      	str	r3, [sp, #8]
 800e212:	6983      	ldr	r3, [r0, #24]
 800e214:	9306      	str	r3, [sp, #24]
 800e216:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800e21a:	69c3      	ldr	r3, [r0, #28]
 800e21c:	68c0      	ldr	r0, [r0, #12]
 800e21e:	9207      	str	r2, [sp, #28]
 800e220:	9001      	str	r0, [sp, #4]
 800e222:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800e224:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e226:	9003      	str	r0, [sp, #12]
 800e228:	6a20      	ldr	r0, [r4, #32]
 800e22a:	9004      	str	r0, [sp, #16]
 800e22c:	2a00      	cmp	r2, #0
 800e22e:	f000 80d2 	beq.w	800e3d6 <D80_1CH_HTONS_VOL_HP+0x1da>
 800e232:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e236:	4869      	ldr	r0, [pc, #420]	; (800e3dc <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800e238:	9205      	str	r2, [sp, #20]
 800e23a:	461c      	mov	r4, r3
 800e23c:	f8de 5000 	ldr.w	r5, [lr]
 800e240:	f8de 2004 	ldr.w	r2, [lr, #4]
 800e244:	f8de 3008 	ldr.w	r3, [lr, #8]
 800e248:	f10e 0e0a 	add.w	lr, lr, #10
 800e24c:	ba6d      	rev16	r5, r5
 800e24e:	ba52      	rev16	r2, r2
 800e250:	fa93 fb93 	rev16.w	fp, r3
 800e254:	b2ee      	uxtb	r6, r5
 800e256:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800e25a:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800e25e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e262:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800e266:	eb04 0a07 	add.w	sl, r4, r7
 800e26a:	0e2d      	lsrs	r5, r5, #24
 800e26c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800e270:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800e274:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800e278:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800e27c:	b2d5      	uxtb	r5, r2
 800e27e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800e282:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800e286:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800e28a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800e28e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800e292:	0e12      	lsrs	r2, r2, #24
 800e294:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800e298:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800e29c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800e2a0:	fa5f f48b 	uxtb.w	r4, fp
 800e2a4:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800e2a8:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800e2ac:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800e2b0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800e2b4:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800e2b8:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800e2bc:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800e2c0:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800e2c4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e2c8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800e2cc:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e2d0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e2d4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e2d8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e2dc:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800e2e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e2e4:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800e2e8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800e2ec:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e2f0:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800e2f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800e2f8:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800e2fc:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800e300:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800e304:	4d36      	ldr	r5, [pc, #216]	; (800e3e0 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800e306:	9f01      	ldr	r7, [sp, #4]
 800e308:	fb23 7505 	smlad	r5, r3, r5, r7
 800e30c:	4f35      	ldr	r7, [pc, #212]	; (800e3e4 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800e30e:	fb29 5507 	smlad	r5, r9, r7, r5
 800e312:	4f35      	ldr	r7, [pc, #212]	; (800e3e8 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800e314:	fb28 5507 	smlad	r5, r8, r7, r5
 800e318:	4f34      	ldr	r7, [pc, #208]	; (800e3ec <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800e31a:	fb22 5507 	smlad	r5, r2, r7, r5
 800e31e:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800e322:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800e326:	4d32      	ldr	r5, [pc, #200]	; (800e3f0 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800e328:	fb23 cc05 	smlad	ip, r3, r5, ip
 800e32c:	4d31      	ldr	r5, [pc, #196]	; (800e3f4 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800e32e:	fb29 cc05 	smlad	ip, r9, r5, ip
 800e332:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800e336:	fb28 c505 	smlad	r5, r8, r5, ip
 800e33a:	4f2f      	ldr	r7, [pc, #188]	; (800e3f8 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800e33c:	fb22 5507 	smlad	r5, r2, r7, r5
 800e340:	4f2e      	ldr	r7, [pc, #184]	; (800e3fc <D80_1CH_HTONS_VOL_HP+0x200>)
 800e342:	fb26 5507 	smlad	r5, r6, r7, r5
 800e346:	f04f 0a01 	mov.w	sl, #1
 800e34a:	9501      	str	r5, [sp, #4]
 800e34c:	fb23 fa0a 	smuad	sl, r3, sl
 800e350:	4b2b      	ldr	r3, [pc, #172]	; (800e400 <D80_1CH_HTONS_VOL_HP+0x204>)
 800e352:	fb29 a903 	smlad	r9, r9, r3, sl
 800e356:	4d2b      	ldr	r5, [pc, #172]	; (800e404 <D80_1CH_HTONS_VOL_HP+0x208>)
 800e358:	fb28 9805 	smlad	r8, r8, r5, r9
 800e35c:	4d2a      	ldr	r5, [pc, #168]	; (800e408 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800e35e:	fb22 8205 	smlad	r2, r2, r5, r8
 800e362:	4b2a      	ldr	r3, [pc, #168]	; (800e40c <D80_1CH_HTONS_VOL_HP+0x210>)
 800e364:	fb26 2c03 	smlad	ip, r6, r3, r2
 800e368:	9b00      	ldr	r3, [sp, #0]
 800e36a:	9d04      	ldr	r5, [sp, #16]
 800e36c:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800e370:	4453      	add	r3, sl
 800e372:	461a      	mov	r2, r3
 800e374:	9b02      	ldr	r3, [sp, #8]
 800e376:	f8cd a008 	str.w	sl, [sp, #8]
 800e37a:	1ad2      	subs	r2, r2, r3
 800e37c:	17d7      	asrs	r7, r2, #31
 800e37e:	fba2 2305 	umull	r2, r3, r2, r5
 800e382:	fb05 3307 	mla	r3, r5, r7, r3
 800e386:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800e38a:	f143 0300 	adc.w	r3, r3, #0
 800e38e:	9d03      	ldr	r5, [sp, #12]
 800e390:	029a      	lsls	r2, r3, #10
 800e392:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e396:	2700      	movs	r7, #0
 800e398:	005b      	lsls	r3, r3, #1
 800e39a:	fbc5 6702 	smlal	r6, r7, r5, r2
 800e39e:	10ba      	asrs	r2, r7, #2
 800e3a0:	9300      	str	r3, [sp, #0]
 800e3a2:	f302 020f 	ssat	r2, #16, r2
 800e3a6:	9b05      	ldr	r3, [sp, #20]
 800e3a8:	f821 2b02 	strh.w	r2, [r1], #2
 800e3ac:	4299      	cmp	r1, r3
 800e3ae:	f47f af45 	bne.w	800e23c <D80_1CH_HTONS_VOL_HP+0x40>
 800e3b2:	4623      	mov	r3, r4
 800e3b4:	9907      	ldr	r1, [sp, #28]
 800e3b6:	9801      	ldr	r0, [sp, #4]
 800e3b8:	60c8      	str	r0, [r1, #12]
 800e3ba:	9a00      	ldr	r2, [sp, #0]
 800e3bc:	f8c1 c008 	str.w	ip, [r1, #8]
 800e3c0:	4608      	mov	r0, r1
 800e3c2:	61cb      	str	r3, [r1, #28]
 800e3c4:	610a      	str	r2, [r1, #16]
 800e3c6:	f8c1 a014 	str.w	sl, [r1, #20]
 800e3ca:	9906      	ldr	r1, [sp, #24]
 800e3cc:	6181      	str	r1, [r0, #24]
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	b009      	add	sp, #36	; 0x24
 800e3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3d6:	f8dd a008 	ldr.w	sl, [sp, #8]
 800e3da:	e7eb      	b.n	800e3b4 <D80_1CH_HTONS_VOL_HP+0x1b8>
 800e3dc:	20000000 	.word	0x20000000
 800e3e0:	002d0024 	.word	0x002d0024
 800e3e4:	001c0015 	.word	0x001c0015
 800e3e8:	000f000a 	.word	0x000f000a
 800e3ec:	00060003 	.word	0x00060003
 800e3f0:	0037003f 	.word	0x0037003f
 800e3f4:	00450049 	.word	0x00450049
 800e3f8:	00490045 	.word	0x00490045
 800e3fc:	003f0037 	.word	0x003f0037
 800e400:	00030006 	.word	0x00030006
 800e404:	000a000f 	.word	0x000a000f
 800e408:	0015001c 	.word	0x0015001c
 800e40c:	0024002d 	.word	0x0024002d

0800e410 <D128_1CH_HTONS_VOL_HP>:
 800e410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e414:	b093      	sub	sp, #76	; 0x4c
 800e416:	4614      	mov	r4, r2
 800e418:	9211      	str	r2, [sp, #68]	; 0x44
 800e41a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800e41c:	6912      	ldr	r2, [r2, #16]
 800e41e:	9203      	str	r2, [sp, #12]
 800e420:	4622      	mov	r2, r4
 800e422:	4615      	mov	r5, r2
 800e424:	6964      	ldr	r4, [r4, #20]
 800e426:	9406      	str	r4, [sp, #24]
 800e428:	4614      	mov	r4, r2
 800e42a:	6992      	ldr	r2, [r2, #24]
 800e42c:	9210      	str	r2, [sp, #64]	; 0x40
 800e42e:	68ea      	ldr	r2, [r5, #12]
 800e430:	9204      	str	r2, [sp, #16]
 800e432:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800e434:	69e6      	ldr	r6, [r4, #28]
 800e436:	920d      	str	r2, [sp, #52]	; 0x34
 800e438:	68a4      	ldr	r4, [r4, #8]
 800e43a:	6a2a      	ldr	r2, [r5, #32]
 800e43c:	9405      	str	r4, [sp, #20]
 800e43e:	920e      	str	r2, [sp, #56]	; 0x38
 800e440:	2b00      	cmp	r3, #0
 800e442:	f000 8145 	beq.w	800e6d0 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800e446:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e44a:	930f      	str	r3, [sp, #60]	; 0x3c
 800e44c:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800e72c <D128_1CH_HTONS_VOL_HP+0x31c>
 800e450:	9107      	str	r1, [sp, #28]
 800e452:	f100 0310 	add.w	r3, r0, #16
 800e456:	4699      	mov	r9, r3
 800e458:	f1a9 0110 	sub.w	r1, r9, #16
 800e45c:	c90e      	ldmia	r1, {r1, r2, r3}
 800e45e:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800e462:	ba49      	rev16	r1, r1
 800e464:	ba52      	rev16	r2, r2
 800e466:	ba5b      	rev16	r3, r3
 800e468:	fa90 fa90 	rev16.w	sl, r0
 800e46c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800e470:	b2cc      	uxtb	r4, r1
 800e472:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800e476:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800e47a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800e47e:	0e09      	lsrs	r1, r1, #24
 800e480:	4426      	add	r6, r4
 800e482:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800e486:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800e48a:	b2d0      	uxtb	r0, r2
 800e48c:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800e490:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800e494:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800e498:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800e49c:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800e4a0:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800e4a4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800e4a8:	0e12      	lsrs	r2, r2, #24
 800e4aa:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800e4ae:	9701      	str	r7, [sp, #4]
 800e4b0:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800e4b4:	4627      	mov	r7, r4
 800e4b6:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800e4ba:	9702      	str	r7, [sp, #8]
 800e4bc:	b2da      	uxtb	r2, r3
 800e4be:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800e4c2:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800e4c6:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800e4ca:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800e4ce:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800e4d2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e4d6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800e4da:	0e1b      	lsrs	r3, r3, #24
 800e4dc:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800e4e0:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800e4e4:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800e4e8:	fa5f f38a 	uxtb.w	r3, sl
 800e4ec:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e4f0:	960a      	str	r6, [sp, #40]	; 0x28
 800e4f2:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800e4f6:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800e4fa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e4fe:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800e502:	950b      	str	r5, [sp, #44]	; 0x2c
 800e504:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800e508:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800e50c:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800e510:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800e514:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800e518:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800e51c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800e520:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800e524:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800e528:	9308      	str	r3, [sp, #32]
 800e52a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800e52e:	9b01      	ldr	r3, [sp, #4]
 800e530:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800e534:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e538:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800e53c:	9b02      	ldr	r3, [sp, #8]
 800e53e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e542:	9302      	str	r3, [sp, #8]
 800e544:	9b08      	ldr	r3, [sp, #32]
 800e546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e54a:	9308      	str	r3, [sp, #32]
 800e54c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e54e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e552:	950c      	str	r5, [sp, #48]	; 0x30
 800e554:	461d      	mov	r5, r3
 800e556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e558:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e55c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e560:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800e564:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800e568:	9301      	str	r3, [sp, #4]
 800e56a:	9b02      	ldr	r3, [sp, #8]
 800e56c:	9202      	str	r2, [sp, #8]
 800e56e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e570:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e572:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e576:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800e57a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800e57e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e582:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800e586:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e58a:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800e58e:	9b08      	ldr	r3, [sp, #32]
 800e590:	9f01      	ldr	r7, [sp, #4]
 800e592:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800e596:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800e59a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e59e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e5a2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800e5a6:	46be      	mov	lr, r7
 800e5a8:	0a96      	lsrs	r6, r2, #10
 800e5aa:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800e5ae:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800e5b2:	4f49      	ldr	r7, [pc, #292]	; (800e6d8 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800e5b4:	9a04      	ldr	r2, [sp, #16]
 800e5b6:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800e5ba:	4a48      	ldr	r2, [pc, #288]	; (800e6dc <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800e5bc:	fb2a ee02 	smlad	lr, sl, r2, lr
 800e5c0:	4a47      	ldr	r2, [pc, #284]	; (800e6e0 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800e5c2:	fb21 ee02 	smlad	lr, r1, r2, lr
 800e5c6:	4a47      	ldr	r2, [pc, #284]	; (800e6e4 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800e5c8:	fb24 ee02 	smlad	lr, r4, r2, lr
 800e5cc:	4a46      	ldr	r2, [pc, #280]	; (800e6e8 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800e5ce:	9f02      	ldr	r7, [sp, #8]
 800e5d0:	fb27 ee02 	smlad	lr, r7, r2, lr
 800e5d4:	4a45      	ldr	r2, [pc, #276]	; (800e6ec <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800e5d6:	fb20 ee02 	smlad	lr, r0, r2, lr
 800e5da:	4a45      	ldr	r2, [pc, #276]	; (800e6f0 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800e5dc:	fb23 e702 	smlad	r7, r3, r2, lr
 800e5e0:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800e5e4:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800e5e8:	9f01      	ldr	r7, [sp, #4]
 800e5ea:	4a42      	ldr	r2, [pc, #264]	; (800e6f4 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800e5ec:	46bc      	mov	ip, r7
 800e5ee:	9f05      	ldr	r7, [sp, #20]
 800e5f0:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800e5f4:	4a40      	ldr	r2, [pc, #256]	; (800e6f8 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800e5f6:	fb2a cc02 	smlad	ip, sl, r2, ip
 800e5fa:	4f40      	ldr	r7, [pc, #256]	; (800e6fc <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800e5fc:	fb21 cc07 	smlad	ip, r1, r7, ip
 800e600:	4f3f      	ldr	r7, [pc, #252]	; (800e700 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800e602:	fb24 cc07 	smlad	ip, r4, r7, ip
 800e606:	4f3f      	ldr	r7, [pc, #252]	; (800e704 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800e608:	9a02      	ldr	r2, [sp, #8]
 800e60a:	fb22 cc07 	smlad	ip, r2, r7, ip
 800e60e:	4f3e      	ldr	r7, [pc, #248]	; (800e708 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800e610:	fb20 cc07 	smlad	ip, r0, r7, ip
 800e614:	4f3d      	ldr	r7, [pc, #244]	; (800e70c <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800e616:	fb23 c707 	smlad	r7, r3, r7, ip
 800e61a:	f8df c114 	ldr.w	ip, [pc, #276]	; 800e730 <D128_1CH_HTONS_VOL_HP+0x320>
 800e61e:	fb25 720c 	smlad	r2, r5, ip, r7
 800e622:	f04f 0b01 	mov.w	fp, #1
 800e626:	9204      	str	r2, [sp, #16]
 800e628:	9f01      	ldr	r7, [sp, #4]
 800e62a:	fb27 fb0b 	smuad	fp, r7, fp
 800e62e:	4f38      	ldr	r7, [pc, #224]	; (800e710 <D128_1CH_HTONS_VOL_HP+0x300>)
 800e630:	fb2a ba07 	smlad	sl, sl, r7, fp
 800e634:	4f37      	ldr	r7, [pc, #220]	; (800e714 <D128_1CH_HTONS_VOL_HP+0x304>)
 800e636:	fb21 aa07 	smlad	sl, r1, r7, sl
 800e63a:	4f37      	ldr	r7, [pc, #220]	; (800e718 <D128_1CH_HTONS_VOL_HP+0x308>)
 800e63c:	fb24 aa07 	smlad	sl, r4, r7, sl
 800e640:	4f36      	ldr	r7, [pc, #216]	; (800e71c <D128_1CH_HTONS_VOL_HP+0x30c>)
 800e642:	9a02      	ldr	r2, [sp, #8]
 800e644:	fb22 a707 	smlad	r7, r2, r7, sl
 800e648:	4a35      	ldr	r2, [pc, #212]	; (800e720 <D128_1CH_HTONS_VOL_HP+0x310>)
 800e64a:	fb20 7702 	smlad	r7, r0, r2, r7
 800e64e:	4a35      	ldr	r2, [pc, #212]	; (800e724 <D128_1CH_HTONS_VOL_HP+0x314>)
 800e650:	fb23 7702 	smlad	r7, r3, r2, r7
 800e654:	4b34      	ldr	r3, [pc, #208]	; (800e728 <D128_1CH_HTONS_VOL_HP+0x318>)
 800e656:	fb25 7303 	smlad	r3, r5, r3, r7
 800e65a:	9305      	str	r3, [sp, #20]
 800e65c:	9b03      	ldr	r3, [sp, #12]
 800e65e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800e660:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800e664:	4473      	add	r3, lr
 800e666:	461a      	mov	r2, r3
 800e668:	9b06      	ldr	r3, [sp, #24]
 800e66a:	f8cd e018 	str.w	lr, [sp, #24]
 800e66e:	1ad2      	subs	r2, r2, r3
 800e670:	17d1      	asrs	r1, r2, #31
 800e672:	fba2 2304 	umull	r2, r3, r2, r4
 800e676:	fb04 3301 	mla	r3, r4, r1, r3
 800e67a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800e67e:	f143 0300 	adc.w	r3, r3, #0
 800e682:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e684:	021a      	lsls	r2, r3, #8
 800e686:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e68a:	2100      	movs	r1, #0
 800e68c:	fbc4 0102 	smlal	r0, r1, r4, r2
 800e690:	108a      	asrs	r2, r1, #2
 800e692:	9907      	ldr	r1, [sp, #28]
 800e694:	f302 020f 	ssat	r2, #16, r2
 800e698:	005b      	lsls	r3, r3, #1
 800e69a:	f821 2b02 	strh.w	r2, [r1], #2
 800e69e:	9303      	str	r3, [sp, #12]
 800e6a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e6a2:	9107      	str	r1, [sp, #28]
 800e6a4:	4299      	cmp	r1, r3
 800e6a6:	f109 0910 	add.w	r9, r9, #16
 800e6aa:	f47f aed5 	bne.w	800e458 <D128_1CH_HTONS_VOL_HP+0x48>
 800e6ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e6b0:	9905      	ldr	r1, [sp, #20]
 800e6b2:	6091      	str	r1, [r2, #8]
 800e6b4:	9904      	ldr	r1, [sp, #16]
 800e6b6:	60d1      	str	r1, [r2, #12]
 800e6b8:	4613      	mov	r3, r2
 800e6ba:	61d6      	str	r6, [r2, #28]
 800e6bc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e6be:	9a03      	ldr	r2, [sp, #12]
 800e6c0:	611a      	str	r2, [r3, #16]
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	f8c3 e014 	str.w	lr, [r3, #20]
 800e6c8:	6199      	str	r1, [r3, #24]
 800e6ca:	b013      	add	sp, #76	; 0x4c
 800e6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d0:	f8dd e018 	ldr.w	lr, [sp, #24]
 800e6d4:	e7eb      	b.n	800e6ae <D128_1CH_HTONS_VOL_HP+0x29e>
 800e6d6:	bf00      	nop
 800e6d8:	00780069 	.word	0x00780069
 800e6dc:	005b004e 	.word	0x005b004e
 800e6e0:	00420037 	.word	0x00420037
 800e6e4:	002d0024 	.word	0x002d0024
 800e6e8:	001c0015 	.word	0x001c0015
 800e6ec:	000f000a 	.word	0x000f000a
 800e6f0:	00060003 	.word	0x00060003
 800e6f4:	00880096 	.word	0x00880096
 800e6f8:	00a200ac 	.word	0x00a200ac
 800e6fc:	00b400ba 	.word	0x00b400ba
 800e700:	00be00c0 	.word	0x00be00c0
 800e704:	00c000be 	.word	0x00c000be
 800e708:	00ba00b4 	.word	0x00ba00b4
 800e70c:	00ac00a2 	.word	0x00ac00a2
 800e710:	00030006 	.word	0x00030006
 800e714:	000a000f 	.word	0x000a000f
 800e718:	0015001c 	.word	0x0015001c
 800e71c:	0024002d 	.word	0x0024002d
 800e720:	00370042 	.word	0x00370042
 800e724:	004e005b 	.word	0x004e005b
 800e728:	00690078 	.word	0x00690078
 800e72c:	20000000 	.word	0x20000000
 800e730:	00960088 	.word	0x00960088

0800e734 <PDM_Filter_Init>:
 800e734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e736:	2240      	movs	r2, #64	; 0x40
 800e738:	4604      	mov	r4, r0
 800e73a:	2100      	movs	r1, #0
 800e73c:	300c      	adds	r0, #12
 800e73e:	f000 fa14 	bl	800eb6a <memset>
 800e742:	493b      	ldr	r1, [pc, #236]	; (800e830 <PDM_Filter_Init+0xfc>)
 800e744:	483b      	ldr	r0, [pc, #236]	; (800e834 <PDM_Filter_Init+0x100>)
 800e746:	f000 f98d 	bl	800ea64 <CRC_Lock>
 800e74a:	8822      	ldrh	r2, [r4, #0]
 800e74c:	8963      	ldrh	r3, [r4, #10]
 800e74e:	4938      	ldr	r1, [pc, #224]	; (800e830 <PDM_Filter_Init+0xfc>)
 800e750:	8925      	ldrh	r5, [r4, #8]
 800e752:	86a3      	strh	r3, [r4, #52]	; 0x34
 800e754:	2801      	cmp	r0, #1
 800e756:	f04f 0300 	mov.w	r3, #0
 800e75a:	bf18      	it	ne
 800e75c:	2100      	movne	r1, #0
 800e75e:	2a01      	cmp	r2, #1
 800e760:	6461      	str	r1, [r4, #68]	; 0x44
 800e762:	86e5      	strh	r5, [r4, #54]	; 0x36
 800e764:	61a3      	str	r3, [r4, #24]
 800e766:	6123      	str	r3, [r4, #16]
 800e768:	6163      	str	r3, [r4, #20]
 800e76a:	60e3      	str	r3, [r4, #12]
 800e76c:	6263      	str	r3, [r4, #36]	; 0x24
 800e76e:	61e3      	str	r3, [r4, #28]
 800e770:	6223      	str	r3, [r4, #32]
 800e772:	6423      	str	r3, [r4, #64]	; 0x40
 800e774:	d918      	bls.n	800e7a8 <PDM_Filter_Init+0x74>
 800e776:	2003      	movs	r0, #3
 800e778:	2302      	movs	r3, #2
 800e77a:	8862      	ldrh	r2, [r4, #2]
 800e77c:	2a01      	cmp	r2, #1
 800e77e:	d91d      	bls.n	800e7bc <PDM_Filter_Init+0x88>
 800e780:	2140      	movs	r1, #64	; 0x40
 800e782:	2300      	movs	r3, #0
 800e784:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e786:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800e78a:	6862      	ldr	r2, [r4, #4]
 800e78c:	bf04      	itt	eq
 800e78e:	6421      	streq	r1, [r4, #64]	; 0x40
 800e790:	460b      	moveq	r3, r1
 800e792:	b11a      	cbz	r2, 800e79c <PDM_Filter_Init+0x68>
 800e794:	f043 0310 	orr.w	r3, r3, #16
 800e798:	6423      	str	r3, [r4, #64]	; 0x40
 800e79a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800e79c:	2200      	movs	r2, #0
 800e79e:	8722      	strh	r2, [r4, #56]	; 0x38
 800e7a0:	b908      	cbnz	r0, 800e7a6 <PDM_Filter_Init+0x72>
 800e7a2:	3380      	adds	r3, #128	; 0x80
 800e7a4:	6423      	str	r3, [r4, #64]	; 0x40
 800e7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7a8:	4d23      	ldr	r5, [pc, #140]	; (800e838 <PDM_Filter_Init+0x104>)
 800e7aa:	d010      	beq.n	800e7ce <PDM_Filter_Init+0x9a>
 800e7ac:	782a      	ldrb	r2, [r5, #0]
 800e7ae:	2a01      	cmp	r2, #1
 800e7b0:	d027      	beq.n	800e802 <PDM_Filter_Init+0xce>
 800e7b2:	8862      	ldrh	r2, [r4, #2]
 800e7b4:	2a01      	cmp	r2, #1
 800e7b6:	f04f 0001 	mov.w	r0, #1
 800e7ba:	d8e1      	bhi.n	800e780 <PDM_Filter_Init+0x4c>
 800e7bc:	d001      	beq.n	800e7c2 <PDM_Filter_Init+0x8e>
 800e7be:	4618      	mov	r0, r3
 800e7c0:	e7de      	b.n	800e780 <PDM_Filter_Init+0x4c>
 800e7c2:	2220      	movs	r2, #32
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	6422      	str	r2, [r4, #64]	; 0x40
 800e7c8:	4613      	mov	r3, r2
 800e7ca:	2160      	movs	r1, #96	; 0x60
 800e7cc:	e7da      	b.n	800e784 <PDM_Filter_Init+0x50>
 800e7ce:	7829      	ldrb	r1, [r5, #0]
 800e7d0:	2900      	cmp	r1, #0
 800e7d2:	d1ee      	bne.n	800e7b2 <PDM_Filter_Init+0x7e>
 800e7d4:	4919      	ldr	r1, [pc, #100]	; (800e83c <PDM_Filter_Init+0x108>)
 800e7d6:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800e844 <PDM_Filter_Init+0x110>
 800e7da:	4f19      	ldr	r7, [pc, #100]	; (800e840 <PDM_Filter_Init+0x10c>)
 800e7dc:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800e7e0:	684a      	ldr	r2, [r1, #4]
 800e7e2:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800e7e6:	ea02 0007 	and.w	r0, r2, r7
 800e7ea:	4303      	orrs	r3, r0
 800e7ec:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e7f0:	4413      	add	r3, r2
 800e7f2:	f841 3f04 	str.w	r3, [r1, #4]!
 800e7f6:	428e      	cmp	r6, r1
 800e7f8:	d1f2      	bne.n	800e7e0 <PDM_Filter_Init+0xac>
 800e7fa:	2001      	movs	r0, #1
 800e7fc:	7028      	strb	r0, [r5, #0]
 800e7fe:	2300      	movs	r3, #0
 800e800:	e7bb      	b.n	800e77a <PDM_Filter_Init+0x46>
 800e802:	490e      	ldr	r1, [pc, #56]	; (800e83c <PDM_Filter_Init+0x108>)
 800e804:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800e844 <PDM_Filter_Init+0x110>
 800e808:	4f0d      	ldr	r7, [pc, #52]	; (800e840 <PDM_Filter_Init+0x10c>)
 800e80a:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800e80e:	684a      	ldr	r2, [r1, #4]
 800e810:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800e814:	ea02 0007 	and.w	r0, r2, r7
 800e818:	4303      	orrs	r3, r0
 800e81a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e81e:	4413      	add	r3, r2
 800e820:	f841 3f04 	str.w	r3, [r1, #4]!
 800e824:	428e      	cmp	r6, r1
 800e826:	d1f2      	bne.n	800e80e <PDM_Filter_Init+0xda>
 800e828:	2300      	movs	r3, #0
 800e82a:	702b      	strb	r3, [r5, #0]
 800e82c:	e7c1      	b.n	800e7b2 <PDM_Filter_Init+0x7e>
 800e82e:	bf00      	nop
 800e830:	b5e8b5cd 	.word	0xb5e8b5cd
 800e834:	f407a5c2 	.word	0xf407a5c2
 800e838:	2000083c 	.word	0x2000083c
 800e83c:	1ffffffc 	.word	0x1ffffffc
 800e840:	000ffc00 	.word	0x000ffc00
 800e844:	3ff00000 	.word	0x3ff00000

0800e848 <PDM_Filter_setConfig>:
 800e848:	4b66      	ldr	r3, [pc, #408]	; (800e9e4 <PDM_Filter_setConfig+0x19c>)
 800e84a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d001      	beq.n	800e854 <PDM_Filter_setConfig+0xc>
 800e850:	2004      	movs	r0, #4
 800e852:	4770      	bx	lr
 800e854:	b530      	push	{r4, r5, lr}
 800e856:	880a      	ldrh	r2, [r1, #0]
 800e858:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e85a:	ed2d 8b04 	vpush	{d8-d9}
 800e85e:	4604      	mov	r4, r0
 800e860:	460d      	mov	r5, r1
 800e862:	1e51      	subs	r1, r2, #1
 800e864:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800e868:	2906      	cmp	r1, #6
 800e86a:	b083      	sub	sp, #12
 800e86c:	6420      	str	r0, [r4, #64]	; 0x40
 800e86e:	d91a      	bls.n	800e8a6 <PDM_Filter_setConfig+0x5e>
 800e870:	2008      	movs	r0, #8
 800e872:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800e876:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e87a:	4299      	cmp	r1, r3
 800e87c:	d07e      	beq.n	800e97c <PDM_Filter_setConfig+0x134>
 800e87e:	f113 0f0c 	cmn.w	r3, #12
 800e882:	da2a      	bge.n	800e8da <PDM_Filter_setConfig+0x92>
 800e884:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800e888:	3040      	adds	r0, #64	; 0x40
 800e88a:	80ab      	strh	r3, [r5, #4]
 800e88c:	8622      	strh	r2, [r4, #48]	; 0x30
 800e88e:	886b      	ldrh	r3, [r5, #2]
 800e890:	8663      	strh	r3, [r4, #50]	; 0x32
 800e892:	b920      	cbnz	r0, 800e89e <PDM_Filter_setConfig+0x56>
 800e894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e89a:	6423      	str	r3, [r4, #64]	; 0x40
 800e89c:	2000      	movs	r0, #0
 800e89e:	b003      	add	sp, #12
 800e8a0:	ecbd 8b04 	vpop	{d8-d9}
 800e8a4:	bd30      	pop	{r4, r5, pc}
 800e8a6:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800e8a8:	4291      	cmp	r1, r2
 800e8aa:	d06c      	beq.n	800e986 <PDM_Filter_setConfig+0x13e>
 800e8ac:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800e8b0:	f023 0301 	bic.w	r3, r3, #1
 800e8b4:	4313      	orrs	r3, r2
 800e8b6:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800e8ba:	6423      	str	r3, [r4, #64]	; 0x40
 800e8bc:	2970      	cmp	r1, #112	; 0x70
 800e8be:	f003 030f 	and.w	r3, r3, #15
 800e8c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e8c6:	d066      	beq.n	800e996 <PDM_Filter_setConfig+0x14e>
 800e8c8:	2b06      	cmp	r3, #6
 800e8ca:	f200 8089 	bhi.w	800e9e0 <PDM_Filter_setConfig+0x198>
 800e8ce:	e8df f003 	tbb	[pc, r3]
 800e8d2:	4f52      	.short	0x4f52
 800e8d4:	3d43494c 	.word	0x3d43494c
 800e8d8:	46          	.byte	0x46
 800e8d9:	00          	.byte	0x00
 800e8da:	2b33      	cmp	r3, #51	; 0x33
 800e8dc:	dc32      	bgt.n	800e944 <PDM_Filter_setConfig+0xfc>
 800e8de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e8e0:	f002 020f 	and.w	r2, r2, #15
 800e8e4:	3a01      	subs	r2, #1
 800e8e6:	2a06      	cmp	r2, #6
 800e8e8:	d872      	bhi.n	800e9d0 <PDM_Filter_setConfig+0x188>
 800e8ea:	493f      	ldr	r1, [pc, #252]	; (800e9e8 <PDM_Filter_setConfig+0x1a0>)
 800e8ec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e8f0:	ed92 9a00 	vldr	s18, [r2]
 800e8f4:	ed92 8a07 	vldr	s16, [r2, #28]
 800e8f8:	9001      	str	r0, [sp, #4]
 800e8fa:	ee07 3a90 	vmov	s15, r3
 800e8fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e902:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800e906:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800e90a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e90e:	f004 fb25 	bl	8012f5c <powf>
 800e912:	eddf 0a36 	vldr	s1, [pc, #216]	; 800e9ec <PDM_Filter_setConfig+0x1a4>
 800e916:	eef0 8a40 	vmov.f32	s17, s0
 800e91a:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800e91e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800e922:	f004 fb1b 	bl	8012f5c <powf>
 800e926:	ee28 8a28 	vmul.f32	s16, s16, s17
 800e92a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e92e:	f004 faef 	bl	8012f10 <roundf>
 800e932:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800e936:	88ab      	ldrh	r3, [r5, #4]
 800e938:	882a      	ldrh	r2, [r5, #0]
 800e93a:	9801      	ldr	r0, [sp, #4]
 800e93c:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800e940:	8723      	strh	r3, [r4, #56]	; 0x38
 800e942:	e7a3      	b.n	800e88c <PDM_Filter_setConfig+0x44>
 800e944:	2333      	movs	r3, #51	; 0x33
 800e946:	3040      	adds	r0, #64	; 0x40
 800e948:	80ab      	strh	r3, [r5, #4]
 800e94a:	e79f      	b.n	800e88c <PDM_Filter_setConfig+0x44>
 800e94c:	4b28      	ldr	r3, [pc, #160]	; (800e9f0 <PDM_Filter_setConfig+0x1a8>)
 800e94e:	64a3      	str	r3, [r4, #72]	; 0x48
 800e950:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e954:	2000      	movs	r0, #0
 800e956:	e792      	b.n	800e87e <PDM_Filter_setConfig+0x36>
 800e958:	4b26      	ldr	r3, [pc, #152]	; (800e9f4 <PDM_Filter_setConfig+0x1ac>)
 800e95a:	64a3      	str	r3, [r4, #72]	; 0x48
 800e95c:	e7f8      	b.n	800e950 <PDM_Filter_setConfig+0x108>
 800e95e:	4b26      	ldr	r3, [pc, #152]	; (800e9f8 <PDM_Filter_setConfig+0x1b0>)
 800e960:	64a3      	str	r3, [r4, #72]	; 0x48
 800e962:	e7f5      	b.n	800e950 <PDM_Filter_setConfig+0x108>
 800e964:	4b25      	ldr	r3, [pc, #148]	; (800e9fc <PDM_Filter_setConfig+0x1b4>)
 800e966:	64a3      	str	r3, [r4, #72]	; 0x48
 800e968:	e7f2      	b.n	800e950 <PDM_Filter_setConfig+0x108>
 800e96a:	4b25      	ldr	r3, [pc, #148]	; (800ea00 <PDM_Filter_setConfig+0x1b8>)
 800e96c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e96e:	e7ef      	b.n	800e950 <PDM_Filter_setConfig+0x108>
 800e970:	4b24      	ldr	r3, [pc, #144]	; (800ea04 <PDM_Filter_setConfig+0x1bc>)
 800e972:	64a3      	str	r3, [r4, #72]	; 0x48
 800e974:	e7ec      	b.n	800e950 <PDM_Filter_setConfig+0x108>
 800e976:	4b24      	ldr	r3, [pc, #144]	; (800ea08 <PDM_Filter_setConfig+0x1c0>)
 800e978:	64a3      	str	r3, [r4, #72]	; 0x48
 800e97a:	e7e9      	b.n	800e950 <PDM_Filter_setConfig+0x108>
 800e97c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800e97e:	4291      	cmp	r1, r2
 800e980:	f47f af7d 	bne.w	800e87e <PDM_Filter_setConfig+0x36>
 800e984:	e783      	b.n	800e88e <PDM_Filter_setConfig+0x46>
 800e986:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e98a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800e98e:	4299      	cmp	r1, r3
 800e990:	d023      	beq.n	800e9da <PDM_Filter_setConfig+0x192>
 800e992:	2000      	movs	r0, #0
 800e994:	e773      	b.n	800e87e <PDM_Filter_setConfig+0x36>
 800e996:	2b06      	cmp	r3, #6
 800e998:	d822      	bhi.n	800e9e0 <PDM_Filter_setConfig+0x198>
 800e99a:	e8df f003 	tbb	[pc, r3]
 800e99e:	1316      	.short	0x1316
 800e9a0:	070a0d10 	.word	0x070a0d10
 800e9a4:	04          	.byte	0x04
 800e9a5:	00          	.byte	0x00
 800e9a6:	4b19      	ldr	r3, [pc, #100]	; (800ea0c <PDM_Filter_setConfig+0x1c4>)
 800e9a8:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9aa:	e7d1      	b.n	800e950 <PDM_Filter_setConfig+0x108>
 800e9ac:	4b18      	ldr	r3, [pc, #96]	; (800ea10 <PDM_Filter_setConfig+0x1c8>)
 800e9ae:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9b0:	e7ce      	b.n	800e950 <PDM_Filter_setConfig+0x108>
 800e9b2:	4b18      	ldr	r3, [pc, #96]	; (800ea14 <PDM_Filter_setConfig+0x1cc>)
 800e9b4:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9b6:	e7cb      	b.n	800e950 <PDM_Filter_setConfig+0x108>
 800e9b8:	4b17      	ldr	r3, [pc, #92]	; (800ea18 <PDM_Filter_setConfig+0x1d0>)
 800e9ba:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9bc:	e7c8      	b.n	800e950 <PDM_Filter_setConfig+0x108>
 800e9be:	4b17      	ldr	r3, [pc, #92]	; (800ea1c <PDM_Filter_setConfig+0x1d4>)
 800e9c0:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9c2:	e7c5      	b.n	800e950 <PDM_Filter_setConfig+0x108>
 800e9c4:	4b16      	ldr	r3, [pc, #88]	; (800ea20 <PDM_Filter_setConfig+0x1d8>)
 800e9c6:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9c8:	e7c2      	b.n	800e950 <PDM_Filter_setConfig+0x108>
 800e9ca:	4b16      	ldr	r3, [pc, #88]	; (800ea24 <PDM_Filter_setConfig+0x1dc>)
 800e9cc:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9ce:	e7bf      	b.n	800e950 <PDM_Filter_setConfig+0x108>
 800e9d0:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800ea28 <PDM_Filter_setConfig+0x1e0>
 800e9d4:	eeb0 9a48 	vmov.f32	s18, s16
 800e9d8:	e78e      	b.n	800e8f8 <PDM_Filter_setConfig+0xb0>
 800e9da:	886b      	ldrh	r3, [r5, #2]
 800e9dc:	8663      	strh	r3, [r4, #50]	; 0x32
 800e9de:	e759      	b.n	800e894 <PDM_Filter_setConfig+0x4c>
 800e9e0:	2000      	movs	r0, #0
 800e9e2:	e746      	b.n	800e872 <PDM_Filter_setConfig+0x2a>
 800e9e4:	b5e8b5cd 	.word	0xb5e8b5cd
 800e9e8:	08013a1c 	.word	0x08013a1c
 800e9ec:	42000000 	.word	0x42000000
 800e9f0:	0800cdb5 	.word	0x0800cdb5
 800e9f4:	0800cc95 	.word	0x0800cc95
 800e9f8:	0800cf45 	.word	0x0800cf45
 800e9fc:	0800d789 	.word	0x0800d789
 800ea00:	0800d4e9 	.word	0x0800d4e9
 800ea04:	0800d2c9 	.word	0x0800d2c9
 800ea08:	0800d0dd 	.word	0x0800d0dd
 800ea0c:	0800dd95 	.word	0x0800dd95
 800ea10:	0800dc5d 	.word	0x0800dc5d
 800ea14:	0800db79 	.word	0x0800db79
 800ea18:	0800e411 	.word	0x0800e411
 800ea1c:	0800e1fd 	.word	0x0800e1fd
 800ea20:	0800e045 	.word	0x0800e045
 800ea24:	0800ded9 	.word	0x0800ded9
 800ea28:	00000000 	.word	0x00000000

0800ea2c <PDM_Filter>:
 800ea2c:	b410      	push	{r4}
 800ea2e:	4b0c      	ldr	r3, [pc, #48]	; (800ea60 <PDM_Filter+0x34>)
 800ea30:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800ea32:	429c      	cmp	r4, r3
 800ea34:	d003      	beq.n	800ea3e <PDM_Filter+0x12>
 800ea36:	2004      	movs	r0, #4
 800ea38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea3c:	4770      	bx	lr
 800ea3e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ea40:	05dc      	lsls	r4, r3, #23
 800ea42:	d407      	bmi.n	800ea54 <PDM_Filter+0x28>
 800ea44:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ea48:	bf14      	ite	ne
 800ea4a:	2020      	movne	r0, #32
 800ea4c:	2030      	moveq	r0, #48	; 0x30
 800ea4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea52:	4770      	bx	lr
 800ea54:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800ea56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea5a:	320c      	adds	r2, #12
 800ea5c:	4718      	bx	r3
 800ea5e:	bf00      	nop
 800ea60:	b5e8b5cd 	.word	0xb5e8b5cd

0800ea64 <CRC_Lock>:
 800ea64:	4a17      	ldr	r2, [pc, #92]	; (800eac4 <CRC_Lock+0x60>)
 800ea66:	6813      	ldr	r3, [r2, #0]
 800ea68:	b410      	push	{r4}
 800ea6a:	f023 0301 	bic.w	r3, r3, #1
 800ea6e:	4c16      	ldr	r4, [pc, #88]	; (800eac8 <CRC_Lock+0x64>)
 800ea70:	6013      	str	r3, [r2, #0]
 800ea72:	6823      	ldr	r3, [r4, #0]
 800ea74:	b933      	cbnz	r3, 800ea84 <CRC_Lock+0x20>
 800ea76:	4b15      	ldr	r3, [pc, #84]	; (800eacc <CRC_Lock+0x68>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ea7e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ea82:	d00f      	beq.n	800eaa4 <CRC_Lock+0x40>
 800ea84:	4a12      	ldr	r2, [pc, #72]	; (800ead0 <CRC_Lock+0x6c>)
 800ea86:	2301      	movs	r3, #1
 800ea88:	6013      	str	r3, [r2, #0]
 800ea8a:	6813      	ldr	r3, [r2, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d1fc      	bne.n	800ea8a <CRC_Lock+0x26>
 800ea90:	4b10      	ldr	r3, [pc, #64]	; (800ead4 <CRC_Lock+0x70>)
 800ea92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea96:	6018      	str	r0, [r3, #0]
 800ea98:	6818      	ldr	r0, [r3, #0]
 800ea9a:	1a08      	subs	r0, r1, r0
 800ea9c:	fab0 f080 	clz	r0, r0
 800eaa0:	0940      	lsrs	r0, r0, #5
 800eaa2:	4770      	bx	lr
 800eaa4:	4a0c      	ldr	r2, [pc, #48]	; (800ead8 <CRC_Lock+0x74>)
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	6013      	str	r3, [r2, #0]
 800eaaa:	6813      	ldr	r3, [r2, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d1fc      	bne.n	800eaaa <CRC_Lock+0x46>
 800eab0:	4b0a      	ldr	r3, [pc, #40]	; (800eadc <CRC_Lock+0x78>)
 800eab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eab6:	6018      	str	r0, [r3, #0]
 800eab8:	6818      	ldr	r0, [r3, #0]
 800eaba:	1a40      	subs	r0, r0, r1
 800eabc:	fab0 f080 	clz	r0, r0
 800eac0:	0940      	lsrs	r0, r0, #5
 800eac2:	4770      	bx	lr
 800eac4:	e0002000 	.word	0xe0002000
 800eac8:	e0042000 	.word	0xe0042000
 800eacc:	5c001000 	.word	0x5c001000
 800ead0:	40023008 	.word	0x40023008
 800ead4:	40023000 	.word	0x40023000
 800ead8:	58024c08 	.word	0x58024c08
 800eadc:	58024c00 	.word	0x58024c00

0800eae0 <__errno>:
 800eae0:	4b01      	ldr	r3, [pc, #4]	; (800eae8 <__errno+0x8>)
 800eae2:	6818      	ldr	r0, [r3, #0]
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	2000064c 	.word	0x2000064c

0800eaec <__libc_init_array>:
 800eaec:	b570      	push	{r4, r5, r6, lr}
 800eaee:	4e0d      	ldr	r6, [pc, #52]	; (800eb24 <__libc_init_array+0x38>)
 800eaf0:	4c0d      	ldr	r4, [pc, #52]	; (800eb28 <__libc_init_array+0x3c>)
 800eaf2:	1ba4      	subs	r4, r4, r6
 800eaf4:	10a4      	asrs	r4, r4, #2
 800eaf6:	2500      	movs	r5, #0
 800eaf8:	42a5      	cmp	r5, r4
 800eafa:	d109      	bne.n	800eb10 <__libc_init_array+0x24>
 800eafc:	4e0b      	ldr	r6, [pc, #44]	; (800eb2c <__libc_init_array+0x40>)
 800eafe:	4c0c      	ldr	r4, [pc, #48]	; (800eb30 <__libc_init_array+0x44>)
 800eb00:	f004 ff2c 	bl	801395c <_init>
 800eb04:	1ba4      	subs	r4, r4, r6
 800eb06:	10a4      	asrs	r4, r4, #2
 800eb08:	2500      	movs	r5, #0
 800eb0a:	42a5      	cmp	r5, r4
 800eb0c:	d105      	bne.n	800eb1a <__libc_init_array+0x2e>
 800eb0e:	bd70      	pop	{r4, r5, r6, pc}
 800eb10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eb14:	4798      	blx	r3
 800eb16:	3501      	adds	r5, #1
 800eb18:	e7ee      	b.n	800eaf8 <__libc_init_array+0xc>
 800eb1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eb1e:	4798      	blx	r3
 800eb20:	3501      	adds	r5, #1
 800eb22:	e7f2      	b.n	800eb0a <__libc_init_array+0x1e>
 800eb24:	08013e44 	.word	0x08013e44
 800eb28:	08013e44 	.word	0x08013e44
 800eb2c:	08013e44 	.word	0x08013e44
 800eb30:	08013e48 	.word	0x08013e48

0800eb34 <malloc>:
 800eb34:	4b02      	ldr	r3, [pc, #8]	; (800eb40 <malloc+0xc>)
 800eb36:	4601      	mov	r1, r0
 800eb38:	6818      	ldr	r0, [r3, #0]
 800eb3a:	f000 b86d 	b.w	800ec18 <_malloc_r>
 800eb3e:	bf00      	nop
 800eb40:	2000064c 	.word	0x2000064c

0800eb44 <free>:
 800eb44:	4b02      	ldr	r3, [pc, #8]	; (800eb50 <free+0xc>)
 800eb46:	4601      	mov	r1, r0
 800eb48:	6818      	ldr	r0, [r3, #0]
 800eb4a:	f000 b817 	b.w	800eb7c <_free_r>
 800eb4e:	bf00      	nop
 800eb50:	2000064c 	.word	0x2000064c

0800eb54 <memcpy>:
 800eb54:	b510      	push	{r4, lr}
 800eb56:	1e43      	subs	r3, r0, #1
 800eb58:	440a      	add	r2, r1
 800eb5a:	4291      	cmp	r1, r2
 800eb5c:	d100      	bne.n	800eb60 <memcpy+0xc>
 800eb5e:	bd10      	pop	{r4, pc}
 800eb60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb68:	e7f7      	b.n	800eb5a <memcpy+0x6>

0800eb6a <memset>:
 800eb6a:	4402      	add	r2, r0
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d100      	bne.n	800eb74 <memset+0xa>
 800eb72:	4770      	bx	lr
 800eb74:	f803 1b01 	strb.w	r1, [r3], #1
 800eb78:	e7f9      	b.n	800eb6e <memset+0x4>
	...

0800eb7c <_free_r>:
 800eb7c:	b538      	push	{r3, r4, r5, lr}
 800eb7e:	4605      	mov	r5, r0
 800eb80:	2900      	cmp	r1, #0
 800eb82:	d045      	beq.n	800ec10 <_free_r+0x94>
 800eb84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb88:	1f0c      	subs	r4, r1, #4
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	bfb8      	it	lt
 800eb8e:	18e4      	addlt	r4, r4, r3
 800eb90:	f003 f834 	bl	8011bfc <__malloc_lock>
 800eb94:	4a1f      	ldr	r2, [pc, #124]	; (800ec14 <_free_r+0x98>)
 800eb96:	6813      	ldr	r3, [r2, #0]
 800eb98:	4610      	mov	r0, r2
 800eb9a:	b933      	cbnz	r3, 800ebaa <_free_r+0x2e>
 800eb9c:	6063      	str	r3, [r4, #4]
 800eb9e:	6014      	str	r4, [r2, #0]
 800eba0:	4628      	mov	r0, r5
 800eba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eba6:	f003 b82a 	b.w	8011bfe <__malloc_unlock>
 800ebaa:	42a3      	cmp	r3, r4
 800ebac:	d90c      	bls.n	800ebc8 <_free_r+0x4c>
 800ebae:	6821      	ldr	r1, [r4, #0]
 800ebb0:	1862      	adds	r2, r4, r1
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	bf04      	itt	eq
 800ebb6:	681a      	ldreq	r2, [r3, #0]
 800ebb8:	685b      	ldreq	r3, [r3, #4]
 800ebba:	6063      	str	r3, [r4, #4]
 800ebbc:	bf04      	itt	eq
 800ebbe:	1852      	addeq	r2, r2, r1
 800ebc0:	6022      	streq	r2, [r4, #0]
 800ebc2:	6004      	str	r4, [r0, #0]
 800ebc4:	e7ec      	b.n	800eba0 <_free_r+0x24>
 800ebc6:	4613      	mov	r3, r2
 800ebc8:	685a      	ldr	r2, [r3, #4]
 800ebca:	b10a      	cbz	r2, 800ebd0 <_free_r+0x54>
 800ebcc:	42a2      	cmp	r2, r4
 800ebce:	d9fa      	bls.n	800ebc6 <_free_r+0x4a>
 800ebd0:	6819      	ldr	r1, [r3, #0]
 800ebd2:	1858      	adds	r0, r3, r1
 800ebd4:	42a0      	cmp	r0, r4
 800ebd6:	d10b      	bne.n	800ebf0 <_free_r+0x74>
 800ebd8:	6820      	ldr	r0, [r4, #0]
 800ebda:	4401      	add	r1, r0
 800ebdc:	1858      	adds	r0, r3, r1
 800ebde:	4282      	cmp	r2, r0
 800ebe0:	6019      	str	r1, [r3, #0]
 800ebe2:	d1dd      	bne.n	800eba0 <_free_r+0x24>
 800ebe4:	6810      	ldr	r0, [r2, #0]
 800ebe6:	6852      	ldr	r2, [r2, #4]
 800ebe8:	605a      	str	r2, [r3, #4]
 800ebea:	4401      	add	r1, r0
 800ebec:	6019      	str	r1, [r3, #0]
 800ebee:	e7d7      	b.n	800eba0 <_free_r+0x24>
 800ebf0:	d902      	bls.n	800ebf8 <_free_r+0x7c>
 800ebf2:	230c      	movs	r3, #12
 800ebf4:	602b      	str	r3, [r5, #0]
 800ebf6:	e7d3      	b.n	800eba0 <_free_r+0x24>
 800ebf8:	6820      	ldr	r0, [r4, #0]
 800ebfa:	1821      	adds	r1, r4, r0
 800ebfc:	428a      	cmp	r2, r1
 800ebfe:	bf04      	itt	eq
 800ec00:	6811      	ldreq	r1, [r2, #0]
 800ec02:	6852      	ldreq	r2, [r2, #4]
 800ec04:	6062      	str	r2, [r4, #4]
 800ec06:	bf04      	itt	eq
 800ec08:	1809      	addeq	r1, r1, r0
 800ec0a:	6021      	streq	r1, [r4, #0]
 800ec0c:	605c      	str	r4, [r3, #4]
 800ec0e:	e7c7      	b.n	800eba0 <_free_r+0x24>
 800ec10:	bd38      	pop	{r3, r4, r5, pc}
 800ec12:	bf00      	nop
 800ec14:	20001be8 	.word	0x20001be8

0800ec18 <_malloc_r>:
 800ec18:	b570      	push	{r4, r5, r6, lr}
 800ec1a:	1ccd      	adds	r5, r1, #3
 800ec1c:	f025 0503 	bic.w	r5, r5, #3
 800ec20:	3508      	adds	r5, #8
 800ec22:	2d0c      	cmp	r5, #12
 800ec24:	bf38      	it	cc
 800ec26:	250c      	movcc	r5, #12
 800ec28:	2d00      	cmp	r5, #0
 800ec2a:	4606      	mov	r6, r0
 800ec2c:	db01      	blt.n	800ec32 <_malloc_r+0x1a>
 800ec2e:	42a9      	cmp	r1, r5
 800ec30:	d903      	bls.n	800ec3a <_malloc_r+0x22>
 800ec32:	230c      	movs	r3, #12
 800ec34:	6033      	str	r3, [r6, #0]
 800ec36:	2000      	movs	r0, #0
 800ec38:	bd70      	pop	{r4, r5, r6, pc}
 800ec3a:	f002 ffdf 	bl	8011bfc <__malloc_lock>
 800ec3e:	4a21      	ldr	r2, [pc, #132]	; (800ecc4 <_malloc_r+0xac>)
 800ec40:	6814      	ldr	r4, [r2, #0]
 800ec42:	4621      	mov	r1, r4
 800ec44:	b991      	cbnz	r1, 800ec6c <_malloc_r+0x54>
 800ec46:	4c20      	ldr	r4, [pc, #128]	; (800ecc8 <_malloc_r+0xb0>)
 800ec48:	6823      	ldr	r3, [r4, #0]
 800ec4a:	b91b      	cbnz	r3, 800ec54 <_malloc_r+0x3c>
 800ec4c:	4630      	mov	r0, r6
 800ec4e:	f000 fe93 	bl	800f978 <_sbrk_r>
 800ec52:	6020      	str	r0, [r4, #0]
 800ec54:	4629      	mov	r1, r5
 800ec56:	4630      	mov	r0, r6
 800ec58:	f000 fe8e 	bl	800f978 <_sbrk_r>
 800ec5c:	1c43      	adds	r3, r0, #1
 800ec5e:	d124      	bne.n	800ecaa <_malloc_r+0x92>
 800ec60:	230c      	movs	r3, #12
 800ec62:	6033      	str	r3, [r6, #0]
 800ec64:	4630      	mov	r0, r6
 800ec66:	f002 ffca 	bl	8011bfe <__malloc_unlock>
 800ec6a:	e7e4      	b.n	800ec36 <_malloc_r+0x1e>
 800ec6c:	680b      	ldr	r3, [r1, #0]
 800ec6e:	1b5b      	subs	r3, r3, r5
 800ec70:	d418      	bmi.n	800eca4 <_malloc_r+0x8c>
 800ec72:	2b0b      	cmp	r3, #11
 800ec74:	d90f      	bls.n	800ec96 <_malloc_r+0x7e>
 800ec76:	600b      	str	r3, [r1, #0]
 800ec78:	50cd      	str	r5, [r1, r3]
 800ec7a:	18cc      	adds	r4, r1, r3
 800ec7c:	4630      	mov	r0, r6
 800ec7e:	f002 ffbe 	bl	8011bfe <__malloc_unlock>
 800ec82:	f104 000b 	add.w	r0, r4, #11
 800ec86:	1d23      	adds	r3, r4, #4
 800ec88:	f020 0007 	bic.w	r0, r0, #7
 800ec8c:	1ac3      	subs	r3, r0, r3
 800ec8e:	d0d3      	beq.n	800ec38 <_malloc_r+0x20>
 800ec90:	425a      	negs	r2, r3
 800ec92:	50e2      	str	r2, [r4, r3]
 800ec94:	e7d0      	b.n	800ec38 <_malloc_r+0x20>
 800ec96:	428c      	cmp	r4, r1
 800ec98:	684b      	ldr	r3, [r1, #4]
 800ec9a:	bf16      	itet	ne
 800ec9c:	6063      	strne	r3, [r4, #4]
 800ec9e:	6013      	streq	r3, [r2, #0]
 800eca0:	460c      	movne	r4, r1
 800eca2:	e7eb      	b.n	800ec7c <_malloc_r+0x64>
 800eca4:	460c      	mov	r4, r1
 800eca6:	6849      	ldr	r1, [r1, #4]
 800eca8:	e7cc      	b.n	800ec44 <_malloc_r+0x2c>
 800ecaa:	1cc4      	adds	r4, r0, #3
 800ecac:	f024 0403 	bic.w	r4, r4, #3
 800ecb0:	42a0      	cmp	r0, r4
 800ecb2:	d005      	beq.n	800ecc0 <_malloc_r+0xa8>
 800ecb4:	1a21      	subs	r1, r4, r0
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	f000 fe5e 	bl	800f978 <_sbrk_r>
 800ecbc:	3001      	adds	r0, #1
 800ecbe:	d0cf      	beq.n	800ec60 <_malloc_r+0x48>
 800ecc0:	6025      	str	r5, [r4, #0]
 800ecc2:	e7db      	b.n	800ec7c <_malloc_r+0x64>
 800ecc4:	20001be8 	.word	0x20001be8
 800ecc8:	20001bec 	.word	0x20001bec

0800eccc <__cvt>:
 800eccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd0:	ec55 4b10 	vmov	r4, r5, d0
 800ecd4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ecd6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ecda:	2d00      	cmp	r5, #0
 800ecdc:	460e      	mov	r6, r1
 800ecde:	4691      	mov	r9, r2
 800ece0:	4619      	mov	r1, r3
 800ece2:	bfb8      	it	lt
 800ece4:	4622      	movlt	r2, r4
 800ece6:	462b      	mov	r3, r5
 800ece8:	f027 0720 	bic.w	r7, r7, #32
 800ecec:	bfbb      	ittet	lt
 800ecee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ecf2:	461d      	movlt	r5, r3
 800ecf4:	2300      	movge	r3, #0
 800ecf6:	232d      	movlt	r3, #45	; 0x2d
 800ecf8:	bfb8      	it	lt
 800ecfa:	4614      	movlt	r4, r2
 800ecfc:	2f46      	cmp	r7, #70	; 0x46
 800ecfe:	700b      	strb	r3, [r1, #0]
 800ed00:	d004      	beq.n	800ed0c <__cvt+0x40>
 800ed02:	2f45      	cmp	r7, #69	; 0x45
 800ed04:	d100      	bne.n	800ed08 <__cvt+0x3c>
 800ed06:	3601      	adds	r6, #1
 800ed08:	2102      	movs	r1, #2
 800ed0a:	e000      	b.n	800ed0e <__cvt+0x42>
 800ed0c:	2103      	movs	r1, #3
 800ed0e:	ab03      	add	r3, sp, #12
 800ed10:	9301      	str	r3, [sp, #4]
 800ed12:	ab02      	add	r3, sp, #8
 800ed14:	9300      	str	r3, [sp, #0]
 800ed16:	4632      	mov	r2, r6
 800ed18:	4653      	mov	r3, sl
 800ed1a:	ec45 4b10 	vmov	d0, r4, r5
 800ed1e:	f001 fd9f 	bl	8010860 <_dtoa_r>
 800ed22:	2f47      	cmp	r7, #71	; 0x47
 800ed24:	4680      	mov	r8, r0
 800ed26:	d102      	bne.n	800ed2e <__cvt+0x62>
 800ed28:	f019 0f01 	tst.w	r9, #1
 800ed2c:	d026      	beq.n	800ed7c <__cvt+0xb0>
 800ed2e:	2f46      	cmp	r7, #70	; 0x46
 800ed30:	eb08 0906 	add.w	r9, r8, r6
 800ed34:	d111      	bne.n	800ed5a <__cvt+0x8e>
 800ed36:	f898 3000 	ldrb.w	r3, [r8]
 800ed3a:	2b30      	cmp	r3, #48	; 0x30
 800ed3c:	d10a      	bne.n	800ed54 <__cvt+0x88>
 800ed3e:	2200      	movs	r2, #0
 800ed40:	2300      	movs	r3, #0
 800ed42:	4620      	mov	r0, r4
 800ed44:	4629      	mov	r1, r5
 800ed46:	f7f1 fedf 	bl	8000b08 <__aeabi_dcmpeq>
 800ed4a:	b918      	cbnz	r0, 800ed54 <__cvt+0x88>
 800ed4c:	f1c6 0601 	rsb	r6, r6, #1
 800ed50:	f8ca 6000 	str.w	r6, [sl]
 800ed54:	f8da 3000 	ldr.w	r3, [sl]
 800ed58:	4499      	add	r9, r3
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	4620      	mov	r0, r4
 800ed60:	4629      	mov	r1, r5
 800ed62:	f7f1 fed1 	bl	8000b08 <__aeabi_dcmpeq>
 800ed66:	b938      	cbnz	r0, 800ed78 <__cvt+0xac>
 800ed68:	2230      	movs	r2, #48	; 0x30
 800ed6a:	9b03      	ldr	r3, [sp, #12]
 800ed6c:	454b      	cmp	r3, r9
 800ed6e:	d205      	bcs.n	800ed7c <__cvt+0xb0>
 800ed70:	1c59      	adds	r1, r3, #1
 800ed72:	9103      	str	r1, [sp, #12]
 800ed74:	701a      	strb	r2, [r3, #0]
 800ed76:	e7f8      	b.n	800ed6a <__cvt+0x9e>
 800ed78:	f8cd 900c 	str.w	r9, [sp, #12]
 800ed7c:	9b03      	ldr	r3, [sp, #12]
 800ed7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed80:	eba3 0308 	sub.w	r3, r3, r8
 800ed84:	4640      	mov	r0, r8
 800ed86:	6013      	str	r3, [r2, #0]
 800ed88:	b004      	add	sp, #16
 800ed8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ed8e <__exponent>:
 800ed8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed90:	2900      	cmp	r1, #0
 800ed92:	4604      	mov	r4, r0
 800ed94:	bfba      	itte	lt
 800ed96:	4249      	neglt	r1, r1
 800ed98:	232d      	movlt	r3, #45	; 0x2d
 800ed9a:	232b      	movge	r3, #43	; 0x2b
 800ed9c:	2909      	cmp	r1, #9
 800ed9e:	f804 2b02 	strb.w	r2, [r4], #2
 800eda2:	7043      	strb	r3, [r0, #1]
 800eda4:	dd20      	ble.n	800ede8 <__exponent+0x5a>
 800eda6:	f10d 0307 	add.w	r3, sp, #7
 800edaa:	461f      	mov	r7, r3
 800edac:	260a      	movs	r6, #10
 800edae:	fb91 f5f6 	sdiv	r5, r1, r6
 800edb2:	fb06 1115 	mls	r1, r6, r5, r1
 800edb6:	3130      	adds	r1, #48	; 0x30
 800edb8:	2d09      	cmp	r5, #9
 800edba:	f803 1c01 	strb.w	r1, [r3, #-1]
 800edbe:	f103 32ff 	add.w	r2, r3, #4294967295
 800edc2:	4629      	mov	r1, r5
 800edc4:	dc09      	bgt.n	800edda <__exponent+0x4c>
 800edc6:	3130      	adds	r1, #48	; 0x30
 800edc8:	3b02      	subs	r3, #2
 800edca:	f802 1c01 	strb.w	r1, [r2, #-1]
 800edce:	42bb      	cmp	r3, r7
 800edd0:	4622      	mov	r2, r4
 800edd2:	d304      	bcc.n	800edde <__exponent+0x50>
 800edd4:	1a10      	subs	r0, r2, r0
 800edd6:	b003      	add	sp, #12
 800edd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edda:	4613      	mov	r3, r2
 800eddc:	e7e7      	b.n	800edae <__exponent+0x20>
 800edde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ede2:	f804 2b01 	strb.w	r2, [r4], #1
 800ede6:	e7f2      	b.n	800edce <__exponent+0x40>
 800ede8:	2330      	movs	r3, #48	; 0x30
 800edea:	4419      	add	r1, r3
 800edec:	7083      	strb	r3, [r0, #2]
 800edee:	1d02      	adds	r2, r0, #4
 800edf0:	70c1      	strb	r1, [r0, #3]
 800edf2:	e7ef      	b.n	800edd4 <__exponent+0x46>

0800edf4 <_printf_float>:
 800edf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf8:	b08d      	sub	sp, #52	; 0x34
 800edfa:	460c      	mov	r4, r1
 800edfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ee00:	4616      	mov	r6, r2
 800ee02:	461f      	mov	r7, r3
 800ee04:	4605      	mov	r5, r0
 800ee06:	f002 fed9 	bl	8011bbc <_localeconv_r>
 800ee0a:	6803      	ldr	r3, [r0, #0]
 800ee0c:	9304      	str	r3, [sp, #16]
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7f1 f9fe 	bl	8000210 <strlen>
 800ee14:	2300      	movs	r3, #0
 800ee16:	930a      	str	r3, [sp, #40]	; 0x28
 800ee18:	f8d8 3000 	ldr.w	r3, [r8]
 800ee1c:	9005      	str	r0, [sp, #20]
 800ee1e:	3307      	adds	r3, #7
 800ee20:	f023 0307 	bic.w	r3, r3, #7
 800ee24:	f103 0208 	add.w	r2, r3, #8
 800ee28:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ee2c:	f8d4 b000 	ldr.w	fp, [r4]
 800ee30:	f8c8 2000 	str.w	r2, [r8]
 800ee34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee38:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ee3c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ee40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ee44:	9307      	str	r3, [sp, #28]
 800ee46:	f8cd 8018 	str.w	r8, [sp, #24]
 800ee4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee4e:	4ba7      	ldr	r3, [pc, #668]	; (800f0ec <_printf_float+0x2f8>)
 800ee50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee54:	f7f1 fe8a 	bl	8000b6c <__aeabi_dcmpun>
 800ee58:	bb70      	cbnz	r0, 800eeb8 <_printf_float+0xc4>
 800ee5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee5e:	4ba3      	ldr	r3, [pc, #652]	; (800f0ec <_printf_float+0x2f8>)
 800ee60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee64:	f7f1 fe64 	bl	8000b30 <__aeabi_dcmple>
 800ee68:	bb30      	cbnz	r0, 800eeb8 <_printf_float+0xc4>
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	4640      	mov	r0, r8
 800ee70:	4649      	mov	r1, r9
 800ee72:	f7f1 fe53 	bl	8000b1c <__aeabi_dcmplt>
 800ee76:	b110      	cbz	r0, 800ee7e <_printf_float+0x8a>
 800ee78:	232d      	movs	r3, #45	; 0x2d
 800ee7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee7e:	4a9c      	ldr	r2, [pc, #624]	; (800f0f0 <_printf_float+0x2fc>)
 800ee80:	4b9c      	ldr	r3, [pc, #624]	; (800f0f4 <_printf_float+0x300>)
 800ee82:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ee86:	bf8c      	ite	hi
 800ee88:	4690      	movhi	r8, r2
 800ee8a:	4698      	movls	r8, r3
 800ee8c:	2303      	movs	r3, #3
 800ee8e:	f02b 0204 	bic.w	r2, fp, #4
 800ee92:	6123      	str	r3, [r4, #16]
 800ee94:	6022      	str	r2, [r4, #0]
 800ee96:	f04f 0900 	mov.w	r9, #0
 800ee9a:	9700      	str	r7, [sp, #0]
 800ee9c:	4633      	mov	r3, r6
 800ee9e:	aa0b      	add	r2, sp, #44	; 0x2c
 800eea0:	4621      	mov	r1, r4
 800eea2:	4628      	mov	r0, r5
 800eea4:	f000 f9e6 	bl	800f274 <_printf_common>
 800eea8:	3001      	adds	r0, #1
 800eeaa:	f040 808d 	bne.w	800efc8 <_printf_float+0x1d4>
 800eeae:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb2:	b00d      	add	sp, #52	; 0x34
 800eeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeb8:	4642      	mov	r2, r8
 800eeba:	464b      	mov	r3, r9
 800eebc:	4640      	mov	r0, r8
 800eebe:	4649      	mov	r1, r9
 800eec0:	f7f1 fe54 	bl	8000b6c <__aeabi_dcmpun>
 800eec4:	b110      	cbz	r0, 800eecc <_printf_float+0xd8>
 800eec6:	4a8c      	ldr	r2, [pc, #560]	; (800f0f8 <_printf_float+0x304>)
 800eec8:	4b8c      	ldr	r3, [pc, #560]	; (800f0fc <_printf_float+0x308>)
 800eeca:	e7da      	b.n	800ee82 <_printf_float+0x8e>
 800eecc:	6861      	ldr	r1, [r4, #4]
 800eece:	1c4b      	adds	r3, r1, #1
 800eed0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800eed4:	a80a      	add	r0, sp, #40	; 0x28
 800eed6:	d13e      	bne.n	800ef56 <_printf_float+0x162>
 800eed8:	2306      	movs	r3, #6
 800eeda:	6063      	str	r3, [r4, #4]
 800eedc:	2300      	movs	r3, #0
 800eede:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800eee2:	ab09      	add	r3, sp, #36	; 0x24
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	ec49 8b10 	vmov	d0, r8, r9
 800eeea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eeee:	6022      	str	r2, [r4, #0]
 800eef0:	f8cd a004 	str.w	sl, [sp, #4]
 800eef4:	6861      	ldr	r1, [r4, #4]
 800eef6:	4628      	mov	r0, r5
 800eef8:	f7ff fee8 	bl	800eccc <__cvt>
 800eefc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ef00:	2b47      	cmp	r3, #71	; 0x47
 800ef02:	4680      	mov	r8, r0
 800ef04:	d109      	bne.n	800ef1a <_printf_float+0x126>
 800ef06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef08:	1cd8      	adds	r0, r3, #3
 800ef0a:	db02      	blt.n	800ef12 <_printf_float+0x11e>
 800ef0c:	6862      	ldr	r2, [r4, #4]
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	dd47      	ble.n	800efa2 <_printf_float+0x1ae>
 800ef12:	f1aa 0a02 	sub.w	sl, sl, #2
 800ef16:	fa5f fa8a 	uxtb.w	sl, sl
 800ef1a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ef1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef20:	d824      	bhi.n	800ef6c <_printf_float+0x178>
 800ef22:	3901      	subs	r1, #1
 800ef24:	4652      	mov	r2, sl
 800ef26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ef2a:	9109      	str	r1, [sp, #36]	; 0x24
 800ef2c:	f7ff ff2f 	bl	800ed8e <__exponent>
 800ef30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef32:	1813      	adds	r3, r2, r0
 800ef34:	2a01      	cmp	r2, #1
 800ef36:	4681      	mov	r9, r0
 800ef38:	6123      	str	r3, [r4, #16]
 800ef3a:	dc02      	bgt.n	800ef42 <_printf_float+0x14e>
 800ef3c:	6822      	ldr	r2, [r4, #0]
 800ef3e:	07d1      	lsls	r1, r2, #31
 800ef40:	d501      	bpl.n	800ef46 <_printf_float+0x152>
 800ef42:	3301      	adds	r3, #1
 800ef44:	6123      	str	r3, [r4, #16]
 800ef46:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d0a5      	beq.n	800ee9a <_printf_float+0xa6>
 800ef4e:	232d      	movs	r3, #45	; 0x2d
 800ef50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef54:	e7a1      	b.n	800ee9a <_printf_float+0xa6>
 800ef56:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ef5a:	f000 8177 	beq.w	800f24c <_printf_float+0x458>
 800ef5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ef62:	d1bb      	bne.n	800eedc <_printf_float+0xe8>
 800ef64:	2900      	cmp	r1, #0
 800ef66:	d1b9      	bne.n	800eedc <_printf_float+0xe8>
 800ef68:	2301      	movs	r3, #1
 800ef6a:	e7b6      	b.n	800eeda <_printf_float+0xe6>
 800ef6c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ef70:	d119      	bne.n	800efa6 <_printf_float+0x1b2>
 800ef72:	2900      	cmp	r1, #0
 800ef74:	6863      	ldr	r3, [r4, #4]
 800ef76:	dd0c      	ble.n	800ef92 <_printf_float+0x19e>
 800ef78:	6121      	str	r1, [r4, #16]
 800ef7a:	b913      	cbnz	r3, 800ef82 <_printf_float+0x18e>
 800ef7c:	6822      	ldr	r2, [r4, #0]
 800ef7e:	07d2      	lsls	r2, r2, #31
 800ef80:	d502      	bpl.n	800ef88 <_printf_float+0x194>
 800ef82:	3301      	adds	r3, #1
 800ef84:	440b      	add	r3, r1
 800ef86:	6123      	str	r3, [r4, #16]
 800ef88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef8a:	65a3      	str	r3, [r4, #88]	; 0x58
 800ef8c:	f04f 0900 	mov.w	r9, #0
 800ef90:	e7d9      	b.n	800ef46 <_printf_float+0x152>
 800ef92:	b913      	cbnz	r3, 800ef9a <_printf_float+0x1a6>
 800ef94:	6822      	ldr	r2, [r4, #0]
 800ef96:	07d0      	lsls	r0, r2, #31
 800ef98:	d501      	bpl.n	800ef9e <_printf_float+0x1aa>
 800ef9a:	3302      	adds	r3, #2
 800ef9c:	e7f3      	b.n	800ef86 <_printf_float+0x192>
 800ef9e:	2301      	movs	r3, #1
 800efa0:	e7f1      	b.n	800ef86 <_printf_float+0x192>
 800efa2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800efa6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800efaa:	4293      	cmp	r3, r2
 800efac:	db05      	blt.n	800efba <_printf_float+0x1c6>
 800efae:	6822      	ldr	r2, [r4, #0]
 800efb0:	6123      	str	r3, [r4, #16]
 800efb2:	07d1      	lsls	r1, r2, #31
 800efb4:	d5e8      	bpl.n	800ef88 <_printf_float+0x194>
 800efb6:	3301      	adds	r3, #1
 800efb8:	e7e5      	b.n	800ef86 <_printf_float+0x192>
 800efba:	2b00      	cmp	r3, #0
 800efbc:	bfd4      	ite	le
 800efbe:	f1c3 0302 	rsble	r3, r3, #2
 800efc2:	2301      	movgt	r3, #1
 800efc4:	4413      	add	r3, r2
 800efc6:	e7de      	b.n	800ef86 <_printf_float+0x192>
 800efc8:	6823      	ldr	r3, [r4, #0]
 800efca:	055a      	lsls	r2, r3, #21
 800efcc:	d407      	bmi.n	800efde <_printf_float+0x1ea>
 800efce:	6923      	ldr	r3, [r4, #16]
 800efd0:	4642      	mov	r2, r8
 800efd2:	4631      	mov	r1, r6
 800efd4:	4628      	mov	r0, r5
 800efd6:	47b8      	blx	r7
 800efd8:	3001      	adds	r0, #1
 800efda:	d12b      	bne.n	800f034 <_printf_float+0x240>
 800efdc:	e767      	b.n	800eeae <_printf_float+0xba>
 800efde:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800efe2:	f240 80dc 	bls.w	800f19e <_printf_float+0x3aa>
 800efe6:	2200      	movs	r2, #0
 800efe8:	2300      	movs	r3, #0
 800efea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800efee:	f7f1 fd8b 	bl	8000b08 <__aeabi_dcmpeq>
 800eff2:	2800      	cmp	r0, #0
 800eff4:	d033      	beq.n	800f05e <_printf_float+0x26a>
 800eff6:	2301      	movs	r3, #1
 800eff8:	4a41      	ldr	r2, [pc, #260]	; (800f100 <_printf_float+0x30c>)
 800effa:	4631      	mov	r1, r6
 800effc:	4628      	mov	r0, r5
 800effe:	47b8      	blx	r7
 800f000:	3001      	adds	r0, #1
 800f002:	f43f af54 	beq.w	800eeae <_printf_float+0xba>
 800f006:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f00a:	429a      	cmp	r2, r3
 800f00c:	db02      	blt.n	800f014 <_printf_float+0x220>
 800f00e:	6823      	ldr	r3, [r4, #0]
 800f010:	07d8      	lsls	r0, r3, #31
 800f012:	d50f      	bpl.n	800f034 <_printf_float+0x240>
 800f014:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f018:	4631      	mov	r1, r6
 800f01a:	4628      	mov	r0, r5
 800f01c:	47b8      	blx	r7
 800f01e:	3001      	adds	r0, #1
 800f020:	f43f af45 	beq.w	800eeae <_printf_float+0xba>
 800f024:	f04f 0800 	mov.w	r8, #0
 800f028:	f104 091a 	add.w	r9, r4, #26
 800f02c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f02e:	3b01      	subs	r3, #1
 800f030:	4543      	cmp	r3, r8
 800f032:	dc09      	bgt.n	800f048 <_printf_float+0x254>
 800f034:	6823      	ldr	r3, [r4, #0]
 800f036:	079b      	lsls	r3, r3, #30
 800f038:	f100 8103 	bmi.w	800f242 <_printf_float+0x44e>
 800f03c:	68e0      	ldr	r0, [r4, #12]
 800f03e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f040:	4298      	cmp	r0, r3
 800f042:	bfb8      	it	lt
 800f044:	4618      	movlt	r0, r3
 800f046:	e734      	b.n	800eeb2 <_printf_float+0xbe>
 800f048:	2301      	movs	r3, #1
 800f04a:	464a      	mov	r2, r9
 800f04c:	4631      	mov	r1, r6
 800f04e:	4628      	mov	r0, r5
 800f050:	47b8      	blx	r7
 800f052:	3001      	adds	r0, #1
 800f054:	f43f af2b 	beq.w	800eeae <_printf_float+0xba>
 800f058:	f108 0801 	add.w	r8, r8, #1
 800f05c:	e7e6      	b.n	800f02c <_printf_float+0x238>
 800f05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f060:	2b00      	cmp	r3, #0
 800f062:	dc2b      	bgt.n	800f0bc <_printf_float+0x2c8>
 800f064:	2301      	movs	r3, #1
 800f066:	4a26      	ldr	r2, [pc, #152]	; (800f100 <_printf_float+0x30c>)
 800f068:	4631      	mov	r1, r6
 800f06a:	4628      	mov	r0, r5
 800f06c:	47b8      	blx	r7
 800f06e:	3001      	adds	r0, #1
 800f070:	f43f af1d 	beq.w	800eeae <_printf_float+0xba>
 800f074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f076:	b923      	cbnz	r3, 800f082 <_printf_float+0x28e>
 800f078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f07a:	b913      	cbnz	r3, 800f082 <_printf_float+0x28e>
 800f07c:	6823      	ldr	r3, [r4, #0]
 800f07e:	07d9      	lsls	r1, r3, #31
 800f080:	d5d8      	bpl.n	800f034 <_printf_float+0x240>
 800f082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f086:	4631      	mov	r1, r6
 800f088:	4628      	mov	r0, r5
 800f08a:	47b8      	blx	r7
 800f08c:	3001      	adds	r0, #1
 800f08e:	f43f af0e 	beq.w	800eeae <_printf_float+0xba>
 800f092:	f04f 0900 	mov.w	r9, #0
 800f096:	f104 0a1a 	add.w	sl, r4, #26
 800f09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f09c:	425b      	negs	r3, r3
 800f09e:	454b      	cmp	r3, r9
 800f0a0:	dc01      	bgt.n	800f0a6 <_printf_float+0x2b2>
 800f0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0a4:	e794      	b.n	800efd0 <_printf_float+0x1dc>
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	4652      	mov	r2, sl
 800f0aa:	4631      	mov	r1, r6
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	47b8      	blx	r7
 800f0b0:	3001      	adds	r0, #1
 800f0b2:	f43f aefc 	beq.w	800eeae <_printf_float+0xba>
 800f0b6:	f109 0901 	add.w	r9, r9, #1
 800f0ba:	e7ee      	b.n	800f09a <_printf_float+0x2a6>
 800f0bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	bfa8      	it	ge
 800f0c4:	461a      	movge	r2, r3
 800f0c6:	2a00      	cmp	r2, #0
 800f0c8:	4691      	mov	r9, r2
 800f0ca:	dd07      	ble.n	800f0dc <_printf_float+0x2e8>
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	4631      	mov	r1, r6
 800f0d0:	4642      	mov	r2, r8
 800f0d2:	4628      	mov	r0, r5
 800f0d4:	47b8      	blx	r7
 800f0d6:	3001      	adds	r0, #1
 800f0d8:	f43f aee9 	beq.w	800eeae <_printf_float+0xba>
 800f0dc:	f104 031a 	add.w	r3, r4, #26
 800f0e0:	f04f 0b00 	mov.w	fp, #0
 800f0e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0e8:	9306      	str	r3, [sp, #24]
 800f0ea:	e015      	b.n	800f118 <_printf_float+0x324>
 800f0ec:	7fefffff 	.word	0x7fefffff
 800f0f0:	08013b00 	.word	0x08013b00
 800f0f4:	08013afc 	.word	0x08013afc
 800f0f8:	08013b08 	.word	0x08013b08
 800f0fc:	08013b04 	.word	0x08013b04
 800f100:	08013b0c 	.word	0x08013b0c
 800f104:	2301      	movs	r3, #1
 800f106:	9a06      	ldr	r2, [sp, #24]
 800f108:	4631      	mov	r1, r6
 800f10a:	4628      	mov	r0, r5
 800f10c:	47b8      	blx	r7
 800f10e:	3001      	adds	r0, #1
 800f110:	f43f aecd 	beq.w	800eeae <_printf_float+0xba>
 800f114:	f10b 0b01 	add.w	fp, fp, #1
 800f118:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f11c:	ebaa 0309 	sub.w	r3, sl, r9
 800f120:	455b      	cmp	r3, fp
 800f122:	dcef      	bgt.n	800f104 <_printf_float+0x310>
 800f124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f128:	429a      	cmp	r2, r3
 800f12a:	44d0      	add	r8, sl
 800f12c:	db15      	blt.n	800f15a <_printf_float+0x366>
 800f12e:	6823      	ldr	r3, [r4, #0]
 800f130:	07da      	lsls	r2, r3, #31
 800f132:	d412      	bmi.n	800f15a <_printf_float+0x366>
 800f134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f136:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f138:	eba3 020a 	sub.w	r2, r3, sl
 800f13c:	eba3 0a01 	sub.w	sl, r3, r1
 800f140:	4592      	cmp	sl, r2
 800f142:	bfa8      	it	ge
 800f144:	4692      	movge	sl, r2
 800f146:	f1ba 0f00 	cmp.w	sl, #0
 800f14a:	dc0e      	bgt.n	800f16a <_printf_float+0x376>
 800f14c:	f04f 0800 	mov.w	r8, #0
 800f150:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f154:	f104 091a 	add.w	r9, r4, #26
 800f158:	e019      	b.n	800f18e <_printf_float+0x39a>
 800f15a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f15e:	4631      	mov	r1, r6
 800f160:	4628      	mov	r0, r5
 800f162:	47b8      	blx	r7
 800f164:	3001      	adds	r0, #1
 800f166:	d1e5      	bne.n	800f134 <_printf_float+0x340>
 800f168:	e6a1      	b.n	800eeae <_printf_float+0xba>
 800f16a:	4653      	mov	r3, sl
 800f16c:	4642      	mov	r2, r8
 800f16e:	4631      	mov	r1, r6
 800f170:	4628      	mov	r0, r5
 800f172:	47b8      	blx	r7
 800f174:	3001      	adds	r0, #1
 800f176:	d1e9      	bne.n	800f14c <_printf_float+0x358>
 800f178:	e699      	b.n	800eeae <_printf_float+0xba>
 800f17a:	2301      	movs	r3, #1
 800f17c:	464a      	mov	r2, r9
 800f17e:	4631      	mov	r1, r6
 800f180:	4628      	mov	r0, r5
 800f182:	47b8      	blx	r7
 800f184:	3001      	adds	r0, #1
 800f186:	f43f ae92 	beq.w	800eeae <_printf_float+0xba>
 800f18a:	f108 0801 	add.w	r8, r8, #1
 800f18e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f192:	1a9b      	subs	r3, r3, r2
 800f194:	eba3 030a 	sub.w	r3, r3, sl
 800f198:	4543      	cmp	r3, r8
 800f19a:	dcee      	bgt.n	800f17a <_printf_float+0x386>
 800f19c:	e74a      	b.n	800f034 <_printf_float+0x240>
 800f19e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1a0:	2a01      	cmp	r2, #1
 800f1a2:	dc01      	bgt.n	800f1a8 <_printf_float+0x3b4>
 800f1a4:	07db      	lsls	r3, r3, #31
 800f1a6:	d53a      	bpl.n	800f21e <_printf_float+0x42a>
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	4642      	mov	r2, r8
 800f1ac:	4631      	mov	r1, r6
 800f1ae:	4628      	mov	r0, r5
 800f1b0:	47b8      	blx	r7
 800f1b2:	3001      	adds	r0, #1
 800f1b4:	f43f ae7b 	beq.w	800eeae <_printf_float+0xba>
 800f1b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1bc:	4631      	mov	r1, r6
 800f1be:	4628      	mov	r0, r5
 800f1c0:	47b8      	blx	r7
 800f1c2:	3001      	adds	r0, #1
 800f1c4:	f108 0801 	add.w	r8, r8, #1
 800f1c8:	f43f ae71 	beq.w	800eeae <_printf_float+0xba>
 800f1cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f103 3aff 	add.w	sl, r3, #4294967295
 800f1d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f1d8:	2300      	movs	r3, #0
 800f1da:	f7f1 fc95 	bl	8000b08 <__aeabi_dcmpeq>
 800f1de:	b9c8      	cbnz	r0, 800f214 <_printf_float+0x420>
 800f1e0:	4653      	mov	r3, sl
 800f1e2:	4642      	mov	r2, r8
 800f1e4:	4631      	mov	r1, r6
 800f1e6:	4628      	mov	r0, r5
 800f1e8:	47b8      	blx	r7
 800f1ea:	3001      	adds	r0, #1
 800f1ec:	d10e      	bne.n	800f20c <_printf_float+0x418>
 800f1ee:	e65e      	b.n	800eeae <_printf_float+0xba>
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	4652      	mov	r2, sl
 800f1f4:	4631      	mov	r1, r6
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	47b8      	blx	r7
 800f1fa:	3001      	adds	r0, #1
 800f1fc:	f43f ae57 	beq.w	800eeae <_printf_float+0xba>
 800f200:	f108 0801 	add.w	r8, r8, #1
 800f204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f206:	3b01      	subs	r3, #1
 800f208:	4543      	cmp	r3, r8
 800f20a:	dcf1      	bgt.n	800f1f0 <_printf_float+0x3fc>
 800f20c:	464b      	mov	r3, r9
 800f20e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f212:	e6de      	b.n	800efd2 <_printf_float+0x1de>
 800f214:	f04f 0800 	mov.w	r8, #0
 800f218:	f104 0a1a 	add.w	sl, r4, #26
 800f21c:	e7f2      	b.n	800f204 <_printf_float+0x410>
 800f21e:	2301      	movs	r3, #1
 800f220:	e7df      	b.n	800f1e2 <_printf_float+0x3ee>
 800f222:	2301      	movs	r3, #1
 800f224:	464a      	mov	r2, r9
 800f226:	4631      	mov	r1, r6
 800f228:	4628      	mov	r0, r5
 800f22a:	47b8      	blx	r7
 800f22c:	3001      	adds	r0, #1
 800f22e:	f43f ae3e 	beq.w	800eeae <_printf_float+0xba>
 800f232:	f108 0801 	add.w	r8, r8, #1
 800f236:	68e3      	ldr	r3, [r4, #12]
 800f238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f23a:	1a9b      	subs	r3, r3, r2
 800f23c:	4543      	cmp	r3, r8
 800f23e:	dcf0      	bgt.n	800f222 <_printf_float+0x42e>
 800f240:	e6fc      	b.n	800f03c <_printf_float+0x248>
 800f242:	f04f 0800 	mov.w	r8, #0
 800f246:	f104 0919 	add.w	r9, r4, #25
 800f24a:	e7f4      	b.n	800f236 <_printf_float+0x442>
 800f24c:	2900      	cmp	r1, #0
 800f24e:	f43f ae8b 	beq.w	800ef68 <_printf_float+0x174>
 800f252:	2300      	movs	r3, #0
 800f254:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f258:	ab09      	add	r3, sp, #36	; 0x24
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	ec49 8b10 	vmov	d0, r8, r9
 800f260:	6022      	str	r2, [r4, #0]
 800f262:	f8cd a004 	str.w	sl, [sp, #4]
 800f266:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f26a:	4628      	mov	r0, r5
 800f26c:	f7ff fd2e 	bl	800eccc <__cvt>
 800f270:	4680      	mov	r8, r0
 800f272:	e648      	b.n	800ef06 <_printf_float+0x112>

0800f274 <_printf_common>:
 800f274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f278:	4691      	mov	r9, r2
 800f27a:	461f      	mov	r7, r3
 800f27c:	688a      	ldr	r2, [r1, #8]
 800f27e:	690b      	ldr	r3, [r1, #16]
 800f280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f284:	4293      	cmp	r3, r2
 800f286:	bfb8      	it	lt
 800f288:	4613      	movlt	r3, r2
 800f28a:	f8c9 3000 	str.w	r3, [r9]
 800f28e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f292:	4606      	mov	r6, r0
 800f294:	460c      	mov	r4, r1
 800f296:	b112      	cbz	r2, 800f29e <_printf_common+0x2a>
 800f298:	3301      	adds	r3, #1
 800f29a:	f8c9 3000 	str.w	r3, [r9]
 800f29e:	6823      	ldr	r3, [r4, #0]
 800f2a0:	0699      	lsls	r1, r3, #26
 800f2a2:	bf42      	ittt	mi
 800f2a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f2a8:	3302      	addmi	r3, #2
 800f2aa:	f8c9 3000 	strmi.w	r3, [r9]
 800f2ae:	6825      	ldr	r5, [r4, #0]
 800f2b0:	f015 0506 	ands.w	r5, r5, #6
 800f2b4:	d107      	bne.n	800f2c6 <_printf_common+0x52>
 800f2b6:	f104 0a19 	add.w	sl, r4, #25
 800f2ba:	68e3      	ldr	r3, [r4, #12]
 800f2bc:	f8d9 2000 	ldr.w	r2, [r9]
 800f2c0:	1a9b      	subs	r3, r3, r2
 800f2c2:	42ab      	cmp	r3, r5
 800f2c4:	dc28      	bgt.n	800f318 <_printf_common+0xa4>
 800f2c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f2ca:	6822      	ldr	r2, [r4, #0]
 800f2cc:	3300      	adds	r3, #0
 800f2ce:	bf18      	it	ne
 800f2d0:	2301      	movne	r3, #1
 800f2d2:	0692      	lsls	r2, r2, #26
 800f2d4:	d42d      	bmi.n	800f332 <_printf_common+0xbe>
 800f2d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2da:	4639      	mov	r1, r7
 800f2dc:	4630      	mov	r0, r6
 800f2de:	47c0      	blx	r8
 800f2e0:	3001      	adds	r0, #1
 800f2e2:	d020      	beq.n	800f326 <_printf_common+0xb2>
 800f2e4:	6823      	ldr	r3, [r4, #0]
 800f2e6:	68e5      	ldr	r5, [r4, #12]
 800f2e8:	f8d9 2000 	ldr.w	r2, [r9]
 800f2ec:	f003 0306 	and.w	r3, r3, #6
 800f2f0:	2b04      	cmp	r3, #4
 800f2f2:	bf08      	it	eq
 800f2f4:	1aad      	subeq	r5, r5, r2
 800f2f6:	68a3      	ldr	r3, [r4, #8]
 800f2f8:	6922      	ldr	r2, [r4, #16]
 800f2fa:	bf0c      	ite	eq
 800f2fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f300:	2500      	movne	r5, #0
 800f302:	4293      	cmp	r3, r2
 800f304:	bfc4      	itt	gt
 800f306:	1a9b      	subgt	r3, r3, r2
 800f308:	18ed      	addgt	r5, r5, r3
 800f30a:	f04f 0900 	mov.w	r9, #0
 800f30e:	341a      	adds	r4, #26
 800f310:	454d      	cmp	r5, r9
 800f312:	d11a      	bne.n	800f34a <_printf_common+0xd6>
 800f314:	2000      	movs	r0, #0
 800f316:	e008      	b.n	800f32a <_printf_common+0xb6>
 800f318:	2301      	movs	r3, #1
 800f31a:	4652      	mov	r2, sl
 800f31c:	4639      	mov	r1, r7
 800f31e:	4630      	mov	r0, r6
 800f320:	47c0      	blx	r8
 800f322:	3001      	adds	r0, #1
 800f324:	d103      	bne.n	800f32e <_printf_common+0xba>
 800f326:	f04f 30ff 	mov.w	r0, #4294967295
 800f32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f32e:	3501      	adds	r5, #1
 800f330:	e7c3      	b.n	800f2ba <_printf_common+0x46>
 800f332:	18e1      	adds	r1, r4, r3
 800f334:	1c5a      	adds	r2, r3, #1
 800f336:	2030      	movs	r0, #48	; 0x30
 800f338:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f33c:	4422      	add	r2, r4
 800f33e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f342:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f346:	3302      	adds	r3, #2
 800f348:	e7c5      	b.n	800f2d6 <_printf_common+0x62>
 800f34a:	2301      	movs	r3, #1
 800f34c:	4622      	mov	r2, r4
 800f34e:	4639      	mov	r1, r7
 800f350:	4630      	mov	r0, r6
 800f352:	47c0      	blx	r8
 800f354:	3001      	adds	r0, #1
 800f356:	d0e6      	beq.n	800f326 <_printf_common+0xb2>
 800f358:	f109 0901 	add.w	r9, r9, #1
 800f35c:	e7d8      	b.n	800f310 <_printf_common+0x9c>
	...

0800f360 <_printf_i>:
 800f360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f364:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f368:	460c      	mov	r4, r1
 800f36a:	7e09      	ldrb	r1, [r1, #24]
 800f36c:	b085      	sub	sp, #20
 800f36e:	296e      	cmp	r1, #110	; 0x6e
 800f370:	4617      	mov	r7, r2
 800f372:	4606      	mov	r6, r0
 800f374:	4698      	mov	r8, r3
 800f376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f378:	f000 80b3 	beq.w	800f4e2 <_printf_i+0x182>
 800f37c:	d822      	bhi.n	800f3c4 <_printf_i+0x64>
 800f37e:	2963      	cmp	r1, #99	; 0x63
 800f380:	d036      	beq.n	800f3f0 <_printf_i+0x90>
 800f382:	d80a      	bhi.n	800f39a <_printf_i+0x3a>
 800f384:	2900      	cmp	r1, #0
 800f386:	f000 80b9 	beq.w	800f4fc <_printf_i+0x19c>
 800f38a:	2958      	cmp	r1, #88	; 0x58
 800f38c:	f000 8083 	beq.w	800f496 <_printf_i+0x136>
 800f390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f394:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f398:	e032      	b.n	800f400 <_printf_i+0xa0>
 800f39a:	2964      	cmp	r1, #100	; 0x64
 800f39c:	d001      	beq.n	800f3a2 <_printf_i+0x42>
 800f39e:	2969      	cmp	r1, #105	; 0x69
 800f3a0:	d1f6      	bne.n	800f390 <_printf_i+0x30>
 800f3a2:	6820      	ldr	r0, [r4, #0]
 800f3a4:	6813      	ldr	r3, [r2, #0]
 800f3a6:	0605      	lsls	r5, r0, #24
 800f3a8:	f103 0104 	add.w	r1, r3, #4
 800f3ac:	d52a      	bpl.n	800f404 <_printf_i+0xa4>
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	6011      	str	r1, [r2, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	da03      	bge.n	800f3be <_printf_i+0x5e>
 800f3b6:	222d      	movs	r2, #45	; 0x2d
 800f3b8:	425b      	negs	r3, r3
 800f3ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f3be:	486f      	ldr	r0, [pc, #444]	; (800f57c <_printf_i+0x21c>)
 800f3c0:	220a      	movs	r2, #10
 800f3c2:	e039      	b.n	800f438 <_printf_i+0xd8>
 800f3c4:	2973      	cmp	r1, #115	; 0x73
 800f3c6:	f000 809d 	beq.w	800f504 <_printf_i+0x1a4>
 800f3ca:	d808      	bhi.n	800f3de <_printf_i+0x7e>
 800f3cc:	296f      	cmp	r1, #111	; 0x6f
 800f3ce:	d020      	beq.n	800f412 <_printf_i+0xb2>
 800f3d0:	2970      	cmp	r1, #112	; 0x70
 800f3d2:	d1dd      	bne.n	800f390 <_printf_i+0x30>
 800f3d4:	6823      	ldr	r3, [r4, #0]
 800f3d6:	f043 0320 	orr.w	r3, r3, #32
 800f3da:	6023      	str	r3, [r4, #0]
 800f3dc:	e003      	b.n	800f3e6 <_printf_i+0x86>
 800f3de:	2975      	cmp	r1, #117	; 0x75
 800f3e0:	d017      	beq.n	800f412 <_printf_i+0xb2>
 800f3e2:	2978      	cmp	r1, #120	; 0x78
 800f3e4:	d1d4      	bne.n	800f390 <_printf_i+0x30>
 800f3e6:	2378      	movs	r3, #120	; 0x78
 800f3e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f3ec:	4864      	ldr	r0, [pc, #400]	; (800f580 <_printf_i+0x220>)
 800f3ee:	e055      	b.n	800f49c <_printf_i+0x13c>
 800f3f0:	6813      	ldr	r3, [r2, #0]
 800f3f2:	1d19      	adds	r1, r3, #4
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	6011      	str	r1, [r2, #0]
 800f3f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f400:	2301      	movs	r3, #1
 800f402:	e08c      	b.n	800f51e <_printf_i+0x1be>
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	6011      	str	r1, [r2, #0]
 800f408:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f40c:	bf18      	it	ne
 800f40e:	b21b      	sxthne	r3, r3
 800f410:	e7cf      	b.n	800f3b2 <_printf_i+0x52>
 800f412:	6813      	ldr	r3, [r2, #0]
 800f414:	6825      	ldr	r5, [r4, #0]
 800f416:	1d18      	adds	r0, r3, #4
 800f418:	6010      	str	r0, [r2, #0]
 800f41a:	0628      	lsls	r0, r5, #24
 800f41c:	d501      	bpl.n	800f422 <_printf_i+0xc2>
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	e002      	b.n	800f428 <_printf_i+0xc8>
 800f422:	0668      	lsls	r0, r5, #25
 800f424:	d5fb      	bpl.n	800f41e <_printf_i+0xbe>
 800f426:	881b      	ldrh	r3, [r3, #0]
 800f428:	4854      	ldr	r0, [pc, #336]	; (800f57c <_printf_i+0x21c>)
 800f42a:	296f      	cmp	r1, #111	; 0x6f
 800f42c:	bf14      	ite	ne
 800f42e:	220a      	movne	r2, #10
 800f430:	2208      	moveq	r2, #8
 800f432:	2100      	movs	r1, #0
 800f434:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f438:	6865      	ldr	r5, [r4, #4]
 800f43a:	60a5      	str	r5, [r4, #8]
 800f43c:	2d00      	cmp	r5, #0
 800f43e:	f2c0 8095 	blt.w	800f56c <_printf_i+0x20c>
 800f442:	6821      	ldr	r1, [r4, #0]
 800f444:	f021 0104 	bic.w	r1, r1, #4
 800f448:	6021      	str	r1, [r4, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d13d      	bne.n	800f4ca <_printf_i+0x16a>
 800f44e:	2d00      	cmp	r5, #0
 800f450:	f040 808e 	bne.w	800f570 <_printf_i+0x210>
 800f454:	4665      	mov	r5, ip
 800f456:	2a08      	cmp	r2, #8
 800f458:	d10b      	bne.n	800f472 <_printf_i+0x112>
 800f45a:	6823      	ldr	r3, [r4, #0]
 800f45c:	07db      	lsls	r3, r3, #31
 800f45e:	d508      	bpl.n	800f472 <_printf_i+0x112>
 800f460:	6923      	ldr	r3, [r4, #16]
 800f462:	6862      	ldr	r2, [r4, #4]
 800f464:	429a      	cmp	r2, r3
 800f466:	bfde      	ittt	le
 800f468:	2330      	movle	r3, #48	; 0x30
 800f46a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f46e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f472:	ebac 0305 	sub.w	r3, ip, r5
 800f476:	6123      	str	r3, [r4, #16]
 800f478:	f8cd 8000 	str.w	r8, [sp]
 800f47c:	463b      	mov	r3, r7
 800f47e:	aa03      	add	r2, sp, #12
 800f480:	4621      	mov	r1, r4
 800f482:	4630      	mov	r0, r6
 800f484:	f7ff fef6 	bl	800f274 <_printf_common>
 800f488:	3001      	adds	r0, #1
 800f48a:	d14d      	bne.n	800f528 <_printf_i+0x1c8>
 800f48c:	f04f 30ff 	mov.w	r0, #4294967295
 800f490:	b005      	add	sp, #20
 800f492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f496:	4839      	ldr	r0, [pc, #228]	; (800f57c <_printf_i+0x21c>)
 800f498:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f49c:	6813      	ldr	r3, [r2, #0]
 800f49e:	6821      	ldr	r1, [r4, #0]
 800f4a0:	1d1d      	adds	r5, r3, #4
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	6015      	str	r5, [r2, #0]
 800f4a6:	060a      	lsls	r2, r1, #24
 800f4a8:	d50b      	bpl.n	800f4c2 <_printf_i+0x162>
 800f4aa:	07ca      	lsls	r2, r1, #31
 800f4ac:	bf44      	itt	mi
 800f4ae:	f041 0120 	orrmi.w	r1, r1, #32
 800f4b2:	6021      	strmi	r1, [r4, #0]
 800f4b4:	b91b      	cbnz	r3, 800f4be <_printf_i+0x15e>
 800f4b6:	6822      	ldr	r2, [r4, #0]
 800f4b8:	f022 0220 	bic.w	r2, r2, #32
 800f4bc:	6022      	str	r2, [r4, #0]
 800f4be:	2210      	movs	r2, #16
 800f4c0:	e7b7      	b.n	800f432 <_printf_i+0xd2>
 800f4c2:	064d      	lsls	r5, r1, #25
 800f4c4:	bf48      	it	mi
 800f4c6:	b29b      	uxthmi	r3, r3
 800f4c8:	e7ef      	b.n	800f4aa <_printf_i+0x14a>
 800f4ca:	4665      	mov	r5, ip
 800f4cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4d0:	fb02 3311 	mls	r3, r2, r1, r3
 800f4d4:	5cc3      	ldrb	r3, [r0, r3]
 800f4d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f4da:	460b      	mov	r3, r1
 800f4dc:	2900      	cmp	r1, #0
 800f4de:	d1f5      	bne.n	800f4cc <_printf_i+0x16c>
 800f4e0:	e7b9      	b.n	800f456 <_printf_i+0xf6>
 800f4e2:	6813      	ldr	r3, [r2, #0]
 800f4e4:	6825      	ldr	r5, [r4, #0]
 800f4e6:	6961      	ldr	r1, [r4, #20]
 800f4e8:	1d18      	adds	r0, r3, #4
 800f4ea:	6010      	str	r0, [r2, #0]
 800f4ec:	0628      	lsls	r0, r5, #24
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	d501      	bpl.n	800f4f6 <_printf_i+0x196>
 800f4f2:	6019      	str	r1, [r3, #0]
 800f4f4:	e002      	b.n	800f4fc <_printf_i+0x19c>
 800f4f6:	066a      	lsls	r2, r5, #25
 800f4f8:	d5fb      	bpl.n	800f4f2 <_printf_i+0x192>
 800f4fa:	8019      	strh	r1, [r3, #0]
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	6123      	str	r3, [r4, #16]
 800f500:	4665      	mov	r5, ip
 800f502:	e7b9      	b.n	800f478 <_printf_i+0x118>
 800f504:	6813      	ldr	r3, [r2, #0]
 800f506:	1d19      	adds	r1, r3, #4
 800f508:	6011      	str	r1, [r2, #0]
 800f50a:	681d      	ldr	r5, [r3, #0]
 800f50c:	6862      	ldr	r2, [r4, #4]
 800f50e:	2100      	movs	r1, #0
 800f510:	4628      	mov	r0, r5
 800f512:	f7f0 fe85 	bl	8000220 <memchr>
 800f516:	b108      	cbz	r0, 800f51c <_printf_i+0x1bc>
 800f518:	1b40      	subs	r0, r0, r5
 800f51a:	6060      	str	r0, [r4, #4]
 800f51c:	6863      	ldr	r3, [r4, #4]
 800f51e:	6123      	str	r3, [r4, #16]
 800f520:	2300      	movs	r3, #0
 800f522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f526:	e7a7      	b.n	800f478 <_printf_i+0x118>
 800f528:	6923      	ldr	r3, [r4, #16]
 800f52a:	462a      	mov	r2, r5
 800f52c:	4639      	mov	r1, r7
 800f52e:	4630      	mov	r0, r6
 800f530:	47c0      	blx	r8
 800f532:	3001      	adds	r0, #1
 800f534:	d0aa      	beq.n	800f48c <_printf_i+0x12c>
 800f536:	6823      	ldr	r3, [r4, #0]
 800f538:	079b      	lsls	r3, r3, #30
 800f53a:	d413      	bmi.n	800f564 <_printf_i+0x204>
 800f53c:	68e0      	ldr	r0, [r4, #12]
 800f53e:	9b03      	ldr	r3, [sp, #12]
 800f540:	4298      	cmp	r0, r3
 800f542:	bfb8      	it	lt
 800f544:	4618      	movlt	r0, r3
 800f546:	e7a3      	b.n	800f490 <_printf_i+0x130>
 800f548:	2301      	movs	r3, #1
 800f54a:	464a      	mov	r2, r9
 800f54c:	4639      	mov	r1, r7
 800f54e:	4630      	mov	r0, r6
 800f550:	47c0      	blx	r8
 800f552:	3001      	adds	r0, #1
 800f554:	d09a      	beq.n	800f48c <_printf_i+0x12c>
 800f556:	3501      	adds	r5, #1
 800f558:	68e3      	ldr	r3, [r4, #12]
 800f55a:	9a03      	ldr	r2, [sp, #12]
 800f55c:	1a9b      	subs	r3, r3, r2
 800f55e:	42ab      	cmp	r3, r5
 800f560:	dcf2      	bgt.n	800f548 <_printf_i+0x1e8>
 800f562:	e7eb      	b.n	800f53c <_printf_i+0x1dc>
 800f564:	2500      	movs	r5, #0
 800f566:	f104 0919 	add.w	r9, r4, #25
 800f56a:	e7f5      	b.n	800f558 <_printf_i+0x1f8>
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d1ac      	bne.n	800f4ca <_printf_i+0x16a>
 800f570:	7803      	ldrb	r3, [r0, #0]
 800f572:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f576:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f57a:	e76c      	b.n	800f456 <_printf_i+0xf6>
 800f57c:	08013b0e 	.word	0x08013b0e
 800f580:	08013b1f 	.word	0x08013b1f

0800f584 <_scanf_float>:
 800f584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f588:	469a      	mov	sl, r3
 800f58a:	688b      	ldr	r3, [r1, #8]
 800f58c:	4616      	mov	r6, r2
 800f58e:	1e5a      	subs	r2, r3, #1
 800f590:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f594:	b087      	sub	sp, #28
 800f596:	bf83      	ittte	hi
 800f598:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800f59c:	189b      	addhi	r3, r3, r2
 800f59e:	9301      	strhi	r3, [sp, #4]
 800f5a0:	2300      	movls	r3, #0
 800f5a2:	bf86      	itte	hi
 800f5a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f5a8:	608b      	strhi	r3, [r1, #8]
 800f5aa:	9301      	strls	r3, [sp, #4]
 800f5ac:	680b      	ldr	r3, [r1, #0]
 800f5ae:	4688      	mov	r8, r1
 800f5b0:	f04f 0b00 	mov.w	fp, #0
 800f5b4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f5b8:	f848 3b1c 	str.w	r3, [r8], #28
 800f5bc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800f5c0:	4607      	mov	r7, r0
 800f5c2:	460c      	mov	r4, r1
 800f5c4:	4645      	mov	r5, r8
 800f5c6:	465a      	mov	r2, fp
 800f5c8:	46d9      	mov	r9, fp
 800f5ca:	f8cd b008 	str.w	fp, [sp, #8]
 800f5ce:	68a1      	ldr	r1, [r4, #8]
 800f5d0:	b181      	cbz	r1, 800f5f4 <_scanf_float+0x70>
 800f5d2:	6833      	ldr	r3, [r6, #0]
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	2b49      	cmp	r3, #73	; 0x49
 800f5d8:	d071      	beq.n	800f6be <_scanf_float+0x13a>
 800f5da:	d84d      	bhi.n	800f678 <_scanf_float+0xf4>
 800f5dc:	2b39      	cmp	r3, #57	; 0x39
 800f5de:	d840      	bhi.n	800f662 <_scanf_float+0xde>
 800f5e0:	2b31      	cmp	r3, #49	; 0x31
 800f5e2:	f080 8088 	bcs.w	800f6f6 <_scanf_float+0x172>
 800f5e6:	2b2d      	cmp	r3, #45	; 0x2d
 800f5e8:	f000 8090 	beq.w	800f70c <_scanf_float+0x188>
 800f5ec:	d815      	bhi.n	800f61a <_scanf_float+0x96>
 800f5ee:	2b2b      	cmp	r3, #43	; 0x2b
 800f5f0:	f000 808c 	beq.w	800f70c <_scanf_float+0x188>
 800f5f4:	f1b9 0f00 	cmp.w	r9, #0
 800f5f8:	d003      	beq.n	800f602 <_scanf_float+0x7e>
 800f5fa:	6823      	ldr	r3, [r4, #0]
 800f5fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f600:	6023      	str	r3, [r4, #0]
 800f602:	3a01      	subs	r2, #1
 800f604:	2a01      	cmp	r2, #1
 800f606:	f200 80ea 	bhi.w	800f7de <_scanf_float+0x25a>
 800f60a:	4545      	cmp	r5, r8
 800f60c:	f200 80dc 	bhi.w	800f7c8 <_scanf_float+0x244>
 800f610:	2601      	movs	r6, #1
 800f612:	4630      	mov	r0, r6
 800f614:	b007      	add	sp, #28
 800f616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61a:	2b2e      	cmp	r3, #46	; 0x2e
 800f61c:	f000 809f 	beq.w	800f75e <_scanf_float+0x1da>
 800f620:	2b30      	cmp	r3, #48	; 0x30
 800f622:	d1e7      	bne.n	800f5f4 <_scanf_float+0x70>
 800f624:	6820      	ldr	r0, [r4, #0]
 800f626:	f410 7f80 	tst.w	r0, #256	; 0x100
 800f62a:	d064      	beq.n	800f6f6 <_scanf_float+0x172>
 800f62c:	9b01      	ldr	r3, [sp, #4]
 800f62e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800f632:	6020      	str	r0, [r4, #0]
 800f634:	f109 0901 	add.w	r9, r9, #1
 800f638:	b11b      	cbz	r3, 800f642 <_scanf_float+0xbe>
 800f63a:	3b01      	subs	r3, #1
 800f63c:	3101      	adds	r1, #1
 800f63e:	9301      	str	r3, [sp, #4]
 800f640:	60a1      	str	r1, [r4, #8]
 800f642:	68a3      	ldr	r3, [r4, #8]
 800f644:	3b01      	subs	r3, #1
 800f646:	60a3      	str	r3, [r4, #8]
 800f648:	6923      	ldr	r3, [r4, #16]
 800f64a:	3301      	adds	r3, #1
 800f64c:	6123      	str	r3, [r4, #16]
 800f64e:	6873      	ldr	r3, [r6, #4]
 800f650:	3b01      	subs	r3, #1
 800f652:	2b00      	cmp	r3, #0
 800f654:	6073      	str	r3, [r6, #4]
 800f656:	f340 80ac 	ble.w	800f7b2 <_scanf_float+0x22e>
 800f65a:	6833      	ldr	r3, [r6, #0]
 800f65c:	3301      	adds	r3, #1
 800f65e:	6033      	str	r3, [r6, #0]
 800f660:	e7b5      	b.n	800f5ce <_scanf_float+0x4a>
 800f662:	2b45      	cmp	r3, #69	; 0x45
 800f664:	f000 8085 	beq.w	800f772 <_scanf_float+0x1ee>
 800f668:	2b46      	cmp	r3, #70	; 0x46
 800f66a:	d06a      	beq.n	800f742 <_scanf_float+0x1be>
 800f66c:	2b41      	cmp	r3, #65	; 0x41
 800f66e:	d1c1      	bne.n	800f5f4 <_scanf_float+0x70>
 800f670:	2a01      	cmp	r2, #1
 800f672:	d1bf      	bne.n	800f5f4 <_scanf_float+0x70>
 800f674:	2202      	movs	r2, #2
 800f676:	e046      	b.n	800f706 <_scanf_float+0x182>
 800f678:	2b65      	cmp	r3, #101	; 0x65
 800f67a:	d07a      	beq.n	800f772 <_scanf_float+0x1ee>
 800f67c:	d818      	bhi.n	800f6b0 <_scanf_float+0x12c>
 800f67e:	2b54      	cmp	r3, #84	; 0x54
 800f680:	d066      	beq.n	800f750 <_scanf_float+0x1cc>
 800f682:	d811      	bhi.n	800f6a8 <_scanf_float+0x124>
 800f684:	2b4e      	cmp	r3, #78	; 0x4e
 800f686:	d1b5      	bne.n	800f5f4 <_scanf_float+0x70>
 800f688:	2a00      	cmp	r2, #0
 800f68a:	d146      	bne.n	800f71a <_scanf_float+0x196>
 800f68c:	f1b9 0f00 	cmp.w	r9, #0
 800f690:	d145      	bne.n	800f71e <_scanf_float+0x19a>
 800f692:	6821      	ldr	r1, [r4, #0]
 800f694:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800f698:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800f69c:	d13f      	bne.n	800f71e <_scanf_float+0x19a>
 800f69e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f6a2:	6021      	str	r1, [r4, #0]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	e02e      	b.n	800f706 <_scanf_float+0x182>
 800f6a8:	2b59      	cmp	r3, #89	; 0x59
 800f6aa:	d01e      	beq.n	800f6ea <_scanf_float+0x166>
 800f6ac:	2b61      	cmp	r3, #97	; 0x61
 800f6ae:	e7de      	b.n	800f66e <_scanf_float+0xea>
 800f6b0:	2b6e      	cmp	r3, #110	; 0x6e
 800f6b2:	d0e9      	beq.n	800f688 <_scanf_float+0x104>
 800f6b4:	d815      	bhi.n	800f6e2 <_scanf_float+0x15e>
 800f6b6:	2b66      	cmp	r3, #102	; 0x66
 800f6b8:	d043      	beq.n	800f742 <_scanf_float+0x1be>
 800f6ba:	2b69      	cmp	r3, #105	; 0x69
 800f6bc:	d19a      	bne.n	800f5f4 <_scanf_float+0x70>
 800f6be:	f1bb 0f00 	cmp.w	fp, #0
 800f6c2:	d138      	bne.n	800f736 <_scanf_float+0x1b2>
 800f6c4:	f1b9 0f00 	cmp.w	r9, #0
 800f6c8:	d197      	bne.n	800f5fa <_scanf_float+0x76>
 800f6ca:	6821      	ldr	r1, [r4, #0]
 800f6cc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800f6d0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800f6d4:	d195      	bne.n	800f602 <_scanf_float+0x7e>
 800f6d6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f6da:	6021      	str	r1, [r4, #0]
 800f6dc:	f04f 0b01 	mov.w	fp, #1
 800f6e0:	e011      	b.n	800f706 <_scanf_float+0x182>
 800f6e2:	2b74      	cmp	r3, #116	; 0x74
 800f6e4:	d034      	beq.n	800f750 <_scanf_float+0x1cc>
 800f6e6:	2b79      	cmp	r3, #121	; 0x79
 800f6e8:	d184      	bne.n	800f5f4 <_scanf_float+0x70>
 800f6ea:	f1bb 0f07 	cmp.w	fp, #7
 800f6ee:	d181      	bne.n	800f5f4 <_scanf_float+0x70>
 800f6f0:	f04f 0b08 	mov.w	fp, #8
 800f6f4:	e007      	b.n	800f706 <_scanf_float+0x182>
 800f6f6:	eb12 0f0b 	cmn.w	r2, fp
 800f6fa:	f47f af7b 	bne.w	800f5f4 <_scanf_float+0x70>
 800f6fe:	6821      	ldr	r1, [r4, #0]
 800f700:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800f704:	6021      	str	r1, [r4, #0]
 800f706:	702b      	strb	r3, [r5, #0]
 800f708:	3501      	adds	r5, #1
 800f70a:	e79a      	b.n	800f642 <_scanf_float+0xbe>
 800f70c:	6821      	ldr	r1, [r4, #0]
 800f70e:	0608      	lsls	r0, r1, #24
 800f710:	f57f af70 	bpl.w	800f5f4 <_scanf_float+0x70>
 800f714:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f718:	e7f4      	b.n	800f704 <_scanf_float+0x180>
 800f71a:	2a02      	cmp	r2, #2
 800f71c:	d047      	beq.n	800f7ae <_scanf_float+0x22a>
 800f71e:	f1bb 0f01 	cmp.w	fp, #1
 800f722:	d003      	beq.n	800f72c <_scanf_float+0x1a8>
 800f724:	f1bb 0f04 	cmp.w	fp, #4
 800f728:	f47f af64 	bne.w	800f5f4 <_scanf_float+0x70>
 800f72c:	f10b 0b01 	add.w	fp, fp, #1
 800f730:	fa5f fb8b 	uxtb.w	fp, fp
 800f734:	e7e7      	b.n	800f706 <_scanf_float+0x182>
 800f736:	f1bb 0f03 	cmp.w	fp, #3
 800f73a:	d0f7      	beq.n	800f72c <_scanf_float+0x1a8>
 800f73c:	f1bb 0f05 	cmp.w	fp, #5
 800f740:	e7f2      	b.n	800f728 <_scanf_float+0x1a4>
 800f742:	f1bb 0f02 	cmp.w	fp, #2
 800f746:	f47f af55 	bne.w	800f5f4 <_scanf_float+0x70>
 800f74a:	f04f 0b03 	mov.w	fp, #3
 800f74e:	e7da      	b.n	800f706 <_scanf_float+0x182>
 800f750:	f1bb 0f06 	cmp.w	fp, #6
 800f754:	f47f af4e 	bne.w	800f5f4 <_scanf_float+0x70>
 800f758:	f04f 0b07 	mov.w	fp, #7
 800f75c:	e7d3      	b.n	800f706 <_scanf_float+0x182>
 800f75e:	6821      	ldr	r1, [r4, #0]
 800f760:	0588      	lsls	r0, r1, #22
 800f762:	f57f af47 	bpl.w	800f5f4 <_scanf_float+0x70>
 800f766:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800f76a:	6021      	str	r1, [r4, #0]
 800f76c:	f8cd 9008 	str.w	r9, [sp, #8]
 800f770:	e7c9      	b.n	800f706 <_scanf_float+0x182>
 800f772:	6821      	ldr	r1, [r4, #0]
 800f774:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800f778:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800f77c:	d006      	beq.n	800f78c <_scanf_float+0x208>
 800f77e:	0548      	lsls	r0, r1, #21
 800f780:	f57f af38 	bpl.w	800f5f4 <_scanf_float+0x70>
 800f784:	f1b9 0f00 	cmp.w	r9, #0
 800f788:	f43f af3b 	beq.w	800f602 <_scanf_float+0x7e>
 800f78c:	0588      	lsls	r0, r1, #22
 800f78e:	bf58      	it	pl
 800f790:	9802      	ldrpl	r0, [sp, #8]
 800f792:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f796:	bf58      	it	pl
 800f798:	eba9 0000 	subpl.w	r0, r9, r0
 800f79c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800f7a0:	bf58      	it	pl
 800f7a2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800f7a6:	6021      	str	r1, [r4, #0]
 800f7a8:	f04f 0900 	mov.w	r9, #0
 800f7ac:	e7ab      	b.n	800f706 <_scanf_float+0x182>
 800f7ae:	2203      	movs	r2, #3
 800f7b0:	e7a9      	b.n	800f706 <_scanf_float+0x182>
 800f7b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f7b6:	9205      	str	r2, [sp, #20]
 800f7b8:	4631      	mov	r1, r6
 800f7ba:	4638      	mov	r0, r7
 800f7bc:	4798      	blx	r3
 800f7be:	9a05      	ldr	r2, [sp, #20]
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	f43f af04 	beq.w	800f5ce <_scanf_float+0x4a>
 800f7c6:	e715      	b.n	800f5f4 <_scanf_float+0x70>
 800f7c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f7cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f7d0:	4632      	mov	r2, r6
 800f7d2:	4638      	mov	r0, r7
 800f7d4:	4798      	blx	r3
 800f7d6:	6923      	ldr	r3, [r4, #16]
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	6123      	str	r3, [r4, #16]
 800f7dc:	e715      	b.n	800f60a <_scanf_float+0x86>
 800f7de:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f7e2:	2b06      	cmp	r3, #6
 800f7e4:	d80a      	bhi.n	800f7fc <_scanf_float+0x278>
 800f7e6:	f1bb 0f02 	cmp.w	fp, #2
 800f7ea:	d968      	bls.n	800f8be <_scanf_float+0x33a>
 800f7ec:	f1ab 0b03 	sub.w	fp, fp, #3
 800f7f0:	fa5f fb8b 	uxtb.w	fp, fp
 800f7f4:	eba5 0b0b 	sub.w	fp, r5, fp
 800f7f8:	455d      	cmp	r5, fp
 800f7fa:	d14b      	bne.n	800f894 <_scanf_float+0x310>
 800f7fc:	6823      	ldr	r3, [r4, #0]
 800f7fe:	05da      	lsls	r2, r3, #23
 800f800:	d51f      	bpl.n	800f842 <_scanf_float+0x2be>
 800f802:	055b      	lsls	r3, r3, #21
 800f804:	d468      	bmi.n	800f8d8 <_scanf_float+0x354>
 800f806:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f80a:	6923      	ldr	r3, [r4, #16]
 800f80c:	2965      	cmp	r1, #101	; 0x65
 800f80e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f812:	f105 3bff 	add.w	fp, r5, #4294967295
 800f816:	6123      	str	r3, [r4, #16]
 800f818:	d00d      	beq.n	800f836 <_scanf_float+0x2b2>
 800f81a:	2945      	cmp	r1, #69	; 0x45
 800f81c:	d00b      	beq.n	800f836 <_scanf_float+0x2b2>
 800f81e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f822:	4632      	mov	r2, r6
 800f824:	4638      	mov	r0, r7
 800f826:	4798      	blx	r3
 800f828:	6923      	ldr	r3, [r4, #16]
 800f82a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800f82e:	3b01      	subs	r3, #1
 800f830:	f1a5 0b02 	sub.w	fp, r5, #2
 800f834:	6123      	str	r3, [r4, #16]
 800f836:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f83a:	4632      	mov	r2, r6
 800f83c:	4638      	mov	r0, r7
 800f83e:	4798      	blx	r3
 800f840:	465d      	mov	r5, fp
 800f842:	6826      	ldr	r6, [r4, #0]
 800f844:	f016 0610 	ands.w	r6, r6, #16
 800f848:	d17a      	bne.n	800f940 <_scanf_float+0x3bc>
 800f84a:	702e      	strb	r6, [r5, #0]
 800f84c:	6823      	ldr	r3, [r4, #0]
 800f84e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f856:	d142      	bne.n	800f8de <_scanf_float+0x35a>
 800f858:	9b02      	ldr	r3, [sp, #8]
 800f85a:	eba9 0303 	sub.w	r3, r9, r3
 800f85e:	425a      	negs	r2, r3
 800f860:	2b00      	cmp	r3, #0
 800f862:	d149      	bne.n	800f8f8 <_scanf_float+0x374>
 800f864:	2200      	movs	r2, #0
 800f866:	4641      	mov	r1, r8
 800f868:	4638      	mov	r0, r7
 800f86a:	f000 fecd 	bl	8010608 <_strtod_r>
 800f86e:	6825      	ldr	r5, [r4, #0]
 800f870:	f8da 3000 	ldr.w	r3, [sl]
 800f874:	f015 0f02 	tst.w	r5, #2
 800f878:	f103 0204 	add.w	r2, r3, #4
 800f87c:	ec59 8b10 	vmov	r8, r9, d0
 800f880:	f8ca 2000 	str.w	r2, [sl]
 800f884:	d043      	beq.n	800f90e <_scanf_float+0x38a>
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	e9c3 8900 	strd	r8, r9, [r3]
 800f88c:	68e3      	ldr	r3, [r4, #12]
 800f88e:	3301      	adds	r3, #1
 800f890:	60e3      	str	r3, [r4, #12]
 800f892:	e6be      	b.n	800f612 <_scanf_float+0x8e>
 800f894:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f898:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f89c:	4632      	mov	r2, r6
 800f89e:	4638      	mov	r0, r7
 800f8a0:	4798      	blx	r3
 800f8a2:	6923      	ldr	r3, [r4, #16]
 800f8a4:	3b01      	subs	r3, #1
 800f8a6:	6123      	str	r3, [r4, #16]
 800f8a8:	e7a6      	b.n	800f7f8 <_scanf_float+0x274>
 800f8aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f8ae:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f8b2:	4632      	mov	r2, r6
 800f8b4:	4638      	mov	r0, r7
 800f8b6:	4798      	blx	r3
 800f8b8:	6923      	ldr	r3, [r4, #16]
 800f8ba:	3b01      	subs	r3, #1
 800f8bc:	6123      	str	r3, [r4, #16]
 800f8be:	4545      	cmp	r5, r8
 800f8c0:	d8f3      	bhi.n	800f8aa <_scanf_float+0x326>
 800f8c2:	e6a5      	b.n	800f610 <_scanf_float+0x8c>
 800f8c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f8c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f8cc:	4632      	mov	r2, r6
 800f8ce:	4638      	mov	r0, r7
 800f8d0:	4798      	blx	r3
 800f8d2:	6923      	ldr	r3, [r4, #16]
 800f8d4:	3b01      	subs	r3, #1
 800f8d6:	6123      	str	r3, [r4, #16]
 800f8d8:	4545      	cmp	r5, r8
 800f8da:	d8f3      	bhi.n	800f8c4 <_scanf_float+0x340>
 800f8dc:	e698      	b.n	800f610 <_scanf_float+0x8c>
 800f8de:	9b03      	ldr	r3, [sp, #12]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d0bf      	beq.n	800f864 <_scanf_float+0x2e0>
 800f8e4:	9904      	ldr	r1, [sp, #16]
 800f8e6:	230a      	movs	r3, #10
 800f8e8:	4632      	mov	r2, r6
 800f8ea:	3101      	adds	r1, #1
 800f8ec:	4638      	mov	r0, r7
 800f8ee:	f000 ff17 	bl	8010720 <_strtol_r>
 800f8f2:	9b03      	ldr	r3, [sp, #12]
 800f8f4:	9d04      	ldr	r5, [sp, #16]
 800f8f6:	1ac2      	subs	r2, r0, r3
 800f8f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f8fc:	429d      	cmp	r5, r3
 800f8fe:	bf28      	it	cs
 800f900:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800f904:	490f      	ldr	r1, [pc, #60]	; (800f944 <_scanf_float+0x3c0>)
 800f906:	4628      	mov	r0, r5
 800f908:	f000 f84c 	bl	800f9a4 <siprintf>
 800f90c:	e7aa      	b.n	800f864 <_scanf_float+0x2e0>
 800f90e:	f015 0504 	ands.w	r5, r5, #4
 800f912:	d1b8      	bne.n	800f886 <_scanf_float+0x302>
 800f914:	681f      	ldr	r7, [r3, #0]
 800f916:	ee10 2a10 	vmov	r2, s0
 800f91a:	464b      	mov	r3, r9
 800f91c:	ee10 0a10 	vmov	r0, s0
 800f920:	4649      	mov	r1, r9
 800f922:	f7f1 f923 	bl	8000b6c <__aeabi_dcmpun>
 800f926:	b128      	cbz	r0, 800f934 <_scanf_float+0x3b0>
 800f928:	4628      	mov	r0, r5
 800f92a:	f000 f835 	bl	800f998 <nanf>
 800f92e:	ed87 0a00 	vstr	s0, [r7]
 800f932:	e7ab      	b.n	800f88c <_scanf_float+0x308>
 800f934:	4640      	mov	r0, r8
 800f936:	4649      	mov	r1, r9
 800f938:	f7f1 f976 	bl	8000c28 <__aeabi_d2f>
 800f93c:	6038      	str	r0, [r7, #0]
 800f93e:	e7a5      	b.n	800f88c <_scanf_float+0x308>
 800f940:	2600      	movs	r6, #0
 800f942:	e666      	b.n	800f612 <_scanf_float+0x8e>
 800f944:	08013b30 	.word	0x08013b30

0800f948 <iprintf>:
 800f948:	b40f      	push	{r0, r1, r2, r3}
 800f94a:	4b0a      	ldr	r3, [pc, #40]	; (800f974 <iprintf+0x2c>)
 800f94c:	b513      	push	{r0, r1, r4, lr}
 800f94e:	681c      	ldr	r4, [r3, #0]
 800f950:	b124      	cbz	r4, 800f95c <iprintf+0x14>
 800f952:	69a3      	ldr	r3, [r4, #24]
 800f954:	b913      	cbnz	r3, 800f95c <iprintf+0x14>
 800f956:	4620      	mov	r0, r4
 800f958:	f001 fd7a 	bl	8011450 <__sinit>
 800f95c:	ab05      	add	r3, sp, #20
 800f95e:	9a04      	ldr	r2, [sp, #16]
 800f960:	68a1      	ldr	r1, [r4, #8]
 800f962:	9301      	str	r3, [sp, #4]
 800f964:	4620      	mov	r0, r4
 800f966:	f002 fed5 	bl	8012714 <_vfiprintf_r>
 800f96a:	b002      	add	sp, #8
 800f96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f970:	b004      	add	sp, #16
 800f972:	4770      	bx	lr
 800f974:	2000064c 	.word	0x2000064c

0800f978 <_sbrk_r>:
 800f978:	b538      	push	{r3, r4, r5, lr}
 800f97a:	4c06      	ldr	r4, [pc, #24]	; (800f994 <_sbrk_r+0x1c>)
 800f97c:	2300      	movs	r3, #0
 800f97e:	4605      	mov	r5, r0
 800f980:	4608      	mov	r0, r1
 800f982:	6023      	str	r3, [r4, #0]
 800f984:	f7fc fca4 	bl	800c2d0 <_sbrk>
 800f988:	1c43      	adds	r3, r0, #1
 800f98a:	d102      	bne.n	800f992 <_sbrk_r+0x1a>
 800f98c:	6823      	ldr	r3, [r4, #0]
 800f98e:	b103      	cbz	r3, 800f992 <_sbrk_r+0x1a>
 800f990:	602b      	str	r3, [r5, #0]
 800f992:	bd38      	pop	{r3, r4, r5, pc}
 800f994:	20007714 	.word	0x20007714

0800f998 <nanf>:
 800f998:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f9a0 <nanf+0x8>
 800f99c:	4770      	bx	lr
 800f99e:	bf00      	nop
 800f9a0:	7fc00000 	.word	0x7fc00000

0800f9a4 <siprintf>:
 800f9a4:	b40e      	push	{r1, r2, r3}
 800f9a6:	b500      	push	{lr}
 800f9a8:	b09c      	sub	sp, #112	; 0x70
 800f9aa:	ab1d      	add	r3, sp, #116	; 0x74
 800f9ac:	9002      	str	r0, [sp, #8]
 800f9ae:	9006      	str	r0, [sp, #24]
 800f9b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f9b4:	4809      	ldr	r0, [pc, #36]	; (800f9dc <siprintf+0x38>)
 800f9b6:	9107      	str	r1, [sp, #28]
 800f9b8:	9104      	str	r1, [sp, #16]
 800f9ba:	4909      	ldr	r1, [pc, #36]	; (800f9e0 <siprintf+0x3c>)
 800f9bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9c0:	9105      	str	r1, [sp, #20]
 800f9c2:	6800      	ldr	r0, [r0, #0]
 800f9c4:	9301      	str	r3, [sp, #4]
 800f9c6:	a902      	add	r1, sp, #8
 800f9c8:	f002 fd82 	bl	80124d0 <_svfiprintf_r>
 800f9cc:	9b02      	ldr	r3, [sp, #8]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	701a      	strb	r2, [r3, #0]
 800f9d2:	b01c      	add	sp, #112	; 0x70
 800f9d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9d8:	b003      	add	sp, #12
 800f9da:	4770      	bx	lr
 800f9dc:	2000064c 	.word	0x2000064c
 800f9e0:	ffff0208 	.word	0xffff0208

0800f9e4 <sulp>:
 800f9e4:	b570      	push	{r4, r5, r6, lr}
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	460d      	mov	r5, r1
 800f9ea:	ec45 4b10 	vmov	d0, r4, r5
 800f9ee:	4616      	mov	r6, r2
 800f9f0:	f002 fbd2 	bl	8012198 <__ulp>
 800f9f4:	ec51 0b10 	vmov	r0, r1, d0
 800f9f8:	b17e      	cbz	r6, 800fa1a <sulp+0x36>
 800f9fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f9fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	dd09      	ble.n	800fa1a <sulp+0x36>
 800fa06:	051b      	lsls	r3, r3, #20
 800fa08:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fa0c:	2400      	movs	r4, #0
 800fa0e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fa12:	4622      	mov	r2, r4
 800fa14:	462b      	mov	r3, r5
 800fa16:	f7f0 fe0f 	bl	8000638 <__aeabi_dmul>
 800fa1a:	bd70      	pop	{r4, r5, r6, pc}
 800fa1c:	0000      	movs	r0, r0
	...

0800fa20 <_strtod_l>:
 800fa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa24:	461f      	mov	r7, r3
 800fa26:	b0a1      	sub	sp, #132	; 0x84
 800fa28:	2300      	movs	r3, #0
 800fa2a:	4681      	mov	r9, r0
 800fa2c:	4638      	mov	r0, r7
 800fa2e:	460e      	mov	r6, r1
 800fa30:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa32:	931c      	str	r3, [sp, #112]	; 0x70
 800fa34:	f002 f8bf 	bl	8011bb6 <__localeconv_l>
 800fa38:	4680      	mov	r8, r0
 800fa3a:	6800      	ldr	r0, [r0, #0]
 800fa3c:	f7f0 fbe8 	bl	8000210 <strlen>
 800fa40:	f04f 0a00 	mov.w	sl, #0
 800fa44:	4604      	mov	r4, r0
 800fa46:	f04f 0b00 	mov.w	fp, #0
 800fa4a:	961b      	str	r6, [sp, #108]	; 0x6c
 800fa4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fa4e:	781a      	ldrb	r2, [r3, #0]
 800fa50:	2a0d      	cmp	r2, #13
 800fa52:	d832      	bhi.n	800faba <_strtod_l+0x9a>
 800fa54:	2a09      	cmp	r2, #9
 800fa56:	d236      	bcs.n	800fac6 <_strtod_l+0xa6>
 800fa58:	2a00      	cmp	r2, #0
 800fa5a:	d03e      	beq.n	800fada <_strtod_l+0xba>
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	930d      	str	r3, [sp, #52]	; 0x34
 800fa60:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800fa62:	782b      	ldrb	r3, [r5, #0]
 800fa64:	2b30      	cmp	r3, #48	; 0x30
 800fa66:	f040 80ac 	bne.w	800fbc2 <_strtod_l+0x1a2>
 800fa6a:	786b      	ldrb	r3, [r5, #1]
 800fa6c:	2b58      	cmp	r3, #88	; 0x58
 800fa6e:	d001      	beq.n	800fa74 <_strtod_l+0x54>
 800fa70:	2b78      	cmp	r3, #120	; 0x78
 800fa72:	d167      	bne.n	800fb44 <_strtod_l+0x124>
 800fa74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa76:	9301      	str	r3, [sp, #4]
 800fa78:	ab1c      	add	r3, sp, #112	; 0x70
 800fa7a:	9300      	str	r3, [sp, #0]
 800fa7c:	9702      	str	r7, [sp, #8]
 800fa7e:	ab1d      	add	r3, sp, #116	; 0x74
 800fa80:	4a88      	ldr	r2, [pc, #544]	; (800fca4 <_strtod_l+0x284>)
 800fa82:	a91b      	add	r1, sp, #108	; 0x6c
 800fa84:	4648      	mov	r0, r9
 800fa86:	f001 fdbc 	bl	8011602 <__gethex>
 800fa8a:	f010 0407 	ands.w	r4, r0, #7
 800fa8e:	4606      	mov	r6, r0
 800fa90:	d005      	beq.n	800fa9e <_strtod_l+0x7e>
 800fa92:	2c06      	cmp	r4, #6
 800fa94:	d12b      	bne.n	800faee <_strtod_l+0xce>
 800fa96:	3501      	adds	r5, #1
 800fa98:	2300      	movs	r3, #0
 800fa9a:	951b      	str	r5, [sp, #108]	; 0x6c
 800fa9c:	930d      	str	r3, [sp, #52]	; 0x34
 800fa9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	f040 859a 	bne.w	80105da <_strtod_l+0xbba>
 800faa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800faa8:	b1e3      	cbz	r3, 800fae4 <_strtod_l+0xc4>
 800faaa:	4652      	mov	r2, sl
 800faac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fab0:	ec43 2b10 	vmov	d0, r2, r3
 800fab4:	b021      	add	sp, #132	; 0x84
 800fab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faba:	2a2b      	cmp	r2, #43	; 0x2b
 800fabc:	d015      	beq.n	800faea <_strtod_l+0xca>
 800fabe:	2a2d      	cmp	r2, #45	; 0x2d
 800fac0:	d004      	beq.n	800facc <_strtod_l+0xac>
 800fac2:	2a20      	cmp	r2, #32
 800fac4:	d1ca      	bne.n	800fa5c <_strtod_l+0x3c>
 800fac6:	3301      	adds	r3, #1
 800fac8:	931b      	str	r3, [sp, #108]	; 0x6c
 800faca:	e7bf      	b.n	800fa4c <_strtod_l+0x2c>
 800facc:	2201      	movs	r2, #1
 800face:	920d      	str	r2, [sp, #52]	; 0x34
 800fad0:	1c5a      	adds	r2, r3, #1
 800fad2:	921b      	str	r2, [sp, #108]	; 0x6c
 800fad4:	785b      	ldrb	r3, [r3, #1]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d1c2      	bne.n	800fa60 <_strtod_l+0x40>
 800fada:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fadc:	961b      	str	r6, [sp, #108]	; 0x6c
 800fade:	2b00      	cmp	r3, #0
 800fae0:	f040 8579 	bne.w	80105d6 <_strtod_l+0xbb6>
 800fae4:	4652      	mov	r2, sl
 800fae6:	465b      	mov	r3, fp
 800fae8:	e7e2      	b.n	800fab0 <_strtod_l+0x90>
 800faea:	2200      	movs	r2, #0
 800faec:	e7ef      	b.n	800face <_strtod_l+0xae>
 800faee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800faf0:	b13a      	cbz	r2, 800fb02 <_strtod_l+0xe2>
 800faf2:	2135      	movs	r1, #53	; 0x35
 800faf4:	a81e      	add	r0, sp, #120	; 0x78
 800faf6:	f002 fc47 	bl	8012388 <__copybits>
 800fafa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fafc:	4648      	mov	r0, r9
 800fafe:	f002 f8b3 	bl	8011c68 <_Bfree>
 800fb02:	3c01      	subs	r4, #1
 800fb04:	2c04      	cmp	r4, #4
 800fb06:	d806      	bhi.n	800fb16 <_strtod_l+0xf6>
 800fb08:	e8df f004 	tbb	[pc, r4]
 800fb0c:	1714030a 	.word	0x1714030a
 800fb10:	0a          	.byte	0x0a
 800fb11:	00          	.byte	0x00
 800fb12:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800fb16:	0730      	lsls	r0, r6, #28
 800fb18:	d5c1      	bpl.n	800fa9e <_strtod_l+0x7e>
 800fb1a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fb1e:	e7be      	b.n	800fa9e <_strtod_l+0x7e>
 800fb20:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800fb24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fb26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fb2a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fb2e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fb32:	e7f0      	b.n	800fb16 <_strtod_l+0xf6>
 800fb34:	f8df b170 	ldr.w	fp, [pc, #368]	; 800fca8 <_strtod_l+0x288>
 800fb38:	e7ed      	b.n	800fb16 <_strtod_l+0xf6>
 800fb3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fb3e:	f04f 3aff 	mov.w	sl, #4294967295
 800fb42:	e7e8      	b.n	800fb16 <_strtod_l+0xf6>
 800fb44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb46:	1c5a      	adds	r2, r3, #1
 800fb48:	921b      	str	r2, [sp, #108]	; 0x6c
 800fb4a:	785b      	ldrb	r3, [r3, #1]
 800fb4c:	2b30      	cmp	r3, #48	; 0x30
 800fb4e:	d0f9      	beq.n	800fb44 <_strtod_l+0x124>
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d0a4      	beq.n	800fa9e <_strtod_l+0x7e>
 800fb54:	2301      	movs	r3, #1
 800fb56:	2500      	movs	r5, #0
 800fb58:	9306      	str	r3, [sp, #24]
 800fb5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb5c:	9308      	str	r3, [sp, #32]
 800fb5e:	9507      	str	r5, [sp, #28]
 800fb60:	9505      	str	r5, [sp, #20]
 800fb62:	220a      	movs	r2, #10
 800fb64:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800fb66:	7807      	ldrb	r7, [r0, #0]
 800fb68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800fb6c:	b2d9      	uxtb	r1, r3
 800fb6e:	2909      	cmp	r1, #9
 800fb70:	d929      	bls.n	800fbc6 <_strtod_l+0x1a6>
 800fb72:	4622      	mov	r2, r4
 800fb74:	f8d8 1000 	ldr.w	r1, [r8]
 800fb78:	f002 ff25 	bl	80129c6 <strncmp>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	d031      	beq.n	800fbe4 <_strtod_l+0x1c4>
 800fb80:	2000      	movs	r0, #0
 800fb82:	9c05      	ldr	r4, [sp, #20]
 800fb84:	9004      	str	r0, [sp, #16]
 800fb86:	463b      	mov	r3, r7
 800fb88:	4602      	mov	r2, r0
 800fb8a:	2b65      	cmp	r3, #101	; 0x65
 800fb8c:	d001      	beq.n	800fb92 <_strtod_l+0x172>
 800fb8e:	2b45      	cmp	r3, #69	; 0x45
 800fb90:	d114      	bne.n	800fbbc <_strtod_l+0x19c>
 800fb92:	b924      	cbnz	r4, 800fb9e <_strtod_l+0x17e>
 800fb94:	b910      	cbnz	r0, 800fb9c <_strtod_l+0x17c>
 800fb96:	9b06      	ldr	r3, [sp, #24]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d09e      	beq.n	800fada <_strtod_l+0xba>
 800fb9c:	2400      	movs	r4, #0
 800fb9e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800fba0:	1c73      	adds	r3, r6, #1
 800fba2:	931b      	str	r3, [sp, #108]	; 0x6c
 800fba4:	7873      	ldrb	r3, [r6, #1]
 800fba6:	2b2b      	cmp	r3, #43	; 0x2b
 800fba8:	d078      	beq.n	800fc9c <_strtod_l+0x27c>
 800fbaa:	2b2d      	cmp	r3, #45	; 0x2d
 800fbac:	d070      	beq.n	800fc90 <_strtod_l+0x270>
 800fbae:	f04f 0c00 	mov.w	ip, #0
 800fbb2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800fbb6:	2f09      	cmp	r7, #9
 800fbb8:	d97c      	bls.n	800fcb4 <_strtod_l+0x294>
 800fbba:	961b      	str	r6, [sp, #108]	; 0x6c
 800fbbc:	f04f 0e00 	mov.w	lr, #0
 800fbc0:	e09a      	b.n	800fcf8 <_strtod_l+0x2d8>
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	e7c7      	b.n	800fb56 <_strtod_l+0x136>
 800fbc6:	9905      	ldr	r1, [sp, #20]
 800fbc8:	2908      	cmp	r1, #8
 800fbca:	bfdd      	ittte	le
 800fbcc:	9907      	ldrle	r1, [sp, #28]
 800fbce:	fb02 3301 	mlale	r3, r2, r1, r3
 800fbd2:	9307      	strle	r3, [sp, #28]
 800fbd4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800fbd8:	9b05      	ldr	r3, [sp, #20]
 800fbda:	3001      	adds	r0, #1
 800fbdc:	3301      	adds	r3, #1
 800fbde:	9305      	str	r3, [sp, #20]
 800fbe0:	901b      	str	r0, [sp, #108]	; 0x6c
 800fbe2:	e7bf      	b.n	800fb64 <_strtod_l+0x144>
 800fbe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fbe6:	191a      	adds	r2, r3, r4
 800fbe8:	921b      	str	r2, [sp, #108]	; 0x6c
 800fbea:	9a05      	ldr	r2, [sp, #20]
 800fbec:	5d1b      	ldrb	r3, [r3, r4]
 800fbee:	2a00      	cmp	r2, #0
 800fbf0:	d037      	beq.n	800fc62 <_strtod_l+0x242>
 800fbf2:	9c05      	ldr	r4, [sp, #20]
 800fbf4:	4602      	mov	r2, r0
 800fbf6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fbfa:	2909      	cmp	r1, #9
 800fbfc:	d913      	bls.n	800fc26 <_strtod_l+0x206>
 800fbfe:	2101      	movs	r1, #1
 800fc00:	9104      	str	r1, [sp, #16]
 800fc02:	e7c2      	b.n	800fb8a <_strtod_l+0x16a>
 800fc04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc06:	1c5a      	adds	r2, r3, #1
 800fc08:	921b      	str	r2, [sp, #108]	; 0x6c
 800fc0a:	785b      	ldrb	r3, [r3, #1]
 800fc0c:	3001      	adds	r0, #1
 800fc0e:	2b30      	cmp	r3, #48	; 0x30
 800fc10:	d0f8      	beq.n	800fc04 <_strtod_l+0x1e4>
 800fc12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800fc16:	2a08      	cmp	r2, #8
 800fc18:	f200 84e4 	bhi.w	80105e4 <_strtod_l+0xbc4>
 800fc1c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fc1e:	9208      	str	r2, [sp, #32]
 800fc20:	4602      	mov	r2, r0
 800fc22:	2000      	movs	r0, #0
 800fc24:	4604      	mov	r4, r0
 800fc26:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800fc2a:	f100 0101 	add.w	r1, r0, #1
 800fc2e:	d012      	beq.n	800fc56 <_strtod_l+0x236>
 800fc30:	440a      	add	r2, r1
 800fc32:	eb00 0c04 	add.w	ip, r0, r4
 800fc36:	4621      	mov	r1, r4
 800fc38:	270a      	movs	r7, #10
 800fc3a:	458c      	cmp	ip, r1
 800fc3c:	d113      	bne.n	800fc66 <_strtod_l+0x246>
 800fc3e:	1821      	adds	r1, r4, r0
 800fc40:	2908      	cmp	r1, #8
 800fc42:	f104 0401 	add.w	r4, r4, #1
 800fc46:	4404      	add	r4, r0
 800fc48:	dc19      	bgt.n	800fc7e <_strtod_l+0x25e>
 800fc4a:	9b07      	ldr	r3, [sp, #28]
 800fc4c:	210a      	movs	r1, #10
 800fc4e:	fb01 e303 	mla	r3, r1, r3, lr
 800fc52:	9307      	str	r3, [sp, #28]
 800fc54:	2100      	movs	r1, #0
 800fc56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc58:	1c58      	adds	r0, r3, #1
 800fc5a:	901b      	str	r0, [sp, #108]	; 0x6c
 800fc5c:	785b      	ldrb	r3, [r3, #1]
 800fc5e:	4608      	mov	r0, r1
 800fc60:	e7c9      	b.n	800fbf6 <_strtod_l+0x1d6>
 800fc62:	9805      	ldr	r0, [sp, #20]
 800fc64:	e7d3      	b.n	800fc0e <_strtod_l+0x1ee>
 800fc66:	2908      	cmp	r1, #8
 800fc68:	f101 0101 	add.w	r1, r1, #1
 800fc6c:	dc03      	bgt.n	800fc76 <_strtod_l+0x256>
 800fc6e:	9b07      	ldr	r3, [sp, #28]
 800fc70:	437b      	muls	r3, r7
 800fc72:	9307      	str	r3, [sp, #28]
 800fc74:	e7e1      	b.n	800fc3a <_strtod_l+0x21a>
 800fc76:	2910      	cmp	r1, #16
 800fc78:	bfd8      	it	le
 800fc7a:	437d      	mulle	r5, r7
 800fc7c:	e7dd      	b.n	800fc3a <_strtod_l+0x21a>
 800fc7e:	2c10      	cmp	r4, #16
 800fc80:	bfdc      	itt	le
 800fc82:	210a      	movle	r1, #10
 800fc84:	fb01 e505 	mlale	r5, r1, r5, lr
 800fc88:	e7e4      	b.n	800fc54 <_strtod_l+0x234>
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	9304      	str	r3, [sp, #16]
 800fc8e:	e781      	b.n	800fb94 <_strtod_l+0x174>
 800fc90:	f04f 0c01 	mov.w	ip, #1
 800fc94:	1cb3      	adds	r3, r6, #2
 800fc96:	931b      	str	r3, [sp, #108]	; 0x6c
 800fc98:	78b3      	ldrb	r3, [r6, #2]
 800fc9a:	e78a      	b.n	800fbb2 <_strtod_l+0x192>
 800fc9c:	f04f 0c00 	mov.w	ip, #0
 800fca0:	e7f8      	b.n	800fc94 <_strtod_l+0x274>
 800fca2:	bf00      	nop
 800fca4:	08013b38 	.word	0x08013b38
 800fca8:	7ff00000 	.word	0x7ff00000
 800fcac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fcae:	1c5f      	adds	r7, r3, #1
 800fcb0:	971b      	str	r7, [sp, #108]	; 0x6c
 800fcb2:	785b      	ldrb	r3, [r3, #1]
 800fcb4:	2b30      	cmp	r3, #48	; 0x30
 800fcb6:	d0f9      	beq.n	800fcac <_strtod_l+0x28c>
 800fcb8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800fcbc:	2f08      	cmp	r7, #8
 800fcbe:	f63f af7d 	bhi.w	800fbbc <_strtod_l+0x19c>
 800fcc2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800fcc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fcc8:	930a      	str	r3, [sp, #40]	; 0x28
 800fcca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fccc:	1c5f      	adds	r7, r3, #1
 800fcce:	971b      	str	r7, [sp, #108]	; 0x6c
 800fcd0:	785b      	ldrb	r3, [r3, #1]
 800fcd2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800fcd6:	f1b8 0f09 	cmp.w	r8, #9
 800fcda:	d937      	bls.n	800fd4c <_strtod_l+0x32c>
 800fcdc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fcde:	1a7f      	subs	r7, r7, r1
 800fce0:	2f08      	cmp	r7, #8
 800fce2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800fce6:	dc37      	bgt.n	800fd58 <_strtod_l+0x338>
 800fce8:	45be      	cmp	lr, r7
 800fcea:	bfa8      	it	ge
 800fcec:	46be      	movge	lr, r7
 800fcee:	f1bc 0f00 	cmp.w	ip, #0
 800fcf2:	d001      	beq.n	800fcf8 <_strtod_l+0x2d8>
 800fcf4:	f1ce 0e00 	rsb	lr, lr, #0
 800fcf8:	2c00      	cmp	r4, #0
 800fcfa:	d151      	bne.n	800fda0 <_strtod_l+0x380>
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	f47f aece 	bne.w	800fa9e <_strtod_l+0x7e>
 800fd02:	9a06      	ldr	r2, [sp, #24]
 800fd04:	2a00      	cmp	r2, #0
 800fd06:	f47f aeca 	bne.w	800fa9e <_strtod_l+0x7e>
 800fd0a:	9a04      	ldr	r2, [sp, #16]
 800fd0c:	2a00      	cmp	r2, #0
 800fd0e:	f47f aee4 	bne.w	800fada <_strtod_l+0xba>
 800fd12:	2b4e      	cmp	r3, #78	; 0x4e
 800fd14:	d027      	beq.n	800fd66 <_strtod_l+0x346>
 800fd16:	dc21      	bgt.n	800fd5c <_strtod_l+0x33c>
 800fd18:	2b49      	cmp	r3, #73	; 0x49
 800fd1a:	f47f aede 	bne.w	800fada <_strtod_l+0xba>
 800fd1e:	49a0      	ldr	r1, [pc, #640]	; (800ffa0 <_strtod_l+0x580>)
 800fd20:	a81b      	add	r0, sp, #108	; 0x6c
 800fd22:	f001 fea1 	bl	8011a68 <__match>
 800fd26:	2800      	cmp	r0, #0
 800fd28:	f43f aed7 	beq.w	800fada <_strtod_l+0xba>
 800fd2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fd2e:	499d      	ldr	r1, [pc, #628]	; (800ffa4 <_strtod_l+0x584>)
 800fd30:	3b01      	subs	r3, #1
 800fd32:	a81b      	add	r0, sp, #108	; 0x6c
 800fd34:	931b      	str	r3, [sp, #108]	; 0x6c
 800fd36:	f001 fe97 	bl	8011a68 <__match>
 800fd3a:	b910      	cbnz	r0, 800fd42 <_strtod_l+0x322>
 800fd3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fd3e:	3301      	adds	r3, #1
 800fd40:	931b      	str	r3, [sp, #108]	; 0x6c
 800fd42:	f8df b274 	ldr.w	fp, [pc, #628]	; 800ffb8 <_strtod_l+0x598>
 800fd46:	f04f 0a00 	mov.w	sl, #0
 800fd4a:	e6a8      	b.n	800fa9e <_strtod_l+0x7e>
 800fd4c:	210a      	movs	r1, #10
 800fd4e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800fd52:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fd56:	e7b8      	b.n	800fcca <_strtod_l+0x2aa>
 800fd58:	46be      	mov	lr, r7
 800fd5a:	e7c8      	b.n	800fcee <_strtod_l+0x2ce>
 800fd5c:	2b69      	cmp	r3, #105	; 0x69
 800fd5e:	d0de      	beq.n	800fd1e <_strtod_l+0x2fe>
 800fd60:	2b6e      	cmp	r3, #110	; 0x6e
 800fd62:	f47f aeba 	bne.w	800fada <_strtod_l+0xba>
 800fd66:	4990      	ldr	r1, [pc, #576]	; (800ffa8 <_strtod_l+0x588>)
 800fd68:	a81b      	add	r0, sp, #108	; 0x6c
 800fd6a:	f001 fe7d 	bl	8011a68 <__match>
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	f43f aeb3 	beq.w	800fada <_strtod_l+0xba>
 800fd74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	2b28      	cmp	r3, #40	; 0x28
 800fd7a:	d10e      	bne.n	800fd9a <_strtod_l+0x37a>
 800fd7c:	aa1e      	add	r2, sp, #120	; 0x78
 800fd7e:	498b      	ldr	r1, [pc, #556]	; (800ffac <_strtod_l+0x58c>)
 800fd80:	a81b      	add	r0, sp, #108	; 0x6c
 800fd82:	f001 fe85 	bl	8011a90 <__hexnan>
 800fd86:	2805      	cmp	r0, #5
 800fd88:	d107      	bne.n	800fd9a <_strtod_l+0x37a>
 800fd8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fd8c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800fd90:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fd94:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fd98:	e681      	b.n	800fa9e <_strtod_l+0x7e>
 800fd9a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ffc0 <_strtod_l+0x5a0>
 800fd9e:	e7d2      	b.n	800fd46 <_strtod_l+0x326>
 800fda0:	ebae 0302 	sub.w	r3, lr, r2
 800fda4:	9306      	str	r3, [sp, #24]
 800fda6:	9b05      	ldr	r3, [sp, #20]
 800fda8:	9807      	ldr	r0, [sp, #28]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	bf08      	it	eq
 800fdae:	4623      	moveq	r3, r4
 800fdb0:	2c10      	cmp	r4, #16
 800fdb2:	9305      	str	r3, [sp, #20]
 800fdb4:	46a0      	mov	r8, r4
 800fdb6:	bfa8      	it	ge
 800fdb8:	f04f 0810 	movge.w	r8, #16
 800fdbc:	f7f0 fbc2 	bl	8000544 <__aeabi_ui2d>
 800fdc0:	2c09      	cmp	r4, #9
 800fdc2:	4682      	mov	sl, r0
 800fdc4:	468b      	mov	fp, r1
 800fdc6:	dc13      	bgt.n	800fdf0 <_strtod_l+0x3d0>
 800fdc8:	9b06      	ldr	r3, [sp, #24]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	f43f ae67 	beq.w	800fa9e <_strtod_l+0x7e>
 800fdd0:	9b06      	ldr	r3, [sp, #24]
 800fdd2:	dd7a      	ble.n	800feca <_strtod_l+0x4aa>
 800fdd4:	2b16      	cmp	r3, #22
 800fdd6:	dc61      	bgt.n	800fe9c <_strtod_l+0x47c>
 800fdd8:	4a75      	ldr	r2, [pc, #468]	; (800ffb0 <_strtod_l+0x590>)
 800fdda:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800fdde:	e9de 0100 	ldrd	r0, r1, [lr]
 800fde2:	4652      	mov	r2, sl
 800fde4:	465b      	mov	r3, fp
 800fde6:	f7f0 fc27 	bl	8000638 <__aeabi_dmul>
 800fdea:	4682      	mov	sl, r0
 800fdec:	468b      	mov	fp, r1
 800fdee:	e656      	b.n	800fa9e <_strtod_l+0x7e>
 800fdf0:	4b6f      	ldr	r3, [pc, #444]	; (800ffb0 <_strtod_l+0x590>)
 800fdf2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fdf6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fdfa:	f7f0 fc1d 	bl	8000638 <__aeabi_dmul>
 800fdfe:	4606      	mov	r6, r0
 800fe00:	4628      	mov	r0, r5
 800fe02:	460f      	mov	r7, r1
 800fe04:	f7f0 fb9e 	bl	8000544 <__aeabi_ui2d>
 800fe08:	4602      	mov	r2, r0
 800fe0a:	460b      	mov	r3, r1
 800fe0c:	4630      	mov	r0, r6
 800fe0e:	4639      	mov	r1, r7
 800fe10:	f7f0 fa5c 	bl	80002cc <__adddf3>
 800fe14:	2c0f      	cmp	r4, #15
 800fe16:	4682      	mov	sl, r0
 800fe18:	468b      	mov	fp, r1
 800fe1a:	ddd5      	ble.n	800fdc8 <_strtod_l+0x3a8>
 800fe1c:	9b06      	ldr	r3, [sp, #24]
 800fe1e:	eba4 0808 	sub.w	r8, r4, r8
 800fe22:	4498      	add	r8, r3
 800fe24:	f1b8 0f00 	cmp.w	r8, #0
 800fe28:	f340 8096 	ble.w	800ff58 <_strtod_l+0x538>
 800fe2c:	f018 030f 	ands.w	r3, r8, #15
 800fe30:	d00a      	beq.n	800fe48 <_strtod_l+0x428>
 800fe32:	495f      	ldr	r1, [pc, #380]	; (800ffb0 <_strtod_l+0x590>)
 800fe34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fe38:	4652      	mov	r2, sl
 800fe3a:	465b      	mov	r3, fp
 800fe3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe40:	f7f0 fbfa 	bl	8000638 <__aeabi_dmul>
 800fe44:	4682      	mov	sl, r0
 800fe46:	468b      	mov	fp, r1
 800fe48:	f038 080f 	bics.w	r8, r8, #15
 800fe4c:	d073      	beq.n	800ff36 <_strtod_l+0x516>
 800fe4e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fe52:	dd47      	ble.n	800fee4 <_strtod_l+0x4c4>
 800fe54:	2400      	movs	r4, #0
 800fe56:	46a0      	mov	r8, r4
 800fe58:	9407      	str	r4, [sp, #28]
 800fe5a:	9405      	str	r4, [sp, #20]
 800fe5c:	2322      	movs	r3, #34	; 0x22
 800fe5e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ffb8 <_strtod_l+0x598>
 800fe62:	f8c9 3000 	str.w	r3, [r9]
 800fe66:	f04f 0a00 	mov.w	sl, #0
 800fe6a:	9b07      	ldr	r3, [sp, #28]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	f43f ae16 	beq.w	800fa9e <_strtod_l+0x7e>
 800fe72:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fe74:	4648      	mov	r0, r9
 800fe76:	f001 fef7 	bl	8011c68 <_Bfree>
 800fe7a:	9905      	ldr	r1, [sp, #20]
 800fe7c:	4648      	mov	r0, r9
 800fe7e:	f001 fef3 	bl	8011c68 <_Bfree>
 800fe82:	4641      	mov	r1, r8
 800fe84:	4648      	mov	r0, r9
 800fe86:	f001 feef 	bl	8011c68 <_Bfree>
 800fe8a:	9907      	ldr	r1, [sp, #28]
 800fe8c:	4648      	mov	r0, r9
 800fe8e:	f001 feeb 	bl	8011c68 <_Bfree>
 800fe92:	4621      	mov	r1, r4
 800fe94:	4648      	mov	r0, r9
 800fe96:	f001 fee7 	bl	8011c68 <_Bfree>
 800fe9a:	e600      	b.n	800fa9e <_strtod_l+0x7e>
 800fe9c:	9a06      	ldr	r2, [sp, #24]
 800fe9e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800fea2:	4293      	cmp	r3, r2
 800fea4:	dbba      	blt.n	800fe1c <_strtod_l+0x3fc>
 800fea6:	4d42      	ldr	r5, [pc, #264]	; (800ffb0 <_strtod_l+0x590>)
 800fea8:	f1c4 040f 	rsb	r4, r4, #15
 800feac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800feb0:	4652      	mov	r2, sl
 800feb2:	465b      	mov	r3, fp
 800feb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800feb8:	f7f0 fbbe 	bl	8000638 <__aeabi_dmul>
 800febc:	9b06      	ldr	r3, [sp, #24]
 800febe:	1b1c      	subs	r4, r3, r4
 800fec0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800fec4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fec8:	e78d      	b.n	800fde6 <_strtod_l+0x3c6>
 800feca:	f113 0f16 	cmn.w	r3, #22
 800fece:	dba5      	blt.n	800fe1c <_strtod_l+0x3fc>
 800fed0:	4a37      	ldr	r2, [pc, #220]	; (800ffb0 <_strtod_l+0x590>)
 800fed2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800fed6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800feda:	4650      	mov	r0, sl
 800fedc:	4659      	mov	r1, fp
 800fede:	f7f0 fcd5 	bl	800088c <__aeabi_ddiv>
 800fee2:	e782      	b.n	800fdea <_strtod_l+0x3ca>
 800fee4:	2300      	movs	r3, #0
 800fee6:	4e33      	ldr	r6, [pc, #204]	; (800ffb4 <_strtod_l+0x594>)
 800fee8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800feec:	4650      	mov	r0, sl
 800feee:	4659      	mov	r1, fp
 800fef0:	461d      	mov	r5, r3
 800fef2:	f1b8 0f01 	cmp.w	r8, #1
 800fef6:	dc21      	bgt.n	800ff3c <_strtod_l+0x51c>
 800fef8:	b10b      	cbz	r3, 800fefe <_strtod_l+0x4de>
 800fefa:	4682      	mov	sl, r0
 800fefc:	468b      	mov	fp, r1
 800fefe:	4b2d      	ldr	r3, [pc, #180]	; (800ffb4 <_strtod_l+0x594>)
 800ff00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ff04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ff08:	4652      	mov	r2, sl
 800ff0a:	465b      	mov	r3, fp
 800ff0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ff10:	f7f0 fb92 	bl	8000638 <__aeabi_dmul>
 800ff14:	4b28      	ldr	r3, [pc, #160]	; (800ffb8 <_strtod_l+0x598>)
 800ff16:	460a      	mov	r2, r1
 800ff18:	400b      	ands	r3, r1
 800ff1a:	4928      	ldr	r1, [pc, #160]	; (800ffbc <_strtod_l+0x59c>)
 800ff1c:	428b      	cmp	r3, r1
 800ff1e:	4682      	mov	sl, r0
 800ff20:	d898      	bhi.n	800fe54 <_strtod_l+0x434>
 800ff22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ff26:	428b      	cmp	r3, r1
 800ff28:	bf86      	itte	hi
 800ff2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ffc4 <_strtod_l+0x5a4>
 800ff2e:	f04f 3aff 	movhi.w	sl, #4294967295
 800ff32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ff36:	2300      	movs	r3, #0
 800ff38:	9304      	str	r3, [sp, #16]
 800ff3a:	e077      	b.n	801002c <_strtod_l+0x60c>
 800ff3c:	f018 0f01 	tst.w	r8, #1
 800ff40:	d006      	beq.n	800ff50 <_strtod_l+0x530>
 800ff42:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ff46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4a:	f7f0 fb75 	bl	8000638 <__aeabi_dmul>
 800ff4e:	2301      	movs	r3, #1
 800ff50:	3501      	adds	r5, #1
 800ff52:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ff56:	e7cc      	b.n	800fef2 <_strtod_l+0x4d2>
 800ff58:	d0ed      	beq.n	800ff36 <_strtod_l+0x516>
 800ff5a:	f1c8 0800 	rsb	r8, r8, #0
 800ff5e:	f018 020f 	ands.w	r2, r8, #15
 800ff62:	d00a      	beq.n	800ff7a <_strtod_l+0x55a>
 800ff64:	4b12      	ldr	r3, [pc, #72]	; (800ffb0 <_strtod_l+0x590>)
 800ff66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff6a:	4650      	mov	r0, sl
 800ff6c:	4659      	mov	r1, fp
 800ff6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff72:	f7f0 fc8b 	bl	800088c <__aeabi_ddiv>
 800ff76:	4682      	mov	sl, r0
 800ff78:	468b      	mov	fp, r1
 800ff7a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ff7e:	d0da      	beq.n	800ff36 <_strtod_l+0x516>
 800ff80:	f1b8 0f1f 	cmp.w	r8, #31
 800ff84:	dd20      	ble.n	800ffc8 <_strtod_l+0x5a8>
 800ff86:	2400      	movs	r4, #0
 800ff88:	46a0      	mov	r8, r4
 800ff8a:	9407      	str	r4, [sp, #28]
 800ff8c:	9405      	str	r4, [sp, #20]
 800ff8e:	2322      	movs	r3, #34	; 0x22
 800ff90:	f04f 0a00 	mov.w	sl, #0
 800ff94:	f04f 0b00 	mov.w	fp, #0
 800ff98:	f8c9 3000 	str.w	r3, [r9]
 800ff9c:	e765      	b.n	800fe6a <_strtod_l+0x44a>
 800ff9e:	bf00      	nop
 800ffa0:	08013b01 	.word	0x08013b01
 800ffa4:	08013b8b 	.word	0x08013b8b
 800ffa8:	08013b09 	.word	0x08013b09
 800ffac:	08013b4c 	.word	0x08013b4c
 800ffb0:	08013c30 	.word	0x08013c30
 800ffb4:	08013c08 	.word	0x08013c08
 800ffb8:	7ff00000 	.word	0x7ff00000
 800ffbc:	7ca00000 	.word	0x7ca00000
 800ffc0:	fff80000 	.word	0xfff80000
 800ffc4:	7fefffff 	.word	0x7fefffff
 800ffc8:	f018 0310 	ands.w	r3, r8, #16
 800ffcc:	bf18      	it	ne
 800ffce:	236a      	movne	r3, #106	; 0x6a
 800ffd0:	4da0      	ldr	r5, [pc, #640]	; (8010254 <_strtod_l+0x834>)
 800ffd2:	9304      	str	r3, [sp, #16]
 800ffd4:	4650      	mov	r0, sl
 800ffd6:	4659      	mov	r1, fp
 800ffd8:	2300      	movs	r3, #0
 800ffda:	f1b8 0f00 	cmp.w	r8, #0
 800ffde:	f300 810a 	bgt.w	80101f6 <_strtod_l+0x7d6>
 800ffe2:	b10b      	cbz	r3, 800ffe8 <_strtod_l+0x5c8>
 800ffe4:	4682      	mov	sl, r0
 800ffe6:	468b      	mov	fp, r1
 800ffe8:	9b04      	ldr	r3, [sp, #16]
 800ffea:	b1bb      	cbz	r3, 801001c <_strtod_l+0x5fc>
 800ffec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800fff0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	4659      	mov	r1, fp
 800fff8:	dd10      	ble.n	801001c <_strtod_l+0x5fc>
 800fffa:	2b1f      	cmp	r3, #31
 800fffc:	f340 8107 	ble.w	801020e <_strtod_l+0x7ee>
 8010000:	2b34      	cmp	r3, #52	; 0x34
 8010002:	bfde      	ittt	le
 8010004:	3b20      	suble	r3, #32
 8010006:	f04f 32ff 	movle.w	r2, #4294967295
 801000a:	fa02 f303 	lslle.w	r3, r2, r3
 801000e:	f04f 0a00 	mov.w	sl, #0
 8010012:	bfcc      	ite	gt
 8010014:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010018:	ea03 0b01 	andle.w	fp, r3, r1
 801001c:	2200      	movs	r2, #0
 801001e:	2300      	movs	r3, #0
 8010020:	4650      	mov	r0, sl
 8010022:	4659      	mov	r1, fp
 8010024:	f7f0 fd70 	bl	8000b08 <__aeabi_dcmpeq>
 8010028:	2800      	cmp	r0, #0
 801002a:	d1ac      	bne.n	800ff86 <_strtod_l+0x566>
 801002c:	9b07      	ldr	r3, [sp, #28]
 801002e:	9300      	str	r3, [sp, #0]
 8010030:	9a05      	ldr	r2, [sp, #20]
 8010032:	9908      	ldr	r1, [sp, #32]
 8010034:	4623      	mov	r3, r4
 8010036:	4648      	mov	r0, r9
 8010038:	f001 fe68 	bl	8011d0c <__s2b>
 801003c:	9007      	str	r0, [sp, #28]
 801003e:	2800      	cmp	r0, #0
 8010040:	f43f af08 	beq.w	800fe54 <_strtod_l+0x434>
 8010044:	9a06      	ldr	r2, [sp, #24]
 8010046:	9b06      	ldr	r3, [sp, #24]
 8010048:	2a00      	cmp	r2, #0
 801004a:	f1c3 0300 	rsb	r3, r3, #0
 801004e:	bfa8      	it	ge
 8010050:	2300      	movge	r3, #0
 8010052:	930e      	str	r3, [sp, #56]	; 0x38
 8010054:	2400      	movs	r4, #0
 8010056:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801005a:	9316      	str	r3, [sp, #88]	; 0x58
 801005c:	46a0      	mov	r8, r4
 801005e:	9b07      	ldr	r3, [sp, #28]
 8010060:	4648      	mov	r0, r9
 8010062:	6859      	ldr	r1, [r3, #4]
 8010064:	f001 fdcc 	bl	8011c00 <_Balloc>
 8010068:	9005      	str	r0, [sp, #20]
 801006a:	2800      	cmp	r0, #0
 801006c:	f43f aef6 	beq.w	800fe5c <_strtod_l+0x43c>
 8010070:	9b07      	ldr	r3, [sp, #28]
 8010072:	691a      	ldr	r2, [r3, #16]
 8010074:	3202      	adds	r2, #2
 8010076:	f103 010c 	add.w	r1, r3, #12
 801007a:	0092      	lsls	r2, r2, #2
 801007c:	300c      	adds	r0, #12
 801007e:	f7fe fd69 	bl	800eb54 <memcpy>
 8010082:	aa1e      	add	r2, sp, #120	; 0x78
 8010084:	a91d      	add	r1, sp, #116	; 0x74
 8010086:	ec4b ab10 	vmov	d0, sl, fp
 801008a:	4648      	mov	r0, r9
 801008c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010090:	f002 f8f8 	bl	8012284 <__d2b>
 8010094:	901c      	str	r0, [sp, #112]	; 0x70
 8010096:	2800      	cmp	r0, #0
 8010098:	f43f aee0 	beq.w	800fe5c <_strtod_l+0x43c>
 801009c:	2101      	movs	r1, #1
 801009e:	4648      	mov	r0, r9
 80100a0:	f001 fec0 	bl	8011e24 <__i2b>
 80100a4:	4680      	mov	r8, r0
 80100a6:	2800      	cmp	r0, #0
 80100a8:	f43f aed8 	beq.w	800fe5c <_strtod_l+0x43c>
 80100ac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80100ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80100b0:	2e00      	cmp	r6, #0
 80100b2:	bfab      	itete	ge
 80100b4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80100b6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80100b8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80100ba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80100bc:	bfac      	ite	ge
 80100be:	18f7      	addge	r7, r6, r3
 80100c0:	1b9d      	sublt	r5, r3, r6
 80100c2:	9b04      	ldr	r3, [sp, #16]
 80100c4:	1af6      	subs	r6, r6, r3
 80100c6:	4416      	add	r6, r2
 80100c8:	4b63      	ldr	r3, [pc, #396]	; (8010258 <_strtod_l+0x838>)
 80100ca:	3e01      	subs	r6, #1
 80100cc:	429e      	cmp	r6, r3
 80100ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80100d2:	f280 80af 	bge.w	8010234 <_strtod_l+0x814>
 80100d6:	1b9b      	subs	r3, r3, r6
 80100d8:	2b1f      	cmp	r3, #31
 80100da:	eba2 0203 	sub.w	r2, r2, r3
 80100de:	f04f 0101 	mov.w	r1, #1
 80100e2:	f300 809b 	bgt.w	801021c <_strtod_l+0x7fc>
 80100e6:	fa01 f303 	lsl.w	r3, r1, r3
 80100ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80100ec:	2300      	movs	r3, #0
 80100ee:	930a      	str	r3, [sp, #40]	; 0x28
 80100f0:	18be      	adds	r6, r7, r2
 80100f2:	9b04      	ldr	r3, [sp, #16]
 80100f4:	42b7      	cmp	r7, r6
 80100f6:	4415      	add	r5, r2
 80100f8:	441d      	add	r5, r3
 80100fa:	463b      	mov	r3, r7
 80100fc:	bfa8      	it	ge
 80100fe:	4633      	movge	r3, r6
 8010100:	42ab      	cmp	r3, r5
 8010102:	bfa8      	it	ge
 8010104:	462b      	movge	r3, r5
 8010106:	2b00      	cmp	r3, #0
 8010108:	bfc2      	ittt	gt
 801010a:	1af6      	subgt	r6, r6, r3
 801010c:	1aed      	subgt	r5, r5, r3
 801010e:	1aff      	subgt	r7, r7, r3
 8010110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010112:	b1bb      	cbz	r3, 8010144 <_strtod_l+0x724>
 8010114:	4641      	mov	r1, r8
 8010116:	461a      	mov	r2, r3
 8010118:	4648      	mov	r0, r9
 801011a:	f001 ff23 	bl	8011f64 <__pow5mult>
 801011e:	4680      	mov	r8, r0
 8010120:	2800      	cmp	r0, #0
 8010122:	f43f ae9b 	beq.w	800fe5c <_strtod_l+0x43c>
 8010126:	4601      	mov	r1, r0
 8010128:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801012a:	4648      	mov	r0, r9
 801012c:	f001 fe83 	bl	8011e36 <__multiply>
 8010130:	900c      	str	r0, [sp, #48]	; 0x30
 8010132:	2800      	cmp	r0, #0
 8010134:	f43f ae92 	beq.w	800fe5c <_strtod_l+0x43c>
 8010138:	991c      	ldr	r1, [sp, #112]	; 0x70
 801013a:	4648      	mov	r0, r9
 801013c:	f001 fd94 	bl	8011c68 <_Bfree>
 8010140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010142:	931c      	str	r3, [sp, #112]	; 0x70
 8010144:	2e00      	cmp	r6, #0
 8010146:	dc7a      	bgt.n	801023e <_strtod_l+0x81e>
 8010148:	9b06      	ldr	r3, [sp, #24]
 801014a:	2b00      	cmp	r3, #0
 801014c:	dd08      	ble.n	8010160 <_strtod_l+0x740>
 801014e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010150:	9905      	ldr	r1, [sp, #20]
 8010152:	4648      	mov	r0, r9
 8010154:	f001 ff06 	bl	8011f64 <__pow5mult>
 8010158:	9005      	str	r0, [sp, #20]
 801015a:	2800      	cmp	r0, #0
 801015c:	f43f ae7e 	beq.w	800fe5c <_strtod_l+0x43c>
 8010160:	2d00      	cmp	r5, #0
 8010162:	dd08      	ble.n	8010176 <_strtod_l+0x756>
 8010164:	462a      	mov	r2, r5
 8010166:	9905      	ldr	r1, [sp, #20]
 8010168:	4648      	mov	r0, r9
 801016a:	f001 ff49 	bl	8012000 <__lshift>
 801016e:	9005      	str	r0, [sp, #20]
 8010170:	2800      	cmp	r0, #0
 8010172:	f43f ae73 	beq.w	800fe5c <_strtod_l+0x43c>
 8010176:	2f00      	cmp	r7, #0
 8010178:	dd08      	ble.n	801018c <_strtod_l+0x76c>
 801017a:	4641      	mov	r1, r8
 801017c:	463a      	mov	r2, r7
 801017e:	4648      	mov	r0, r9
 8010180:	f001 ff3e 	bl	8012000 <__lshift>
 8010184:	4680      	mov	r8, r0
 8010186:	2800      	cmp	r0, #0
 8010188:	f43f ae68 	beq.w	800fe5c <_strtod_l+0x43c>
 801018c:	9a05      	ldr	r2, [sp, #20]
 801018e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010190:	4648      	mov	r0, r9
 8010192:	f001 ffa3 	bl	80120dc <__mdiff>
 8010196:	4604      	mov	r4, r0
 8010198:	2800      	cmp	r0, #0
 801019a:	f43f ae5f 	beq.w	800fe5c <_strtod_l+0x43c>
 801019e:	68c3      	ldr	r3, [r0, #12]
 80101a0:	930c      	str	r3, [sp, #48]	; 0x30
 80101a2:	2300      	movs	r3, #0
 80101a4:	60c3      	str	r3, [r0, #12]
 80101a6:	4641      	mov	r1, r8
 80101a8:	f001 ff7e 	bl	80120a8 <__mcmp>
 80101ac:	2800      	cmp	r0, #0
 80101ae:	da55      	bge.n	801025c <_strtod_l+0x83c>
 80101b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101b2:	b9e3      	cbnz	r3, 80101ee <_strtod_l+0x7ce>
 80101b4:	f1ba 0f00 	cmp.w	sl, #0
 80101b8:	d119      	bne.n	80101ee <_strtod_l+0x7ce>
 80101ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80101be:	b9b3      	cbnz	r3, 80101ee <_strtod_l+0x7ce>
 80101c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80101c4:	0d1b      	lsrs	r3, r3, #20
 80101c6:	051b      	lsls	r3, r3, #20
 80101c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80101cc:	d90f      	bls.n	80101ee <_strtod_l+0x7ce>
 80101ce:	6963      	ldr	r3, [r4, #20]
 80101d0:	b913      	cbnz	r3, 80101d8 <_strtod_l+0x7b8>
 80101d2:	6923      	ldr	r3, [r4, #16]
 80101d4:	2b01      	cmp	r3, #1
 80101d6:	dd0a      	ble.n	80101ee <_strtod_l+0x7ce>
 80101d8:	4621      	mov	r1, r4
 80101da:	2201      	movs	r2, #1
 80101dc:	4648      	mov	r0, r9
 80101de:	f001 ff0f 	bl	8012000 <__lshift>
 80101e2:	4641      	mov	r1, r8
 80101e4:	4604      	mov	r4, r0
 80101e6:	f001 ff5f 	bl	80120a8 <__mcmp>
 80101ea:	2800      	cmp	r0, #0
 80101ec:	dc67      	bgt.n	80102be <_strtod_l+0x89e>
 80101ee:	9b04      	ldr	r3, [sp, #16]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d171      	bne.n	80102d8 <_strtod_l+0x8b8>
 80101f4:	e63d      	b.n	800fe72 <_strtod_l+0x452>
 80101f6:	f018 0f01 	tst.w	r8, #1
 80101fa:	d004      	beq.n	8010206 <_strtod_l+0x7e6>
 80101fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010200:	f7f0 fa1a 	bl	8000638 <__aeabi_dmul>
 8010204:	2301      	movs	r3, #1
 8010206:	ea4f 0868 	mov.w	r8, r8, asr #1
 801020a:	3508      	adds	r5, #8
 801020c:	e6e5      	b.n	800ffda <_strtod_l+0x5ba>
 801020e:	f04f 32ff 	mov.w	r2, #4294967295
 8010212:	fa02 f303 	lsl.w	r3, r2, r3
 8010216:	ea03 0a0a 	and.w	sl, r3, sl
 801021a:	e6ff      	b.n	801001c <_strtod_l+0x5fc>
 801021c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010220:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010224:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010228:	36e2      	adds	r6, #226	; 0xe2
 801022a:	fa01 f306 	lsl.w	r3, r1, r6
 801022e:	930a      	str	r3, [sp, #40]	; 0x28
 8010230:	910f      	str	r1, [sp, #60]	; 0x3c
 8010232:	e75d      	b.n	80100f0 <_strtod_l+0x6d0>
 8010234:	2300      	movs	r3, #0
 8010236:	930a      	str	r3, [sp, #40]	; 0x28
 8010238:	2301      	movs	r3, #1
 801023a:	930f      	str	r3, [sp, #60]	; 0x3c
 801023c:	e758      	b.n	80100f0 <_strtod_l+0x6d0>
 801023e:	4632      	mov	r2, r6
 8010240:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010242:	4648      	mov	r0, r9
 8010244:	f001 fedc 	bl	8012000 <__lshift>
 8010248:	901c      	str	r0, [sp, #112]	; 0x70
 801024a:	2800      	cmp	r0, #0
 801024c:	f47f af7c 	bne.w	8010148 <_strtod_l+0x728>
 8010250:	e604      	b.n	800fe5c <_strtod_l+0x43c>
 8010252:	bf00      	nop
 8010254:	08013b60 	.word	0x08013b60
 8010258:	fffffc02 	.word	0xfffffc02
 801025c:	465d      	mov	r5, fp
 801025e:	f040 8086 	bne.w	801036e <_strtod_l+0x94e>
 8010262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010264:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010268:	b32a      	cbz	r2, 80102b6 <_strtod_l+0x896>
 801026a:	4aaf      	ldr	r2, [pc, #700]	; (8010528 <_strtod_l+0xb08>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d153      	bne.n	8010318 <_strtod_l+0x8f8>
 8010270:	9b04      	ldr	r3, [sp, #16]
 8010272:	4650      	mov	r0, sl
 8010274:	b1d3      	cbz	r3, 80102ac <_strtod_l+0x88c>
 8010276:	4aad      	ldr	r2, [pc, #692]	; (801052c <_strtod_l+0xb0c>)
 8010278:	402a      	ands	r2, r5
 801027a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801027e:	f04f 31ff 	mov.w	r1, #4294967295
 8010282:	d816      	bhi.n	80102b2 <_strtod_l+0x892>
 8010284:	0d12      	lsrs	r2, r2, #20
 8010286:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801028a:	fa01 f303 	lsl.w	r3, r1, r3
 801028e:	4298      	cmp	r0, r3
 8010290:	d142      	bne.n	8010318 <_strtod_l+0x8f8>
 8010292:	4ba7      	ldr	r3, [pc, #668]	; (8010530 <_strtod_l+0xb10>)
 8010294:	429d      	cmp	r5, r3
 8010296:	d102      	bne.n	801029e <_strtod_l+0x87e>
 8010298:	3001      	adds	r0, #1
 801029a:	f43f addf 	beq.w	800fe5c <_strtod_l+0x43c>
 801029e:	4ba3      	ldr	r3, [pc, #652]	; (801052c <_strtod_l+0xb0c>)
 80102a0:	402b      	ands	r3, r5
 80102a2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80102a6:	f04f 0a00 	mov.w	sl, #0
 80102aa:	e7a0      	b.n	80101ee <_strtod_l+0x7ce>
 80102ac:	f04f 33ff 	mov.w	r3, #4294967295
 80102b0:	e7ed      	b.n	801028e <_strtod_l+0x86e>
 80102b2:	460b      	mov	r3, r1
 80102b4:	e7eb      	b.n	801028e <_strtod_l+0x86e>
 80102b6:	bb7b      	cbnz	r3, 8010318 <_strtod_l+0x8f8>
 80102b8:	f1ba 0f00 	cmp.w	sl, #0
 80102bc:	d12c      	bne.n	8010318 <_strtod_l+0x8f8>
 80102be:	9904      	ldr	r1, [sp, #16]
 80102c0:	4a9a      	ldr	r2, [pc, #616]	; (801052c <_strtod_l+0xb0c>)
 80102c2:	465b      	mov	r3, fp
 80102c4:	b1f1      	cbz	r1, 8010304 <_strtod_l+0x8e4>
 80102c6:	ea02 010b 	and.w	r1, r2, fp
 80102ca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80102ce:	dc19      	bgt.n	8010304 <_strtod_l+0x8e4>
 80102d0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80102d4:	f77f ae5b 	ble.w	800ff8e <_strtod_l+0x56e>
 80102d8:	4a96      	ldr	r2, [pc, #600]	; (8010534 <_strtod_l+0xb14>)
 80102da:	2300      	movs	r3, #0
 80102dc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80102e0:	4650      	mov	r0, sl
 80102e2:	4659      	mov	r1, fp
 80102e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80102e8:	f7f0 f9a6 	bl	8000638 <__aeabi_dmul>
 80102ec:	4682      	mov	sl, r0
 80102ee:	468b      	mov	fp, r1
 80102f0:	2900      	cmp	r1, #0
 80102f2:	f47f adbe 	bne.w	800fe72 <_strtod_l+0x452>
 80102f6:	2800      	cmp	r0, #0
 80102f8:	f47f adbb 	bne.w	800fe72 <_strtod_l+0x452>
 80102fc:	2322      	movs	r3, #34	; 0x22
 80102fe:	f8c9 3000 	str.w	r3, [r9]
 8010302:	e5b6      	b.n	800fe72 <_strtod_l+0x452>
 8010304:	4013      	ands	r3, r2
 8010306:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801030a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801030e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010312:	f04f 3aff 	mov.w	sl, #4294967295
 8010316:	e76a      	b.n	80101ee <_strtod_l+0x7ce>
 8010318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801031a:	b193      	cbz	r3, 8010342 <_strtod_l+0x922>
 801031c:	422b      	tst	r3, r5
 801031e:	f43f af66 	beq.w	80101ee <_strtod_l+0x7ce>
 8010322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010324:	9a04      	ldr	r2, [sp, #16]
 8010326:	4650      	mov	r0, sl
 8010328:	4659      	mov	r1, fp
 801032a:	b173      	cbz	r3, 801034a <_strtod_l+0x92a>
 801032c:	f7ff fb5a 	bl	800f9e4 <sulp>
 8010330:	4602      	mov	r2, r0
 8010332:	460b      	mov	r3, r1
 8010334:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010338:	f7ef ffc8 	bl	80002cc <__adddf3>
 801033c:	4682      	mov	sl, r0
 801033e:	468b      	mov	fp, r1
 8010340:	e755      	b.n	80101ee <_strtod_l+0x7ce>
 8010342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010344:	ea13 0f0a 	tst.w	r3, sl
 8010348:	e7e9      	b.n	801031e <_strtod_l+0x8fe>
 801034a:	f7ff fb4b 	bl	800f9e4 <sulp>
 801034e:	4602      	mov	r2, r0
 8010350:	460b      	mov	r3, r1
 8010352:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010356:	f7ef ffb7 	bl	80002c8 <__aeabi_dsub>
 801035a:	2200      	movs	r2, #0
 801035c:	2300      	movs	r3, #0
 801035e:	4682      	mov	sl, r0
 8010360:	468b      	mov	fp, r1
 8010362:	f7f0 fbd1 	bl	8000b08 <__aeabi_dcmpeq>
 8010366:	2800      	cmp	r0, #0
 8010368:	f47f ae11 	bne.w	800ff8e <_strtod_l+0x56e>
 801036c:	e73f      	b.n	80101ee <_strtod_l+0x7ce>
 801036e:	4641      	mov	r1, r8
 8010370:	4620      	mov	r0, r4
 8010372:	f001 ffd6 	bl	8012322 <__ratio>
 8010376:	ec57 6b10 	vmov	r6, r7, d0
 801037a:	2200      	movs	r2, #0
 801037c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010380:	ee10 0a10 	vmov	r0, s0
 8010384:	4639      	mov	r1, r7
 8010386:	f7f0 fbd3 	bl	8000b30 <__aeabi_dcmple>
 801038a:	2800      	cmp	r0, #0
 801038c:	d077      	beq.n	801047e <_strtod_l+0xa5e>
 801038e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010390:	2b00      	cmp	r3, #0
 8010392:	d04a      	beq.n	801042a <_strtod_l+0xa0a>
 8010394:	4b68      	ldr	r3, [pc, #416]	; (8010538 <_strtod_l+0xb18>)
 8010396:	2200      	movs	r2, #0
 8010398:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801039c:	4f66      	ldr	r7, [pc, #408]	; (8010538 <_strtod_l+0xb18>)
 801039e:	2600      	movs	r6, #0
 80103a0:	4b62      	ldr	r3, [pc, #392]	; (801052c <_strtod_l+0xb0c>)
 80103a2:	402b      	ands	r3, r5
 80103a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80103a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80103a8:	4b64      	ldr	r3, [pc, #400]	; (801053c <_strtod_l+0xb1c>)
 80103aa:	429a      	cmp	r2, r3
 80103ac:	f040 80ce 	bne.w	801054c <_strtod_l+0xb2c>
 80103b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80103b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80103b8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80103bc:	ec4b ab10 	vmov	d0, sl, fp
 80103c0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80103c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80103c8:	f001 fee6 	bl	8012198 <__ulp>
 80103cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80103d0:	ec53 2b10 	vmov	r2, r3, d0
 80103d4:	f7f0 f930 	bl	8000638 <__aeabi_dmul>
 80103d8:	4652      	mov	r2, sl
 80103da:	465b      	mov	r3, fp
 80103dc:	f7ef ff76 	bl	80002cc <__adddf3>
 80103e0:	460b      	mov	r3, r1
 80103e2:	4952      	ldr	r1, [pc, #328]	; (801052c <_strtod_l+0xb0c>)
 80103e4:	4a56      	ldr	r2, [pc, #344]	; (8010540 <_strtod_l+0xb20>)
 80103e6:	4019      	ands	r1, r3
 80103e8:	4291      	cmp	r1, r2
 80103ea:	4682      	mov	sl, r0
 80103ec:	d95b      	bls.n	80104a6 <_strtod_l+0xa86>
 80103ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103f0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80103f4:	4293      	cmp	r3, r2
 80103f6:	d103      	bne.n	8010400 <_strtod_l+0x9e0>
 80103f8:	9b08      	ldr	r3, [sp, #32]
 80103fa:	3301      	adds	r3, #1
 80103fc:	f43f ad2e 	beq.w	800fe5c <_strtod_l+0x43c>
 8010400:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8010530 <_strtod_l+0xb10>
 8010404:	f04f 3aff 	mov.w	sl, #4294967295
 8010408:	991c      	ldr	r1, [sp, #112]	; 0x70
 801040a:	4648      	mov	r0, r9
 801040c:	f001 fc2c 	bl	8011c68 <_Bfree>
 8010410:	9905      	ldr	r1, [sp, #20]
 8010412:	4648      	mov	r0, r9
 8010414:	f001 fc28 	bl	8011c68 <_Bfree>
 8010418:	4641      	mov	r1, r8
 801041a:	4648      	mov	r0, r9
 801041c:	f001 fc24 	bl	8011c68 <_Bfree>
 8010420:	4621      	mov	r1, r4
 8010422:	4648      	mov	r0, r9
 8010424:	f001 fc20 	bl	8011c68 <_Bfree>
 8010428:	e619      	b.n	801005e <_strtod_l+0x63e>
 801042a:	f1ba 0f00 	cmp.w	sl, #0
 801042e:	d11a      	bne.n	8010466 <_strtod_l+0xa46>
 8010430:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010434:	b9eb      	cbnz	r3, 8010472 <_strtod_l+0xa52>
 8010436:	2200      	movs	r2, #0
 8010438:	4b3f      	ldr	r3, [pc, #252]	; (8010538 <_strtod_l+0xb18>)
 801043a:	4630      	mov	r0, r6
 801043c:	4639      	mov	r1, r7
 801043e:	f7f0 fb6d 	bl	8000b1c <__aeabi_dcmplt>
 8010442:	b9c8      	cbnz	r0, 8010478 <_strtod_l+0xa58>
 8010444:	4630      	mov	r0, r6
 8010446:	4639      	mov	r1, r7
 8010448:	2200      	movs	r2, #0
 801044a:	4b3e      	ldr	r3, [pc, #248]	; (8010544 <_strtod_l+0xb24>)
 801044c:	f7f0 f8f4 	bl	8000638 <__aeabi_dmul>
 8010450:	4606      	mov	r6, r0
 8010452:	460f      	mov	r7, r1
 8010454:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010458:	9618      	str	r6, [sp, #96]	; 0x60
 801045a:	9319      	str	r3, [sp, #100]	; 0x64
 801045c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8010460:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010464:	e79c      	b.n	80103a0 <_strtod_l+0x980>
 8010466:	f1ba 0f01 	cmp.w	sl, #1
 801046a:	d102      	bne.n	8010472 <_strtod_l+0xa52>
 801046c:	2d00      	cmp	r5, #0
 801046e:	f43f ad8e 	beq.w	800ff8e <_strtod_l+0x56e>
 8010472:	2200      	movs	r2, #0
 8010474:	4b34      	ldr	r3, [pc, #208]	; (8010548 <_strtod_l+0xb28>)
 8010476:	e78f      	b.n	8010398 <_strtod_l+0x978>
 8010478:	2600      	movs	r6, #0
 801047a:	4f32      	ldr	r7, [pc, #200]	; (8010544 <_strtod_l+0xb24>)
 801047c:	e7ea      	b.n	8010454 <_strtod_l+0xa34>
 801047e:	4b31      	ldr	r3, [pc, #196]	; (8010544 <_strtod_l+0xb24>)
 8010480:	4630      	mov	r0, r6
 8010482:	4639      	mov	r1, r7
 8010484:	2200      	movs	r2, #0
 8010486:	f7f0 f8d7 	bl	8000638 <__aeabi_dmul>
 801048a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801048c:	4606      	mov	r6, r0
 801048e:	460f      	mov	r7, r1
 8010490:	b933      	cbnz	r3, 80104a0 <_strtod_l+0xa80>
 8010492:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010496:	9010      	str	r0, [sp, #64]	; 0x40
 8010498:	9311      	str	r3, [sp, #68]	; 0x44
 801049a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801049e:	e7df      	b.n	8010460 <_strtod_l+0xa40>
 80104a0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80104a4:	e7f9      	b.n	801049a <_strtod_l+0xa7a>
 80104a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80104aa:	9b04      	ldr	r3, [sp, #16]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d1ab      	bne.n	8010408 <_strtod_l+0x9e8>
 80104b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80104b4:	0d1b      	lsrs	r3, r3, #20
 80104b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80104b8:	051b      	lsls	r3, r3, #20
 80104ba:	429a      	cmp	r2, r3
 80104bc:	465d      	mov	r5, fp
 80104be:	d1a3      	bne.n	8010408 <_strtod_l+0x9e8>
 80104c0:	4639      	mov	r1, r7
 80104c2:	4630      	mov	r0, r6
 80104c4:	f7f0 fb68 	bl	8000b98 <__aeabi_d2iz>
 80104c8:	f7f0 f84c 	bl	8000564 <__aeabi_i2d>
 80104cc:	460b      	mov	r3, r1
 80104ce:	4602      	mov	r2, r0
 80104d0:	4639      	mov	r1, r7
 80104d2:	4630      	mov	r0, r6
 80104d4:	f7ef fef8 	bl	80002c8 <__aeabi_dsub>
 80104d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104da:	4606      	mov	r6, r0
 80104dc:	460f      	mov	r7, r1
 80104de:	b933      	cbnz	r3, 80104ee <_strtod_l+0xace>
 80104e0:	f1ba 0f00 	cmp.w	sl, #0
 80104e4:	d103      	bne.n	80104ee <_strtod_l+0xace>
 80104e6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80104ea:	2d00      	cmp	r5, #0
 80104ec:	d06d      	beq.n	80105ca <_strtod_l+0xbaa>
 80104ee:	a30a      	add	r3, pc, #40	; (adr r3, 8010518 <_strtod_l+0xaf8>)
 80104f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f4:	4630      	mov	r0, r6
 80104f6:	4639      	mov	r1, r7
 80104f8:	f7f0 fb10 	bl	8000b1c <__aeabi_dcmplt>
 80104fc:	2800      	cmp	r0, #0
 80104fe:	f47f acb8 	bne.w	800fe72 <_strtod_l+0x452>
 8010502:	a307      	add	r3, pc, #28	; (adr r3, 8010520 <_strtod_l+0xb00>)
 8010504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010508:	4630      	mov	r0, r6
 801050a:	4639      	mov	r1, r7
 801050c:	f7f0 fb24 	bl	8000b58 <__aeabi_dcmpgt>
 8010510:	2800      	cmp	r0, #0
 8010512:	f43f af79 	beq.w	8010408 <_strtod_l+0x9e8>
 8010516:	e4ac      	b.n	800fe72 <_strtod_l+0x452>
 8010518:	94a03595 	.word	0x94a03595
 801051c:	3fdfffff 	.word	0x3fdfffff
 8010520:	35afe535 	.word	0x35afe535
 8010524:	3fe00000 	.word	0x3fe00000
 8010528:	000fffff 	.word	0x000fffff
 801052c:	7ff00000 	.word	0x7ff00000
 8010530:	7fefffff 	.word	0x7fefffff
 8010534:	39500000 	.word	0x39500000
 8010538:	3ff00000 	.word	0x3ff00000
 801053c:	7fe00000 	.word	0x7fe00000
 8010540:	7c9fffff 	.word	0x7c9fffff
 8010544:	3fe00000 	.word	0x3fe00000
 8010548:	bff00000 	.word	0xbff00000
 801054c:	9b04      	ldr	r3, [sp, #16]
 801054e:	b333      	cbz	r3, 801059e <_strtod_l+0xb7e>
 8010550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010552:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010556:	d822      	bhi.n	801059e <_strtod_l+0xb7e>
 8010558:	a327      	add	r3, pc, #156	; (adr r3, 80105f8 <_strtod_l+0xbd8>)
 801055a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055e:	4630      	mov	r0, r6
 8010560:	4639      	mov	r1, r7
 8010562:	f7f0 fae5 	bl	8000b30 <__aeabi_dcmple>
 8010566:	b1a0      	cbz	r0, 8010592 <_strtod_l+0xb72>
 8010568:	4639      	mov	r1, r7
 801056a:	4630      	mov	r0, r6
 801056c:	f7f0 fb3c 	bl	8000be8 <__aeabi_d2uiz>
 8010570:	2800      	cmp	r0, #0
 8010572:	bf08      	it	eq
 8010574:	2001      	moveq	r0, #1
 8010576:	f7ef ffe5 	bl	8000544 <__aeabi_ui2d>
 801057a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801057c:	4606      	mov	r6, r0
 801057e:	460f      	mov	r7, r1
 8010580:	bb03      	cbnz	r3, 80105c4 <_strtod_l+0xba4>
 8010582:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010586:	9012      	str	r0, [sp, #72]	; 0x48
 8010588:	9313      	str	r3, [sp, #76]	; 0x4c
 801058a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801058e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010594:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010596:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801059a:	1a9b      	subs	r3, r3, r2
 801059c:	930b      	str	r3, [sp, #44]	; 0x2c
 801059e:	ed9d 0b08 	vldr	d0, [sp, #32]
 80105a2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80105a6:	f001 fdf7 	bl	8012198 <__ulp>
 80105aa:	4650      	mov	r0, sl
 80105ac:	ec53 2b10 	vmov	r2, r3, d0
 80105b0:	4659      	mov	r1, fp
 80105b2:	f7f0 f841 	bl	8000638 <__aeabi_dmul>
 80105b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80105ba:	f7ef fe87 	bl	80002cc <__adddf3>
 80105be:	4682      	mov	sl, r0
 80105c0:	468b      	mov	fp, r1
 80105c2:	e772      	b.n	80104aa <_strtod_l+0xa8a>
 80105c4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80105c8:	e7df      	b.n	801058a <_strtod_l+0xb6a>
 80105ca:	a30d      	add	r3, pc, #52	; (adr r3, 8010600 <_strtod_l+0xbe0>)
 80105cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d0:	f7f0 faa4 	bl	8000b1c <__aeabi_dcmplt>
 80105d4:	e79c      	b.n	8010510 <_strtod_l+0xaf0>
 80105d6:	2300      	movs	r3, #0
 80105d8:	930d      	str	r3, [sp, #52]	; 0x34
 80105da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80105dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80105de:	6013      	str	r3, [r2, #0]
 80105e0:	f7ff ba61 	b.w	800faa6 <_strtod_l+0x86>
 80105e4:	2b65      	cmp	r3, #101	; 0x65
 80105e6:	f04f 0200 	mov.w	r2, #0
 80105ea:	f43f ab4e 	beq.w	800fc8a <_strtod_l+0x26a>
 80105ee:	2101      	movs	r1, #1
 80105f0:	4614      	mov	r4, r2
 80105f2:	9104      	str	r1, [sp, #16]
 80105f4:	f7ff bacb 	b.w	800fb8e <_strtod_l+0x16e>
 80105f8:	ffc00000 	.word	0xffc00000
 80105fc:	41dfffff 	.word	0x41dfffff
 8010600:	94a03595 	.word	0x94a03595
 8010604:	3fcfffff 	.word	0x3fcfffff

08010608 <_strtod_r>:
 8010608:	4b05      	ldr	r3, [pc, #20]	; (8010620 <_strtod_r+0x18>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	b410      	push	{r4}
 801060e:	6a1b      	ldr	r3, [r3, #32]
 8010610:	4c04      	ldr	r4, [pc, #16]	; (8010624 <_strtod_r+0x1c>)
 8010612:	2b00      	cmp	r3, #0
 8010614:	bf08      	it	eq
 8010616:	4623      	moveq	r3, r4
 8010618:	f85d 4b04 	ldr.w	r4, [sp], #4
 801061c:	f7ff ba00 	b.w	800fa20 <_strtod_l>
 8010620:	2000064c 	.word	0x2000064c
 8010624:	200006b0 	.word	0x200006b0

08010628 <_strtol_l.isra.0>:
 8010628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801062c:	4680      	mov	r8, r0
 801062e:	4689      	mov	r9, r1
 8010630:	4692      	mov	sl, r2
 8010632:	461e      	mov	r6, r3
 8010634:	460f      	mov	r7, r1
 8010636:	463d      	mov	r5, r7
 8010638:	9808      	ldr	r0, [sp, #32]
 801063a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801063e:	f001 fab7 	bl	8011bb0 <__locale_ctype_ptr_l>
 8010642:	4420      	add	r0, r4
 8010644:	7843      	ldrb	r3, [r0, #1]
 8010646:	f013 0308 	ands.w	r3, r3, #8
 801064a:	d132      	bne.n	80106b2 <_strtol_l.isra.0+0x8a>
 801064c:	2c2d      	cmp	r4, #45	; 0x2d
 801064e:	d132      	bne.n	80106b6 <_strtol_l.isra.0+0x8e>
 8010650:	787c      	ldrb	r4, [r7, #1]
 8010652:	1cbd      	adds	r5, r7, #2
 8010654:	2201      	movs	r2, #1
 8010656:	2e00      	cmp	r6, #0
 8010658:	d05d      	beq.n	8010716 <_strtol_l.isra.0+0xee>
 801065a:	2e10      	cmp	r6, #16
 801065c:	d109      	bne.n	8010672 <_strtol_l.isra.0+0x4a>
 801065e:	2c30      	cmp	r4, #48	; 0x30
 8010660:	d107      	bne.n	8010672 <_strtol_l.isra.0+0x4a>
 8010662:	782b      	ldrb	r3, [r5, #0]
 8010664:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010668:	2b58      	cmp	r3, #88	; 0x58
 801066a:	d14f      	bne.n	801070c <_strtol_l.isra.0+0xe4>
 801066c:	786c      	ldrb	r4, [r5, #1]
 801066e:	2610      	movs	r6, #16
 8010670:	3502      	adds	r5, #2
 8010672:	2a00      	cmp	r2, #0
 8010674:	bf14      	ite	ne
 8010676:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801067a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801067e:	2700      	movs	r7, #0
 8010680:	fbb1 fcf6 	udiv	ip, r1, r6
 8010684:	4638      	mov	r0, r7
 8010686:	fb06 1e1c 	mls	lr, r6, ip, r1
 801068a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801068e:	2b09      	cmp	r3, #9
 8010690:	d817      	bhi.n	80106c2 <_strtol_l.isra.0+0x9a>
 8010692:	461c      	mov	r4, r3
 8010694:	42a6      	cmp	r6, r4
 8010696:	dd23      	ble.n	80106e0 <_strtol_l.isra.0+0xb8>
 8010698:	1c7b      	adds	r3, r7, #1
 801069a:	d007      	beq.n	80106ac <_strtol_l.isra.0+0x84>
 801069c:	4584      	cmp	ip, r0
 801069e:	d31c      	bcc.n	80106da <_strtol_l.isra.0+0xb2>
 80106a0:	d101      	bne.n	80106a6 <_strtol_l.isra.0+0x7e>
 80106a2:	45a6      	cmp	lr, r4
 80106a4:	db19      	blt.n	80106da <_strtol_l.isra.0+0xb2>
 80106a6:	fb00 4006 	mla	r0, r0, r6, r4
 80106aa:	2701      	movs	r7, #1
 80106ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80106b0:	e7eb      	b.n	801068a <_strtol_l.isra.0+0x62>
 80106b2:	462f      	mov	r7, r5
 80106b4:	e7bf      	b.n	8010636 <_strtol_l.isra.0+0xe>
 80106b6:	2c2b      	cmp	r4, #43	; 0x2b
 80106b8:	bf04      	itt	eq
 80106ba:	1cbd      	addeq	r5, r7, #2
 80106bc:	787c      	ldrbeq	r4, [r7, #1]
 80106be:	461a      	mov	r2, r3
 80106c0:	e7c9      	b.n	8010656 <_strtol_l.isra.0+0x2e>
 80106c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80106c6:	2b19      	cmp	r3, #25
 80106c8:	d801      	bhi.n	80106ce <_strtol_l.isra.0+0xa6>
 80106ca:	3c37      	subs	r4, #55	; 0x37
 80106cc:	e7e2      	b.n	8010694 <_strtol_l.isra.0+0x6c>
 80106ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80106d2:	2b19      	cmp	r3, #25
 80106d4:	d804      	bhi.n	80106e0 <_strtol_l.isra.0+0xb8>
 80106d6:	3c57      	subs	r4, #87	; 0x57
 80106d8:	e7dc      	b.n	8010694 <_strtol_l.isra.0+0x6c>
 80106da:	f04f 37ff 	mov.w	r7, #4294967295
 80106de:	e7e5      	b.n	80106ac <_strtol_l.isra.0+0x84>
 80106e0:	1c7b      	adds	r3, r7, #1
 80106e2:	d108      	bne.n	80106f6 <_strtol_l.isra.0+0xce>
 80106e4:	2322      	movs	r3, #34	; 0x22
 80106e6:	f8c8 3000 	str.w	r3, [r8]
 80106ea:	4608      	mov	r0, r1
 80106ec:	f1ba 0f00 	cmp.w	sl, #0
 80106f0:	d107      	bne.n	8010702 <_strtol_l.isra.0+0xda>
 80106f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106f6:	b102      	cbz	r2, 80106fa <_strtol_l.isra.0+0xd2>
 80106f8:	4240      	negs	r0, r0
 80106fa:	f1ba 0f00 	cmp.w	sl, #0
 80106fe:	d0f8      	beq.n	80106f2 <_strtol_l.isra.0+0xca>
 8010700:	b10f      	cbz	r7, 8010706 <_strtol_l.isra.0+0xde>
 8010702:	f105 39ff 	add.w	r9, r5, #4294967295
 8010706:	f8ca 9000 	str.w	r9, [sl]
 801070a:	e7f2      	b.n	80106f2 <_strtol_l.isra.0+0xca>
 801070c:	2430      	movs	r4, #48	; 0x30
 801070e:	2e00      	cmp	r6, #0
 8010710:	d1af      	bne.n	8010672 <_strtol_l.isra.0+0x4a>
 8010712:	2608      	movs	r6, #8
 8010714:	e7ad      	b.n	8010672 <_strtol_l.isra.0+0x4a>
 8010716:	2c30      	cmp	r4, #48	; 0x30
 8010718:	d0a3      	beq.n	8010662 <_strtol_l.isra.0+0x3a>
 801071a:	260a      	movs	r6, #10
 801071c:	e7a9      	b.n	8010672 <_strtol_l.isra.0+0x4a>
	...

08010720 <_strtol_r>:
 8010720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010722:	4c06      	ldr	r4, [pc, #24]	; (801073c <_strtol_r+0x1c>)
 8010724:	4d06      	ldr	r5, [pc, #24]	; (8010740 <_strtol_r+0x20>)
 8010726:	6824      	ldr	r4, [r4, #0]
 8010728:	6a24      	ldr	r4, [r4, #32]
 801072a:	2c00      	cmp	r4, #0
 801072c:	bf08      	it	eq
 801072e:	462c      	moveq	r4, r5
 8010730:	9400      	str	r4, [sp, #0]
 8010732:	f7ff ff79 	bl	8010628 <_strtol_l.isra.0>
 8010736:	b003      	add	sp, #12
 8010738:	bd30      	pop	{r4, r5, pc}
 801073a:	bf00      	nop
 801073c:	2000064c 	.word	0x2000064c
 8010740:	200006b0 	.word	0x200006b0

08010744 <quorem>:
 8010744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010748:	6903      	ldr	r3, [r0, #16]
 801074a:	690c      	ldr	r4, [r1, #16]
 801074c:	42a3      	cmp	r3, r4
 801074e:	4680      	mov	r8, r0
 8010750:	f2c0 8082 	blt.w	8010858 <quorem+0x114>
 8010754:	3c01      	subs	r4, #1
 8010756:	f101 0714 	add.w	r7, r1, #20
 801075a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801075e:	f100 0614 	add.w	r6, r0, #20
 8010762:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8010766:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801076a:	eb06 030c 	add.w	r3, r6, ip
 801076e:	3501      	adds	r5, #1
 8010770:	eb07 090c 	add.w	r9, r7, ip
 8010774:	9301      	str	r3, [sp, #4]
 8010776:	fbb0 f5f5 	udiv	r5, r0, r5
 801077a:	b395      	cbz	r5, 80107e2 <quorem+0x9e>
 801077c:	f04f 0a00 	mov.w	sl, #0
 8010780:	4638      	mov	r0, r7
 8010782:	46b6      	mov	lr, r6
 8010784:	46d3      	mov	fp, sl
 8010786:	f850 2b04 	ldr.w	r2, [r0], #4
 801078a:	b293      	uxth	r3, r2
 801078c:	fb05 a303 	mla	r3, r5, r3, sl
 8010790:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010794:	b29b      	uxth	r3, r3
 8010796:	ebab 0303 	sub.w	r3, fp, r3
 801079a:	0c12      	lsrs	r2, r2, #16
 801079c:	f8de b000 	ldr.w	fp, [lr]
 80107a0:	fb05 a202 	mla	r2, r5, r2, sl
 80107a4:	fa13 f38b 	uxtah	r3, r3, fp
 80107a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80107ac:	fa1f fb82 	uxth.w	fp, r2
 80107b0:	f8de 2000 	ldr.w	r2, [lr]
 80107b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80107b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80107bc:	b29b      	uxth	r3, r3
 80107be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107c2:	4581      	cmp	r9, r0
 80107c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80107c8:	f84e 3b04 	str.w	r3, [lr], #4
 80107cc:	d2db      	bcs.n	8010786 <quorem+0x42>
 80107ce:	f856 300c 	ldr.w	r3, [r6, ip]
 80107d2:	b933      	cbnz	r3, 80107e2 <quorem+0x9e>
 80107d4:	9b01      	ldr	r3, [sp, #4]
 80107d6:	3b04      	subs	r3, #4
 80107d8:	429e      	cmp	r6, r3
 80107da:	461a      	mov	r2, r3
 80107dc:	d330      	bcc.n	8010840 <quorem+0xfc>
 80107de:	f8c8 4010 	str.w	r4, [r8, #16]
 80107e2:	4640      	mov	r0, r8
 80107e4:	f001 fc60 	bl	80120a8 <__mcmp>
 80107e8:	2800      	cmp	r0, #0
 80107ea:	db25      	blt.n	8010838 <quorem+0xf4>
 80107ec:	3501      	adds	r5, #1
 80107ee:	4630      	mov	r0, r6
 80107f0:	f04f 0c00 	mov.w	ip, #0
 80107f4:	f857 2b04 	ldr.w	r2, [r7], #4
 80107f8:	f8d0 e000 	ldr.w	lr, [r0]
 80107fc:	b293      	uxth	r3, r2
 80107fe:	ebac 0303 	sub.w	r3, ip, r3
 8010802:	0c12      	lsrs	r2, r2, #16
 8010804:	fa13 f38e 	uxtah	r3, r3, lr
 8010808:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801080c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010810:	b29b      	uxth	r3, r3
 8010812:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010816:	45b9      	cmp	r9, r7
 8010818:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801081c:	f840 3b04 	str.w	r3, [r0], #4
 8010820:	d2e8      	bcs.n	80107f4 <quorem+0xb0>
 8010822:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010826:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801082a:	b92a      	cbnz	r2, 8010838 <quorem+0xf4>
 801082c:	3b04      	subs	r3, #4
 801082e:	429e      	cmp	r6, r3
 8010830:	461a      	mov	r2, r3
 8010832:	d30b      	bcc.n	801084c <quorem+0x108>
 8010834:	f8c8 4010 	str.w	r4, [r8, #16]
 8010838:	4628      	mov	r0, r5
 801083a:	b003      	add	sp, #12
 801083c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010840:	6812      	ldr	r2, [r2, #0]
 8010842:	3b04      	subs	r3, #4
 8010844:	2a00      	cmp	r2, #0
 8010846:	d1ca      	bne.n	80107de <quorem+0x9a>
 8010848:	3c01      	subs	r4, #1
 801084a:	e7c5      	b.n	80107d8 <quorem+0x94>
 801084c:	6812      	ldr	r2, [r2, #0]
 801084e:	3b04      	subs	r3, #4
 8010850:	2a00      	cmp	r2, #0
 8010852:	d1ef      	bne.n	8010834 <quorem+0xf0>
 8010854:	3c01      	subs	r4, #1
 8010856:	e7ea      	b.n	801082e <quorem+0xea>
 8010858:	2000      	movs	r0, #0
 801085a:	e7ee      	b.n	801083a <quorem+0xf6>
 801085c:	0000      	movs	r0, r0
	...

08010860 <_dtoa_r>:
 8010860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010864:	ec57 6b10 	vmov	r6, r7, d0
 8010868:	b097      	sub	sp, #92	; 0x5c
 801086a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801086c:	9106      	str	r1, [sp, #24]
 801086e:	4604      	mov	r4, r0
 8010870:	920b      	str	r2, [sp, #44]	; 0x2c
 8010872:	9312      	str	r3, [sp, #72]	; 0x48
 8010874:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010878:	e9cd 6700 	strd	r6, r7, [sp]
 801087c:	b93d      	cbnz	r5, 801088e <_dtoa_r+0x2e>
 801087e:	2010      	movs	r0, #16
 8010880:	f7fe f958 	bl	800eb34 <malloc>
 8010884:	6260      	str	r0, [r4, #36]	; 0x24
 8010886:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801088a:	6005      	str	r5, [r0, #0]
 801088c:	60c5      	str	r5, [r0, #12]
 801088e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010890:	6819      	ldr	r1, [r3, #0]
 8010892:	b151      	cbz	r1, 80108aa <_dtoa_r+0x4a>
 8010894:	685a      	ldr	r2, [r3, #4]
 8010896:	604a      	str	r2, [r1, #4]
 8010898:	2301      	movs	r3, #1
 801089a:	4093      	lsls	r3, r2
 801089c:	608b      	str	r3, [r1, #8]
 801089e:	4620      	mov	r0, r4
 80108a0:	f001 f9e2 	bl	8011c68 <_Bfree>
 80108a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108a6:	2200      	movs	r2, #0
 80108a8:	601a      	str	r2, [r3, #0]
 80108aa:	1e3b      	subs	r3, r7, #0
 80108ac:	bfbb      	ittet	lt
 80108ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80108b2:	9301      	strlt	r3, [sp, #4]
 80108b4:	2300      	movge	r3, #0
 80108b6:	2201      	movlt	r2, #1
 80108b8:	bfac      	ite	ge
 80108ba:	f8c8 3000 	strge.w	r3, [r8]
 80108be:	f8c8 2000 	strlt.w	r2, [r8]
 80108c2:	4baf      	ldr	r3, [pc, #700]	; (8010b80 <_dtoa_r+0x320>)
 80108c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80108c8:	ea33 0308 	bics.w	r3, r3, r8
 80108cc:	d114      	bne.n	80108f8 <_dtoa_r+0x98>
 80108ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80108d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80108d4:	6013      	str	r3, [r2, #0]
 80108d6:	9b00      	ldr	r3, [sp, #0]
 80108d8:	b923      	cbnz	r3, 80108e4 <_dtoa_r+0x84>
 80108da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80108de:	2800      	cmp	r0, #0
 80108e0:	f000 8542 	beq.w	8011368 <_dtoa_r+0xb08>
 80108e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8010b94 <_dtoa_r+0x334>
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	f000 8544 	beq.w	8011378 <_dtoa_r+0xb18>
 80108f0:	f10b 0303 	add.w	r3, fp, #3
 80108f4:	f000 bd3e 	b.w	8011374 <_dtoa_r+0xb14>
 80108f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80108fc:	2200      	movs	r2, #0
 80108fe:	2300      	movs	r3, #0
 8010900:	4630      	mov	r0, r6
 8010902:	4639      	mov	r1, r7
 8010904:	f7f0 f900 	bl	8000b08 <__aeabi_dcmpeq>
 8010908:	4681      	mov	r9, r0
 801090a:	b168      	cbz	r0, 8010928 <_dtoa_r+0xc8>
 801090c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801090e:	2301      	movs	r3, #1
 8010910:	6013      	str	r3, [r2, #0]
 8010912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010914:	2b00      	cmp	r3, #0
 8010916:	f000 8524 	beq.w	8011362 <_dtoa_r+0xb02>
 801091a:	4b9a      	ldr	r3, [pc, #616]	; (8010b84 <_dtoa_r+0x324>)
 801091c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801091e:	f103 3bff 	add.w	fp, r3, #4294967295
 8010922:	6013      	str	r3, [r2, #0]
 8010924:	f000 bd28 	b.w	8011378 <_dtoa_r+0xb18>
 8010928:	aa14      	add	r2, sp, #80	; 0x50
 801092a:	a915      	add	r1, sp, #84	; 0x54
 801092c:	ec47 6b10 	vmov	d0, r6, r7
 8010930:	4620      	mov	r0, r4
 8010932:	f001 fca7 	bl	8012284 <__d2b>
 8010936:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801093a:	9004      	str	r0, [sp, #16]
 801093c:	2d00      	cmp	r5, #0
 801093e:	d07c      	beq.n	8010a3a <_dtoa_r+0x1da>
 8010940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010944:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010948:	46b2      	mov	sl, r6
 801094a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801094e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010952:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8010956:	2200      	movs	r2, #0
 8010958:	4b8b      	ldr	r3, [pc, #556]	; (8010b88 <_dtoa_r+0x328>)
 801095a:	4650      	mov	r0, sl
 801095c:	4659      	mov	r1, fp
 801095e:	f7ef fcb3 	bl	80002c8 <__aeabi_dsub>
 8010962:	a381      	add	r3, pc, #516	; (adr r3, 8010b68 <_dtoa_r+0x308>)
 8010964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010968:	f7ef fe66 	bl	8000638 <__aeabi_dmul>
 801096c:	a380      	add	r3, pc, #512	; (adr r3, 8010b70 <_dtoa_r+0x310>)
 801096e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010972:	f7ef fcab 	bl	80002cc <__adddf3>
 8010976:	4606      	mov	r6, r0
 8010978:	4628      	mov	r0, r5
 801097a:	460f      	mov	r7, r1
 801097c:	f7ef fdf2 	bl	8000564 <__aeabi_i2d>
 8010980:	a37d      	add	r3, pc, #500	; (adr r3, 8010b78 <_dtoa_r+0x318>)
 8010982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010986:	f7ef fe57 	bl	8000638 <__aeabi_dmul>
 801098a:	4602      	mov	r2, r0
 801098c:	460b      	mov	r3, r1
 801098e:	4630      	mov	r0, r6
 8010990:	4639      	mov	r1, r7
 8010992:	f7ef fc9b 	bl	80002cc <__adddf3>
 8010996:	4606      	mov	r6, r0
 8010998:	460f      	mov	r7, r1
 801099a:	f7f0 f8fd 	bl	8000b98 <__aeabi_d2iz>
 801099e:	2200      	movs	r2, #0
 80109a0:	4682      	mov	sl, r0
 80109a2:	2300      	movs	r3, #0
 80109a4:	4630      	mov	r0, r6
 80109a6:	4639      	mov	r1, r7
 80109a8:	f7f0 f8b8 	bl	8000b1c <__aeabi_dcmplt>
 80109ac:	b148      	cbz	r0, 80109c2 <_dtoa_r+0x162>
 80109ae:	4650      	mov	r0, sl
 80109b0:	f7ef fdd8 	bl	8000564 <__aeabi_i2d>
 80109b4:	4632      	mov	r2, r6
 80109b6:	463b      	mov	r3, r7
 80109b8:	f7f0 f8a6 	bl	8000b08 <__aeabi_dcmpeq>
 80109bc:	b908      	cbnz	r0, 80109c2 <_dtoa_r+0x162>
 80109be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80109c2:	f1ba 0f16 	cmp.w	sl, #22
 80109c6:	d859      	bhi.n	8010a7c <_dtoa_r+0x21c>
 80109c8:	4970      	ldr	r1, [pc, #448]	; (8010b8c <_dtoa_r+0x32c>)
 80109ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80109ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109d6:	f7f0 f8bf 	bl	8000b58 <__aeabi_dcmpgt>
 80109da:	2800      	cmp	r0, #0
 80109dc:	d050      	beq.n	8010a80 <_dtoa_r+0x220>
 80109de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80109e2:	2300      	movs	r3, #0
 80109e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80109e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80109e8:	1b5d      	subs	r5, r3, r5
 80109ea:	f1b5 0801 	subs.w	r8, r5, #1
 80109ee:	bf49      	itett	mi
 80109f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80109f4:	2300      	movpl	r3, #0
 80109f6:	9305      	strmi	r3, [sp, #20]
 80109f8:	f04f 0800 	movmi.w	r8, #0
 80109fc:	bf58      	it	pl
 80109fe:	9305      	strpl	r3, [sp, #20]
 8010a00:	f1ba 0f00 	cmp.w	sl, #0
 8010a04:	db3e      	blt.n	8010a84 <_dtoa_r+0x224>
 8010a06:	2300      	movs	r3, #0
 8010a08:	44d0      	add	r8, sl
 8010a0a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010a0e:	9307      	str	r3, [sp, #28]
 8010a10:	9b06      	ldr	r3, [sp, #24]
 8010a12:	2b09      	cmp	r3, #9
 8010a14:	f200 8090 	bhi.w	8010b38 <_dtoa_r+0x2d8>
 8010a18:	2b05      	cmp	r3, #5
 8010a1a:	bfc4      	itt	gt
 8010a1c:	3b04      	subgt	r3, #4
 8010a1e:	9306      	strgt	r3, [sp, #24]
 8010a20:	9b06      	ldr	r3, [sp, #24]
 8010a22:	f1a3 0302 	sub.w	r3, r3, #2
 8010a26:	bfcc      	ite	gt
 8010a28:	2500      	movgt	r5, #0
 8010a2a:	2501      	movle	r5, #1
 8010a2c:	2b03      	cmp	r3, #3
 8010a2e:	f200 808f 	bhi.w	8010b50 <_dtoa_r+0x2f0>
 8010a32:	e8df f003 	tbb	[pc, r3]
 8010a36:	7f7d      	.short	0x7f7d
 8010a38:	7131      	.short	0x7131
 8010a3a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8010a3e:	441d      	add	r5, r3
 8010a40:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010a44:	2820      	cmp	r0, #32
 8010a46:	dd13      	ble.n	8010a70 <_dtoa_r+0x210>
 8010a48:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8010a4c:	9b00      	ldr	r3, [sp, #0]
 8010a4e:	fa08 f800 	lsl.w	r8, r8, r0
 8010a52:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010a56:	fa23 f000 	lsr.w	r0, r3, r0
 8010a5a:	ea48 0000 	orr.w	r0, r8, r0
 8010a5e:	f7ef fd71 	bl	8000544 <__aeabi_ui2d>
 8010a62:	2301      	movs	r3, #1
 8010a64:	4682      	mov	sl, r0
 8010a66:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8010a6a:	3d01      	subs	r5, #1
 8010a6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8010a6e:	e772      	b.n	8010956 <_dtoa_r+0xf6>
 8010a70:	9b00      	ldr	r3, [sp, #0]
 8010a72:	f1c0 0020 	rsb	r0, r0, #32
 8010a76:	fa03 f000 	lsl.w	r0, r3, r0
 8010a7a:	e7f0      	b.n	8010a5e <_dtoa_r+0x1fe>
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e7b1      	b.n	80109e4 <_dtoa_r+0x184>
 8010a80:	900f      	str	r0, [sp, #60]	; 0x3c
 8010a82:	e7b0      	b.n	80109e6 <_dtoa_r+0x186>
 8010a84:	9b05      	ldr	r3, [sp, #20]
 8010a86:	eba3 030a 	sub.w	r3, r3, sl
 8010a8a:	9305      	str	r3, [sp, #20]
 8010a8c:	f1ca 0300 	rsb	r3, sl, #0
 8010a90:	9307      	str	r3, [sp, #28]
 8010a92:	2300      	movs	r3, #0
 8010a94:	930e      	str	r3, [sp, #56]	; 0x38
 8010a96:	e7bb      	b.n	8010a10 <_dtoa_r+0x1b0>
 8010a98:	2301      	movs	r3, #1
 8010a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8010a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	dd59      	ble.n	8010b56 <_dtoa_r+0x2f6>
 8010aa2:	9302      	str	r3, [sp, #8]
 8010aa4:	4699      	mov	r9, r3
 8010aa6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	6072      	str	r2, [r6, #4]
 8010aac:	2204      	movs	r2, #4
 8010aae:	f102 0014 	add.w	r0, r2, #20
 8010ab2:	4298      	cmp	r0, r3
 8010ab4:	6871      	ldr	r1, [r6, #4]
 8010ab6:	d953      	bls.n	8010b60 <_dtoa_r+0x300>
 8010ab8:	4620      	mov	r0, r4
 8010aba:	f001 f8a1 	bl	8011c00 <_Balloc>
 8010abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ac0:	6030      	str	r0, [r6, #0]
 8010ac2:	f1b9 0f0e 	cmp.w	r9, #14
 8010ac6:	f8d3 b000 	ldr.w	fp, [r3]
 8010aca:	f200 80e6 	bhi.w	8010c9a <_dtoa_r+0x43a>
 8010ace:	2d00      	cmp	r5, #0
 8010ad0:	f000 80e3 	beq.w	8010c9a <_dtoa_r+0x43a>
 8010ad4:	ed9d 7b00 	vldr	d7, [sp]
 8010ad8:	f1ba 0f00 	cmp.w	sl, #0
 8010adc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010ae0:	dd74      	ble.n	8010bcc <_dtoa_r+0x36c>
 8010ae2:	4a2a      	ldr	r2, [pc, #168]	; (8010b8c <_dtoa_r+0x32c>)
 8010ae4:	f00a 030f 	and.w	r3, sl, #15
 8010ae8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010aec:	ed93 7b00 	vldr	d7, [r3]
 8010af0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8010af4:	06f0      	lsls	r0, r6, #27
 8010af6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010afa:	d565      	bpl.n	8010bc8 <_dtoa_r+0x368>
 8010afc:	4b24      	ldr	r3, [pc, #144]	; (8010b90 <_dtoa_r+0x330>)
 8010afe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010b02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010b06:	f7ef fec1 	bl	800088c <__aeabi_ddiv>
 8010b0a:	e9cd 0100 	strd	r0, r1, [sp]
 8010b0e:	f006 060f 	and.w	r6, r6, #15
 8010b12:	2503      	movs	r5, #3
 8010b14:	4f1e      	ldr	r7, [pc, #120]	; (8010b90 <_dtoa_r+0x330>)
 8010b16:	e04c      	b.n	8010bb2 <_dtoa_r+0x352>
 8010b18:	2301      	movs	r3, #1
 8010b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8010b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b1e:	4453      	add	r3, sl
 8010b20:	f103 0901 	add.w	r9, r3, #1
 8010b24:	9302      	str	r3, [sp, #8]
 8010b26:	464b      	mov	r3, r9
 8010b28:	2b01      	cmp	r3, #1
 8010b2a:	bfb8      	it	lt
 8010b2c:	2301      	movlt	r3, #1
 8010b2e:	e7ba      	b.n	8010aa6 <_dtoa_r+0x246>
 8010b30:	2300      	movs	r3, #0
 8010b32:	e7b2      	b.n	8010a9a <_dtoa_r+0x23a>
 8010b34:	2300      	movs	r3, #0
 8010b36:	e7f0      	b.n	8010b1a <_dtoa_r+0x2ba>
 8010b38:	2501      	movs	r5, #1
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	9306      	str	r3, [sp, #24]
 8010b3e:	950a      	str	r5, [sp, #40]	; 0x28
 8010b40:	f04f 33ff 	mov.w	r3, #4294967295
 8010b44:	9302      	str	r3, [sp, #8]
 8010b46:	4699      	mov	r9, r3
 8010b48:	2200      	movs	r2, #0
 8010b4a:	2312      	movs	r3, #18
 8010b4c:	920b      	str	r2, [sp, #44]	; 0x2c
 8010b4e:	e7aa      	b.n	8010aa6 <_dtoa_r+0x246>
 8010b50:	2301      	movs	r3, #1
 8010b52:	930a      	str	r3, [sp, #40]	; 0x28
 8010b54:	e7f4      	b.n	8010b40 <_dtoa_r+0x2e0>
 8010b56:	2301      	movs	r3, #1
 8010b58:	9302      	str	r3, [sp, #8]
 8010b5a:	4699      	mov	r9, r3
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	e7f5      	b.n	8010b4c <_dtoa_r+0x2ec>
 8010b60:	3101      	adds	r1, #1
 8010b62:	6071      	str	r1, [r6, #4]
 8010b64:	0052      	lsls	r2, r2, #1
 8010b66:	e7a2      	b.n	8010aae <_dtoa_r+0x24e>
 8010b68:	636f4361 	.word	0x636f4361
 8010b6c:	3fd287a7 	.word	0x3fd287a7
 8010b70:	8b60c8b3 	.word	0x8b60c8b3
 8010b74:	3fc68a28 	.word	0x3fc68a28
 8010b78:	509f79fb 	.word	0x509f79fb
 8010b7c:	3fd34413 	.word	0x3fd34413
 8010b80:	7ff00000 	.word	0x7ff00000
 8010b84:	08013b0d 	.word	0x08013b0d
 8010b88:	3ff80000 	.word	0x3ff80000
 8010b8c:	08013c30 	.word	0x08013c30
 8010b90:	08013c08 	.word	0x08013c08
 8010b94:	08013b91 	.word	0x08013b91
 8010b98:	07f1      	lsls	r1, r6, #31
 8010b9a:	d508      	bpl.n	8010bae <_dtoa_r+0x34e>
 8010b9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ba4:	f7ef fd48 	bl	8000638 <__aeabi_dmul>
 8010ba8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010bac:	3501      	adds	r5, #1
 8010bae:	1076      	asrs	r6, r6, #1
 8010bb0:	3708      	adds	r7, #8
 8010bb2:	2e00      	cmp	r6, #0
 8010bb4:	d1f0      	bne.n	8010b98 <_dtoa_r+0x338>
 8010bb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010bba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010bbe:	f7ef fe65 	bl	800088c <__aeabi_ddiv>
 8010bc2:	e9cd 0100 	strd	r0, r1, [sp]
 8010bc6:	e01a      	b.n	8010bfe <_dtoa_r+0x39e>
 8010bc8:	2502      	movs	r5, #2
 8010bca:	e7a3      	b.n	8010b14 <_dtoa_r+0x2b4>
 8010bcc:	f000 80a0 	beq.w	8010d10 <_dtoa_r+0x4b0>
 8010bd0:	f1ca 0600 	rsb	r6, sl, #0
 8010bd4:	4b9f      	ldr	r3, [pc, #636]	; (8010e54 <_dtoa_r+0x5f4>)
 8010bd6:	4fa0      	ldr	r7, [pc, #640]	; (8010e58 <_dtoa_r+0x5f8>)
 8010bd8:	f006 020f 	and.w	r2, r6, #15
 8010bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010be8:	f7ef fd26 	bl	8000638 <__aeabi_dmul>
 8010bec:	e9cd 0100 	strd	r0, r1, [sp]
 8010bf0:	1136      	asrs	r6, r6, #4
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	2502      	movs	r5, #2
 8010bf6:	2e00      	cmp	r6, #0
 8010bf8:	d17f      	bne.n	8010cfa <_dtoa_r+0x49a>
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d1e1      	bne.n	8010bc2 <_dtoa_r+0x362>
 8010bfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	f000 8087 	beq.w	8010d14 <_dtoa_r+0x4b4>
 8010c06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	4b93      	ldr	r3, [pc, #588]	; (8010e5c <_dtoa_r+0x5fc>)
 8010c0e:	4630      	mov	r0, r6
 8010c10:	4639      	mov	r1, r7
 8010c12:	f7ef ff83 	bl	8000b1c <__aeabi_dcmplt>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	d07c      	beq.n	8010d14 <_dtoa_r+0x4b4>
 8010c1a:	f1b9 0f00 	cmp.w	r9, #0
 8010c1e:	d079      	beq.n	8010d14 <_dtoa_r+0x4b4>
 8010c20:	9b02      	ldr	r3, [sp, #8]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	dd35      	ble.n	8010c92 <_dtoa_r+0x432>
 8010c26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010c2a:	9308      	str	r3, [sp, #32]
 8010c2c:	4639      	mov	r1, r7
 8010c2e:	2200      	movs	r2, #0
 8010c30:	4b8b      	ldr	r3, [pc, #556]	; (8010e60 <_dtoa_r+0x600>)
 8010c32:	4630      	mov	r0, r6
 8010c34:	f7ef fd00 	bl	8000638 <__aeabi_dmul>
 8010c38:	e9cd 0100 	strd	r0, r1, [sp]
 8010c3c:	9f02      	ldr	r7, [sp, #8]
 8010c3e:	3501      	adds	r5, #1
 8010c40:	4628      	mov	r0, r5
 8010c42:	f7ef fc8f 	bl	8000564 <__aeabi_i2d>
 8010c46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c4a:	f7ef fcf5 	bl	8000638 <__aeabi_dmul>
 8010c4e:	2200      	movs	r2, #0
 8010c50:	4b84      	ldr	r3, [pc, #528]	; (8010e64 <_dtoa_r+0x604>)
 8010c52:	f7ef fb3b 	bl	80002cc <__adddf3>
 8010c56:	4605      	mov	r5, r0
 8010c58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010c5c:	2f00      	cmp	r7, #0
 8010c5e:	d15d      	bne.n	8010d1c <_dtoa_r+0x4bc>
 8010c60:	2200      	movs	r2, #0
 8010c62:	4b81      	ldr	r3, [pc, #516]	; (8010e68 <_dtoa_r+0x608>)
 8010c64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c68:	f7ef fb2e 	bl	80002c8 <__aeabi_dsub>
 8010c6c:	462a      	mov	r2, r5
 8010c6e:	4633      	mov	r3, r6
 8010c70:	e9cd 0100 	strd	r0, r1, [sp]
 8010c74:	f7ef ff70 	bl	8000b58 <__aeabi_dcmpgt>
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	f040 8288 	bne.w	801118e <_dtoa_r+0x92e>
 8010c7e:	462a      	mov	r2, r5
 8010c80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010c84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c88:	f7ef ff48 	bl	8000b1c <__aeabi_dcmplt>
 8010c8c:	2800      	cmp	r0, #0
 8010c8e:	f040 827c 	bne.w	801118a <_dtoa_r+0x92a>
 8010c92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010c96:	e9cd 2300 	strd	r2, r3, [sp]
 8010c9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f2c0 8150 	blt.w	8010f42 <_dtoa_r+0x6e2>
 8010ca2:	f1ba 0f0e 	cmp.w	sl, #14
 8010ca6:	f300 814c 	bgt.w	8010f42 <_dtoa_r+0x6e2>
 8010caa:	4b6a      	ldr	r3, [pc, #424]	; (8010e54 <_dtoa_r+0x5f4>)
 8010cac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010cb0:	ed93 7b00 	vldr	d7, [r3]
 8010cb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010cbc:	f280 80d8 	bge.w	8010e70 <_dtoa_r+0x610>
 8010cc0:	f1b9 0f00 	cmp.w	r9, #0
 8010cc4:	f300 80d4 	bgt.w	8010e70 <_dtoa_r+0x610>
 8010cc8:	f040 825e 	bne.w	8011188 <_dtoa_r+0x928>
 8010ccc:	2200      	movs	r2, #0
 8010cce:	4b66      	ldr	r3, [pc, #408]	; (8010e68 <_dtoa_r+0x608>)
 8010cd0:	ec51 0b17 	vmov	r0, r1, d7
 8010cd4:	f7ef fcb0 	bl	8000638 <__aeabi_dmul>
 8010cd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010cdc:	f7ef ff32 	bl	8000b44 <__aeabi_dcmpge>
 8010ce0:	464f      	mov	r7, r9
 8010ce2:	464e      	mov	r6, r9
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	f040 8234 	bne.w	8011152 <_dtoa_r+0x8f2>
 8010cea:	2331      	movs	r3, #49	; 0x31
 8010cec:	f10b 0501 	add.w	r5, fp, #1
 8010cf0:	f88b 3000 	strb.w	r3, [fp]
 8010cf4:	f10a 0a01 	add.w	sl, sl, #1
 8010cf8:	e22f      	b.n	801115a <_dtoa_r+0x8fa>
 8010cfa:	07f2      	lsls	r2, r6, #31
 8010cfc:	d505      	bpl.n	8010d0a <_dtoa_r+0x4aa>
 8010cfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d02:	f7ef fc99 	bl	8000638 <__aeabi_dmul>
 8010d06:	3501      	adds	r5, #1
 8010d08:	2301      	movs	r3, #1
 8010d0a:	1076      	asrs	r6, r6, #1
 8010d0c:	3708      	adds	r7, #8
 8010d0e:	e772      	b.n	8010bf6 <_dtoa_r+0x396>
 8010d10:	2502      	movs	r5, #2
 8010d12:	e774      	b.n	8010bfe <_dtoa_r+0x39e>
 8010d14:	f8cd a020 	str.w	sl, [sp, #32]
 8010d18:	464f      	mov	r7, r9
 8010d1a:	e791      	b.n	8010c40 <_dtoa_r+0x3e0>
 8010d1c:	4b4d      	ldr	r3, [pc, #308]	; (8010e54 <_dtoa_r+0x5f4>)
 8010d1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010d22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d047      	beq.n	8010dbc <_dtoa_r+0x55c>
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	460b      	mov	r3, r1
 8010d30:	2000      	movs	r0, #0
 8010d32:	494e      	ldr	r1, [pc, #312]	; (8010e6c <_dtoa_r+0x60c>)
 8010d34:	f7ef fdaa 	bl	800088c <__aeabi_ddiv>
 8010d38:	462a      	mov	r2, r5
 8010d3a:	4633      	mov	r3, r6
 8010d3c:	f7ef fac4 	bl	80002c8 <__aeabi_dsub>
 8010d40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010d44:	465d      	mov	r5, fp
 8010d46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d4a:	f7ef ff25 	bl	8000b98 <__aeabi_d2iz>
 8010d4e:	4606      	mov	r6, r0
 8010d50:	f7ef fc08 	bl	8000564 <__aeabi_i2d>
 8010d54:	4602      	mov	r2, r0
 8010d56:	460b      	mov	r3, r1
 8010d58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d5c:	f7ef fab4 	bl	80002c8 <__aeabi_dsub>
 8010d60:	3630      	adds	r6, #48	; 0x30
 8010d62:	f805 6b01 	strb.w	r6, [r5], #1
 8010d66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010d6a:	e9cd 0100 	strd	r0, r1, [sp]
 8010d6e:	f7ef fed5 	bl	8000b1c <__aeabi_dcmplt>
 8010d72:	2800      	cmp	r0, #0
 8010d74:	d163      	bne.n	8010e3e <_dtoa_r+0x5de>
 8010d76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d7a:	2000      	movs	r0, #0
 8010d7c:	4937      	ldr	r1, [pc, #220]	; (8010e5c <_dtoa_r+0x5fc>)
 8010d7e:	f7ef faa3 	bl	80002c8 <__aeabi_dsub>
 8010d82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010d86:	f7ef fec9 	bl	8000b1c <__aeabi_dcmplt>
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	f040 80b7 	bne.w	8010efe <_dtoa_r+0x69e>
 8010d90:	eba5 030b 	sub.w	r3, r5, fp
 8010d94:	429f      	cmp	r7, r3
 8010d96:	f77f af7c 	ble.w	8010c92 <_dtoa_r+0x432>
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	4b30      	ldr	r3, [pc, #192]	; (8010e60 <_dtoa_r+0x600>)
 8010d9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010da2:	f7ef fc49 	bl	8000638 <__aeabi_dmul>
 8010da6:	2200      	movs	r2, #0
 8010da8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010dac:	4b2c      	ldr	r3, [pc, #176]	; (8010e60 <_dtoa_r+0x600>)
 8010dae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010db2:	f7ef fc41 	bl	8000638 <__aeabi_dmul>
 8010db6:	e9cd 0100 	strd	r0, r1, [sp]
 8010dba:	e7c4      	b.n	8010d46 <_dtoa_r+0x4e6>
 8010dbc:	462a      	mov	r2, r5
 8010dbe:	4633      	mov	r3, r6
 8010dc0:	f7ef fc3a 	bl	8000638 <__aeabi_dmul>
 8010dc4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010dc8:	eb0b 0507 	add.w	r5, fp, r7
 8010dcc:	465e      	mov	r6, fp
 8010dce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010dd2:	f7ef fee1 	bl	8000b98 <__aeabi_d2iz>
 8010dd6:	4607      	mov	r7, r0
 8010dd8:	f7ef fbc4 	bl	8000564 <__aeabi_i2d>
 8010ddc:	3730      	adds	r7, #48	; 0x30
 8010dde:	4602      	mov	r2, r0
 8010de0:	460b      	mov	r3, r1
 8010de2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010de6:	f7ef fa6f 	bl	80002c8 <__aeabi_dsub>
 8010dea:	f806 7b01 	strb.w	r7, [r6], #1
 8010dee:	42ae      	cmp	r6, r5
 8010df0:	e9cd 0100 	strd	r0, r1, [sp]
 8010df4:	f04f 0200 	mov.w	r2, #0
 8010df8:	d126      	bne.n	8010e48 <_dtoa_r+0x5e8>
 8010dfa:	4b1c      	ldr	r3, [pc, #112]	; (8010e6c <_dtoa_r+0x60c>)
 8010dfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010e00:	f7ef fa64 	bl	80002cc <__adddf3>
 8010e04:	4602      	mov	r2, r0
 8010e06:	460b      	mov	r3, r1
 8010e08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e0c:	f7ef fea4 	bl	8000b58 <__aeabi_dcmpgt>
 8010e10:	2800      	cmp	r0, #0
 8010e12:	d174      	bne.n	8010efe <_dtoa_r+0x69e>
 8010e14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010e18:	2000      	movs	r0, #0
 8010e1a:	4914      	ldr	r1, [pc, #80]	; (8010e6c <_dtoa_r+0x60c>)
 8010e1c:	f7ef fa54 	bl	80002c8 <__aeabi_dsub>
 8010e20:	4602      	mov	r2, r0
 8010e22:	460b      	mov	r3, r1
 8010e24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e28:	f7ef fe78 	bl	8000b1c <__aeabi_dcmplt>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	f43f af30 	beq.w	8010c92 <_dtoa_r+0x432>
 8010e32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010e36:	2b30      	cmp	r3, #48	; 0x30
 8010e38:	f105 32ff 	add.w	r2, r5, #4294967295
 8010e3c:	d002      	beq.n	8010e44 <_dtoa_r+0x5e4>
 8010e3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010e42:	e04a      	b.n	8010eda <_dtoa_r+0x67a>
 8010e44:	4615      	mov	r5, r2
 8010e46:	e7f4      	b.n	8010e32 <_dtoa_r+0x5d2>
 8010e48:	4b05      	ldr	r3, [pc, #20]	; (8010e60 <_dtoa_r+0x600>)
 8010e4a:	f7ef fbf5 	bl	8000638 <__aeabi_dmul>
 8010e4e:	e9cd 0100 	strd	r0, r1, [sp]
 8010e52:	e7bc      	b.n	8010dce <_dtoa_r+0x56e>
 8010e54:	08013c30 	.word	0x08013c30
 8010e58:	08013c08 	.word	0x08013c08
 8010e5c:	3ff00000 	.word	0x3ff00000
 8010e60:	40240000 	.word	0x40240000
 8010e64:	401c0000 	.word	0x401c0000
 8010e68:	40140000 	.word	0x40140000
 8010e6c:	3fe00000 	.word	0x3fe00000
 8010e70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010e74:	465d      	mov	r5, fp
 8010e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e7a:	4630      	mov	r0, r6
 8010e7c:	4639      	mov	r1, r7
 8010e7e:	f7ef fd05 	bl	800088c <__aeabi_ddiv>
 8010e82:	f7ef fe89 	bl	8000b98 <__aeabi_d2iz>
 8010e86:	4680      	mov	r8, r0
 8010e88:	f7ef fb6c 	bl	8000564 <__aeabi_i2d>
 8010e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e90:	f7ef fbd2 	bl	8000638 <__aeabi_dmul>
 8010e94:	4602      	mov	r2, r0
 8010e96:	460b      	mov	r3, r1
 8010e98:	4630      	mov	r0, r6
 8010e9a:	4639      	mov	r1, r7
 8010e9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010ea0:	f7ef fa12 	bl	80002c8 <__aeabi_dsub>
 8010ea4:	f805 6b01 	strb.w	r6, [r5], #1
 8010ea8:	eba5 060b 	sub.w	r6, r5, fp
 8010eac:	45b1      	cmp	r9, r6
 8010eae:	4602      	mov	r2, r0
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	d139      	bne.n	8010f28 <_dtoa_r+0x6c8>
 8010eb4:	f7ef fa0a 	bl	80002cc <__adddf3>
 8010eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ebc:	4606      	mov	r6, r0
 8010ebe:	460f      	mov	r7, r1
 8010ec0:	f7ef fe4a 	bl	8000b58 <__aeabi_dcmpgt>
 8010ec4:	b9c8      	cbnz	r0, 8010efa <_dtoa_r+0x69a>
 8010ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010eca:	4630      	mov	r0, r6
 8010ecc:	4639      	mov	r1, r7
 8010ece:	f7ef fe1b 	bl	8000b08 <__aeabi_dcmpeq>
 8010ed2:	b110      	cbz	r0, 8010eda <_dtoa_r+0x67a>
 8010ed4:	f018 0f01 	tst.w	r8, #1
 8010ed8:	d10f      	bne.n	8010efa <_dtoa_r+0x69a>
 8010eda:	9904      	ldr	r1, [sp, #16]
 8010edc:	4620      	mov	r0, r4
 8010ede:	f000 fec3 	bl	8011c68 <_Bfree>
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010ee6:	702b      	strb	r3, [r5, #0]
 8010ee8:	f10a 0301 	add.w	r3, sl, #1
 8010eec:	6013      	str	r3, [r2, #0]
 8010eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	f000 8241 	beq.w	8011378 <_dtoa_r+0xb18>
 8010ef6:	601d      	str	r5, [r3, #0]
 8010ef8:	e23e      	b.n	8011378 <_dtoa_r+0xb18>
 8010efa:	f8cd a020 	str.w	sl, [sp, #32]
 8010efe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010f02:	2a39      	cmp	r2, #57	; 0x39
 8010f04:	f105 33ff 	add.w	r3, r5, #4294967295
 8010f08:	d108      	bne.n	8010f1c <_dtoa_r+0x6bc>
 8010f0a:	459b      	cmp	fp, r3
 8010f0c:	d10a      	bne.n	8010f24 <_dtoa_r+0x6c4>
 8010f0e:	9b08      	ldr	r3, [sp, #32]
 8010f10:	3301      	adds	r3, #1
 8010f12:	9308      	str	r3, [sp, #32]
 8010f14:	2330      	movs	r3, #48	; 0x30
 8010f16:	f88b 3000 	strb.w	r3, [fp]
 8010f1a:	465b      	mov	r3, fp
 8010f1c:	781a      	ldrb	r2, [r3, #0]
 8010f1e:	3201      	adds	r2, #1
 8010f20:	701a      	strb	r2, [r3, #0]
 8010f22:	e78c      	b.n	8010e3e <_dtoa_r+0x5de>
 8010f24:	461d      	mov	r5, r3
 8010f26:	e7ea      	b.n	8010efe <_dtoa_r+0x69e>
 8010f28:	2200      	movs	r2, #0
 8010f2a:	4b9b      	ldr	r3, [pc, #620]	; (8011198 <_dtoa_r+0x938>)
 8010f2c:	f7ef fb84 	bl	8000638 <__aeabi_dmul>
 8010f30:	2200      	movs	r2, #0
 8010f32:	2300      	movs	r3, #0
 8010f34:	4606      	mov	r6, r0
 8010f36:	460f      	mov	r7, r1
 8010f38:	f7ef fde6 	bl	8000b08 <__aeabi_dcmpeq>
 8010f3c:	2800      	cmp	r0, #0
 8010f3e:	d09a      	beq.n	8010e76 <_dtoa_r+0x616>
 8010f40:	e7cb      	b.n	8010eda <_dtoa_r+0x67a>
 8010f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f44:	2a00      	cmp	r2, #0
 8010f46:	f000 808b 	beq.w	8011060 <_dtoa_r+0x800>
 8010f4a:	9a06      	ldr	r2, [sp, #24]
 8010f4c:	2a01      	cmp	r2, #1
 8010f4e:	dc6e      	bgt.n	801102e <_dtoa_r+0x7ce>
 8010f50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010f52:	2a00      	cmp	r2, #0
 8010f54:	d067      	beq.n	8011026 <_dtoa_r+0x7c6>
 8010f56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010f5a:	9f07      	ldr	r7, [sp, #28]
 8010f5c:	9d05      	ldr	r5, [sp, #20]
 8010f5e:	9a05      	ldr	r2, [sp, #20]
 8010f60:	2101      	movs	r1, #1
 8010f62:	441a      	add	r2, r3
 8010f64:	4620      	mov	r0, r4
 8010f66:	9205      	str	r2, [sp, #20]
 8010f68:	4498      	add	r8, r3
 8010f6a:	f000 ff5b 	bl	8011e24 <__i2b>
 8010f6e:	4606      	mov	r6, r0
 8010f70:	2d00      	cmp	r5, #0
 8010f72:	dd0c      	ble.n	8010f8e <_dtoa_r+0x72e>
 8010f74:	f1b8 0f00 	cmp.w	r8, #0
 8010f78:	dd09      	ble.n	8010f8e <_dtoa_r+0x72e>
 8010f7a:	4545      	cmp	r5, r8
 8010f7c:	9a05      	ldr	r2, [sp, #20]
 8010f7e:	462b      	mov	r3, r5
 8010f80:	bfa8      	it	ge
 8010f82:	4643      	movge	r3, r8
 8010f84:	1ad2      	subs	r2, r2, r3
 8010f86:	9205      	str	r2, [sp, #20]
 8010f88:	1aed      	subs	r5, r5, r3
 8010f8a:	eba8 0803 	sub.w	r8, r8, r3
 8010f8e:	9b07      	ldr	r3, [sp, #28]
 8010f90:	b1eb      	cbz	r3, 8010fce <_dtoa_r+0x76e>
 8010f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d067      	beq.n	8011068 <_dtoa_r+0x808>
 8010f98:	b18f      	cbz	r7, 8010fbe <_dtoa_r+0x75e>
 8010f9a:	4631      	mov	r1, r6
 8010f9c:	463a      	mov	r2, r7
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	f000 ffe0 	bl	8011f64 <__pow5mult>
 8010fa4:	9a04      	ldr	r2, [sp, #16]
 8010fa6:	4601      	mov	r1, r0
 8010fa8:	4606      	mov	r6, r0
 8010faa:	4620      	mov	r0, r4
 8010fac:	f000 ff43 	bl	8011e36 <__multiply>
 8010fb0:	9904      	ldr	r1, [sp, #16]
 8010fb2:	9008      	str	r0, [sp, #32]
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	f000 fe57 	bl	8011c68 <_Bfree>
 8010fba:	9b08      	ldr	r3, [sp, #32]
 8010fbc:	9304      	str	r3, [sp, #16]
 8010fbe:	9b07      	ldr	r3, [sp, #28]
 8010fc0:	1bda      	subs	r2, r3, r7
 8010fc2:	d004      	beq.n	8010fce <_dtoa_r+0x76e>
 8010fc4:	9904      	ldr	r1, [sp, #16]
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f000 ffcc 	bl	8011f64 <__pow5mult>
 8010fcc:	9004      	str	r0, [sp, #16]
 8010fce:	2101      	movs	r1, #1
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	f000 ff27 	bl	8011e24 <__i2b>
 8010fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fd8:	4607      	mov	r7, r0
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f000 81d0 	beq.w	8011380 <_dtoa_r+0xb20>
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	4601      	mov	r1, r0
 8010fe4:	4620      	mov	r0, r4
 8010fe6:	f000 ffbd 	bl	8011f64 <__pow5mult>
 8010fea:	9b06      	ldr	r3, [sp, #24]
 8010fec:	2b01      	cmp	r3, #1
 8010fee:	4607      	mov	r7, r0
 8010ff0:	dc40      	bgt.n	8011074 <_dtoa_r+0x814>
 8010ff2:	9b00      	ldr	r3, [sp, #0]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d139      	bne.n	801106c <_dtoa_r+0x80c>
 8010ff8:	9b01      	ldr	r3, [sp, #4]
 8010ffa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d136      	bne.n	8011070 <_dtoa_r+0x810>
 8011002:	9b01      	ldr	r3, [sp, #4]
 8011004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011008:	0d1b      	lsrs	r3, r3, #20
 801100a:	051b      	lsls	r3, r3, #20
 801100c:	b12b      	cbz	r3, 801101a <_dtoa_r+0x7ba>
 801100e:	9b05      	ldr	r3, [sp, #20]
 8011010:	3301      	adds	r3, #1
 8011012:	9305      	str	r3, [sp, #20]
 8011014:	f108 0801 	add.w	r8, r8, #1
 8011018:	2301      	movs	r3, #1
 801101a:	9307      	str	r3, [sp, #28]
 801101c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801101e:	2b00      	cmp	r3, #0
 8011020:	d12a      	bne.n	8011078 <_dtoa_r+0x818>
 8011022:	2001      	movs	r0, #1
 8011024:	e030      	b.n	8011088 <_dtoa_r+0x828>
 8011026:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011028:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801102c:	e795      	b.n	8010f5a <_dtoa_r+0x6fa>
 801102e:	9b07      	ldr	r3, [sp, #28]
 8011030:	f109 37ff 	add.w	r7, r9, #4294967295
 8011034:	42bb      	cmp	r3, r7
 8011036:	bfbf      	itttt	lt
 8011038:	9b07      	ldrlt	r3, [sp, #28]
 801103a:	9707      	strlt	r7, [sp, #28]
 801103c:	1afa      	sublt	r2, r7, r3
 801103e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011040:	bfbb      	ittet	lt
 8011042:	189b      	addlt	r3, r3, r2
 8011044:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011046:	1bdf      	subge	r7, r3, r7
 8011048:	2700      	movlt	r7, #0
 801104a:	f1b9 0f00 	cmp.w	r9, #0
 801104e:	bfb5      	itete	lt
 8011050:	9b05      	ldrlt	r3, [sp, #20]
 8011052:	9d05      	ldrge	r5, [sp, #20]
 8011054:	eba3 0509 	sublt.w	r5, r3, r9
 8011058:	464b      	movge	r3, r9
 801105a:	bfb8      	it	lt
 801105c:	2300      	movlt	r3, #0
 801105e:	e77e      	b.n	8010f5e <_dtoa_r+0x6fe>
 8011060:	9f07      	ldr	r7, [sp, #28]
 8011062:	9d05      	ldr	r5, [sp, #20]
 8011064:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011066:	e783      	b.n	8010f70 <_dtoa_r+0x710>
 8011068:	9a07      	ldr	r2, [sp, #28]
 801106a:	e7ab      	b.n	8010fc4 <_dtoa_r+0x764>
 801106c:	2300      	movs	r3, #0
 801106e:	e7d4      	b.n	801101a <_dtoa_r+0x7ba>
 8011070:	9b00      	ldr	r3, [sp, #0]
 8011072:	e7d2      	b.n	801101a <_dtoa_r+0x7ba>
 8011074:	2300      	movs	r3, #0
 8011076:	9307      	str	r3, [sp, #28]
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801107e:	6918      	ldr	r0, [r3, #16]
 8011080:	f000 fe82 	bl	8011d88 <__hi0bits>
 8011084:	f1c0 0020 	rsb	r0, r0, #32
 8011088:	4440      	add	r0, r8
 801108a:	f010 001f 	ands.w	r0, r0, #31
 801108e:	d047      	beq.n	8011120 <_dtoa_r+0x8c0>
 8011090:	f1c0 0320 	rsb	r3, r0, #32
 8011094:	2b04      	cmp	r3, #4
 8011096:	dd3b      	ble.n	8011110 <_dtoa_r+0x8b0>
 8011098:	9b05      	ldr	r3, [sp, #20]
 801109a:	f1c0 001c 	rsb	r0, r0, #28
 801109e:	4403      	add	r3, r0
 80110a0:	9305      	str	r3, [sp, #20]
 80110a2:	4405      	add	r5, r0
 80110a4:	4480      	add	r8, r0
 80110a6:	9b05      	ldr	r3, [sp, #20]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	dd05      	ble.n	80110b8 <_dtoa_r+0x858>
 80110ac:	461a      	mov	r2, r3
 80110ae:	9904      	ldr	r1, [sp, #16]
 80110b0:	4620      	mov	r0, r4
 80110b2:	f000 ffa5 	bl	8012000 <__lshift>
 80110b6:	9004      	str	r0, [sp, #16]
 80110b8:	f1b8 0f00 	cmp.w	r8, #0
 80110bc:	dd05      	ble.n	80110ca <_dtoa_r+0x86a>
 80110be:	4639      	mov	r1, r7
 80110c0:	4642      	mov	r2, r8
 80110c2:	4620      	mov	r0, r4
 80110c4:	f000 ff9c 	bl	8012000 <__lshift>
 80110c8:	4607      	mov	r7, r0
 80110ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80110cc:	b353      	cbz	r3, 8011124 <_dtoa_r+0x8c4>
 80110ce:	4639      	mov	r1, r7
 80110d0:	9804      	ldr	r0, [sp, #16]
 80110d2:	f000 ffe9 	bl	80120a8 <__mcmp>
 80110d6:	2800      	cmp	r0, #0
 80110d8:	da24      	bge.n	8011124 <_dtoa_r+0x8c4>
 80110da:	2300      	movs	r3, #0
 80110dc:	220a      	movs	r2, #10
 80110de:	9904      	ldr	r1, [sp, #16]
 80110e0:	4620      	mov	r0, r4
 80110e2:	f000 fdd8 	bl	8011c96 <__multadd>
 80110e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110e8:	9004      	str	r0, [sp, #16]
 80110ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	f000 814d 	beq.w	801138e <_dtoa_r+0xb2e>
 80110f4:	2300      	movs	r3, #0
 80110f6:	4631      	mov	r1, r6
 80110f8:	220a      	movs	r2, #10
 80110fa:	4620      	mov	r0, r4
 80110fc:	f000 fdcb 	bl	8011c96 <__multadd>
 8011100:	9b02      	ldr	r3, [sp, #8]
 8011102:	2b00      	cmp	r3, #0
 8011104:	4606      	mov	r6, r0
 8011106:	dc4f      	bgt.n	80111a8 <_dtoa_r+0x948>
 8011108:	9b06      	ldr	r3, [sp, #24]
 801110a:	2b02      	cmp	r3, #2
 801110c:	dd4c      	ble.n	80111a8 <_dtoa_r+0x948>
 801110e:	e011      	b.n	8011134 <_dtoa_r+0x8d4>
 8011110:	d0c9      	beq.n	80110a6 <_dtoa_r+0x846>
 8011112:	9a05      	ldr	r2, [sp, #20]
 8011114:	331c      	adds	r3, #28
 8011116:	441a      	add	r2, r3
 8011118:	9205      	str	r2, [sp, #20]
 801111a:	441d      	add	r5, r3
 801111c:	4498      	add	r8, r3
 801111e:	e7c2      	b.n	80110a6 <_dtoa_r+0x846>
 8011120:	4603      	mov	r3, r0
 8011122:	e7f6      	b.n	8011112 <_dtoa_r+0x8b2>
 8011124:	f1b9 0f00 	cmp.w	r9, #0
 8011128:	dc38      	bgt.n	801119c <_dtoa_r+0x93c>
 801112a:	9b06      	ldr	r3, [sp, #24]
 801112c:	2b02      	cmp	r3, #2
 801112e:	dd35      	ble.n	801119c <_dtoa_r+0x93c>
 8011130:	f8cd 9008 	str.w	r9, [sp, #8]
 8011134:	9b02      	ldr	r3, [sp, #8]
 8011136:	b963      	cbnz	r3, 8011152 <_dtoa_r+0x8f2>
 8011138:	4639      	mov	r1, r7
 801113a:	2205      	movs	r2, #5
 801113c:	4620      	mov	r0, r4
 801113e:	f000 fdaa 	bl	8011c96 <__multadd>
 8011142:	4601      	mov	r1, r0
 8011144:	4607      	mov	r7, r0
 8011146:	9804      	ldr	r0, [sp, #16]
 8011148:	f000 ffae 	bl	80120a8 <__mcmp>
 801114c:	2800      	cmp	r0, #0
 801114e:	f73f adcc 	bgt.w	8010cea <_dtoa_r+0x48a>
 8011152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011154:	465d      	mov	r5, fp
 8011156:	ea6f 0a03 	mvn.w	sl, r3
 801115a:	f04f 0900 	mov.w	r9, #0
 801115e:	4639      	mov	r1, r7
 8011160:	4620      	mov	r0, r4
 8011162:	f000 fd81 	bl	8011c68 <_Bfree>
 8011166:	2e00      	cmp	r6, #0
 8011168:	f43f aeb7 	beq.w	8010eda <_dtoa_r+0x67a>
 801116c:	f1b9 0f00 	cmp.w	r9, #0
 8011170:	d005      	beq.n	801117e <_dtoa_r+0x91e>
 8011172:	45b1      	cmp	r9, r6
 8011174:	d003      	beq.n	801117e <_dtoa_r+0x91e>
 8011176:	4649      	mov	r1, r9
 8011178:	4620      	mov	r0, r4
 801117a:	f000 fd75 	bl	8011c68 <_Bfree>
 801117e:	4631      	mov	r1, r6
 8011180:	4620      	mov	r0, r4
 8011182:	f000 fd71 	bl	8011c68 <_Bfree>
 8011186:	e6a8      	b.n	8010eda <_dtoa_r+0x67a>
 8011188:	2700      	movs	r7, #0
 801118a:	463e      	mov	r6, r7
 801118c:	e7e1      	b.n	8011152 <_dtoa_r+0x8f2>
 801118e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011192:	463e      	mov	r6, r7
 8011194:	e5a9      	b.n	8010cea <_dtoa_r+0x48a>
 8011196:	bf00      	nop
 8011198:	40240000 	.word	0x40240000
 801119c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801119e:	f8cd 9008 	str.w	r9, [sp, #8]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f000 80fa 	beq.w	801139c <_dtoa_r+0xb3c>
 80111a8:	2d00      	cmp	r5, #0
 80111aa:	dd05      	ble.n	80111b8 <_dtoa_r+0x958>
 80111ac:	4631      	mov	r1, r6
 80111ae:	462a      	mov	r2, r5
 80111b0:	4620      	mov	r0, r4
 80111b2:	f000 ff25 	bl	8012000 <__lshift>
 80111b6:	4606      	mov	r6, r0
 80111b8:	9b07      	ldr	r3, [sp, #28]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d04c      	beq.n	8011258 <_dtoa_r+0x9f8>
 80111be:	6871      	ldr	r1, [r6, #4]
 80111c0:	4620      	mov	r0, r4
 80111c2:	f000 fd1d 	bl	8011c00 <_Balloc>
 80111c6:	6932      	ldr	r2, [r6, #16]
 80111c8:	3202      	adds	r2, #2
 80111ca:	4605      	mov	r5, r0
 80111cc:	0092      	lsls	r2, r2, #2
 80111ce:	f106 010c 	add.w	r1, r6, #12
 80111d2:	300c      	adds	r0, #12
 80111d4:	f7fd fcbe 	bl	800eb54 <memcpy>
 80111d8:	2201      	movs	r2, #1
 80111da:	4629      	mov	r1, r5
 80111dc:	4620      	mov	r0, r4
 80111de:	f000 ff0f 	bl	8012000 <__lshift>
 80111e2:	9b00      	ldr	r3, [sp, #0]
 80111e4:	f8cd b014 	str.w	fp, [sp, #20]
 80111e8:	f003 0301 	and.w	r3, r3, #1
 80111ec:	46b1      	mov	r9, r6
 80111ee:	9307      	str	r3, [sp, #28]
 80111f0:	4606      	mov	r6, r0
 80111f2:	4639      	mov	r1, r7
 80111f4:	9804      	ldr	r0, [sp, #16]
 80111f6:	f7ff faa5 	bl	8010744 <quorem>
 80111fa:	4649      	mov	r1, r9
 80111fc:	4605      	mov	r5, r0
 80111fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011202:	9804      	ldr	r0, [sp, #16]
 8011204:	f000 ff50 	bl	80120a8 <__mcmp>
 8011208:	4632      	mov	r2, r6
 801120a:	9000      	str	r0, [sp, #0]
 801120c:	4639      	mov	r1, r7
 801120e:	4620      	mov	r0, r4
 8011210:	f000 ff64 	bl	80120dc <__mdiff>
 8011214:	68c3      	ldr	r3, [r0, #12]
 8011216:	4602      	mov	r2, r0
 8011218:	bb03      	cbnz	r3, 801125c <_dtoa_r+0x9fc>
 801121a:	4601      	mov	r1, r0
 801121c:	9008      	str	r0, [sp, #32]
 801121e:	9804      	ldr	r0, [sp, #16]
 8011220:	f000 ff42 	bl	80120a8 <__mcmp>
 8011224:	9a08      	ldr	r2, [sp, #32]
 8011226:	4603      	mov	r3, r0
 8011228:	4611      	mov	r1, r2
 801122a:	4620      	mov	r0, r4
 801122c:	9308      	str	r3, [sp, #32]
 801122e:	f000 fd1b 	bl	8011c68 <_Bfree>
 8011232:	9b08      	ldr	r3, [sp, #32]
 8011234:	b9a3      	cbnz	r3, 8011260 <_dtoa_r+0xa00>
 8011236:	9a06      	ldr	r2, [sp, #24]
 8011238:	b992      	cbnz	r2, 8011260 <_dtoa_r+0xa00>
 801123a:	9a07      	ldr	r2, [sp, #28]
 801123c:	b982      	cbnz	r2, 8011260 <_dtoa_r+0xa00>
 801123e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011242:	d029      	beq.n	8011298 <_dtoa_r+0xa38>
 8011244:	9b00      	ldr	r3, [sp, #0]
 8011246:	2b00      	cmp	r3, #0
 8011248:	dd01      	ble.n	801124e <_dtoa_r+0x9ee>
 801124a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801124e:	9b05      	ldr	r3, [sp, #20]
 8011250:	1c5d      	adds	r5, r3, #1
 8011252:	f883 8000 	strb.w	r8, [r3]
 8011256:	e782      	b.n	801115e <_dtoa_r+0x8fe>
 8011258:	4630      	mov	r0, r6
 801125a:	e7c2      	b.n	80111e2 <_dtoa_r+0x982>
 801125c:	2301      	movs	r3, #1
 801125e:	e7e3      	b.n	8011228 <_dtoa_r+0x9c8>
 8011260:	9a00      	ldr	r2, [sp, #0]
 8011262:	2a00      	cmp	r2, #0
 8011264:	db04      	blt.n	8011270 <_dtoa_r+0xa10>
 8011266:	d125      	bne.n	80112b4 <_dtoa_r+0xa54>
 8011268:	9a06      	ldr	r2, [sp, #24]
 801126a:	bb1a      	cbnz	r2, 80112b4 <_dtoa_r+0xa54>
 801126c:	9a07      	ldr	r2, [sp, #28]
 801126e:	bb0a      	cbnz	r2, 80112b4 <_dtoa_r+0xa54>
 8011270:	2b00      	cmp	r3, #0
 8011272:	ddec      	ble.n	801124e <_dtoa_r+0x9ee>
 8011274:	2201      	movs	r2, #1
 8011276:	9904      	ldr	r1, [sp, #16]
 8011278:	4620      	mov	r0, r4
 801127a:	f000 fec1 	bl	8012000 <__lshift>
 801127e:	4639      	mov	r1, r7
 8011280:	9004      	str	r0, [sp, #16]
 8011282:	f000 ff11 	bl	80120a8 <__mcmp>
 8011286:	2800      	cmp	r0, #0
 8011288:	dc03      	bgt.n	8011292 <_dtoa_r+0xa32>
 801128a:	d1e0      	bne.n	801124e <_dtoa_r+0x9ee>
 801128c:	f018 0f01 	tst.w	r8, #1
 8011290:	d0dd      	beq.n	801124e <_dtoa_r+0x9ee>
 8011292:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011296:	d1d8      	bne.n	801124a <_dtoa_r+0x9ea>
 8011298:	9b05      	ldr	r3, [sp, #20]
 801129a:	9a05      	ldr	r2, [sp, #20]
 801129c:	1c5d      	adds	r5, r3, #1
 801129e:	2339      	movs	r3, #57	; 0x39
 80112a0:	7013      	strb	r3, [r2, #0]
 80112a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80112a6:	2b39      	cmp	r3, #57	; 0x39
 80112a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80112ac:	d04f      	beq.n	801134e <_dtoa_r+0xaee>
 80112ae:	3301      	adds	r3, #1
 80112b0:	7013      	strb	r3, [r2, #0]
 80112b2:	e754      	b.n	801115e <_dtoa_r+0x8fe>
 80112b4:	9a05      	ldr	r2, [sp, #20]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	f102 0501 	add.w	r5, r2, #1
 80112bc:	dd06      	ble.n	80112cc <_dtoa_r+0xa6c>
 80112be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80112c2:	d0e9      	beq.n	8011298 <_dtoa_r+0xa38>
 80112c4:	f108 0801 	add.w	r8, r8, #1
 80112c8:	9b05      	ldr	r3, [sp, #20]
 80112ca:	e7c2      	b.n	8011252 <_dtoa_r+0x9f2>
 80112cc:	9a02      	ldr	r2, [sp, #8]
 80112ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80112d2:	eba5 030b 	sub.w	r3, r5, fp
 80112d6:	4293      	cmp	r3, r2
 80112d8:	d021      	beq.n	801131e <_dtoa_r+0xabe>
 80112da:	2300      	movs	r3, #0
 80112dc:	220a      	movs	r2, #10
 80112de:	9904      	ldr	r1, [sp, #16]
 80112e0:	4620      	mov	r0, r4
 80112e2:	f000 fcd8 	bl	8011c96 <__multadd>
 80112e6:	45b1      	cmp	r9, r6
 80112e8:	9004      	str	r0, [sp, #16]
 80112ea:	f04f 0300 	mov.w	r3, #0
 80112ee:	f04f 020a 	mov.w	r2, #10
 80112f2:	4649      	mov	r1, r9
 80112f4:	4620      	mov	r0, r4
 80112f6:	d105      	bne.n	8011304 <_dtoa_r+0xaa4>
 80112f8:	f000 fccd 	bl	8011c96 <__multadd>
 80112fc:	4681      	mov	r9, r0
 80112fe:	4606      	mov	r6, r0
 8011300:	9505      	str	r5, [sp, #20]
 8011302:	e776      	b.n	80111f2 <_dtoa_r+0x992>
 8011304:	f000 fcc7 	bl	8011c96 <__multadd>
 8011308:	4631      	mov	r1, r6
 801130a:	4681      	mov	r9, r0
 801130c:	2300      	movs	r3, #0
 801130e:	220a      	movs	r2, #10
 8011310:	4620      	mov	r0, r4
 8011312:	f000 fcc0 	bl	8011c96 <__multadd>
 8011316:	4606      	mov	r6, r0
 8011318:	e7f2      	b.n	8011300 <_dtoa_r+0xaa0>
 801131a:	f04f 0900 	mov.w	r9, #0
 801131e:	2201      	movs	r2, #1
 8011320:	9904      	ldr	r1, [sp, #16]
 8011322:	4620      	mov	r0, r4
 8011324:	f000 fe6c 	bl	8012000 <__lshift>
 8011328:	4639      	mov	r1, r7
 801132a:	9004      	str	r0, [sp, #16]
 801132c:	f000 febc 	bl	80120a8 <__mcmp>
 8011330:	2800      	cmp	r0, #0
 8011332:	dcb6      	bgt.n	80112a2 <_dtoa_r+0xa42>
 8011334:	d102      	bne.n	801133c <_dtoa_r+0xadc>
 8011336:	f018 0f01 	tst.w	r8, #1
 801133a:	d1b2      	bne.n	80112a2 <_dtoa_r+0xa42>
 801133c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011340:	2b30      	cmp	r3, #48	; 0x30
 8011342:	f105 32ff 	add.w	r2, r5, #4294967295
 8011346:	f47f af0a 	bne.w	801115e <_dtoa_r+0x8fe>
 801134a:	4615      	mov	r5, r2
 801134c:	e7f6      	b.n	801133c <_dtoa_r+0xadc>
 801134e:	4593      	cmp	fp, r2
 8011350:	d105      	bne.n	801135e <_dtoa_r+0xafe>
 8011352:	2331      	movs	r3, #49	; 0x31
 8011354:	f10a 0a01 	add.w	sl, sl, #1
 8011358:	f88b 3000 	strb.w	r3, [fp]
 801135c:	e6ff      	b.n	801115e <_dtoa_r+0x8fe>
 801135e:	4615      	mov	r5, r2
 8011360:	e79f      	b.n	80112a2 <_dtoa_r+0xa42>
 8011362:	f8df b064 	ldr.w	fp, [pc, #100]	; 80113c8 <_dtoa_r+0xb68>
 8011366:	e007      	b.n	8011378 <_dtoa_r+0xb18>
 8011368:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801136a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80113cc <_dtoa_r+0xb6c>
 801136e:	b11b      	cbz	r3, 8011378 <_dtoa_r+0xb18>
 8011370:	f10b 0308 	add.w	r3, fp, #8
 8011374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011376:	6013      	str	r3, [r2, #0]
 8011378:	4658      	mov	r0, fp
 801137a:	b017      	add	sp, #92	; 0x5c
 801137c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011380:	9b06      	ldr	r3, [sp, #24]
 8011382:	2b01      	cmp	r3, #1
 8011384:	f77f ae35 	ble.w	8010ff2 <_dtoa_r+0x792>
 8011388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801138a:	9307      	str	r3, [sp, #28]
 801138c:	e649      	b.n	8011022 <_dtoa_r+0x7c2>
 801138e:	9b02      	ldr	r3, [sp, #8]
 8011390:	2b00      	cmp	r3, #0
 8011392:	dc03      	bgt.n	801139c <_dtoa_r+0xb3c>
 8011394:	9b06      	ldr	r3, [sp, #24]
 8011396:	2b02      	cmp	r3, #2
 8011398:	f73f aecc 	bgt.w	8011134 <_dtoa_r+0x8d4>
 801139c:	465d      	mov	r5, fp
 801139e:	4639      	mov	r1, r7
 80113a0:	9804      	ldr	r0, [sp, #16]
 80113a2:	f7ff f9cf 	bl	8010744 <quorem>
 80113a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80113aa:	f805 8b01 	strb.w	r8, [r5], #1
 80113ae:	9a02      	ldr	r2, [sp, #8]
 80113b0:	eba5 030b 	sub.w	r3, r5, fp
 80113b4:	429a      	cmp	r2, r3
 80113b6:	ddb0      	ble.n	801131a <_dtoa_r+0xaba>
 80113b8:	2300      	movs	r3, #0
 80113ba:	220a      	movs	r2, #10
 80113bc:	9904      	ldr	r1, [sp, #16]
 80113be:	4620      	mov	r0, r4
 80113c0:	f000 fc69 	bl	8011c96 <__multadd>
 80113c4:	9004      	str	r0, [sp, #16]
 80113c6:	e7ea      	b.n	801139e <_dtoa_r+0xb3e>
 80113c8:	08013b0c 	.word	0x08013b0c
 80113cc:	08013b88 	.word	0x08013b88

080113d0 <std>:
 80113d0:	2300      	movs	r3, #0
 80113d2:	b510      	push	{r4, lr}
 80113d4:	4604      	mov	r4, r0
 80113d6:	e9c0 3300 	strd	r3, r3, [r0]
 80113da:	6083      	str	r3, [r0, #8]
 80113dc:	8181      	strh	r1, [r0, #12]
 80113de:	6643      	str	r3, [r0, #100]	; 0x64
 80113e0:	81c2      	strh	r2, [r0, #14]
 80113e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80113e6:	6183      	str	r3, [r0, #24]
 80113e8:	4619      	mov	r1, r3
 80113ea:	2208      	movs	r2, #8
 80113ec:	305c      	adds	r0, #92	; 0x5c
 80113ee:	f7fd fbbc 	bl	800eb6a <memset>
 80113f2:	4b05      	ldr	r3, [pc, #20]	; (8011408 <std+0x38>)
 80113f4:	6263      	str	r3, [r4, #36]	; 0x24
 80113f6:	4b05      	ldr	r3, [pc, #20]	; (801140c <std+0x3c>)
 80113f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80113fa:	4b05      	ldr	r3, [pc, #20]	; (8011410 <std+0x40>)
 80113fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80113fe:	4b05      	ldr	r3, [pc, #20]	; (8011414 <std+0x44>)
 8011400:	6224      	str	r4, [r4, #32]
 8011402:	6323      	str	r3, [r4, #48]	; 0x30
 8011404:	bd10      	pop	{r4, pc}
 8011406:	bf00      	nop
 8011408:	08012941 	.word	0x08012941
 801140c:	08012963 	.word	0x08012963
 8011410:	0801299b 	.word	0x0801299b
 8011414:	080129bf 	.word	0x080129bf

08011418 <_cleanup_r>:
 8011418:	4901      	ldr	r1, [pc, #4]	; (8011420 <_cleanup_r+0x8>)
 801141a:	f000 b885 	b.w	8011528 <_fwalk_reent>
 801141e:	bf00      	nop
 8011420:	08012cd9 	.word	0x08012cd9

08011424 <__sfmoreglue>:
 8011424:	b570      	push	{r4, r5, r6, lr}
 8011426:	1e4a      	subs	r2, r1, #1
 8011428:	2568      	movs	r5, #104	; 0x68
 801142a:	4355      	muls	r5, r2
 801142c:	460e      	mov	r6, r1
 801142e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011432:	f7fd fbf1 	bl	800ec18 <_malloc_r>
 8011436:	4604      	mov	r4, r0
 8011438:	b140      	cbz	r0, 801144c <__sfmoreglue+0x28>
 801143a:	2100      	movs	r1, #0
 801143c:	e9c0 1600 	strd	r1, r6, [r0]
 8011440:	300c      	adds	r0, #12
 8011442:	60a0      	str	r0, [r4, #8]
 8011444:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011448:	f7fd fb8f 	bl	800eb6a <memset>
 801144c:	4620      	mov	r0, r4
 801144e:	bd70      	pop	{r4, r5, r6, pc}

08011450 <__sinit>:
 8011450:	6983      	ldr	r3, [r0, #24]
 8011452:	b510      	push	{r4, lr}
 8011454:	4604      	mov	r4, r0
 8011456:	bb33      	cbnz	r3, 80114a6 <__sinit+0x56>
 8011458:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801145c:	6503      	str	r3, [r0, #80]	; 0x50
 801145e:	4b12      	ldr	r3, [pc, #72]	; (80114a8 <__sinit+0x58>)
 8011460:	4a12      	ldr	r2, [pc, #72]	; (80114ac <__sinit+0x5c>)
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	6282      	str	r2, [r0, #40]	; 0x28
 8011466:	4298      	cmp	r0, r3
 8011468:	bf04      	itt	eq
 801146a:	2301      	moveq	r3, #1
 801146c:	6183      	streq	r3, [r0, #24]
 801146e:	f000 f81f 	bl	80114b0 <__sfp>
 8011472:	6060      	str	r0, [r4, #4]
 8011474:	4620      	mov	r0, r4
 8011476:	f000 f81b 	bl	80114b0 <__sfp>
 801147a:	60a0      	str	r0, [r4, #8]
 801147c:	4620      	mov	r0, r4
 801147e:	f000 f817 	bl	80114b0 <__sfp>
 8011482:	2200      	movs	r2, #0
 8011484:	60e0      	str	r0, [r4, #12]
 8011486:	2104      	movs	r1, #4
 8011488:	6860      	ldr	r0, [r4, #4]
 801148a:	f7ff ffa1 	bl	80113d0 <std>
 801148e:	2201      	movs	r2, #1
 8011490:	2109      	movs	r1, #9
 8011492:	68a0      	ldr	r0, [r4, #8]
 8011494:	f7ff ff9c 	bl	80113d0 <std>
 8011498:	2202      	movs	r2, #2
 801149a:	2112      	movs	r1, #18
 801149c:	68e0      	ldr	r0, [r4, #12]
 801149e:	f7ff ff97 	bl	80113d0 <std>
 80114a2:	2301      	movs	r3, #1
 80114a4:	61a3      	str	r3, [r4, #24]
 80114a6:	bd10      	pop	{r4, pc}
 80114a8:	08013af8 	.word	0x08013af8
 80114ac:	08011419 	.word	0x08011419

080114b0 <__sfp>:
 80114b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114b2:	4b1b      	ldr	r3, [pc, #108]	; (8011520 <__sfp+0x70>)
 80114b4:	681e      	ldr	r6, [r3, #0]
 80114b6:	69b3      	ldr	r3, [r6, #24]
 80114b8:	4607      	mov	r7, r0
 80114ba:	b913      	cbnz	r3, 80114c2 <__sfp+0x12>
 80114bc:	4630      	mov	r0, r6
 80114be:	f7ff ffc7 	bl	8011450 <__sinit>
 80114c2:	3648      	adds	r6, #72	; 0x48
 80114c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80114c8:	3b01      	subs	r3, #1
 80114ca:	d503      	bpl.n	80114d4 <__sfp+0x24>
 80114cc:	6833      	ldr	r3, [r6, #0]
 80114ce:	b133      	cbz	r3, 80114de <__sfp+0x2e>
 80114d0:	6836      	ldr	r6, [r6, #0]
 80114d2:	e7f7      	b.n	80114c4 <__sfp+0x14>
 80114d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80114d8:	b16d      	cbz	r5, 80114f6 <__sfp+0x46>
 80114da:	3468      	adds	r4, #104	; 0x68
 80114dc:	e7f4      	b.n	80114c8 <__sfp+0x18>
 80114de:	2104      	movs	r1, #4
 80114e0:	4638      	mov	r0, r7
 80114e2:	f7ff ff9f 	bl	8011424 <__sfmoreglue>
 80114e6:	6030      	str	r0, [r6, #0]
 80114e8:	2800      	cmp	r0, #0
 80114ea:	d1f1      	bne.n	80114d0 <__sfp+0x20>
 80114ec:	230c      	movs	r3, #12
 80114ee:	603b      	str	r3, [r7, #0]
 80114f0:	4604      	mov	r4, r0
 80114f2:	4620      	mov	r0, r4
 80114f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114f6:	4b0b      	ldr	r3, [pc, #44]	; (8011524 <__sfp+0x74>)
 80114f8:	6665      	str	r5, [r4, #100]	; 0x64
 80114fa:	e9c4 5500 	strd	r5, r5, [r4]
 80114fe:	60a5      	str	r5, [r4, #8]
 8011500:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011504:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011508:	2208      	movs	r2, #8
 801150a:	4629      	mov	r1, r5
 801150c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011510:	f7fd fb2b 	bl	800eb6a <memset>
 8011514:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011518:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801151c:	e7e9      	b.n	80114f2 <__sfp+0x42>
 801151e:	bf00      	nop
 8011520:	08013af8 	.word	0x08013af8
 8011524:	ffff0001 	.word	0xffff0001

08011528 <_fwalk_reent>:
 8011528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801152c:	4680      	mov	r8, r0
 801152e:	4689      	mov	r9, r1
 8011530:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011534:	2600      	movs	r6, #0
 8011536:	b914      	cbnz	r4, 801153e <_fwalk_reent+0x16>
 8011538:	4630      	mov	r0, r6
 801153a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801153e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011542:	3f01      	subs	r7, #1
 8011544:	d501      	bpl.n	801154a <_fwalk_reent+0x22>
 8011546:	6824      	ldr	r4, [r4, #0]
 8011548:	e7f5      	b.n	8011536 <_fwalk_reent+0xe>
 801154a:	89ab      	ldrh	r3, [r5, #12]
 801154c:	2b01      	cmp	r3, #1
 801154e:	d907      	bls.n	8011560 <_fwalk_reent+0x38>
 8011550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011554:	3301      	adds	r3, #1
 8011556:	d003      	beq.n	8011560 <_fwalk_reent+0x38>
 8011558:	4629      	mov	r1, r5
 801155a:	4640      	mov	r0, r8
 801155c:	47c8      	blx	r9
 801155e:	4306      	orrs	r6, r0
 8011560:	3568      	adds	r5, #104	; 0x68
 8011562:	e7ee      	b.n	8011542 <_fwalk_reent+0x1a>

08011564 <rshift>:
 8011564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011566:	6906      	ldr	r6, [r0, #16]
 8011568:	114b      	asrs	r3, r1, #5
 801156a:	429e      	cmp	r6, r3
 801156c:	f100 0414 	add.w	r4, r0, #20
 8011570:	dd30      	ble.n	80115d4 <rshift+0x70>
 8011572:	f011 011f 	ands.w	r1, r1, #31
 8011576:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801157a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801157e:	d108      	bne.n	8011592 <rshift+0x2e>
 8011580:	4621      	mov	r1, r4
 8011582:	42b2      	cmp	r2, r6
 8011584:	460b      	mov	r3, r1
 8011586:	d211      	bcs.n	80115ac <rshift+0x48>
 8011588:	f852 3b04 	ldr.w	r3, [r2], #4
 801158c:	f841 3b04 	str.w	r3, [r1], #4
 8011590:	e7f7      	b.n	8011582 <rshift+0x1e>
 8011592:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8011596:	f1c1 0c20 	rsb	ip, r1, #32
 801159a:	40cd      	lsrs	r5, r1
 801159c:	3204      	adds	r2, #4
 801159e:	4623      	mov	r3, r4
 80115a0:	42b2      	cmp	r2, r6
 80115a2:	4617      	mov	r7, r2
 80115a4:	d30c      	bcc.n	80115c0 <rshift+0x5c>
 80115a6:	601d      	str	r5, [r3, #0]
 80115a8:	b105      	cbz	r5, 80115ac <rshift+0x48>
 80115aa:	3304      	adds	r3, #4
 80115ac:	1b1a      	subs	r2, r3, r4
 80115ae:	42a3      	cmp	r3, r4
 80115b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80115b4:	bf08      	it	eq
 80115b6:	2300      	moveq	r3, #0
 80115b8:	6102      	str	r2, [r0, #16]
 80115ba:	bf08      	it	eq
 80115bc:	6143      	streq	r3, [r0, #20]
 80115be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115c0:	683f      	ldr	r7, [r7, #0]
 80115c2:	fa07 f70c 	lsl.w	r7, r7, ip
 80115c6:	433d      	orrs	r5, r7
 80115c8:	f843 5b04 	str.w	r5, [r3], #4
 80115cc:	f852 5b04 	ldr.w	r5, [r2], #4
 80115d0:	40cd      	lsrs	r5, r1
 80115d2:	e7e5      	b.n	80115a0 <rshift+0x3c>
 80115d4:	4623      	mov	r3, r4
 80115d6:	e7e9      	b.n	80115ac <rshift+0x48>

080115d8 <__hexdig_fun>:
 80115d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80115dc:	2b09      	cmp	r3, #9
 80115de:	d802      	bhi.n	80115e6 <__hexdig_fun+0xe>
 80115e0:	3820      	subs	r0, #32
 80115e2:	b2c0      	uxtb	r0, r0
 80115e4:	4770      	bx	lr
 80115e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80115ea:	2b05      	cmp	r3, #5
 80115ec:	d801      	bhi.n	80115f2 <__hexdig_fun+0x1a>
 80115ee:	3847      	subs	r0, #71	; 0x47
 80115f0:	e7f7      	b.n	80115e2 <__hexdig_fun+0xa>
 80115f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80115f6:	2b05      	cmp	r3, #5
 80115f8:	d801      	bhi.n	80115fe <__hexdig_fun+0x26>
 80115fa:	3827      	subs	r0, #39	; 0x27
 80115fc:	e7f1      	b.n	80115e2 <__hexdig_fun+0xa>
 80115fe:	2000      	movs	r0, #0
 8011600:	4770      	bx	lr

08011602 <__gethex>:
 8011602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011606:	b08b      	sub	sp, #44	; 0x2c
 8011608:	468a      	mov	sl, r1
 801160a:	9002      	str	r0, [sp, #8]
 801160c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801160e:	9306      	str	r3, [sp, #24]
 8011610:	4690      	mov	r8, r2
 8011612:	f000 fad0 	bl	8011bb6 <__localeconv_l>
 8011616:	6803      	ldr	r3, [r0, #0]
 8011618:	9303      	str	r3, [sp, #12]
 801161a:	4618      	mov	r0, r3
 801161c:	f7ee fdf8 	bl	8000210 <strlen>
 8011620:	9b03      	ldr	r3, [sp, #12]
 8011622:	9001      	str	r0, [sp, #4]
 8011624:	4403      	add	r3, r0
 8011626:	f04f 0b00 	mov.w	fp, #0
 801162a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801162e:	9307      	str	r3, [sp, #28]
 8011630:	f8da 3000 	ldr.w	r3, [sl]
 8011634:	3302      	adds	r3, #2
 8011636:	461f      	mov	r7, r3
 8011638:	f813 0b01 	ldrb.w	r0, [r3], #1
 801163c:	2830      	cmp	r0, #48	; 0x30
 801163e:	d06c      	beq.n	801171a <__gethex+0x118>
 8011640:	f7ff ffca 	bl	80115d8 <__hexdig_fun>
 8011644:	4604      	mov	r4, r0
 8011646:	2800      	cmp	r0, #0
 8011648:	d16a      	bne.n	8011720 <__gethex+0x11e>
 801164a:	9a01      	ldr	r2, [sp, #4]
 801164c:	9903      	ldr	r1, [sp, #12]
 801164e:	4638      	mov	r0, r7
 8011650:	f001 f9b9 	bl	80129c6 <strncmp>
 8011654:	2800      	cmp	r0, #0
 8011656:	d166      	bne.n	8011726 <__gethex+0x124>
 8011658:	9b01      	ldr	r3, [sp, #4]
 801165a:	5cf8      	ldrb	r0, [r7, r3]
 801165c:	18fe      	adds	r6, r7, r3
 801165e:	f7ff ffbb 	bl	80115d8 <__hexdig_fun>
 8011662:	2800      	cmp	r0, #0
 8011664:	d062      	beq.n	801172c <__gethex+0x12a>
 8011666:	4633      	mov	r3, r6
 8011668:	7818      	ldrb	r0, [r3, #0]
 801166a:	2830      	cmp	r0, #48	; 0x30
 801166c:	461f      	mov	r7, r3
 801166e:	f103 0301 	add.w	r3, r3, #1
 8011672:	d0f9      	beq.n	8011668 <__gethex+0x66>
 8011674:	f7ff ffb0 	bl	80115d8 <__hexdig_fun>
 8011678:	fab0 f580 	clz	r5, r0
 801167c:	096d      	lsrs	r5, r5, #5
 801167e:	4634      	mov	r4, r6
 8011680:	f04f 0b01 	mov.w	fp, #1
 8011684:	463a      	mov	r2, r7
 8011686:	4616      	mov	r6, r2
 8011688:	3201      	adds	r2, #1
 801168a:	7830      	ldrb	r0, [r6, #0]
 801168c:	f7ff ffa4 	bl	80115d8 <__hexdig_fun>
 8011690:	2800      	cmp	r0, #0
 8011692:	d1f8      	bne.n	8011686 <__gethex+0x84>
 8011694:	9a01      	ldr	r2, [sp, #4]
 8011696:	9903      	ldr	r1, [sp, #12]
 8011698:	4630      	mov	r0, r6
 801169a:	f001 f994 	bl	80129c6 <strncmp>
 801169e:	b950      	cbnz	r0, 80116b6 <__gethex+0xb4>
 80116a0:	b954      	cbnz	r4, 80116b8 <__gethex+0xb6>
 80116a2:	9b01      	ldr	r3, [sp, #4]
 80116a4:	18f4      	adds	r4, r6, r3
 80116a6:	4622      	mov	r2, r4
 80116a8:	4616      	mov	r6, r2
 80116aa:	3201      	adds	r2, #1
 80116ac:	7830      	ldrb	r0, [r6, #0]
 80116ae:	f7ff ff93 	bl	80115d8 <__hexdig_fun>
 80116b2:	2800      	cmp	r0, #0
 80116b4:	d1f8      	bne.n	80116a8 <__gethex+0xa6>
 80116b6:	b10c      	cbz	r4, 80116bc <__gethex+0xba>
 80116b8:	1ba4      	subs	r4, r4, r6
 80116ba:	00a4      	lsls	r4, r4, #2
 80116bc:	7833      	ldrb	r3, [r6, #0]
 80116be:	2b50      	cmp	r3, #80	; 0x50
 80116c0:	d001      	beq.n	80116c6 <__gethex+0xc4>
 80116c2:	2b70      	cmp	r3, #112	; 0x70
 80116c4:	d140      	bne.n	8011748 <__gethex+0x146>
 80116c6:	7873      	ldrb	r3, [r6, #1]
 80116c8:	2b2b      	cmp	r3, #43	; 0x2b
 80116ca:	d031      	beq.n	8011730 <__gethex+0x12e>
 80116cc:	2b2d      	cmp	r3, #45	; 0x2d
 80116ce:	d033      	beq.n	8011738 <__gethex+0x136>
 80116d0:	1c71      	adds	r1, r6, #1
 80116d2:	f04f 0900 	mov.w	r9, #0
 80116d6:	7808      	ldrb	r0, [r1, #0]
 80116d8:	f7ff ff7e 	bl	80115d8 <__hexdig_fun>
 80116dc:	1e43      	subs	r3, r0, #1
 80116de:	b2db      	uxtb	r3, r3
 80116e0:	2b18      	cmp	r3, #24
 80116e2:	d831      	bhi.n	8011748 <__gethex+0x146>
 80116e4:	f1a0 0210 	sub.w	r2, r0, #16
 80116e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80116ec:	f7ff ff74 	bl	80115d8 <__hexdig_fun>
 80116f0:	1e43      	subs	r3, r0, #1
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	2b18      	cmp	r3, #24
 80116f6:	d922      	bls.n	801173e <__gethex+0x13c>
 80116f8:	f1b9 0f00 	cmp.w	r9, #0
 80116fc:	d000      	beq.n	8011700 <__gethex+0xfe>
 80116fe:	4252      	negs	r2, r2
 8011700:	4414      	add	r4, r2
 8011702:	f8ca 1000 	str.w	r1, [sl]
 8011706:	b30d      	cbz	r5, 801174c <__gethex+0x14a>
 8011708:	f1bb 0f00 	cmp.w	fp, #0
 801170c:	bf0c      	ite	eq
 801170e:	2706      	moveq	r7, #6
 8011710:	2700      	movne	r7, #0
 8011712:	4638      	mov	r0, r7
 8011714:	b00b      	add	sp, #44	; 0x2c
 8011716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801171a:	f10b 0b01 	add.w	fp, fp, #1
 801171e:	e78a      	b.n	8011636 <__gethex+0x34>
 8011720:	2500      	movs	r5, #0
 8011722:	462c      	mov	r4, r5
 8011724:	e7ae      	b.n	8011684 <__gethex+0x82>
 8011726:	463e      	mov	r6, r7
 8011728:	2501      	movs	r5, #1
 801172a:	e7c7      	b.n	80116bc <__gethex+0xba>
 801172c:	4604      	mov	r4, r0
 801172e:	e7fb      	b.n	8011728 <__gethex+0x126>
 8011730:	f04f 0900 	mov.w	r9, #0
 8011734:	1cb1      	adds	r1, r6, #2
 8011736:	e7ce      	b.n	80116d6 <__gethex+0xd4>
 8011738:	f04f 0901 	mov.w	r9, #1
 801173c:	e7fa      	b.n	8011734 <__gethex+0x132>
 801173e:	230a      	movs	r3, #10
 8011740:	fb03 0202 	mla	r2, r3, r2, r0
 8011744:	3a10      	subs	r2, #16
 8011746:	e7cf      	b.n	80116e8 <__gethex+0xe6>
 8011748:	4631      	mov	r1, r6
 801174a:	e7da      	b.n	8011702 <__gethex+0x100>
 801174c:	1bf3      	subs	r3, r6, r7
 801174e:	3b01      	subs	r3, #1
 8011750:	4629      	mov	r1, r5
 8011752:	2b07      	cmp	r3, #7
 8011754:	dc49      	bgt.n	80117ea <__gethex+0x1e8>
 8011756:	9802      	ldr	r0, [sp, #8]
 8011758:	f000 fa52 	bl	8011c00 <_Balloc>
 801175c:	9b01      	ldr	r3, [sp, #4]
 801175e:	f100 0914 	add.w	r9, r0, #20
 8011762:	f04f 0b00 	mov.w	fp, #0
 8011766:	f1c3 0301 	rsb	r3, r3, #1
 801176a:	4605      	mov	r5, r0
 801176c:	f8cd 9010 	str.w	r9, [sp, #16]
 8011770:	46da      	mov	sl, fp
 8011772:	9308      	str	r3, [sp, #32]
 8011774:	42b7      	cmp	r7, r6
 8011776:	d33b      	bcc.n	80117f0 <__gethex+0x1ee>
 8011778:	9804      	ldr	r0, [sp, #16]
 801177a:	f840 ab04 	str.w	sl, [r0], #4
 801177e:	eba0 0009 	sub.w	r0, r0, r9
 8011782:	1080      	asrs	r0, r0, #2
 8011784:	6128      	str	r0, [r5, #16]
 8011786:	0147      	lsls	r7, r0, #5
 8011788:	4650      	mov	r0, sl
 801178a:	f000 fafd 	bl	8011d88 <__hi0bits>
 801178e:	f8d8 6000 	ldr.w	r6, [r8]
 8011792:	1a3f      	subs	r7, r7, r0
 8011794:	42b7      	cmp	r7, r6
 8011796:	dd64      	ble.n	8011862 <__gethex+0x260>
 8011798:	1bbf      	subs	r7, r7, r6
 801179a:	4639      	mov	r1, r7
 801179c:	4628      	mov	r0, r5
 801179e:	f000 fe0d 	bl	80123bc <__any_on>
 80117a2:	4682      	mov	sl, r0
 80117a4:	b178      	cbz	r0, 80117c6 <__gethex+0x1c4>
 80117a6:	1e7b      	subs	r3, r7, #1
 80117a8:	1159      	asrs	r1, r3, #5
 80117aa:	f003 021f 	and.w	r2, r3, #31
 80117ae:	f04f 0a01 	mov.w	sl, #1
 80117b2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80117b6:	fa0a f202 	lsl.w	r2, sl, r2
 80117ba:	420a      	tst	r2, r1
 80117bc:	d003      	beq.n	80117c6 <__gethex+0x1c4>
 80117be:	4553      	cmp	r3, sl
 80117c0:	dc46      	bgt.n	8011850 <__gethex+0x24e>
 80117c2:	f04f 0a02 	mov.w	sl, #2
 80117c6:	4639      	mov	r1, r7
 80117c8:	4628      	mov	r0, r5
 80117ca:	f7ff fecb 	bl	8011564 <rshift>
 80117ce:	443c      	add	r4, r7
 80117d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80117d4:	42a3      	cmp	r3, r4
 80117d6:	da52      	bge.n	801187e <__gethex+0x27c>
 80117d8:	4629      	mov	r1, r5
 80117da:	9802      	ldr	r0, [sp, #8]
 80117dc:	f000 fa44 	bl	8011c68 <_Bfree>
 80117e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80117e2:	2300      	movs	r3, #0
 80117e4:	6013      	str	r3, [r2, #0]
 80117e6:	27a3      	movs	r7, #163	; 0xa3
 80117e8:	e793      	b.n	8011712 <__gethex+0x110>
 80117ea:	3101      	adds	r1, #1
 80117ec:	105b      	asrs	r3, r3, #1
 80117ee:	e7b0      	b.n	8011752 <__gethex+0x150>
 80117f0:	1e73      	subs	r3, r6, #1
 80117f2:	9305      	str	r3, [sp, #20]
 80117f4:	9a07      	ldr	r2, [sp, #28]
 80117f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80117fa:	4293      	cmp	r3, r2
 80117fc:	d018      	beq.n	8011830 <__gethex+0x22e>
 80117fe:	f1bb 0f20 	cmp.w	fp, #32
 8011802:	d107      	bne.n	8011814 <__gethex+0x212>
 8011804:	9b04      	ldr	r3, [sp, #16]
 8011806:	f8c3 a000 	str.w	sl, [r3]
 801180a:	3304      	adds	r3, #4
 801180c:	f04f 0a00 	mov.w	sl, #0
 8011810:	9304      	str	r3, [sp, #16]
 8011812:	46d3      	mov	fp, sl
 8011814:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011818:	f7ff fede 	bl	80115d8 <__hexdig_fun>
 801181c:	f000 000f 	and.w	r0, r0, #15
 8011820:	fa00 f00b 	lsl.w	r0, r0, fp
 8011824:	ea4a 0a00 	orr.w	sl, sl, r0
 8011828:	f10b 0b04 	add.w	fp, fp, #4
 801182c:	9b05      	ldr	r3, [sp, #20]
 801182e:	e00d      	b.n	801184c <__gethex+0x24a>
 8011830:	9b05      	ldr	r3, [sp, #20]
 8011832:	9a08      	ldr	r2, [sp, #32]
 8011834:	4413      	add	r3, r2
 8011836:	42bb      	cmp	r3, r7
 8011838:	d3e1      	bcc.n	80117fe <__gethex+0x1fc>
 801183a:	4618      	mov	r0, r3
 801183c:	9a01      	ldr	r2, [sp, #4]
 801183e:	9903      	ldr	r1, [sp, #12]
 8011840:	9309      	str	r3, [sp, #36]	; 0x24
 8011842:	f001 f8c0 	bl	80129c6 <strncmp>
 8011846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011848:	2800      	cmp	r0, #0
 801184a:	d1d8      	bne.n	80117fe <__gethex+0x1fc>
 801184c:	461e      	mov	r6, r3
 801184e:	e791      	b.n	8011774 <__gethex+0x172>
 8011850:	1eb9      	subs	r1, r7, #2
 8011852:	4628      	mov	r0, r5
 8011854:	f000 fdb2 	bl	80123bc <__any_on>
 8011858:	2800      	cmp	r0, #0
 801185a:	d0b2      	beq.n	80117c2 <__gethex+0x1c0>
 801185c:	f04f 0a03 	mov.w	sl, #3
 8011860:	e7b1      	b.n	80117c6 <__gethex+0x1c4>
 8011862:	da09      	bge.n	8011878 <__gethex+0x276>
 8011864:	1bf7      	subs	r7, r6, r7
 8011866:	4629      	mov	r1, r5
 8011868:	463a      	mov	r2, r7
 801186a:	9802      	ldr	r0, [sp, #8]
 801186c:	f000 fbc8 	bl	8012000 <__lshift>
 8011870:	1be4      	subs	r4, r4, r7
 8011872:	4605      	mov	r5, r0
 8011874:	f100 0914 	add.w	r9, r0, #20
 8011878:	f04f 0a00 	mov.w	sl, #0
 801187c:	e7a8      	b.n	80117d0 <__gethex+0x1ce>
 801187e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011882:	42a0      	cmp	r0, r4
 8011884:	dd6a      	ble.n	801195c <__gethex+0x35a>
 8011886:	1b04      	subs	r4, r0, r4
 8011888:	42a6      	cmp	r6, r4
 801188a:	dc2e      	bgt.n	80118ea <__gethex+0x2e8>
 801188c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011890:	2b02      	cmp	r3, #2
 8011892:	d022      	beq.n	80118da <__gethex+0x2d8>
 8011894:	2b03      	cmp	r3, #3
 8011896:	d024      	beq.n	80118e2 <__gethex+0x2e0>
 8011898:	2b01      	cmp	r3, #1
 801189a:	d115      	bne.n	80118c8 <__gethex+0x2c6>
 801189c:	42a6      	cmp	r6, r4
 801189e:	d113      	bne.n	80118c8 <__gethex+0x2c6>
 80118a0:	2e01      	cmp	r6, #1
 80118a2:	dc0b      	bgt.n	80118bc <__gethex+0x2ba>
 80118a4:	9a06      	ldr	r2, [sp, #24]
 80118a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80118aa:	6013      	str	r3, [r2, #0]
 80118ac:	2301      	movs	r3, #1
 80118ae:	612b      	str	r3, [r5, #16]
 80118b0:	f8c9 3000 	str.w	r3, [r9]
 80118b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80118b6:	2762      	movs	r7, #98	; 0x62
 80118b8:	601d      	str	r5, [r3, #0]
 80118ba:	e72a      	b.n	8011712 <__gethex+0x110>
 80118bc:	1e71      	subs	r1, r6, #1
 80118be:	4628      	mov	r0, r5
 80118c0:	f000 fd7c 	bl	80123bc <__any_on>
 80118c4:	2800      	cmp	r0, #0
 80118c6:	d1ed      	bne.n	80118a4 <__gethex+0x2a2>
 80118c8:	4629      	mov	r1, r5
 80118ca:	9802      	ldr	r0, [sp, #8]
 80118cc:	f000 f9cc 	bl	8011c68 <_Bfree>
 80118d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80118d2:	2300      	movs	r3, #0
 80118d4:	6013      	str	r3, [r2, #0]
 80118d6:	2750      	movs	r7, #80	; 0x50
 80118d8:	e71b      	b.n	8011712 <__gethex+0x110>
 80118da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d0e1      	beq.n	80118a4 <__gethex+0x2a2>
 80118e0:	e7f2      	b.n	80118c8 <__gethex+0x2c6>
 80118e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d1dd      	bne.n	80118a4 <__gethex+0x2a2>
 80118e8:	e7ee      	b.n	80118c8 <__gethex+0x2c6>
 80118ea:	1e67      	subs	r7, r4, #1
 80118ec:	f1ba 0f00 	cmp.w	sl, #0
 80118f0:	d131      	bne.n	8011956 <__gethex+0x354>
 80118f2:	b127      	cbz	r7, 80118fe <__gethex+0x2fc>
 80118f4:	4639      	mov	r1, r7
 80118f6:	4628      	mov	r0, r5
 80118f8:	f000 fd60 	bl	80123bc <__any_on>
 80118fc:	4682      	mov	sl, r0
 80118fe:	117a      	asrs	r2, r7, #5
 8011900:	2301      	movs	r3, #1
 8011902:	f007 071f 	and.w	r7, r7, #31
 8011906:	fa03 f707 	lsl.w	r7, r3, r7
 801190a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801190e:	4621      	mov	r1, r4
 8011910:	421f      	tst	r7, r3
 8011912:	4628      	mov	r0, r5
 8011914:	bf18      	it	ne
 8011916:	f04a 0a02 	orrne.w	sl, sl, #2
 801191a:	1b36      	subs	r6, r6, r4
 801191c:	f7ff fe22 	bl	8011564 <rshift>
 8011920:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8011924:	2702      	movs	r7, #2
 8011926:	f1ba 0f00 	cmp.w	sl, #0
 801192a:	d048      	beq.n	80119be <__gethex+0x3bc>
 801192c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011930:	2b02      	cmp	r3, #2
 8011932:	d015      	beq.n	8011960 <__gethex+0x35e>
 8011934:	2b03      	cmp	r3, #3
 8011936:	d017      	beq.n	8011968 <__gethex+0x366>
 8011938:	2b01      	cmp	r3, #1
 801193a:	d109      	bne.n	8011950 <__gethex+0x34e>
 801193c:	f01a 0f02 	tst.w	sl, #2
 8011940:	d006      	beq.n	8011950 <__gethex+0x34e>
 8011942:	f8d9 3000 	ldr.w	r3, [r9]
 8011946:	ea4a 0a03 	orr.w	sl, sl, r3
 801194a:	f01a 0f01 	tst.w	sl, #1
 801194e:	d10e      	bne.n	801196e <__gethex+0x36c>
 8011950:	f047 0710 	orr.w	r7, r7, #16
 8011954:	e033      	b.n	80119be <__gethex+0x3bc>
 8011956:	f04f 0a01 	mov.w	sl, #1
 801195a:	e7d0      	b.n	80118fe <__gethex+0x2fc>
 801195c:	2701      	movs	r7, #1
 801195e:	e7e2      	b.n	8011926 <__gethex+0x324>
 8011960:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011962:	f1c3 0301 	rsb	r3, r3, #1
 8011966:	9315      	str	r3, [sp, #84]	; 0x54
 8011968:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801196a:	2b00      	cmp	r3, #0
 801196c:	d0f0      	beq.n	8011950 <__gethex+0x34e>
 801196e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8011972:	f105 0314 	add.w	r3, r5, #20
 8011976:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801197a:	eb03 010a 	add.w	r1, r3, sl
 801197e:	f04f 0c00 	mov.w	ip, #0
 8011982:	4618      	mov	r0, r3
 8011984:	f853 2b04 	ldr.w	r2, [r3], #4
 8011988:	f1b2 3fff 	cmp.w	r2, #4294967295
 801198c:	d01c      	beq.n	80119c8 <__gethex+0x3c6>
 801198e:	3201      	adds	r2, #1
 8011990:	6002      	str	r2, [r0, #0]
 8011992:	2f02      	cmp	r7, #2
 8011994:	f105 0314 	add.w	r3, r5, #20
 8011998:	d138      	bne.n	8011a0c <__gethex+0x40a>
 801199a:	f8d8 2000 	ldr.w	r2, [r8]
 801199e:	3a01      	subs	r2, #1
 80119a0:	42b2      	cmp	r2, r6
 80119a2:	d10a      	bne.n	80119ba <__gethex+0x3b8>
 80119a4:	1171      	asrs	r1, r6, #5
 80119a6:	2201      	movs	r2, #1
 80119a8:	f006 061f 	and.w	r6, r6, #31
 80119ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80119b0:	fa02 f606 	lsl.w	r6, r2, r6
 80119b4:	421e      	tst	r6, r3
 80119b6:	bf18      	it	ne
 80119b8:	4617      	movne	r7, r2
 80119ba:	f047 0720 	orr.w	r7, r7, #32
 80119be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80119c0:	601d      	str	r5, [r3, #0]
 80119c2:	9b06      	ldr	r3, [sp, #24]
 80119c4:	601c      	str	r4, [r3, #0]
 80119c6:	e6a4      	b.n	8011712 <__gethex+0x110>
 80119c8:	4299      	cmp	r1, r3
 80119ca:	f843 cc04 	str.w	ip, [r3, #-4]
 80119ce:	d8d8      	bhi.n	8011982 <__gethex+0x380>
 80119d0:	68ab      	ldr	r3, [r5, #8]
 80119d2:	4599      	cmp	r9, r3
 80119d4:	db12      	blt.n	80119fc <__gethex+0x3fa>
 80119d6:	6869      	ldr	r1, [r5, #4]
 80119d8:	9802      	ldr	r0, [sp, #8]
 80119da:	3101      	adds	r1, #1
 80119dc:	f000 f910 	bl	8011c00 <_Balloc>
 80119e0:	692a      	ldr	r2, [r5, #16]
 80119e2:	3202      	adds	r2, #2
 80119e4:	f105 010c 	add.w	r1, r5, #12
 80119e8:	4683      	mov	fp, r0
 80119ea:	0092      	lsls	r2, r2, #2
 80119ec:	300c      	adds	r0, #12
 80119ee:	f7fd f8b1 	bl	800eb54 <memcpy>
 80119f2:	4629      	mov	r1, r5
 80119f4:	9802      	ldr	r0, [sp, #8]
 80119f6:	f000 f937 	bl	8011c68 <_Bfree>
 80119fa:	465d      	mov	r5, fp
 80119fc:	692b      	ldr	r3, [r5, #16]
 80119fe:	1c5a      	adds	r2, r3, #1
 8011a00:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011a04:	612a      	str	r2, [r5, #16]
 8011a06:	2201      	movs	r2, #1
 8011a08:	615a      	str	r2, [r3, #20]
 8011a0a:	e7c2      	b.n	8011992 <__gethex+0x390>
 8011a0c:	692a      	ldr	r2, [r5, #16]
 8011a0e:	454a      	cmp	r2, r9
 8011a10:	dd0b      	ble.n	8011a2a <__gethex+0x428>
 8011a12:	2101      	movs	r1, #1
 8011a14:	4628      	mov	r0, r5
 8011a16:	f7ff fda5 	bl	8011564 <rshift>
 8011a1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a1e:	3401      	adds	r4, #1
 8011a20:	42a3      	cmp	r3, r4
 8011a22:	f6ff aed9 	blt.w	80117d8 <__gethex+0x1d6>
 8011a26:	2701      	movs	r7, #1
 8011a28:	e7c7      	b.n	80119ba <__gethex+0x3b8>
 8011a2a:	f016 061f 	ands.w	r6, r6, #31
 8011a2e:	d0fa      	beq.n	8011a26 <__gethex+0x424>
 8011a30:	449a      	add	sl, r3
 8011a32:	f1c6 0620 	rsb	r6, r6, #32
 8011a36:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011a3a:	f000 f9a5 	bl	8011d88 <__hi0bits>
 8011a3e:	42b0      	cmp	r0, r6
 8011a40:	dbe7      	blt.n	8011a12 <__gethex+0x410>
 8011a42:	e7f0      	b.n	8011a26 <__gethex+0x424>

08011a44 <L_shift>:
 8011a44:	f1c2 0208 	rsb	r2, r2, #8
 8011a48:	0092      	lsls	r2, r2, #2
 8011a4a:	b570      	push	{r4, r5, r6, lr}
 8011a4c:	f1c2 0620 	rsb	r6, r2, #32
 8011a50:	6843      	ldr	r3, [r0, #4]
 8011a52:	6804      	ldr	r4, [r0, #0]
 8011a54:	fa03 f506 	lsl.w	r5, r3, r6
 8011a58:	432c      	orrs	r4, r5
 8011a5a:	40d3      	lsrs	r3, r2
 8011a5c:	6004      	str	r4, [r0, #0]
 8011a5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011a62:	4288      	cmp	r0, r1
 8011a64:	d3f4      	bcc.n	8011a50 <L_shift+0xc>
 8011a66:	bd70      	pop	{r4, r5, r6, pc}

08011a68 <__match>:
 8011a68:	b530      	push	{r4, r5, lr}
 8011a6a:	6803      	ldr	r3, [r0, #0]
 8011a6c:	3301      	adds	r3, #1
 8011a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a72:	b914      	cbnz	r4, 8011a7a <__match+0x12>
 8011a74:	6003      	str	r3, [r0, #0]
 8011a76:	2001      	movs	r0, #1
 8011a78:	bd30      	pop	{r4, r5, pc}
 8011a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011a82:	2d19      	cmp	r5, #25
 8011a84:	bf98      	it	ls
 8011a86:	3220      	addls	r2, #32
 8011a88:	42a2      	cmp	r2, r4
 8011a8a:	d0f0      	beq.n	8011a6e <__match+0x6>
 8011a8c:	2000      	movs	r0, #0
 8011a8e:	e7f3      	b.n	8011a78 <__match+0x10>

08011a90 <__hexnan>:
 8011a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a94:	680b      	ldr	r3, [r1, #0]
 8011a96:	6801      	ldr	r1, [r0, #0]
 8011a98:	115f      	asrs	r7, r3, #5
 8011a9a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8011a9e:	f013 031f 	ands.w	r3, r3, #31
 8011aa2:	b087      	sub	sp, #28
 8011aa4:	bf18      	it	ne
 8011aa6:	3704      	addne	r7, #4
 8011aa8:	2500      	movs	r5, #0
 8011aaa:	1f3e      	subs	r6, r7, #4
 8011aac:	4682      	mov	sl, r0
 8011aae:	4690      	mov	r8, r2
 8011ab0:	9301      	str	r3, [sp, #4]
 8011ab2:	f847 5c04 	str.w	r5, [r7, #-4]
 8011ab6:	46b1      	mov	r9, r6
 8011ab8:	4634      	mov	r4, r6
 8011aba:	9502      	str	r5, [sp, #8]
 8011abc:	46ab      	mov	fp, r5
 8011abe:	784a      	ldrb	r2, [r1, #1]
 8011ac0:	1c4b      	adds	r3, r1, #1
 8011ac2:	9303      	str	r3, [sp, #12]
 8011ac4:	b342      	cbz	r2, 8011b18 <__hexnan+0x88>
 8011ac6:	4610      	mov	r0, r2
 8011ac8:	9105      	str	r1, [sp, #20]
 8011aca:	9204      	str	r2, [sp, #16]
 8011acc:	f7ff fd84 	bl	80115d8 <__hexdig_fun>
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d143      	bne.n	8011b5c <__hexnan+0xcc>
 8011ad4:	9a04      	ldr	r2, [sp, #16]
 8011ad6:	9905      	ldr	r1, [sp, #20]
 8011ad8:	2a20      	cmp	r2, #32
 8011ada:	d818      	bhi.n	8011b0e <__hexnan+0x7e>
 8011adc:	9b02      	ldr	r3, [sp, #8]
 8011ade:	459b      	cmp	fp, r3
 8011ae0:	dd13      	ble.n	8011b0a <__hexnan+0x7a>
 8011ae2:	454c      	cmp	r4, r9
 8011ae4:	d206      	bcs.n	8011af4 <__hexnan+0x64>
 8011ae6:	2d07      	cmp	r5, #7
 8011ae8:	dc04      	bgt.n	8011af4 <__hexnan+0x64>
 8011aea:	462a      	mov	r2, r5
 8011aec:	4649      	mov	r1, r9
 8011aee:	4620      	mov	r0, r4
 8011af0:	f7ff ffa8 	bl	8011a44 <L_shift>
 8011af4:	4544      	cmp	r4, r8
 8011af6:	d944      	bls.n	8011b82 <__hexnan+0xf2>
 8011af8:	2300      	movs	r3, #0
 8011afa:	f1a4 0904 	sub.w	r9, r4, #4
 8011afe:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b02:	f8cd b008 	str.w	fp, [sp, #8]
 8011b06:	464c      	mov	r4, r9
 8011b08:	461d      	mov	r5, r3
 8011b0a:	9903      	ldr	r1, [sp, #12]
 8011b0c:	e7d7      	b.n	8011abe <__hexnan+0x2e>
 8011b0e:	2a29      	cmp	r2, #41	; 0x29
 8011b10:	d14a      	bne.n	8011ba8 <__hexnan+0x118>
 8011b12:	3102      	adds	r1, #2
 8011b14:	f8ca 1000 	str.w	r1, [sl]
 8011b18:	f1bb 0f00 	cmp.w	fp, #0
 8011b1c:	d044      	beq.n	8011ba8 <__hexnan+0x118>
 8011b1e:	454c      	cmp	r4, r9
 8011b20:	d206      	bcs.n	8011b30 <__hexnan+0xa0>
 8011b22:	2d07      	cmp	r5, #7
 8011b24:	dc04      	bgt.n	8011b30 <__hexnan+0xa0>
 8011b26:	462a      	mov	r2, r5
 8011b28:	4649      	mov	r1, r9
 8011b2a:	4620      	mov	r0, r4
 8011b2c:	f7ff ff8a 	bl	8011a44 <L_shift>
 8011b30:	4544      	cmp	r4, r8
 8011b32:	d928      	bls.n	8011b86 <__hexnan+0xf6>
 8011b34:	4643      	mov	r3, r8
 8011b36:	f854 2b04 	ldr.w	r2, [r4], #4
 8011b3a:	f843 2b04 	str.w	r2, [r3], #4
 8011b3e:	42a6      	cmp	r6, r4
 8011b40:	d2f9      	bcs.n	8011b36 <__hexnan+0xa6>
 8011b42:	2200      	movs	r2, #0
 8011b44:	f843 2b04 	str.w	r2, [r3], #4
 8011b48:	429e      	cmp	r6, r3
 8011b4a:	d2fb      	bcs.n	8011b44 <__hexnan+0xb4>
 8011b4c:	6833      	ldr	r3, [r6, #0]
 8011b4e:	b91b      	cbnz	r3, 8011b58 <__hexnan+0xc8>
 8011b50:	4546      	cmp	r6, r8
 8011b52:	d127      	bne.n	8011ba4 <__hexnan+0x114>
 8011b54:	2301      	movs	r3, #1
 8011b56:	6033      	str	r3, [r6, #0]
 8011b58:	2005      	movs	r0, #5
 8011b5a:	e026      	b.n	8011baa <__hexnan+0x11a>
 8011b5c:	3501      	adds	r5, #1
 8011b5e:	2d08      	cmp	r5, #8
 8011b60:	f10b 0b01 	add.w	fp, fp, #1
 8011b64:	dd06      	ble.n	8011b74 <__hexnan+0xe4>
 8011b66:	4544      	cmp	r4, r8
 8011b68:	d9cf      	bls.n	8011b0a <__hexnan+0x7a>
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b70:	2501      	movs	r5, #1
 8011b72:	3c04      	subs	r4, #4
 8011b74:	6822      	ldr	r2, [r4, #0]
 8011b76:	f000 000f 	and.w	r0, r0, #15
 8011b7a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011b7e:	6020      	str	r0, [r4, #0]
 8011b80:	e7c3      	b.n	8011b0a <__hexnan+0x7a>
 8011b82:	2508      	movs	r5, #8
 8011b84:	e7c1      	b.n	8011b0a <__hexnan+0x7a>
 8011b86:	9b01      	ldr	r3, [sp, #4]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d0df      	beq.n	8011b4c <__hexnan+0xbc>
 8011b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b90:	f1c3 0320 	rsb	r3, r3, #32
 8011b94:	fa22 f303 	lsr.w	r3, r2, r3
 8011b98:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8011b9c:	401a      	ands	r2, r3
 8011b9e:	f847 2c04 	str.w	r2, [r7, #-4]
 8011ba2:	e7d3      	b.n	8011b4c <__hexnan+0xbc>
 8011ba4:	3e04      	subs	r6, #4
 8011ba6:	e7d1      	b.n	8011b4c <__hexnan+0xbc>
 8011ba8:	2004      	movs	r0, #4
 8011baa:	b007      	add	sp, #28
 8011bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011bb0 <__locale_ctype_ptr_l>:
 8011bb0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011bb4:	4770      	bx	lr

08011bb6 <__localeconv_l>:
 8011bb6:	30f0      	adds	r0, #240	; 0xf0
 8011bb8:	4770      	bx	lr
	...

08011bbc <_localeconv_r>:
 8011bbc:	4b04      	ldr	r3, [pc, #16]	; (8011bd0 <_localeconv_r+0x14>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	6a18      	ldr	r0, [r3, #32]
 8011bc2:	4b04      	ldr	r3, [pc, #16]	; (8011bd4 <_localeconv_r+0x18>)
 8011bc4:	2800      	cmp	r0, #0
 8011bc6:	bf08      	it	eq
 8011bc8:	4618      	moveq	r0, r3
 8011bca:	30f0      	adds	r0, #240	; 0xf0
 8011bcc:	4770      	bx	lr
 8011bce:	bf00      	nop
 8011bd0:	2000064c 	.word	0x2000064c
 8011bd4:	200006b0 	.word	0x200006b0

08011bd8 <__ascii_mbtowc>:
 8011bd8:	b082      	sub	sp, #8
 8011bda:	b901      	cbnz	r1, 8011bde <__ascii_mbtowc+0x6>
 8011bdc:	a901      	add	r1, sp, #4
 8011bde:	b142      	cbz	r2, 8011bf2 <__ascii_mbtowc+0x1a>
 8011be0:	b14b      	cbz	r3, 8011bf6 <__ascii_mbtowc+0x1e>
 8011be2:	7813      	ldrb	r3, [r2, #0]
 8011be4:	600b      	str	r3, [r1, #0]
 8011be6:	7812      	ldrb	r2, [r2, #0]
 8011be8:	1c10      	adds	r0, r2, #0
 8011bea:	bf18      	it	ne
 8011bec:	2001      	movne	r0, #1
 8011bee:	b002      	add	sp, #8
 8011bf0:	4770      	bx	lr
 8011bf2:	4610      	mov	r0, r2
 8011bf4:	e7fb      	b.n	8011bee <__ascii_mbtowc+0x16>
 8011bf6:	f06f 0001 	mvn.w	r0, #1
 8011bfa:	e7f8      	b.n	8011bee <__ascii_mbtowc+0x16>

08011bfc <__malloc_lock>:
 8011bfc:	4770      	bx	lr

08011bfe <__malloc_unlock>:
 8011bfe:	4770      	bx	lr

08011c00 <_Balloc>:
 8011c00:	b570      	push	{r4, r5, r6, lr}
 8011c02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011c04:	4604      	mov	r4, r0
 8011c06:	460e      	mov	r6, r1
 8011c08:	b93d      	cbnz	r5, 8011c1a <_Balloc+0x1a>
 8011c0a:	2010      	movs	r0, #16
 8011c0c:	f7fc ff92 	bl	800eb34 <malloc>
 8011c10:	6260      	str	r0, [r4, #36]	; 0x24
 8011c12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011c16:	6005      	str	r5, [r0, #0]
 8011c18:	60c5      	str	r5, [r0, #12]
 8011c1a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011c1c:	68eb      	ldr	r3, [r5, #12]
 8011c1e:	b183      	cbz	r3, 8011c42 <_Balloc+0x42>
 8011c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011c28:	b9b8      	cbnz	r0, 8011c5a <_Balloc+0x5a>
 8011c2a:	2101      	movs	r1, #1
 8011c2c:	fa01 f506 	lsl.w	r5, r1, r6
 8011c30:	1d6a      	adds	r2, r5, #5
 8011c32:	0092      	lsls	r2, r2, #2
 8011c34:	4620      	mov	r0, r4
 8011c36:	f000 fbe2 	bl	80123fe <_calloc_r>
 8011c3a:	b160      	cbz	r0, 8011c56 <_Balloc+0x56>
 8011c3c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011c40:	e00e      	b.n	8011c60 <_Balloc+0x60>
 8011c42:	2221      	movs	r2, #33	; 0x21
 8011c44:	2104      	movs	r1, #4
 8011c46:	4620      	mov	r0, r4
 8011c48:	f000 fbd9 	bl	80123fe <_calloc_r>
 8011c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c4e:	60e8      	str	r0, [r5, #12]
 8011c50:	68db      	ldr	r3, [r3, #12]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d1e4      	bne.n	8011c20 <_Balloc+0x20>
 8011c56:	2000      	movs	r0, #0
 8011c58:	bd70      	pop	{r4, r5, r6, pc}
 8011c5a:	6802      	ldr	r2, [r0, #0]
 8011c5c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011c60:	2300      	movs	r3, #0
 8011c62:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011c66:	e7f7      	b.n	8011c58 <_Balloc+0x58>

08011c68 <_Bfree>:
 8011c68:	b570      	push	{r4, r5, r6, lr}
 8011c6a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011c6c:	4606      	mov	r6, r0
 8011c6e:	460d      	mov	r5, r1
 8011c70:	b93c      	cbnz	r4, 8011c82 <_Bfree+0x1a>
 8011c72:	2010      	movs	r0, #16
 8011c74:	f7fc ff5e 	bl	800eb34 <malloc>
 8011c78:	6270      	str	r0, [r6, #36]	; 0x24
 8011c7a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011c7e:	6004      	str	r4, [r0, #0]
 8011c80:	60c4      	str	r4, [r0, #12]
 8011c82:	b13d      	cbz	r5, 8011c94 <_Bfree+0x2c>
 8011c84:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011c86:	686a      	ldr	r2, [r5, #4]
 8011c88:	68db      	ldr	r3, [r3, #12]
 8011c8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011c8e:	6029      	str	r1, [r5, #0]
 8011c90:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011c94:	bd70      	pop	{r4, r5, r6, pc}

08011c96 <__multadd>:
 8011c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c9a:	690d      	ldr	r5, [r1, #16]
 8011c9c:	461f      	mov	r7, r3
 8011c9e:	4606      	mov	r6, r0
 8011ca0:	460c      	mov	r4, r1
 8011ca2:	f101 0c14 	add.w	ip, r1, #20
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	f8dc 0000 	ldr.w	r0, [ip]
 8011cac:	b281      	uxth	r1, r0
 8011cae:	fb02 7101 	mla	r1, r2, r1, r7
 8011cb2:	0c0f      	lsrs	r7, r1, #16
 8011cb4:	0c00      	lsrs	r0, r0, #16
 8011cb6:	fb02 7000 	mla	r0, r2, r0, r7
 8011cba:	b289      	uxth	r1, r1
 8011cbc:	3301      	adds	r3, #1
 8011cbe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011cc2:	429d      	cmp	r5, r3
 8011cc4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011cc8:	f84c 1b04 	str.w	r1, [ip], #4
 8011ccc:	dcec      	bgt.n	8011ca8 <__multadd+0x12>
 8011cce:	b1d7      	cbz	r7, 8011d06 <__multadd+0x70>
 8011cd0:	68a3      	ldr	r3, [r4, #8]
 8011cd2:	42ab      	cmp	r3, r5
 8011cd4:	dc12      	bgt.n	8011cfc <__multadd+0x66>
 8011cd6:	6861      	ldr	r1, [r4, #4]
 8011cd8:	4630      	mov	r0, r6
 8011cda:	3101      	adds	r1, #1
 8011cdc:	f7ff ff90 	bl	8011c00 <_Balloc>
 8011ce0:	6922      	ldr	r2, [r4, #16]
 8011ce2:	3202      	adds	r2, #2
 8011ce4:	f104 010c 	add.w	r1, r4, #12
 8011ce8:	4680      	mov	r8, r0
 8011cea:	0092      	lsls	r2, r2, #2
 8011cec:	300c      	adds	r0, #12
 8011cee:	f7fc ff31 	bl	800eb54 <memcpy>
 8011cf2:	4621      	mov	r1, r4
 8011cf4:	4630      	mov	r0, r6
 8011cf6:	f7ff ffb7 	bl	8011c68 <_Bfree>
 8011cfa:	4644      	mov	r4, r8
 8011cfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011d00:	3501      	adds	r5, #1
 8011d02:	615f      	str	r7, [r3, #20]
 8011d04:	6125      	str	r5, [r4, #16]
 8011d06:	4620      	mov	r0, r4
 8011d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d0c <__s2b>:
 8011d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d10:	460c      	mov	r4, r1
 8011d12:	4615      	mov	r5, r2
 8011d14:	461f      	mov	r7, r3
 8011d16:	2209      	movs	r2, #9
 8011d18:	3308      	adds	r3, #8
 8011d1a:	4606      	mov	r6, r0
 8011d1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d20:	2100      	movs	r1, #0
 8011d22:	2201      	movs	r2, #1
 8011d24:	429a      	cmp	r2, r3
 8011d26:	db20      	blt.n	8011d6a <__s2b+0x5e>
 8011d28:	4630      	mov	r0, r6
 8011d2a:	f7ff ff69 	bl	8011c00 <_Balloc>
 8011d2e:	9b08      	ldr	r3, [sp, #32]
 8011d30:	6143      	str	r3, [r0, #20]
 8011d32:	2d09      	cmp	r5, #9
 8011d34:	f04f 0301 	mov.w	r3, #1
 8011d38:	6103      	str	r3, [r0, #16]
 8011d3a:	dd19      	ble.n	8011d70 <__s2b+0x64>
 8011d3c:	f104 0809 	add.w	r8, r4, #9
 8011d40:	46c1      	mov	r9, r8
 8011d42:	442c      	add	r4, r5
 8011d44:	f819 3b01 	ldrb.w	r3, [r9], #1
 8011d48:	4601      	mov	r1, r0
 8011d4a:	3b30      	subs	r3, #48	; 0x30
 8011d4c:	220a      	movs	r2, #10
 8011d4e:	4630      	mov	r0, r6
 8011d50:	f7ff ffa1 	bl	8011c96 <__multadd>
 8011d54:	45a1      	cmp	r9, r4
 8011d56:	d1f5      	bne.n	8011d44 <__s2b+0x38>
 8011d58:	eb08 0405 	add.w	r4, r8, r5
 8011d5c:	3c08      	subs	r4, #8
 8011d5e:	1b2d      	subs	r5, r5, r4
 8011d60:	1963      	adds	r3, r4, r5
 8011d62:	42bb      	cmp	r3, r7
 8011d64:	db07      	blt.n	8011d76 <__s2b+0x6a>
 8011d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d6a:	0052      	lsls	r2, r2, #1
 8011d6c:	3101      	adds	r1, #1
 8011d6e:	e7d9      	b.n	8011d24 <__s2b+0x18>
 8011d70:	340a      	adds	r4, #10
 8011d72:	2509      	movs	r5, #9
 8011d74:	e7f3      	b.n	8011d5e <__s2b+0x52>
 8011d76:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011d7a:	4601      	mov	r1, r0
 8011d7c:	3b30      	subs	r3, #48	; 0x30
 8011d7e:	220a      	movs	r2, #10
 8011d80:	4630      	mov	r0, r6
 8011d82:	f7ff ff88 	bl	8011c96 <__multadd>
 8011d86:	e7eb      	b.n	8011d60 <__s2b+0x54>

08011d88 <__hi0bits>:
 8011d88:	0c02      	lsrs	r2, r0, #16
 8011d8a:	0412      	lsls	r2, r2, #16
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	b9b2      	cbnz	r2, 8011dbe <__hi0bits+0x36>
 8011d90:	0403      	lsls	r3, r0, #16
 8011d92:	2010      	movs	r0, #16
 8011d94:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011d98:	bf04      	itt	eq
 8011d9a:	021b      	lsleq	r3, r3, #8
 8011d9c:	3008      	addeq	r0, #8
 8011d9e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011da2:	bf04      	itt	eq
 8011da4:	011b      	lsleq	r3, r3, #4
 8011da6:	3004      	addeq	r0, #4
 8011da8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011dac:	bf04      	itt	eq
 8011dae:	009b      	lsleq	r3, r3, #2
 8011db0:	3002      	addeq	r0, #2
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	db06      	blt.n	8011dc4 <__hi0bits+0x3c>
 8011db6:	005b      	lsls	r3, r3, #1
 8011db8:	d503      	bpl.n	8011dc2 <__hi0bits+0x3a>
 8011dba:	3001      	adds	r0, #1
 8011dbc:	4770      	bx	lr
 8011dbe:	2000      	movs	r0, #0
 8011dc0:	e7e8      	b.n	8011d94 <__hi0bits+0xc>
 8011dc2:	2020      	movs	r0, #32
 8011dc4:	4770      	bx	lr

08011dc6 <__lo0bits>:
 8011dc6:	6803      	ldr	r3, [r0, #0]
 8011dc8:	f013 0207 	ands.w	r2, r3, #7
 8011dcc:	4601      	mov	r1, r0
 8011dce:	d00b      	beq.n	8011de8 <__lo0bits+0x22>
 8011dd0:	07da      	lsls	r2, r3, #31
 8011dd2:	d423      	bmi.n	8011e1c <__lo0bits+0x56>
 8011dd4:	0798      	lsls	r0, r3, #30
 8011dd6:	bf49      	itett	mi
 8011dd8:	085b      	lsrmi	r3, r3, #1
 8011dda:	089b      	lsrpl	r3, r3, #2
 8011ddc:	2001      	movmi	r0, #1
 8011dde:	600b      	strmi	r3, [r1, #0]
 8011de0:	bf5c      	itt	pl
 8011de2:	600b      	strpl	r3, [r1, #0]
 8011de4:	2002      	movpl	r0, #2
 8011de6:	4770      	bx	lr
 8011de8:	b298      	uxth	r0, r3
 8011dea:	b9a8      	cbnz	r0, 8011e18 <__lo0bits+0x52>
 8011dec:	0c1b      	lsrs	r3, r3, #16
 8011dee:	2010      	movs	r0, #16
 8011df0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011df4:	bf04      	itt	eq
 8011df6:	0a1b      	lsreq	r3, r3, #8
 8011df8:	3008      	addeq	r0, #8
 8011dfa:	071a      	lsls	r2, r3, #28
 8011dfc:	bf04      	itt	eq
 8011dfe:	091b      	lsreq	r3, r3, #4
 8011e00:	3004      	addeq	r0, #4
 8011e02:	079a      	lsls	r2, r3, #30
 8011e04:	bf04      	itt	eq
 8011e06:	089b      	lsreq	r3, r3, #2
 8011e08:	3002      	addeq	r0, #2
 8011e0a:	07da      	lsls	r2, r3, #31
 8011e0c:	d402      	bmi.n	8011e14 <__lo0bits+0x4e>
 8011e0e:	085b      	lsrs	r3, r3, #1
 8011e10:	d006      	beq.n	8011e20 <__lo0bits+0x5a>
 8011e12:	3001      	adds	r0, #1
 8011e14:	600b      	str	r3, [r1, #0]
 8011e16:	4770      	bx	lr
 8011e18:	4610      	mov	r0, r2
 8011e1a:	e7e9      	b.n	8011df0 <__lo0bits+0x2a>
 8011e1c:	2000      	movs	r0, #0
 8011e1e:	4770      	bx	lr
 8011e20:	2020      	movs	r0, #32
 8011e22:	4770      	bx	lr

08011e24 <__i2b>:
 8011e24:	b510      	push	{r4, lr}
 8011e26:	460c      	mov	r4, r1
 8011e28:	2101      	movs	r1, #1
 8011e2a:	f7ff fee9 	bl	8011c00 <_Balloc>
 8011e2e:	2201      	movs	r2, #1
 8011e30:	6144      	str	r4, [r0, #20]
 8011e32:	6102      	str	r2, [r0, #16]
 8011e34:	bd10      	pop	{r4, pc}

08011e36 <__multiply>:
 8011e36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e3a:	4614      	mov	r4, r2
 8011e3c:	690a      	ldr	r2, [r1, #16]
 8011e3e:	6923      	ldr	r3, [r4, #16]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	bfb8      	it	lt
 8011e44:	460b      	movlt	r3, r1
 8011e46:	4688      	mov	r8, r1
 8011e48:	bfbc      	itt	lt
 8011e4a:	46a0      	movlt	r8, r4
 8011e4c:	461c      	movlt	r4, r3
 8011e4e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011e52:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011e56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011e5a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011e5e:	eb07 0609 	add.w	r6, r7, r9
 8011e62:	42b3      	cmp	r3, r6
 8011e64:	bfb8      	it	lt
 8011e66:	3101      	addlt	r1, #1
 8011e68:	f7ff feca 	bl	8011c00 <_Balloc>
 8011e6c:	f100 0514 	add.w	r5, r0, #20
 8011e70:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011e74:	462b      	mov	r3, r5
 8011e76:	2200      	movs	r2, #0
 8011e78:	4573      	cmp	r3, lr
 8011e7a:	d316      	bcc.n	8011eaa <__multiply+0x74>
 8011e7c:	f104 0214 	add.w	r2, r4, #20
 8011e80:	f108 0114 	add.w	r1, r8, #20
 8011e84:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011e88:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011e8c:	9300      	str	r3, [sp, #0]
 8011e8e:	9b00      	ldr	r3, [sp, #0]
 8011e90:	9201      	str	r2, [sp, #4]
 8011e92:	4293      	cmp	r3, r2
 8011e94:	d80c      	bhi.n	8011eb0 <__multiply+0x7a>
 8011e96:	2e00      	cmp	r6, #0
 8011e98:	dd03      	ble.n	8011ea2 <__multiply+0x6c>
 8011e9a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d05d      	beq.n	8011f5e <__multiply+0x128>
 8011ea2:	6106      	str	r6, [r0, #16]
 8011ea4:	b003      	add	sp, #12
 8011ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eaa:	f843 2b04 	str.w	r2, [r3], #4
 8011eae:	e7e3      	b.n	8011e78 <__multiply+0x42>
 8011eb0:	f8b2 b000 	ldrh.w	fp, [r2]
 8011eb4:	f1bb 0f00 	cmp.w	fp, #0
 8011eb8:	d023      	beq.n	8011f02 <__multiply+0xcc>
 8011eba:	4689      	mov	r9, r1
 8011ebc:	46ac      	mov	ip, r5
 8011ebe:	f04f 0800 	mov.w	r8, #0
 8011ec2:	f859 4b04 	ldr.w	r4, [r9], #4
 8011ec6:	f8dc a000 	ldr.w	sl, [ip]
 8011eca:	b2a3      	uxth	r3, r4
 8011ecc:	fa1f fa8a 	uxth.w	sl, sl
 8011ed0:	fb0b a303 	mla	r3, fp, r3, sl
 8011ed4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011ed8:	f8dc 4000 	ldr.w	r4, [ip]
 8011edc:	4443      	add	r3, r8
 8011ede:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011ee2:	fb0b 840a 	mla	r4, fp, sl, r8
 8011ee6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011eea:	46e2      	mov	sl, ip
 8011eec:	b29b      	uxth	r3, r3
 8011eee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011ef2:	454f      	cmp	r7, r9
 8011ef4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011ef8:	f84a 3b04 	str.w	r3, [sl], #4
 8011efc:	d82b      	bhi.n	8011f56 <__multiply+0x120>
 8011efe:	f8cc 8004 	str.w	r8, [ip, #4]
 8011f02:	9b01      	ldr	r3, [sp, #4]
 8011f04:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011f08:	3204      	adds	r2, #4
 8011f0a:	f1ba 0f00 	cmp.w	sl, #0
 8011f0e:	d020      	beq.n	8011f52 <__multiply+0x11c>
 8011f10:	682b      	ldr	r3, [r5, #0]
 8011f12:	4689      	mov	r9, r1
 8011f14:	46a8      	mov	r8, r5
 8011f16:	f04f 0b00 	mov.w	fp, #0
 8011f1a:	f8b9 c000 	ldrh.w	ip, [r9]
 8011f1e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011f22:	fb0a 440c 	mla	r4, sl, ip, r4
 8011f26:	445c      	add	r4, fp
 8011f28:	46c4      	mov	ip, r8
 8011f2a:	b29b      	uxth	r3, r3
 8011f2c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011f30:	f84c 3b04 	str.w	r3, [ip], #4
 8011f34:	f859 3b04 	ldr.w	r3, [r9], #4
 8011f38:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011f3c:	0c1b      	lsrs	r3, r3, #16
 8011f3e:	fb0a b303 	mla	r3, sl, r3, fp
 8011f42:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011f46:	454f      	cmp	r7, r9
 8011f48:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011f4c:	d805      	bhi.n	8011f5a <__multiply+0x124>
 8011f4e:	f8c8 3004 	str.w	r3, [r8, #4]
 8011f52:	3504      	adds	r5, #4
 8011f54:	e79b      	b.n	8011e8e <__multiply+0x58>
 8011f56:	46d4      	mov	ip, sl
 8011f58:	e7b3      	b.n	8011ec2 <__multiply+0x8c>
 8011f5a:	46e0      	mov	r8, ip
 8011f5c:	e7dd      	b.n	8011f1a <__multiply+0xe4>
 8011f5e:	3e01      	subs	r6, #1
 8011f60:	e799      	b.n	8011e96 <__multiply+0x60>
	...

08011f64 <__pow5mult>:
 8011f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f68:	4615      	mov	r5, r2
 8011f6a:	f012 0203 	ands.w	r2, r2, #3
 8011f6e:	4606      	mov	r6, r0
 8011f70:	460f      	mov	r7, r1
 8011f72:	d007      	beq.n	8011f84 <__pow5mult+0x20>
 8011f74:	3a01      	subs	r2, #1
 8011f76:	4c21      	ldr	r4, [pc, #132]	; (8011ffc <__pow5mult+0x98>)
 8011f78:	2300      	movs	r3, #0
 8011f7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011f7e:	f7ff fe8a 	bl	8011c96 <__multadd>
 8011f82:	4607      	mov	r7, r0
 8011f84:	10ad      	asrs	r5, r5, #2
 8011f86:	d035      	beq.n	8011ff4 <__pow5mult+0x90>
 8011f88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011f8a:	b93c      	cbnz	r4, 8011f9c <__pow5mult+0x38>
 8011f8c:	2010      	movs	r0, #16
 8011f8e:	f7fc fdd1 	bl	800eb34 <malloc>
 8011f92:	6270      	str	r0, [r6, #36]	; 0x24
 8011f94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011f98:	6004      	str	r4, [r0, #0]
 8011f9a:	60c4      	str	r4, [r0, #12]
 8011f9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011fa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011fa4:	b94c      	cbnz	r4, 8011fba <__pow5mult+0x56>
 8011fa6:	f240 2171 	movw	r1, #625	; 0x271
 8011faa:	4630      	mov	r0, r6
 8011fac:	f7ff ff3a 	bl	8011e24 <__i2b>
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8011fb6:	4604      	mov	r4, r0
 8011fb8:	6003      	str	r3, [r0, #0]
 8011fba:	f04f 0800 	mov.w	r8, #0
 8011fbe:	07eb      	lsls	r3, r5, #31
 8011fc0:	d50a      	bpl.n	8011fd8 <__pow5mult+0x74>
 8011fc2:	4639      	mov	r1, r7
 8011fc4:	4622      	mov	r2, r4
 8011fc6:	4630      	mov	r0, r6
 8011fc8:	f7ff ff35 	bl	8011e36 <__multiply>
 8011fcc:	4639      	mov	r1, r7
 8011fce:	4681      	mov	r9, r0
 8011fd0:	4630      	mov	r0, r6
 8011fd2:	f7ff fe49 	bl	8011c68 <_Bfree>
 8011fd6:	464f      	mov	r7, r9
 8011fd8:	106d      	asrs	r5, r5, #1
 8011fda:	d00b      	beq.n	8011ff4 <__pow5mult+0x90>
 8011fdc:	6820      	ldr	r0, [r4, #0]
 8011fde:	b938      	cbnz	r0, 8011ff0 <__pow5mult+0x8c>
 8011fe0:	4622      	mov	r2, r4
 8011fe2:	4621      	mov	r1, r4
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	f7ff ff26 	bl	8011e36 <__multiply>
 8011fea:	6020      	str	r0, [r4, #0]
 8011fec:	f8c0 8000 	str.w	r8, [r0]
 8011ff0:	4604      	mov	r4, r0
 8011ff2:	e7e4      	b.n	8011fbe <__pow5mult+0x5a>
 8011ff4:	4638      	mov	r0, r7
 8011ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ffa:	bf00      	nop
 8011ffc:	08013cf8 	.word	0x08013cf8

08012000 <__lshift>:
 8012000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012004:	460c      	mov	r4, r1
 8012006:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801200a:	6923      	ldr	r3, [r4, #16]
 801200c:	6849      	ldr	r1, [r1, #4]
 801200e:	eb0a 0903 	add.w	r9, sl, r3
 8012012:	68a3      	ldr	r3, [r4, #8]
 8012014:	4607      	mov	r7, r0
 8012016:	4616      	mov	r6, r2
 8012018:	f109 0501 	add.w	r5, r9, #1
 801201c:	42ab      	cmp	r3, r5
 801201e:	db32      	blt.n	8012086 <__lshift+0x86>
 8012020:	4638      	mov	r0, r7
 8012022:	f7ff fded 	bl	8011c00 <_Balloc>
 8012026:	2300      	movs	r3, #0
 8012028:	4680      	mov	r8, r0
 801202a:	f100 0114 	add.w	r1, r0, #20
 801202e:	461a      	mov	r2, r3
 8012030:	4553      	cmp	r3, sl
 8012032:	db2b      	blt.n	801208c <__lshift+0x8c>
 8012034:	6920      	ldr	r0, [r4, #16]
 8012036:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801203a:	f104 0314 	add.w	r3, r4, #20
 801203e:	f016 021f 	ands.w	r2, r6, #31
 8012042:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012046:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801204a:	d025      	beq.n	8012098 <__lshift+0x98>
 801204c:	f1c2 0e20 	rsb	lr, r2, #32
 8012050:	2000      	movs	r0, #0
 8012052:	681e      	ldr	r6, [r3, #0]
 8012054:	468a      	mov	sl, r1
 8012056:	4096      	lsls	r6, r2
 8012058:	4330      	orrs	r0, r6
 801205a:	f84a 0b04 	str.w	r0, [sl], #4
 801205e:	f853 0b04 	ldr.w	r0, [r3], #4
 8012062:	459c      	cmp	ip, r3
 8012064:	fa20 f00e 	lsr.w	r0, r0, lr
 8012068:	d814      	bhi.n	8012094 <__lshift+0x94>
 801206a:	6048      	str	r0, [r1, #4]
 801206c:	b108      	cbz	r0, 8012072 <__lshift+0x72>
 801206e:	f109 0502 	add.w	r5, r9, #2
 8012072:	3d01      	subs	r5, #1
 8012074:	4638      	mov	r0, r7
 8012076:	f8c8 5010 	str.w	r5, [r8, #16]
 801207a:	4621      	mov	r1, r4
 801207c:	f7ff fdf4 	bl	8011c68 <_Bfree>
 8012080:	4640      	mov	r0, r8
 8012082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012086:	3101      	adds	r1, #1
 8012088:	005b      	lsls	r3, r3, #1
 801208a:	e7c7      	b.n	801201c <__lshift+0x1c>
 801208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012090:	3301      	adds	r3, #1
 8012092:	e7cd      	b.n	8012030 <__lshift+0x30>
 8012094:	4651      	mov	r1, sl
 8012096:	e7dc      	b.n	8012052 <__lshift+0x52>
 8012098:	3904      	subs	r1, #4
 801209a:	f853 2b04 	ldr.w	r2, [r3], #4
 801209e:	f841 2f04 	str.w	r2, [r1, #4]!
 80120a2:	459c      	cmp	ip, r3
 80120a4:	d8f9      	bhi.n	801209a <__lshift+0x9a>
 80120a6:	e7e4      	b.n	8012072 <__lshift+0x72>

080120a8 <__mcmp>:
 80120a8:	6903      	ldr	r3, [r0, #16]
 80120aa:	690a      	ldr	r2, [r1, #16]
 80120ac:	1a9b      	subs	r3, r3, r2
 80120ae:	b530      	push	{r4, r5, lr}
 80120b0:	d10c      	bne.n	80120cc <__mcmp+0x24>
 80120b2:	0092      	lsls	r2, r2, #2
 80120b4:	3014      	adds	r0, #20
 80120b6:	3114      	adds	r1, #20
 80120b8:	1884      	adds	r4, r0, r2
 80120ba:	4411      	add	r1, r2
 80120bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80120c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80120c4:	4295      	cmp	r5, r2
 80120c6:	d003      	beq.n	80120d0 <__mcmp+0x28>
 80120c8:	d305      	bcc.n	80120d6 <__mcmp+0x2e>
 80120ca:	2301      	movs	r3, #1
 80120cc:	4618      	mov	r0, r3
 80120ce:	bd30      	pop	{r4, r5, pc}
 80120d0:	42a0      	cmp	r0, r4
 80120d2:	d3f3      	bcc.n	80120bc <__mcmp+0x14>
 80120d4:	e7fa      	b.n	80120cc <__mcmp+0x24>
 80120d6:	f04f 33ff 	mov.w	r3, #4294967295
 80120da:	e7f7      	b.n	80120cc <__mcmp+0x24>

080120dc <__mdiff>:
 80120dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120e0:	460d      	mov	r5, r1
 80120e2:	4607      	mov	r7, r0
 80120e4:	4611      	mov	r1, r2
 80120e6:	4628      	mov	r0, r5
 80120e8:	4614      	mov	r4, r2
 80120ea:	f7ff ffdd 	bl	80120a8 <__mcmp>
 80120ee:	1e06      	subs	r6, r0, #0
 80120f0:	d108      	bne.n	8012104 <__mdiff+0x28>
 80120f2:	4631      	mov	r1, r6
 80120f4:	4638      	mov	r0, r7
 80120f6:	f7ff fd83 	bl	8011c00 <_Balloc>
 80120fa:	2301      	movs	r3, #1
 80120fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012104:	bfa4      	itt	ge
 8012106:	4623      	movge	r3, r4
 8012108:	462c      	movge	r4, r5
 801210a:	4638      	mov	r0, r7
 801210c:	6861      	ldr	r1, [r4, #4]
 801210e:	bfa6      	itte	ge
 8012110:	461d      	movge	r5, r3
 8012112:	2600      	movge	r6, #0
 8012114:	2601      	movlt	r6, #1
 8012116:	f7ff fd73 	bl	8011c00 <_Balloc>
 801211a:	692b      	ldr	r3, [r5, #16]
 801211c:	60c6      	str	r6, [r0, #12]
 801211e:	6926      	ldr	r6, [r4, #16]
 8012120:	f105 0914 	add.w	r9, r5, #20
 8012124:	f104 0214 	add.w	r2, r4, #20
 8012128:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801212c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012130:	f100 0514 	add.w	r5, r0, #20
 8012134:	f04f 0e00 	mov.w	lr, #0
 8012138:	f852 ab04 	ldr.w	sl, [r2], #4
 801213c:	f859 4b04 	ldr.w	r4, [r9], #4
 8012140:	fa1e f18a 	uxtah	r1, lr, sl
 8012144:	b2a3      	uxth	r3, r4
 8012146:	1ac9      	subs	r1, r1, r3
 8012148:	0c23      	lsrs	r3, r4, #16
 801214a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801214e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012152:	b289      	uxth	r1, r1
 8012154:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012158:	45c8      	cmp	r8, r9
 801215a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801215e:	4694      	mov	ip, r2
 8012160:	f845 3b04 	str.w	r3, [r5], #4
 8012164:	d8e8      	bhi.n	8012138 <__mdiff+0x5c>
 8012166:	45bc      	cmp	ip, r7
 8012168:	d304      	bcc.n	8012174 <__mdiff+0x98>
 801216a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801216e:	b183      	cbz	r3, 8012192 <__mdiff+0xb6>
 8012170:	6106      	str	r6, [r0, #16]
 8012172:	e7c5      	b.n	8012100 <__mdiff+0x24>
 8012174:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012178:	fa1e f381 	uxtah	r3, lr, r1
 801217c:	141a      	asrs	r2, r3, #16
 801217e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012182:	b29b      	uxth	r3, r3
 8012184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012188:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801218c:	f845 3b04 	str.w	r3, [r5], #4
 8012190:	e7e9      	b.n	8012166 <__mdiff+0x8a>
 8012192:	3e01      	subs	r6, #1
 8012194:	e7e9      	b.n	801216a <__mdiff+0x8e>
	...

08012198 <__ulp>:
 8012198:	4b12      	ldr	r3, [pc, #72]	; (80121e4 <__ulp+0x4c>)
 801219a:	ee10 2a90 	vmov	r2, s1
 801219e:	401a      	ands	r2, r3
 80121a0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	dd04      	ble.n	80121b2 <__ulp+0x1a>
 80121a8:	2000      	movs	r0, #0
 80121aa:	4619      	mov	r1, r3
 80121ac:	ec41 0b10 	vmov	d0, r0, r1
 80121b0:	4770      	bx	lr
 80121b2:	425b      	negs	r3, r3
 80121b4:	151b      	asrs	r3, r3, #20
 80121b6:	2b13      	cmp	r3, #19
 80121b8:	f04f 0000 	mov.w	r0, #0
 80121bc:	f04f 0100 	mov.w	r1, #0
 80121c0:	dc04      	bgt.n	80121cc <__ulp+0x34>
 80121c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80121c6:	fa42 f103 	asr.w	r1, r2, r3
 80121ca:	e7ef      	b.n	80121ac <__ulp+0x14>
 80121cc:	3b14      	subs	r3, #20
 80121ce:	2b1e      	cmp	r3, #30
 80121d0:	f04f 0201 	mov.w	r2, #1
 80121d4:	bfda      	itte	le
 80121d6:	f1c3 031f 	rsble	r3, r3, #31
 80121da:	fa02 f303 	lslle.w	r3, r2, r3
 80121de:	4613      	movgt	r3, r2
 80121e0:	4618      	mov	r0, r3
 80121e2:	e7e3      	b.n	80121ac <__ulp+0x14>
 80121e4:	7ff00000 	.word	0x7ff00000

080121e8 <__b2d>:
 80121e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ea:	6905      	ldr	r5, [r0, #16]
 80121ec:	f100 0714 	add.w	r7, r0, #20
 80121f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80121f4:	1f2e      	subs	r6, r5, #4
 80121f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80121fa:	4620      	mov	r0, r4
 80121fc:	f7ff fdc4 	bl	8011d88 <__hi0bits>
 8012200:	f1c0 0320 	rsb	r3, r0, #32
 8012204:	280a      	cmp	r0, #10
 8012206:	600b      	str	r3, [r1, #0]
 8012208:	f8df c074 	ldr.w	ip, [pc, #116]	; 8012280 <__b2d+0x98>
 801220c:	dc14      	bgt.n	8012238 <__b2d+0x50>
 801220e:	f1c0 0e0b 	rsb	lr, r0, #11
 8012212:	fa24 f10e 	lsr.w	r1, r4, lr
 8012216:	42b7      	cmp	r7, r6
 8012218:	ea41 030c 	orr.w	r3, r1, ip
 801221c:	bf34      	ite	cc
 801221e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012222:	2100      	movcs	r1, #0
 8012224:	3015      	adds	r0, #21
 8012226:	fa04 f000 	lsl.w	r0, r4, r0
 801222a:	fa21 f10e 	lsr.w	r1, r1, lr
 801222e:	ea40 0201 	orr.w	r2, r0, r1
 8012232:	ec43 2b10 	vmov	d0, r2, r3
 8012236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012238:	42b7      	cmp	r7, r6
 801223a:	bf3a      	itte	cc
 801223c:	f1a5 0608 	subcc.w	r6, r5, #8
 8012240:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012244:	2100      	movcs	r1, #0
 8012246:	380b      	subs	r0, #11
 8012248:	d015      	beq.n	8012276 <__b2d+0x8e>
 801224a:	4084      	lsls	r4, r0
 801224c:	f1c0 0520 	rsb	r5, r0, #32
 8012250:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8012254:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8012258:	42be      	cmp	r6, r7
 801225a:	fa21 fc05 	lsr.w	ip, r1, r5
 801225e:	ea44 030c 	orr.w	r3, r4, ip
 8012262:	bf8c      	ite	hi
 8012264:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012268:	2400      	movls	r4, #0
 801226a:	fa01 f000 	lsl.w	r0, r1, r0
 801226e:	40ec      	lsrs	r4, r5
 8012270:	ea40 0204 	orr.w	r2, r0, r4
 8012274:	e7dd      	b.n	8012232 <__b2d+0x4a>
 8012276:	ea44 030c 	orr.w	r3, r4, ip
 801227a:	460a      	mov	r2, r1
 801227c:	e7d9      	b.n	8012232 <__b2d+0x4a>
 801227e:	bf00      	nop
 8012280:	3ff00000 	.word	0x3ff00000

08012284 <__d2b>:
 8012284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012288:	460e      	mov	r6, r1
 801228a:	2101      	movs	r1, #1
 801228c:	ec59 8b10 	vmov	r8, r9, d0
 8012290:	4615      	mov	r5, r2
 8012292:	f7ff fcb5 	bl	8011c00 <_Balloc>
 8012296:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801229a:	4607      	mov	r7, r0
 801229c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80122a0:	bb34      	cbnz	r4, 80122f0 <__d2b+0x6c>
 80122a2:	9301      	str	r3, [sp, #4]
 80122a4:	f1b8 0300 	subs.w	r3, r8, #0
 80122a8:	d027      	beq.n	80122fa <__d2b+0x76>
 80122aa:	a802      	add	r0, sp, #8
 80122ac:	f840 3d08 	str.w	r3, [r0, #-8]!
 80122b0:	f7ff fd89 	bl	8011dc6 <__lo0bits>
 80122b4:	9900      	ldr	r1, [sp, #0]
 80122b6:	b1f0      	cbz	r0, 80122f6 <__d2b+0x72>
 80122b8:	9a01      	ldr	r2, [sp, #4]
 80122ba:	f1c0 0320 	rsb	r3, r0, #32
 80122be:	fa02 f303 	lsl.w	r3, r2, r3
 80122c2:	430b      	orrs	r3, r1
 80122c4:	40c2      	lsrs	r2, r0
 80122c6:	617b      	str	r3, [r7, #20]
 80122c8:	9201      	str	r2, [sp, #4]
 80122ca:	9b01      	ldr	r3, [sp, #4]
 80122cc:	61bb      	str	r3, [r7, #24]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	bf14      	ite	ne
 80122d2:	2102      	movne	r1, #2
 80122d4:	2101      	moveq	r1, #1
 80122d6:	6139      	str	r1, [r7, #16]
 80122d8:	b1c4      	cbz	r4, 801230c <__d2b+0x88>
 80122da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80122de:	4404      	add	r4, r0
 80122e0:	6034      	str	r4, [r6, #0]
 80122e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80122e6:	6028      	str	r0, [r5, #0]
 80122e8:	4638      	mov	r0, r7
 80122ea:	b003      	add	sp, #12
 80122ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80122f4:	e7d5      	b.n	80122a2 <__d2b+0x1e>
 80122f6:	6179      	str	r1, [r7, #20]
 80122f8:	e7e7      	b.n	80122ca <__d2b+0x46>
 80122fa:	a801      	add	r0, sp, #4
 80122fc:	f7ff fd63 	bl	8011dc6 <__lo0bits>
 8012300:	9b01      	ldr	r3, [sp, #4]
 8012302:	617b      	str	r3, [r7, #20]
 8012304:	2101      	movs	r1, #1
 8012306:	6139      	str	r1, [r7, #16]
 8012308:	3020      	adds	r0, #32
 801230a:	e7e5      	b.n	80122d8 <__d2b+0x54>
 801230c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012310:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012314:	6030      	str	r0, [r6, #0]
 8012316:	6918      	ldr	r0, [r3, #16]
 8012318:	f7ff fd36 	bl	8011d88 <__hi0bits>
 801231c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8012320:	e7e1      	b.n	80122e6 <__d2b+0x62>

08012322 <__ratio>:
 8012322:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012326:	4688      	mov	r8, r1
 8012328:	4669      	mov	r1, sp
 801232a:	4681      	mov	r9, r0
 801232c:	f7ff ff5c 	bl	80121e8 <__b2d>
 8012330:	a901      	add	r1, sp, #4
 8012332:	4640      	mov	r0, r8
 8012334:	ec57 6b10 	vmov	r6, r7, d0
 8012338:	f7ff ff56 	bl	80121e8 <__b2d>
 801233c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012340:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012344:	eba3 0c02 	sub.w	ip, r3, r2
 8012348:	e9dd 3200 	ldrd	r3, r2, [sp]
 801234c:	1a9b      	subs	r3, r3, r2
 801234e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012352:	ec5b ab10 	vmov	sl, fp, d0
 8012356:	2b00      	cmp	r3, #0
 8012358:	bfce      	itee	gt
 801235a:	463a      	movgt	r2, r7
 801235c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012360:	465a      	movle	r2, fp
 8012362:	4659      	mov	r1, fp
 8012364:	463d      	mov	r5, r7
 8012366:	bfd4      	ite	le
 8012368:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801236c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8012370:	4630      	mov	r0, r6
 8012372:	ee10 2a10 	vmov	r2, s0
 8012376:	460b      	mov	r3, r1
 8012378:	4629      	mov	r1, r5
 801237a:	f7ee fa87 	bl	800088c <__aeabi_ddiv>
 801237e:	ec41 0b10 	vmov	d0, r0, r1
 8012382:	b003      	add	sp, #12
 8012384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012388 <__copybits>:
 8012388:	3901      	subs	r1, #1
 801238a:	b510      	push	{r4, lr}
 801238c:	1149      	asrs	r1, r1, #5
 801238e:	6914      	ldr	r4, [r2, #16]
 8012390:	3101      	adds	r1, #1
 8012392:	f102 0314 	add.w	r3, r2, #20
 8012396:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801239a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801239e:	42a3      	cmp	r3, r4
 80123a0:	4602      	mov	r2, r0
 80123a2:	d303      	bcc.n	80123ac <__copybits+0x24>
 80123a4:	2300      	movs	r3, #0
 80123a6:	428a      	cmp	r2, r1
 80123a8:	d305      	bcc.n	80123b6 <__copybits+0x2e>
 80123aa:	bd10      	pop	{r4, pc}
 80123ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80123b0:	f840 2b04 	str.w	r2, [r0], #4
 80123b4:	e7f3      	b.n	801239e <__copybits+0x16>
 80123b6:	f842 3b04 	str.w	r3, [r2], #4
 80123ba:	e7f4      	b.n	80123a6 <__copybits+0x1e>

080123bc <__any_on>:
 80123bc:	f100 0214 	add.w	r2, r0, #20
 80123c0:	6900      	ldr	r0, [r0, #16]
 80123c2:	114b      	asrs	r3, r1, #5
 80123c4:	4298      	cmp	r0, r3
 80123c6:	b510      	push	{r4, lr}
 80123c8:	db11      	blt.n	80123ee <__any_on+0x32>
 80123ca:	dd0a      	ble.n	80123e2 <__any_on+0x26>
 80123cc:	f011 011f 	ands.w	r1, r1, #31
 80123d0:	d007      	beq.n	80123e2 <__any_on+0x26>
 80123d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80123d6:	fa24 f001 	lsr.w	r0, r4, r1
 80123da:	fa00 f101 	lsl.w	r1, r0, r1
 80123de:	428c      	cmp	r4, r1
 80123e0:	d10b      	bne.n	80123fa <__any_on+0x3e>
 80123e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80123e6:	4293      	cmp	r3, r2
 80123e8:	d803      	bhi.n	80123f2 <__any_on+0x36>
 80123ea:	2000      	movs	r0, #0
 80123ec:	bd10      	pop	{r4, pc}
 80123ee:	4603      	mov	r3, r0
 80123f0:	e7f7      	b.n	80123e2 <__any_on+0x26>
 80123f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80123f6:	2900      	cmp	r1, #0
 80123f8:	d0f5      	beq.n	80123e6 <__any_on+0x2a>
 80123fa:	2001      	movs	r0, #1
 80123fc:	e7f6      	b.n	80123ec <__any_on+0x30>

080123fe <_calloc_r>:
 80123fe:	b538      	push	{r3, r4, r5, lr}
 8012400:	fb02 f401 	mul.w	r4, r2, r1
 8012404:	4621      	mov	r1, r4
 8012406:	f7fc fc07 	bl	800ec18 <_malloc_r>
 801240a:	4605      	mov	r5, r0
 801240c:	b118      	cbz	r0, 8012416 <_calloc_r+0x18>
 801240e:	4622      	mov	r2, r4
 8012410:	2100      	movs	r1, #0
 8012412:	f7fc fbaa 	bl	800eb6a <memset>
 8012416:	4628      	mov	r0, r5
 8012418:	bd38      	pop	{r3, r4, r5, pc}

0801241a <__ssputs_r>:
 801241a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801241e:	688e      	ldr	r6, [r1, #8]
 8012420:	429e      	cmp	r6, r3
 8012422:	4682      	mov	sl, r0
 8012424:	460c      	mov	r4, r1
 8012426:	4690      	mov	r8, r2
 8012428:	4699      	mov	r9, r3
 801242a:	d837      	bhi.n	801249c <__ssputs_r+0x82>
 801242c:	898a      	ldrh	r2, [r1, #12]
 801242e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012432:	d031      	beq.n	8012498 <__ssputs_r+0x7e>
 8012434:	6825      	ldr	r5, [r4, #0]
 8012436:	6909      	ldr	r1, [r1, #16]
 8012438:	1a6f      	subs	r7, r5, r1
 801243a:	6965      	ldr	r5, [r4, #20]
 801243c:	2302      	movs	r3, #2
 801243e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012442:	fb95 f5f3 	sdiv	r5, r5, r3
 8012446:	f109 0301 	add.w	r3, r9, #1
 801244a:	443b      	add	r3, r7
 801244c:	429d      	cmp	r5, r3
 801244e:	bf38      	it	cc
 8012450:	461d      	movcc	r5, r3
 8012452:	0553      	lsls	r3, r2, #21
 8012454:	d530      	bpl.n	80124b8 <__ssputs_r+0x9e>
 8012456:	4629      	mov	r1, r5
 8012458:	f7fc fbde 	bl	800ec18 <_malloc_r>
 801245c:	4606      	mov	r6, r0
 801245e:	b950      	cbnz	r0, 8012476 <__ssputs_r+0x5c>
 8012460:	230c      	movs	r3, #12
 8012462:	f8ca 3000 	str.w	r3, [sl]
 8012466:	89a3      	ldrh	r3, [r4, #12]
 8012468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801246c:	81a3      	strh	r3, [r4, #12]
 801246e:	f04f 30ff 	mov.w	r0, #4294967295
 8012472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012476:	463a      	mov	r2, r7
 8012478:	6921      	ldr	r1, [r4, #16]
 801247a:	f7fc fb6b 	bl	800eb54 <memcpy>
 801247e:	89a3      	ldrh	r3, [r4, #12]
 8012480:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012488:	81a3      	strh	r3, [r4, #12]
 801248a:	6126      	str	r6, [r4, #16]
 801248c:	6165      	str	r5, [r4, #20]
 801248e:	443e      	add	r6, r7
 8012490:	1bed      	subs	r5, r5, r7
 8012492:	6026      	str	r6, [r4, #0]
 8012494:	60a5      	str	r5, [r4, #8]
 8012496:	464e      	mov	r6, r9
 8012498:	454e      	cmp	r6, r9
 801249a:	d900      	bls.n	801249e <__ssputs_r+0x84>
 801249c:	464e      	mov	r6, r9
 801249e:	4632      	mov	r2, r6
 80124a0:	4641      	mov	r1, r8
 80124a2:	6820      	ldr	r0, [r4, #0]
 80124a4:	f000 fcb8 	bl	8012e18 <memmove>
 80124a8:	68a3      	ldr	r3, [r4, #8]
 80124aa:	1b9b      	subs	r3, r3, r6
 80124ac:	60a3      	str	r3, [r4, #8]
 80124ae:	6823      	ldr	r3, [r4, #0]
 80124b0:	441e      	add	r6, r3
 80124b2:	6026      	str	r6, [r4, #0]
 80124b4:	2000      	movs	r0, #0
 80124b6:	e7dc      	b.n	8012472 <__ssputs_r+0x58>
 80124b8:	462a      	mov	r2, r5
 80124ba:	f000 fcc6 	bl	8012e4a <_realloc_r>
 80124be:	4606      	mov	r6, r0
 80124c0:	2800      	cmp	r0, #0
 80124c2:	d1e2      	bne.n	801248a <__ssputs_r+0x70>
 80124c4:	6921      	ldr	r1, [r4, #16]
 80124c6:	4650      	mov	r0, sl
 80124c8:	f7fc fb58 	bl	800eb7c <_free_r>
 80124cc:	e7c8      	b.n	8012460 <__ssputs_r+0x46>
	...

080124d0 <_svfiprintf_r>:
 80124d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d4:	461d      	mov	r5, r3
 80124d6:	898b      	ldrh	r3, [r1, #12]
 80124d8:	061f      	lsls	r7, r3, #24
 80124da:	b09d      	sub	sp, #116	; 0x74
 80124dc:	4680      	mov	r8, r0
 80124de:	460c      	mov	r4, r1
 80124e0:	4616      	mov	r6, r2
 80124e2:	d50f      	bpl.n	8012504 <_svfiprintf_r+0x34>
 80124e4:	690b      	ldr	r3, [r1, #16]
 80124e6:	b96b      	cbnz	r3, 8012504 <_svfiprintf_r+0x34>
 80124e8:	2140      	movs	r1, #64	; 0x40
 80124ea:	f7fc fb95 	bl	800ec18 <_malloc_r>
 80124ee:	6020      	str	r0, [r4, #0]
 80124f0:	6120      	str	r0, [r4, #16]
 80124f2:	b928      	cbnz	r0, 8012500 <_svfiprintf_r+0x30>
 80124f4:	230c      	movs	r3, #12
 80124f6:	f8c8 3000 	str.w	r3, [r8]
 80124fa:	f04f 30ff 	mov.w	r0, #4294967295
 80124fe:	e0c8      	b.n	8012692 <_svfiprintf_r+0x1c2>
 8012500:	2340      	movs	r3, #64	; 0x40
 8012502:	6163      	str	r3, [r4, #20]
 8012504:	2300      	movs	r3, #0
 8012506:	9309      	str	r3, [sp, #36]	; 0x24
 8012508:	2320      	movs	r3, #32
 801250a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801250e:	2330      	movs	r3, #48	; 0x30
 8012510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012514:	9503      	str	r5, [sp, #12]
 8012516:	f04f 0b01 	mov.w	fp, #1
 801251a:	4637      	mov	r7, r6
 801251c:	463d      	mov	r5, r7
 801251e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012522:	b10b      	cbz	r3, 8012528 <_svfiprintf_r+0x58>
 8012524:	2b25      	cmp	r3, #37	; 0x25
 8012526:	d13e      	bne.n	80125a6 <_svfiprintf_r+0xd6>
 8012528:	ebb7 0a06 	subs.w	sl, r7, r6
 801252c:	d00b      	beq.n	8012546 <_svfiprintf_r+0x76>
 801252e:	4653      	mov	r3, sl
 8012530:	4632      	mov	r2, r6
 8012532:	4621      	mov	r1, r4
 8012534:	4640      	mov	r0, r8
 8012536:	f7ff ff70 	bl	801241a <__ssputs_r>
 801253a:	3001      	adds	r0, #1
 801253c:	f000 80a4 	beq.w	8012688 <_svfiprintf_r+0x1b8>
 8012540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012542:	4453      	add	r3, sl
 8012544:	9309      	str	r3, [sp, #36]	; 0x24
 8012546:	783b      	ldrb	r3, [r7, #0]
 8012548:	2b00      	cmp	r3, #0
 801254a:	f000 809d 	beq.w	8012688 <_svfiprintf_r+0x1b8>
 801254e:	2300      	movs	r3, #0
 8012550:	f04f 32ff 	mov.w	r2, #4294967295
 8012554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012558:	9304      	str	r3, [sp, #16]
 801255a:	9307      	str	r3, [sp, #28]
 801255c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012560:	931a      	str	r3, [sp, #104]	; 0x68
 8012562:	462f      	mov	r7, r5
 8012564:	2205      	movs	r2, #5
 8012566:	f817 1b01 	ldrb.w	r1, [r7], #1
 801256a:	4850      	ldr	r0, [pc, #320]	; (80126ac <_svfiprintf_r+0x1dc>)
 801256c:	f7ed fe58 	bl	8000220 <memchr>
 8012570:	9b04      	ldr	r3, [sp, #16]
 8012572:	b9d0      	cbnz	r0, 80125aa <_svfiprintf_r+0xda>
 8012574:	06d9      	lsls	r1, r3, #27
 8012576:	bf44      	itt	mi
 8012578:	2220      	movmi	r2, #32
 801257a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801257e:	071a      	lsls	r2, r3, #28
 8012580:	bf44      	itt	mi
 8012582:	222b      	movmi	r2, #43	; 0x2b
 8012584:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012588:	782a      	ldrb	r2, [r5, #0]
 801258a:	2a2a      	cmp	r2, #42	; 0x2a
 801258c:	d015      	beq.n	80125ba <_svfiprintf_r+0xea>
 801258e:	9a07      	ldr	r2, [sp, #28]
 8012590:	462f      	mov	r7, r5
 8012592:	2000      	movs	r0, #0
 8012594:	250a      	movs	r5, #10
 8012596:	4639      	mov	r1, r7
 8012598:	f811 3b01 	ldrb.w	r3, [r1], #1
 801259c:	3b30      	subs	r3, #48	; 0x30
 801259e:	2b09      	cmp	r3, #9
 80125a0:	d94d      	bls.n	801263e <_svfiprintf_r+0x16e>
 80125a2:	b1b8      	cbz	r0, 80125d4 <_svfiprintf_r+0x104>
 80125a4:	e00f      	b.n	80125c6 <_svfiprintf_r+0xf6>
 80125a6:	462f      	mov	r7, r5
 80125a8:	e7b8      	b.n	801251c <_svfiprintf_r+0x4c>
 80125aa:	4a40      	ldr	r2, [pc, #256]	; (80126ac <_svfiprintf_r+0x1dc>)
 80125ac:	1a80      	subs	r0, r0, r2
 80125ae:	fa0b f000 	lsl.w	r0, fp, r0
 80125b2:	4318      	orrs	r0, r3
 80125b4:	9004      	str	r0, [sp, #16]
 80125b6:	463d      	mov	r5, r7
 80125b8:	e7d3      	b.n	8012562 <_svfiprintf_r+0x92>
 80125ba:	9a03      	ldr	r2, [sp, #12]
 80125bc:	1d11      	adds	r1, r2, #4
 80125be:	6812      	ldr	r2, [r2, #0]
 80125c0:	9103      	str	r1, [sp, #12]
 80125c2:	2a00      	cmp	r2, #0
 80125c4:	db01      	blt.n	80125ca <_svfiprintf_r+0xfa>
 80125c6:	9207      	str	r2, [sp, #28]
 80125c8:	e004      	b.n	80125d4 <_svfiprintf_r+0x104>
 80125ca:	4252      	negs	r2, r2
 80125cc:	f043 0302 	orr.w	r3, r3, #2
 80125d0:	9207      	str	r2, [sp, #28]
 80125d2:	9304      	str	r3, [sp, #16]
 80125d4:	783b      	ldrb	r3, [r7, #0]
 80125d6:	2b2e      	cmp	r3, #46	; 0x2e
 80125d8:	d10c      	bne.n	80125f4 <_svfiprintf_r+0x124>
 80125da:	787b      	ldrb	r3, [r7, #1]
 80125dc:	2b2a      	cmp	r3, #42	; 0x2a
 80125de:	d133      	bne.n	8012648 <_svfiprintf_r+0x178>
 80125e0:	9b03      	ldr	r3, [sp, #12]
 80125e2:	1d1a      	adds	r2, r3, #4
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	9203      	str	r2, [sp, #12]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	bfb8      	it	lt
 80125ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80125f0:	3702      	adds	r7, #2
 80125f2:	9305      	str	r3, [sp, #20]
 80125f4:	4d2e      	ldr	r5, [pc, #184]	; (80126b0 <_svfiprintf_r+0x1e0>)
 80125f6:	7839      	ldrb	r1, [r7, #0]
 80125f8:	2203      	movs	r2, #3
 80125fa:	4628      	mov	r0, r5
 80125fc:	f7ed fe10 	bl	8000220 <memchr>
 8012600:	b138      	cbz	r0, 8012612 <_svfiprintf_r+0x142>
 8012602:	2340      	movs	r3, #64	; 0x40
 8012604:	1b40      	subs	r0, r0, r5
 8012606:	fa03 f000 	lsl.w	r0, r3, r0
 801260a:	9b04      	ldr	r3, [sp, #16]
 801260c:	4303      	orrs	r3, r0
 801260e:	3701      	adds	r7, #1
 8012610:	9304      	str	r3, [sp, #16]
 8012612:	7839      	ldrb	r1, [r7, #0]
 8012614:	4827      	ldr	r0, [pc, #156]	; (80126b4 <_svfiprintf_r+0x1e4>)
 8012616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801261a:	2206      	movs	r2, #6
 801261c:	1c7e      	adds	r6, r7, #1
 801261e:	f7ed fdff 	bl	8000220 <memchr>
 8012622:	2800      	cmp	r0, #0
 8012624:	d038      	beq.n	8012698 <_svfiprintf_r+0x1c8>
 8012626:	4b24      	ldr	r3, [pc, #144]	; (80126b8 <_svfiprintf_r+0x1e8>)
 8012628:	bb13      	cbnz	r3, 8012670 <_svfiprintf_r+0x1a0>
 801262a:	9b03      	ldr	r3, [sp, #12]
 801262c:	3307      	adds	r3, #7
 801262e:	f023 0307 	bic.w	r3, r3, #7
 8012632:	3308      	adds	r3, #8
 8012634:	9303      	str	r3, [sp, #12]
 8012636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012638:	444b      	add	r3, r9
 801263a:	9309      	str	r3, [sp, #36]	; 0x24
 801263c:	e76d      	b.n	801251a <_svfiprintf_r+0x4a>
 801263e:	fb05 3202 	mla	r2, r5, r2, r3
 8012642:	2001      	movs	r0, #1
 8012644:	460f      	mov	r7, r1
 8012646:	e7a6      	b.n	8012596 <_svfiprintf_r+0xc6>
 8012648:	2300      	movs	r3, #0
 801264a:	3701      	adds	r7, #1
 801264c:	9305      	str	r3, [sp, #20]
 801264e:	4619      	mov	r1, r3
 8012650:	250a      	movs	r5, #10
 8012652:	4638      	mov	r0, r7
 8012654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012658:	3a30      	subs	r2, #48	; 0x30
 801265a:	2a09      	cmp	r2, #9
 801265c:	d903      	bls.n	8012666 <_svfiprintf_r+0x196>
 801265e:	2b00      	cmp	r3, #0
 8012660:	d0c8      	beq.n	80125f4 <_svfiprintf_r+0x124>
 8012662:	9105      	str	r1, [sp, #20]
 8012664:	e7c6      	b.n	80125f4 <_svfiprintf_r+0x124>
 8012666:	fb05 2101 	mla	r1, r5, r1, r2
 801266a:	2301      	movs	r3, #1
 801266c:	4607      	mov	r7, r0
 801266e:	e7f0      	b.n	8012652 <_svfiprintf_r+0x182>
 8012670:	ab03      	add	r3, sp, #12
 8012672:	9300      	str	r3, [sp, #0]
 8012674:	4622      	mov	r2, r4
 8012676:	4b11      	ldr	r3, [pc, #68]	; (80126bc <_svfiprintf_r+0x1ec>)
 8012678:	a904      	add	r1, sp, #16
 801267a:	4640      	mov	r0, r8
 801267c:	f7fc fbba 	bl	800edf4 <_printf_float>
 8012680:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012684:	4681      	mov	r9, r0
 8012686:	d1d6      	bne.n	8012636 <_svfiprintf_r+0x166>
 8012688:	89a3      	ldrh	r3, [r4, #12]
 801268a:	065b      	lsls	r3, r3, #25
 801268c:	f53f af35 	bmi.w	80124fa <_svfiprintf_r+0x2a>
 8012690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012692:	b01d      	add	sp, #116	; 0x74
 8012694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012698:	ab03      	add	r3, sp, #12
 801269a:	9300      	str	r3, [sp, #0]
 801269c:	4622      	mov	r2, r4
 801269e:	4b07      	ldr	r3, [pc, #28]	; (80126bc <_svfiprintf_r+0x1ec>)
 80126a0:	a904      	add	r1, sp, #16
 80126a2:	4640      	mov	r0, r8
 80126a4:	f7fc fe5c 	bl	800f360 <_printf_i>
 80126a8:	e7ea      	b.n	8012680 <_svfiprintf_r+0x1b0>
 80126aa:	bf00      	nop
 80126ac:	08013d04 	.word	0x08013d04
 80126b0:	08013d0a 	.word	0x08013d0a
 80126b4:	08013d0e 	.word	0x08013d0e
 80126b8:	0800edf5 	.word	0x0800edf5
 80126bc:	0801241b 	.word	0x0801241b

080126c0 <__sfputc_r>:
 80126c0:	6893      	ldr	r3, [r2, #8]
 80126c2:	3b01      	subs	r3, #1
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	b410      	push	{r4}
 80126c8:	6093      	str	r3, [r2, #8]
 80126ca:	da08      	bge.n	80126de <__sfputc_r+0x1e>
 80126cc:	6994      	ldr	r4, [r2, #24]
 80126ce:	42a3      	cmp	r3, r4
 80126d0:	db01      	blt.n	80126d6 <__sfputc_r+0x16>
 80126d2:	290a      	cmp	r1, #10
 80126d4:	d103      	bne.n	80126de <__sfputc_r+0x1e>
 80126d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126da:	f000 b987 	b.w	80129ec <__swbuf_r>
 80126de:	6813      	ldr	r3, [r2, #0]
 80126e0:	1c58      	adds	r0, r3, #1
 80126e2:	6010      	str	r0, [r2, #0]
 80126e4:	7019      	strb	r1, [r3, #0]
 80126e6:	4608      	mov	r0, r1
 80126e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126ec:	4770      	bx	lr

080126ee <__sfputs_r>:
 80126ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126f0:	4606      	mov	r6, r0
 80126f2:	460f      	mov	r7, r1
 80126f4:	4614      	mov	r4, r2
 80126f6:	18d5      	adds	r5, r2, r3
 80126f8:	42ac      	cmp	r4, r5
 80126fa:	d101      	bne.n	8012700 <__sfputs_r+0x12>
 80126fc:	2000      	movs	r0, #0
 80126fe:	e007      	b.n	8012710 <__sfputs_r+0x22>
 8012700:	463a      	mov	r2, r7
 8012702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012706:	4630      	mov	r0, r6
 8012708:	f7ff ffda 	bl	80126c0 <__sfputc_r>
 801270c:	1c43      	adds	r3, r0, #1
 801270e:	d1f3      	bne.n	80126f8 <__sfputs_r+0xa>
 8012710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012714 <_vfiprintf_r>:
 8012714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012718:	460c      	mov	r4, r1
 801271a:	b09d      	sub	sp, #116	; 0x74
 801271c:	4617      	mov	r7, r2
 801271e:	461d      	mov	r5, r3
 8012720:	4606      	mov	r6, r0
 8012722:	b118      	cbz	r0, 801272c <_vfiprintf_r+0x18>
 8012724:	6983      	ldr	r3, [r0, #24]
 8012726:	b90b      	cbnz	r3, 801272c <_vfiprintf_r+0x18>
 8012728:	f7fe fe92 	bl	8011450 <__sinit>
 801272c:	4b7c      	ldr	r3, [pc, #496]	; (8012920 <_vfiprintf_r+0x20c>)
 801272e:	429c      	cmp	r4, r3
 8012730:	d158      	bne.n	80127e4 <_vfiprintf_r+0xd0>
 8012732:	6874      	ldr	r4, [r6, #4]
 8012734:	89a3      	ldrh	r3, [r4, #12]
 8012736:	0718      	lsls	r0, r3, #28
 8012738:	d55e      	bpl.n	80127f8 <_vfiprintf_r+0xe4>
 801273a:	6923      	ldr	r3, [r4, #16]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d05b      	beq.n	80127f8 <_vfiprintf_r+0xe4>
 8012740:	2300      	movs	r3, #0
 8012742:	9309      	str	r3, [sp, #36]	; 0x24
 8012744:	2320      	movs	r3, #32
 8012746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801274a:	2330      	movs	r3, #48	; 0x30
 801274c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012750:	9503      	str	r5, [sp, #12]
 8012752:	f04f 0b01 	mov.w	fp, #1
 8012756:	46b8      	mov	r8, r7
 8012758:	4645      	mov	r5, r8
 801275a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801275e:	b10b      	cbz	r3, 8012764 <_vfiprintf_r+0x50>
 8012760:	2b25      	cmp	r3, #37	; 0x25
 8012762:	d154      	bne.n	801280e <_vfiprintf_r+0xfa>
 8012764:	ebb8 0a07 	subs.w	sl, r8, r7
 8012768:	d00b      	beq.n	8012782 <_vfiprintf_r+0x6e>
 801276a:	4653      	mov	r3, sl
 801276c:	463a      	mov	r2, r7
 801276e:	4621      	mov	r1, r4
 8012770:	4630      	mov	r0, r6
 8012772:	f7ff ffbc 	bl	80126ee <__sfputs_r>
 8012776:	3001      	adds	r0, #1
 8012778:	f000 80c2 	beq.w	8012900 <_vfiprintf_r+0x1ec>
 801277c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801277e:	4453      	add	r3, sl
 8012780:	9309      	str	r3, [sp, #36]	; 0x24
 8012782:	f898 3000 	ldrb.w	r3, [r8]
 8012786:	2b00      	cmp	r3, #0
 8012788:	f000 80ba 	beq.w	8012900 <_vfiprintf_r+0x1ec>
 801278c:	2300      	movs	r3, #0
 801278e:	f04f 32ff 	mov.w	r2, #4294967295
 8012792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012796:	9304      	str	r3, [sp, #16]
 8012798:	9307      	str	r3, [sp, #28]
 801279a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801279e:	931a      	str	r3, [sp, #104]	; 0x68
 80127a0:	46a8      	mov	r8, r5
 80127a2:	2205      	movs	r2, #5
 80127a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80127a8:	485e      	ldr	r0, [pc, #376]	; (8012924 <_vfiprintf_r+0x210>)
 80127aa:	f7ed fd39 	bl	8000220 <memchr>
 80127ae:	9b04      	ldr	r3, [sp, #16]
 80127b0:	bb78      	cbnz	r0, 8012812 <_vfiprintf_r+0xfe>
 80127b2:	06d9      	lsls	r1, r3, #27
 80127b4:	bf44      	itt	mi
 80127b6:	2220      	movmi	r2, #32
 80127b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80127bc:	071a      	lsls	r2, r3, #28
 80127be:	bf44      	itt	mi
 80127c0:	222b      	movmi	r2, #43	; 0x2b
 80127c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80127c6:	782a      	ldrb	r2, [r5, #0]
 80127c8:	2a2a      	cmp	r2, #42	; 0x2a
 80127ca:	d02a      	beq.n	8012822 <_vfiprintf_r+0x10e>
 80127cc:	9a07      	ldr	r2, [sp, #28]
 80127ce:	46a8      	mov	r8, r5
 80127d0:	2000      	movs	r0, #0
 80127d2:	250a      	movs	r5, #10
 80127d4:	4641      	mov	r1, r8
 80127d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127da:	3b30      	subs	r3, #48	; 0x30
 80127dc:	2b09      	cmp	r3, #9
 80127de:	d969      	bls.n	80128b4 <_vfiprintf_r+0x1a0>
 80127e0:	b360      	cbz	r0, 801283c <_vfiprintf_r+0x128>
 80127e2:	e024      	b.n	801282e <_vfiprintf_r+0x11a>
 80127e4:	4b50      	ldr	r3, [pc, #320]	; (8012928 <_vfiprintf_r+0x214>)
 80127e6:	429c      	cmp	r4, r3
 80127e8:	d101      	bne.n	80127ee <_vfiprintf_r+0xda>
 80127ea:	68b4      	ldr	r4, [r6, #8]
 80127ec:	e7a2      	b.n	8012734 <_vfiprintf_r+0x20>
 80127ee:	4b4f      	ldr	r3, [pc, #316]	; (801292c <_vfiprintf_r+0x218>)
 80127f0:	429c      	cmp	r4, r3
 80127f2:	bf08      	it	eq
 80127f4:	68f4      	ldreq	r4, [r6, #12]
 80127f6:	e79d      	b.n	8012734 <_vfiprintf_r+0x20>
 80127f8:	4621      	mov	r1, r4
 80127fa:	4630      	mov	r0, r6
 80127fc:	f000 f968 	bl	8012ad0 <__swsetup_r>
 8012800:	2800      	cmp	r0, #0
 8012802:	d09d      	beq.n	8012740 <_vfiprintf_r+0x2c>
 8012804:	f04f 30ff 	mov.w	r0, #4294967295
 8012808:	b01d      	add	sp, #116	; 0x74
 801280a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801280e:	46a8      	mov	r8, r5
 8012810:	e7a2      	b.n	8012758 <_vfiprintf_r+0x44>
 8012812:	4a44      	ldr	r2, [pc, #272]	; (8012924 <_vfiprintf_r+0x210>)
 8012814:	1a80      	subs	r0, r0, r2
 8012816:	fa0b f000 	lsl.w	r0, fp, r0
 801281a:	4318      	orrs	r0, r3
 801281c:	9004      	str	r0, [sp, #16]
 801281e:	4645      	mov	r5, r8
 8012820:	e7be      	b.n	80127a0 <_vfiprintf_r+0x8c>
 8012822:	9a03      	ldr	r2, [sp, #12]
 8012824:	1d11      	adds	r1, r2, #4
 8012826:	6812      	ldr	r2, [r2, #0]
 8012828:	9103      	str	r1, [sp, #12]
 801282a:	2a00      	cmp	r2, #0
 801282c:	db01      	blt.n	8012832 <_vfiprintf_r+0x11e>
 801282e:	9207      	str	r2, [sp, #28]
 8012830:	e004      	b.n	801283c <_vfiprintf_r+0x128>
 8012832:	4252      	negs	r2, r2
 8012834:	f043 0302 	orr.w	r3, r3, #2
 8012838:	9207      	str	r2, [sp, #28]
 801283a:	9304      	str	r3, [sp, #16]
 801283c:	f898 3000 	ldrb.w	r3, [r8]
 8012840:	2b2e      	cmp	r3, #46	; 0x2e
 8012842:	d10e      	bne.n	8012862 <_vfiprintf_r+0x14e>
 8012844:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012848:	2b2a      	cmp	r3, #42	; 0x2a
 801284a:	d138      	bne.n	80128be <_vfiprintf_r+0x1aa>
 801284c:	9b03      	ldr	r3, [sp, #12]
 801284e:	1d1a      	adds	r2, r3, #4
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	9203      	str	r2, [sp, #12]
 8012854:	2b00      	cmp	r3, #0
 8012856:	bfb8      	it	lt
 8012858:	f04f 33ff 	movlt.w	r3, #4294967295
 801285c:	f108 0802 	add.w	r8, r8, #2
 8012860:	9305      	str	r3, [sp, #20]
 8012862:	4d33      	ldr	r5, [pc, #204]	; (8012930 <_vfiprintf_r+0x21c>)
 8012864:	f898 1000 	ldrb.w	r1, [r8]
 8012868:	2203      	movs	r2, #3
 801286a:	4628      	mov	r0, r5
 801286c:	f7ed fcd8 	bl	8000220 <memchr>
 8012870:	b140      	cbz	r0, 8012884 <_vfiprintf_r+0x170>
 8012872:	2340      	movs	r3, #64	; 0x40
 8012874:	1b40      	subs	r0, r0, r5
 8012876:	fa03 f000 	lsl.w	r0, r3, r0
 801287a:	9b04      	ldr	r3, [sp, #16]
 801287c:	4303      	orrs	r3, r0
 801287e:	f108 0801 	add.w	r8, r8, #1
 8012882:	9304      	str	r3, [sp, #16]
 8012884:	f898 1000 	ldrb.w	r1, [r8]
 8012888:	482a      	ldr	r0, [pc, #168]	; (8012934 <_vfiprintf_r+0x220>)
 801288a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801288e:	2206      	movs	r2, #6
 8012890:	f108 0701 	add.w	r7, r8, #1
 8012894:	f7ed fcc4 	bl	8000220 <memchr>
 8012898:	2800      	cmp	r0, #0
 801289a:	d037      	beq.n	801290c <_vfiprintf_r+0x1f8>
 801289c:	4b26      	ldr	r3, [pc, #152]	; (8012938 <_vfiprintf_r+0x224>)
 801289e:	bb1b      	cbnz	r3, 80128e8 <_vfiprintf_r+0x1d4>
 80128a0:	9b03      	ldr	r3, [sp, #12]
 80128a2:	3307      	adds	r3, #7
 80128a4:	f023 0307 	bic.w	r3, r3, #7
 80128a8:	3308      	adds	r3, #8
 80128aa:	9303      	str	r3, [sp, #12]
 80128ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128ae:	444b      	add	r3, r9
 80128b0:	9309      	str	r3, [sp, #36]	; 0x24
 80128b2:	e750      	b.n	8012756 <_vfiprintf_r+0x42>
 80128b4:	fb05 3202 	mla	r2, r5, r2, r3
 80128b8:	2001      	movs	r0, #1
 80128ba:	4688      	mov	r8, r1
 80128bc:	e78a      	b.n	80127d4 <_vfiprintf_r+0xc0>
 80128be:	2300      	movs	r3, #0
 80128c0:	f108 0801 	add.w	r8, r8, #1
 80128c4:	9305      	str	r3, [sp, #20]
 80128c6:	4619      	mov	r1, r3
 80128c8:	250a      	movs	r5, #10
 80128ca:	4640      	mov	r0, r8
 80128cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128d0:	3a30      	subs	r2, #48	; 0x30
 80128d2:	2a09      	cmp	r2, #9
 80128d4:	d903      	bls.n	80128de <_vfiprintf_r+0x1ca>
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d0c3      	beq.n	8012862 <_vfiprintf_r+0x14e>
 80128da:	9105      	str	r1, [sp, #20]
 80128dc:	e7c1      	b.n	8012862 <_vfiprintf_r+0x14e>
 80128de:	fb05 2101 	mla	r1, r5, r1, r2
 80128e2:	2301      	movs	r3, #1
 80128e4:	4680      	mov	r8, r0
 80128e6:	e7f0      	b.n	80128ca <_vfiprintf_r+0x1b6>
 80128e8:	ab03      	add	r3, sp, #12
 80128ea:	9300      	str	r3, [sp, #0]
 80128ec:	4622      	mov	r2, r4
 80128ee:	4b13      	ldr	r3, [pc, #76]	; (801293c <_vfiprintf_r+0x228>)
 80128f0:	a904      	add	r1, sp, #16
 80128f2:	4630      	mov	r0, r6
 80128f4:	f7fc fa7e 	bl	800edf4 <_printf_float>
 80128f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80128fc:	4681      	mov	r9, r0
 80128fe:	d1d5      	bne.n	80128ac <_vfiprintf_r+0x198>
 8012900:	89a3      	ldrh	r3, [r4, #12]
 8012902:	065b      	lsls	r3, r3, #25
 8012904:	f53f af7e 	bmi.w	8012804 <_vfiprintf_r+0xf0>
 8012908:	9809      	ldr	r0, [sp, #36]	; 0x24
 801290a:	e77d      	b.n	8012808 <_vfiprintf_r+0xf4>
 801290c:	ab03      	add	r3, sp, #12
 801290e:	9300      	str	r3, [sp, #0]
 8012910:	4622      	mov	r2, r4
 8012912:	4b0a      	ldr	r3, [pc, #40]	; (801293c <_vfiprintf_r+0x228>)
 8012914:	a904      	add	r1, sp, #16
 8012916:	4630      	mov	r0, r6
 8012918:	f7fc fd22 	bl	800f360 <_printf_i>
 801291c:	e7ec      	b.n	80128f8 <_vfiprintf_r+0x1e4>
 801291e:	bf00      	nop
 8012920:	08013bb8 	.word	0x08013bb8
 8012924:	08013d04 	.word	0x08013d04
 8012928:	08013bd8 	.word	0x08013bd8
 801292c:	08013b98 	.word	0x08013b98
 8012930:	08013d0a 	.word	0x08013d0a
 8012934:	08013d0e 	.word	0x08013d0e
 8012938:	0800edf5 	.word	0x0800edf5
 801293c:	080126ef 	.word	0x080126ef

08012940 <__sread>:
 8012940:	b510      	push	{r4, lr}
 8012942:	460c      	mov	r4, r1
 8012944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012948:	f000 faa6 	bl	8012e98 <_read_r>
 801294c:	2800      	cmp	r0, #0
 801294e:	bfab      	itete	ge
 8012950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012952:	89a3      	ldrhlt	r3, [r4, #12]
 8012954:	181b      	addge	r3, r3, r0
 8012956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801295a:	bfac      	ite	ge
 801295c:	6563      	strge	r3, [r4, #84]	; 0x54
 801295e:	81a3      	strhlt	r3, [r4, #12]
 8012960:	bd10      	pop	{r4, pc}

08012962 <__swrite>:
 8012962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012966:	461f      	mov	r7, r3
 8012968:	898b      	ldrh	r3, [r1, #12]
 801296a:	05db      	lsls	r3, r3, #23
 801296c:	4605      	mov	r5, r0
 801296e:	460c      	mov	r4, r1
 8012970:	4616      	mov	r6, r2
 8012972:	d505      	bpl.n	8012980 <__swrite+0x1e>
 8012974:	2302      	movs	r3, #2
 8012976:	2200      	movs	r2, #0
 8012978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801297c:	f000 f9d6 	bl	8012d2c <_lseek_r>
 8012980:	89a3      	ldrh	r3, [r4, #12]
 8012982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801298a:	81a3      	strh	r3, [r4, #12]
 801298c:	4632      	mov	r2, r6
 801298e:	463b      	mov	r3, r7
 8012990:	4628      	mov	r0, r5
 8012992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012996:	f000 b889 	b.w	8012aac <_write_r>

0801299a <__sseek>:
 801299a:	b510      	push	{r4, lr}
 801299c:	460c      	mov	r4, r1
 801299e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129a2:	f000 f9c3 	bl	8012d2c <_lseek_r>
 80129a6:	1c43      	adds	r3, r0, #1
 80129a8:	89a3      	ldrh	r3, [r4, #12]
 80129aa:	bf15      	itete	ne
 80129ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80129ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80129b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80129b6:	81a3      	strheq	r3, [r4, #12]
 80129b8:	bf18      	it	ne
 80129ba:	81a3      	strhne	r3, [r4, #12]
 80129bc:	bd10      	pop	{r4, pc}

080129be <__sclose>:
 80129be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129c2:	f000 b8f3 	b.w	8012bac <_close_r>

080129c6 <strncmp>:
 80129c6:	b510      	push	{r4, lr}
 80129c8:	b16a      	cbz	r2, 80129e6 <strncmp+0x20>
 80129ca:	3901      	subs	r1, #1
 80129cc:	1884      	adds	r4, r0, r2
 80129ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80129d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d103      	bne.n	80129e2 <strncmp+0x1c>
 80129da:	42a0      	cmp	r0, r4
 80129dc:	d001      	beq.n	80129e2 <strncmp+0x1c>
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d1f5      	bne.n	80129ce <strncmp+0x8>
 80129e2:	1a98      	subs	r0, r3, r2
 80129e4:	bd10      	pop	{r4, pc}
 80129e6:	4610      	mov	r0, r2
 80129e8:	e7fc      	b.n	80129e4 <strncmp+0x1e>
	...

080129ec <__swbuf_r>:
 80129ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ee:	460e      	mov	r6, r1
 80129f0:	4614      	mov	r4, r2
 80129f2:	4605      	mov	r5, r0
 80129f4:	b118      	cbz	r0, 80129fe <__swbuf_r+0x12>
 80129f6:	6983      	ldr	r3, [r0, #24]
 80129f8:	b90b      	cbnz	r3, 80129fe <__swbuf_r+0x12>
 80129fa:	f7fe fd29 	bl	8011450 <__sinit>
 80129fe:	4b21      	ldr	r3, [pc, #132]	; (8012a84 <__swbuf_r+0x98>)
 8012a00:	429c      	cmp	r4, r3
 8012a02:	d12a      	bne.n	8012a5a <__swbuf_r+0x6e>
 8012a04:	686c      	ldr	r4, [r5, #4]
 8012a06:	69a3      	ldr	r3, [r4, #24]
 8012a08:	60a3      	str	r3, [r4, #8]
 8012a0a:	89a3      	ldrh	r3, [r4, #12]
 8012a0c:	071a      	lsls	r2, r3, #28
 8012a0e:	d52e      	bpl.n	8012a6e <__swbuf_r+0x82>
 8012a10:	6923      	ldr	r3, [r4, #16]
 8012a12:	b363      	cbz	r3, 8012a6e <__swbuf_r+0x82>
 8012a14:	6923      	ldr	r3, [r4, #16]
 8012a16:	6820      	ldr	r0, [r4, #0]
 8012a18:	1ac0      	subs	r0, r0, r3
 8012a1a:	6963      	ldr	r3, [r4, #20]
 8012a1c:	b2f6      	uxtb	r6, r6
 8012a1e:	4283      	cmp	r3, r0
 8012a20:	4637      	mov	r7, r6
 8012a22:	dc04      	bgt.n	8012a2e <__swbuf_r+0x42>
 8012a24:	4621      	mov	r1, r4
 8012a26:	4628      	mov	r0, r5
 8012a28:	f000 f956 	bl	8012cd8 <_fflush_r>
 8012a2c:	bb28      	cbnz	r0, 8012a7a <__swbuf_r+0x8e>
 8012a2e:	68a3      	ldr	r3, [r4, #8]
 8012a30:	3b01      	subs	r3, #1
 8012a32:	60a3      	str	r3, [r4, #8]
 8012a34:	6823      	ldr	r3, [r4, #0]
 8012a36:	1c5a      	adds	r2, r3, #1
 8012a38:	6022      	str	r2, [r4, #0]
 8012a3a:	701e      	strb	r6, [r3, #0]
 8012a3c:	6963      	ldr	r3, [r4, #20]
 8012a3e:	3001      	adds	r0, #1
 8012a40:	4283      	cmp	r3, r0
 8012a42:	d004      	beq.n	8012a4e <__swbuf_r+0x62>
 8012a44:	89a3      	ldrh	r3, [r4, #12]
 8012a46:	07db      	lsls	r3, r3, #31
 8012a48:	d519      	bpl.n	8012a7e <__swbuf_r+0x92>
 8012a4a:	2e0a      	cmp	r6, #10
 8012a4c:	d117      	bne.n	8012a7e <__swbuf_r+0x92>
 8012a4e:	4621      	mov	r1, r4
 8012a50:	4628      	mov	r0, r5
 8012a52:	f000 f941 	bl	8012cd8 <_fflush_r>
 8012a56:	b190      	cbz	r0, 8012a7e <__swbuf_r+0x92>
 8012a58:	e00f      	b.n	8012a7a <__swbuf_r+0x8e>
 8012a5a:	4b0b      	ldr	r3, [pc, #44]	; (8012a88 <__swbuf_r+0x9c>)
 8012a5c:	429c      	cmp	r4, r3
 8012a5e:	d101      	bne.n	8012a64 <__swbuf_r+0x78>
 8012a60:	68ac      	ldr	r4, [r5, #8]
 8012a62:	e7d0      	b.n	8012a06 <__swbuf_r+0x1a>
 8012a64:	4b09      	ldr	r3, [pc, #36]	; (8012a8c <__swbuf_r+0xa0>)
 8012a66:	429c      	cmp	r4, r3
 8012a68:	bf08      	it	eq
 8012a6a:	68ec      	ldreq	r4, [r5, #12]
 8012a6c:	e7cb      	b.n	8012a06 <__swbuf_r+0x1a>
 8012a6e:	4621      	mov	r1, r4
 8012a70:	4628      	mov	r0, r5
 8012a72:	f000 f82d 	bl	8012ad0 <__swsetup_r>
 8012a76:	2800      	cmp	r0, #0
 8012a78:	d0cc      	beq.n	8012a14 <__swbuf_r+0x28>
 8012a7a:	f04f 37ff 	mov.w	r7, #4294967295
 8012a7e:	4638      	mov	r0, r7
 8012a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a82:	bf00      	nop
 8012a84:	08013bb8 	.word	0x08013bb8
 8012a88:	08013bd8 	.word	0x08013bd8
 8012a8c:	08013b98 	.word	0x08013b98

08012a90 <__ascii_wctomb>:
 8012a90:	b149      	cbz	r1, 8012aa6 <__ascii_wctomb+0x16>
 8012a92:	2aff      	cmp	r2, #255	; 0xff
 8012a94:	bf85      	ittet	hi
 8012a96:	238a      	movhi	r3, #138	; 0x8a
 8012a98:	6003      	strhi	r3, [r0, #0]
 8012a9a:	700a      	strbls	r2, [r1, #0]
 8012a9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012aa0:	bf98      	it	ls
 8012aa2:	2001      	movls	r0, #1
 8012aa4:	4770      	bx	lr
 8012aa6:	4608      	mov	r0, r1
 8012aa8:	4770      	bx	lr
	...

08012aac <_write_r>:
 8012aac:	b538      	push	{r3, r4, r5, lr}
 8012aae:	4c07      	ldr	r4, [pc, #28]	; (8012acc <_write_r+0x20>)
 8012ab0:	4605      	mov	r5, r0
 8012ab2:	4608      	mov	r0, r1
 8012ab4:	4611      	mov	r1, r2
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	6022      	str	r2, [r4, #0]
 8012aba:	461a      	mov	r2, r3
 8012abc:	f7f9 fbb7 	bl	800c22e <_write>
 8012ac0:	1c43      	adds	r3, r0, #1
 8012ac2:	d102      	bne.n	8012aca <_write_r+0x1e>
 8012ac4:	6823      	ldr	r3, [r4, #0]
 8012ac6:	b103      	cbz	r3, 8012aca <_write_r+0x1e>
 8012ac8:	602b      	str	r3, [r5, #0]
 8012aca:	bd38      	pop	{r3, r4, r5, pc}
 8012acc:	20007714 	.word	0x20007714

08012ad0 <__swsetup_r>:
 8012ad0:	4b32      	ldr	r3, [pc, #200]	; (8012b9c <__swsetup_r+0xcc>)
 8012ad2:	b570      	push	{r4, r5, r6, lr}
 8012ad4:	681d      	ldr	r5, [r3, #0]
 8012ad6:	4606      	mov	r6, r0
 8012ad8:	460c      	mov	r4, r1
 8012ada:	b125      	cbz	r5, 8012ae6 <__swsetup_r+0x16>
 8012adc:	69ab      	ldr	r3, [r5, #24]
 8012ade:	b913      	cbnz	r3, 8012ae6 <__swsetup_r+0x16>
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	f7fe fcb5 	bl	8011450 <__sinit>
 8012ae6:	4b2e      	ldr	r3, [pc, #184]	; (8012ba0 <__swsetup_r+0xd0>)
 8012ae8:	429c      	cmp	r4, r3
 8012aea:	d10f      	bne.n	8012b0c <__swsetup_r+0x3c>
 8012aec:	686c      	ldr	r4, [r5, #4]
 8012aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	0715      	lsls	r5, r2, #28
 8012af6:	d42c      	bmi.n	8012b52 <__swsetup_r+0x82>
 8012af8:	06d0      	lsls	r0, r2, #27
 8012afa:	d411      	bmi.n	8012b20 <__swsetup_r+0x50>
 8012afc:	2209      	movs	r2, #9
 8012afe:	6032      	str	r2, [r6, #0]
 8012b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b04:	81a3      	strh	r3, [r4, #12]
 8012b06:	f04f 30ff 	mov.w	r0, #4294967295
 8012b0a:	e03e      	b.n	8012b8a <__swsetup_r+0xba>
 8012b0c:	4b25      	ldr	r3, [pc, #148]	; (8012ba4 <__swsetup_r+0xd4>)
 8012b0e:	429c      	cmp	r4, r3
 8012b10:	d101      	bne.n	8012b16 <__swsetup_r+0x46>
 8012b12:	68ac      	ldr	r4, [r5, #8]
 8012b14:	e7eb      	b.n	8012aee <__swsetup_r+0x1e>
 8012b16:	4b24      	ldr	r3, [pc, #144]	; (8012ba8 <__swsetup_r+0xd8>)
 8012b18:	429c      	cmp	r4, r3
 8012b1a:	bf08      	it	eq
 8012b1c:	68ec      	ldreq	r4, [r5, #12]
 8012b1e:	e7e6      	b.n	8012aee <__swsetup_r+0x1e>
 8012b20:	0751      	lsls	r1, r2, #29
 8012b22:	d512      	bpl.n	8012b4a <__swsetup_r+0x7a>
 8012b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b26:	b141      	cbz	r1, 8012b3a <__swsetup_r+0x6a>
 8012b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b2c:	4299      	cmp	r1, r3
 8012b2e:	d002      	beq.n	8012b36 <__swsetup_r+0x66>
 8012b30:	4630      	mov	r0, r6
 8012b32:	f7fc f823 	bl	800eb7c <_free_r>
 8012b36:	2300      	movs	r3, #0
 8012b38:	6363      	str	r3, [r4, #52]	; 0x34
 8012b3a:	89a3      	ldrh	r3, [r4, #12]
 8012b3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b40:	81a3      	strh	r3, [r4, #12]
 8012b42:	2300      	movs	r3, #0
 8012b44:	6063      	str	r3, [r4, #4]
 8012b46:	6923      	ldr	r3, [r4, #16]
 8012b48:	6023      	str	r3, [r4, #0]
 8012b4a:	89a3      	ldrh	r3, [r4, #12]
 8012b4c:	f043 0308 	orr.w	r3, r3, #8
 8012b50:	81a3      	strh	r3, [r4, #12]
 8012b52:	6923      	ldr	r3, [r4, #16]
 8012b54:	b94b      	cbnz	r3, 8012b6a <__swsetup_r+0x9a>
 8012b56:	89a3      	ldrh	r3, [r4, #12]
 8012b58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b60:	d003      	beq.n	8012b6a <__swsetup_r+0x9a>
 8012b62:	4621      	mov	r1, r4
 8012b64:	4630      	mov	r0, r6
 8012b66:	f000 f917 	bl	8012d98 <__smakebuf_r>
 8012b6a:	89a2      	ldrh	r2, [r4, #12]
 8012b6c:	f012 0301 	ands.w	r3, r2, #1
 8012b70:	d00c      	beq.n	8012b8c <__swsetup_r+0xbc>
 8012b72:	2300      	movs	r3, #0
 8012b74:	60a3      	str	r3, [r4, #8]
 8012b76:	6963      	ldr	r3, [r4, #20]
 8012b78:	425b      	negs	r3, r3
 8012b7a:	61a3      	str	r3, [r4, #24]
 8012b7c:	6923      	ldr	r3, [r4, #16]
 8012b7e:	b953      	cbnz	r3, 8012b96 <__swsetup_r+0xc6>
 8012b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b84:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012b88:	d1ba      	bne.n	8012b00 <__swsetup_r+0x30>
 8012b8a:	bd70      	pop	{r4, r5, r6, pc}
 8012b8c:	0792      	lsls	r2, r2, #30
 8012b8e:	bf58      	it	pl
 8012b90:	6963      	ldrpl	r3, [r4, #20]
 8012b92:	60a3      	str	r3, [r4, #8]
 8012b94:	e7f2      	b.n	8012b7c <__swsetup_r+0xac>
 8012b96:	2000      	movs	r0, #0
 8012b98:	e7f7      	b.n	8012b8a <__swsetup_r+0xba>
 8012b9a:	bf00      	nop
 8012b9c:	2000064c 	.word	0x2000064c
 8012ba0:	08013bb8 	.word	0x08013bb8
 8012ba4:	08013bd8 	.word	0x08013bd8
 8012ba8:	08013b98 	.word	0x08013b98

08012bac <_close_r>:
 8012bac:	b538      	push	{r3, r4, r5, lr}
 8012bae:	4c06      	ldr	r4, [pc, #24]	; (8012bc8 <_close_r+0x1c>)
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	4605      	mov	r5, r0
 8012bb4:	4608      	mov	r0, r1
 8012bb6:	6023      	str	r3, [r4, #0]
 8012bb8:	f7f9 fb55 	bl	800c266 <_close>
 8012bbc:	1c43      	adds	r3, r0, #1
 8012bbe:	d102      	bne.n	8012bc6 <_close_r+0x1a>
 8012bc0:	6823      	ldr	r3, [r4, #0]
 8012bc2:	b103      	cbz	r3, 8012bc6 <_close_r+0x1a>
 8012bc4:	602b      	str	r3, [r5, #0]
 8012bc6:	bd38      	pop	{r3, r4, r5, pc}
 8012bc8:	20007714 	.word	0x20007714

08012bcc <__sflush_r>:
 8012bcc:	898a      	ldrh	r2, [r1, #12]
 8012bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd2:	4605      	mov	r5, r0
 8012bd4:	0710      	lsls	r0, r2, #28
 8012bd6:	460c      	mov	r4, r1
 8012bd8:	d458      	bmi.n	8012c8c <__sflush_r+0xc0>
 8012bda:	684b      	ldr	r3, [r1, #4]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	dc05      	bgt.n	8012bec <__sflush_r+0x20>
 8012be0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	dc02      	bgt.n	8012bec <__sflush_r+0x20>
 8012be6:	2000      	movs	r0, #0
 8012be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012bee:	2e00      	cmp	r6, #0
 8012bf0:	d0f9      	beq.n	8012be6 <__sflush_r+0x1a>
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012bf8:	682f      	ldr	r7, [r5, #0]
 8012bfa:	6a21      	ldr	r1, [r4, #32]
 8012bfc:	602b      	str	r3, [r5, #0]
 8012bfe:	d032      	beq.n	8012c66 <__sflush_r+0x9a>
 8012c00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012c02:	89a3      	ldrh	r3, [r4, #12]
 8012c04:	075a      	lsls	r2, r3, #29
 8012c06:	d505      	bpl.n	8012c14 <__sflush_r+0x48>
 8012c08:	6863      	ldr	r3, [r4, #4]
 8012c0a:	1ac0      	subs	r0, r0, r3
 8012c0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c0e:	b10b      	cbz	r3, 8012c14 <__sflush_r+0x48>
 8012c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012c12:	1ac0      	subs	r0, r0, r3
 8012c14:	2300      	movs	r3, #0
 8012c16:	4602      	mov	r2, r0
 8012c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c1a:	6a21      	ldr	r1, [r4, #32]
 8012c1c:	4628      	mov	r0, r5
 8012c1e:	47b0      	blx	r6
 8012c20:	1c43      	adds	r3, r0, #1
 8012c22:	89a3      	ldrh	r3, [r4, #12]
 8012c24:	d106      	bne.n	8012c34 <__sflush_r+0x68>
 8012c26:	6829      	ldr	r1, [r5, #0]
 8012c28:	291d      	cmp	r1, #29
 8012c2a:	d848      	bhi.n	8012cbe <__sflush_r+0xf2>
 8012c2c:	4a29      	ldr	r2, [pc, #164]	; (8012cd4 <__sflush_r+0x108>)
 8012c2e:	40ca      	lsrs	r2, r1
 8012c30:	07d6      	lsls	r6, r2, #31
 8012c32:	d544      	bpl.n	8012cbe <__sflush_r+0xf2>
 8012c34:	2200      	movs	r2, #0
 8012c36:	6062      	str	r2, [r4, #4]
 8012c38:	04d9      	lsls	r1, r3, #19
 8012c3a:	6922      	ldr	r2, [r4, #16]
 8012c3c:	6022      	str	r2, [r4, #0]
 8012c3e:	d504      	bpl.n	8012c4a <__sflush_r+0x7e>
 8012c40:	1c42      	adds	r2, r0, #1
 8012c42:	d101      	bne.n	8012c48 <__sflush_r+0x7c>
 8012c44:	682b      	ldr	r3, [r5, #0]
 8012c46:	b903      	cbnz	r3, 8012c4a <__sflush_r+0x7e>
 8012c48:	6560      	str	r0, [r4, #84]	; 0x54
 8012c4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c4c:	602f      	str	r7, [r5, #0]
 8012c4e:	2900      	cmp	r1, #0
 8012c50:	d0c9      	beq.n	8012be6 <__sflush_r+0x1a>
 8012c52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c56:	4299      	cmp	r1, r3
 8012c58:	d002      	beq.n	8012c60 <__sflush_r+0x94>
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	f7fb ff8e 	bl	800eb7c <_free_r>
 8012c60:	2000      	movs	r0, #0
 8012c62:	6360      	str	r0, [r4, #52]	; 0x34
 8012c64:	e7c0      	b.n	8012be8 <__sflush_r+0x1c>
 8012c66:	2301      	movs	r3, #1
 8012c68:	4628      	mov	r0, r5
 8012c6a:	47b0      	blx	r6
 8012c6c:	1c41      	adds	r1, r0, #1
 8012c6e:	d1c8      	bne.n	8012c02 <__sflush_r+0x36>
 8012c70:	682b      	ldr	r3, [r5, #0]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d0c5      	beq.n	8012c02 <__sflush_r+0x36>
 8012c76:	2b1d      	cmp	r3, #29
 8012c78:	d001      	beq.n	8012c7e <__sflush_r+0xb2>
 8012c7a:	2b16      	cmp	r3, #22
 8012c7c:	d101      	bne.n	8012c82 <__sflush_r+0xb6>
 8012c7e:	602f      	str	r7, [r5, #0]
 8012c80:	e7b1      	b.n	8012be6 <__sflush_r+0x1a>
 8012c82:	89a3      	ldrh	r3, [r4, #12]
 8012c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c88:	81a3      	strh	r3, [r4, #12]
 8012c8a:	e7ad      	b.n	8012be8 <__sflush_r+0x1c>
 8012c8c:	690f      	ldr	r7, [r1, #16]
 8012c8e:	2f00      	cmp	r7, #0
 8012c90:	d0a9      	beq.n	8012be6 <__sflush_r+0x1a>
 8012c92:	0793      	lsls	r3, r2, #30
 8012c94:	680e      	ldr	r6, [r1, #0]
 8012c96:	bf08      	it	eq
 8012c98:	694b      	ldreq	r3, [r1, #20]
 8012c9a:	600f      	str	r7, [r1, #0]
 8012c9c:	bf18      	it	ne
 8012c9e:	2300      	movne	r3, #0
 8012ca0:	eba6 0807 	sub.w	r8, r6, r7
 8012ca4:	608b      	str	r3, [r1, #8]
 8012ca6:	f1b8 0f00 	cmp.w	r8, #0
 8012caa:	dd9c      	ble.n	8012be6 <__sflush_r+0x1a>
 8012cac:	4643      	mov	r3, r8
 8012cae:	463a      	mov	r2, r7
 8012cb0:	6a21      	ldr	r1, [r4, #32]
 8012cb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	47b0      	blx	r6
 8012cb8:	2800      	cmp	r0, #0
 8012cba:	dc06      	bgt.n	8012cca <__sflush_r+0xfe>
 8012cbc:	89a3      	ldrh	r3, [r4, #12]
 8012cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cc2:	81a3      	strh	r3, [r4, #12]
 8012cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8012cc8:	e78e      	b.n	8012be8 <__sflush_r+0x1c>
 8012cca:	4407      	add	r7, r0
 8012ccc:	eba8 0800 	sub.w	r8, r8, r0
 8012cd0:	e7e9      	b.n	8012ca6 <__sflush_r+0xda>
 8012cd2:	bf00      	nop
 8012cd4:	20400001 	.word	0x20400001

08012cd8 <_fflush_r>:
 8012cd8:	b538      	push	{r3, r4, r5, lr}
 8012cda:	690b      	ldr	r3, [r1, #16]
 8012cdc:	4605      	mov	r5, r0
 8012cde:	460c      	mov	r4, r1
 8012ce0:	b1db      	cbz	r3, 8012d1a <_fflush_r+0x42>
 8012ce2:	b118      	cbz	r0, 8012cec <_fflush_r+0x14>
 8012ce4:	6983      	ldr	r3, [r0, #24]
 8012ce6:	b90b      	cbnz	r3, 8012cec <_fflush_r+0x14>
 8012ce8:	f7fe fbb2 	bl	8011450 <__sinit>
 8012cec:	4b0c      	ldr	r3, [pc, #48]	; (8012d20 <_fflush_r+0x48>)
 8012cee:	429c      	cmp	r4, r3
 8012cf0:	d109      	bne.n	8012d06 <_fflush_r+0x2e>
 8012cf2:	686c      	ldr	r4, [r5, #4]
 8012cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cf8:	b17b      	cbz	r3, 8012d1a <_fflush_r+0x42>
 8012cfa:	4621      	mov	r1, r4
 8012cfc:	4628      	mov	r0, r5
 8012cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d02:	f7ff bf63 	b.w	8012bcc <__sflush_r>
 8012d06:	4b07      	ldr	r3, [pc, #28]	; (8012d24 <_fflush_r+0x4c>)
 8012d08:	429c      	cmp	r4, r3
 8012d0a:	d101      	bne.n	8012d10 <_fflush_r+0x38>
 8012d0c:	68ac      	ldr	r4, [r5, #8]
 8012d0e:	e7f1      	b.n	8012cf4 <_fflush_r+0x1c>
 8012d10:	4b05      	ldr	r3, [pc, #20]	; (8012d28 <_fflush_r+0x50>)
 8012d12:	429c      	cmp	r4, r3
 8012d14:	bf08      	it	eq
 8012d16:	68ec      	ldreq	r4, [r5, #12]
 8012d18:	e7ec      	b.n	8012cf4 <_fflush_r+0x1c>
 8012d1a:	2000      	movs	r0, #0
 8012d1c:	bd38      	pop	{r3, r4, r5, pc}
 8012d1e:	bf00      	nop
 8012d20:	08013bb8 	.word	0x08013bb8
 8012d24:	08013bd8 	.word	0x08013bd8
 8012d28:	08013b98 	.word	0x08013b98

08012d2c <_lseek_r>:
 8012d2c:	b538      	push	{r3, r4, r5, lr}
 8012d2e:	4c07      	ldr	r4, [pc, #28]	; (8012d4c <_lseek_r+0x20>)
 8012d30:	4605      	mov	r5, r0
 8012d32:	4608      	mov	r0, r1
 8012d34:	4611      	mov	r1, r2
 8012d36:	2200      	movs	r2, #0
 8012d38:	6022      	str	r2, [r4, #0]
 8012d3a:	461a      	mov	r2, r3
 8012d3c:	f7f9 faba 	bl	800c2b4 <_lseek>
 8012d40:	1c43      	adds	r3, r0, #1
 8012d42:	d102      	bne.n	8012d4a <_lseek_r+0x1e>
 8012d44:	6823      	ldr	r3, [r4, #0]
 8012d46:	b103      	cbz	r3, 8012d4a <_lseek_r+0x1e>
 8012d48:	602b      	str	r3, [r5, #0]
 8012d4a:	bd38      	pop	{r3, r4, r5, pc}
 8012d4c:	20007714 	.word	0x20007714

08012d50 <__swhatbuf_r>:
 8012d50:	b570      	push	{r4, r5, r6, lr}
 8012d52:	460e      	mov	r6, r1
 8012d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d58:	2900      	cmp	r1, #0
 8012d5a:	b096      	sub	sp, #88	; 0x58
 8012d5c:	4614      	mov	r4, r2
 8012d5e:	461d      	mov	r5, r3
 8012d60:	da07      	bge.n	8012d72 <__swhatbuf_r+0x22>
 8012d62:	2300      	movs	r3, #0
 8012d64:	602b      	str	r3, [r5, #0]
 8012d66:	89b3      	ldrh	r3, [r6, #12]
 8012d68:	061a      	lsls	r2, r3, #24
 8012d6a:	d410      	bmi.n	8012d8e <__swhatbuf_r+0x3e>
 8012d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d70:	e00e      	b.n	8012d90 <__swhatbuf_r+0x40>
 8012d72:	466a      	mov	r2, sp
 8012d74:	f000 f8a2 	bl	8012ebc <_fstat_r>
 8012d78:	2800      	cmp	r0, #0
 8012d7a:	dbf2      	blt.n	8012d62 <__swhatbuf_r+0x12>
 8012d7c:	9a01      	ldr	r2, [sp, #4]
 8012d7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012d82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012d86:	425a      	negs	r2, r3
 8012d88:	415a      	adcs	r2, r3
 8012d8a:	602a      	str	r2, [r5, #0]
 8012d8c:	e7ee      	b.n	8012d6c <__swhatbuf_r+0x1c>
 8012d8e:	2340      	movs	r3, #64	; 0x40
 8012d90:	2000      	movs	r0, #0
 8012d92:	6023      	str	r3, [r4, #0]
 8012d94:	b016      	add	sp, #88	; 0x58
 8012d96:	bd70      	pop	{r4, r5, r6, pc}

08012d98 <__smakebuf_r>:
 8012d98:	898b      	ldrh	r3, [r1, #12]
 8012d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d9c:	079d      	lsls	r5, r3, #30
 8012d9e:	4606      	mov	r6, r0
 8012da0:	460c      	mov	r4, r1
 8012da2:	d507      	bpl.n	8012db4 <__smakebuf_r+0x1c>
 8012da4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012da8:	6023      	str	r3, [r4, #0]
 8012daa:	6123      	str	r3, [r4, #16]
 8012dac:	2301      	movs	r3, #1
 8012dae:	6163      	str	r3, [r4, #20]
 8012db0:	b002      	add	sp, #8
 8012db2:	bd70      	pop	{r4, r5, r6, pc}
 8012db4:	ab01      	add	r3, sp, #4
 8012db6:	466a      	mov	r2, sp
 8012db8:	f7ff ffca 	bl	8012d50 <__swhatbuf_r>
 8012dbc:	9900      	ldr	r1, [sp, #0]
 8012dbe:	4605      	mov	r5, r0
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	f7fb ff29 	bl	800ec18 <_malloc_r>
 8012dc6:	b948      	cbnz	r0, 8012ddc <__smakebuf_r+0x44>
 8012dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dcc:	059a      	lsls	r2, r3, #22
 8012dce:	d4ef      	bmi.n	8012db0 <__smakebuf_r+0x18>
 8012dd0:	f023 0303 	bic.w	r3, r3, #3
 8012dd4:	f043 0302 	orr.w	r3, r3, #2
 8012dd8:	81a3      	strh	r3, [r4, #12]
 8012dda:	e7e3      	b.n	8012da4 <__smakebuf_r+0xc>
 8012ddc:	4b0d      	ldr	r3, [pc, #52]	; (8012e14 <__smakebuf_r+0x7c>)
 8012dde:	62b3      	str	r3, [r6, #40]	; 0x28
 8012de0:	89a3      	ldrh	r3, [r4, #12]
 8012de2:	6020      	str	r0, [r4, #0]
 8012de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012de8:	81a3      	strh	r3, [r4, #12]
 8012dea:	9b00      	ldr	r3, [sp, #0]
 8012dec:	6163      	str	r3, [r4, #20]
 8012dee:	9b01      	ldr	r3, [sp, #4]
 8012df0:	6120      	str	r0, [r4, #16]
 8012df2:	b15b      	cbz	r3, 8012e0c <__smakebuf_r+0x74>
 8012df4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012df8:	4630      	mov	r0, r6
 8012dfa:	f000 f871 	bl	8012ee0 <_isatty_r>
 8012dfe:	b128      	cbz	r0, 8012e0c <__smakebuf_r+0x74>
 8012e00:	89a3      	ldrh	r3, [r4, #12]
 8012e02:	f023 0303 	bic.w	r3, r3, #3
 8012e06:	f043 0301 	orr.w	r3, r3, #1
 8012e0a:	81a3      	strh	r3, [r4, #12]
 8012e0c:	89a3      	ldrh	r3, [r4, #12]
 8012e0e:	431d      	orrs	r5, r3
 8012e10:	81a5      	strh	r5, [r4, #12]
 8012e12:	e7cd      	b.n	8012db0 <__smakebuf_r+0x18>
 8012e14:	08011419 	.word	0x08011419

08012e18 <memmove>:
 8012e18:	4288      	cmp	r0, r1
 8012e1a:	b510      	push	{r4, lr}
 8012e1c:	eb01 0302 	add.w	r3, r1, r2
 8012e20:	d807      	bhi.n	8012e32 <memmove+0x1a>
 8012e22:	1e42      	subs	r2, r0, #1
 8012e24:	4299      	cmp	r1, r3
 8012e26:	d00a      	beq.n	8012e3e <memmove+0x26>
 8012e28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e2c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012e30:	e7f8      	b.n	8012e24 <memmove+0xc>
 8012e32:	4283      	cmp	r3, r0
 8012e34:	d9f5      	bls.n	8012e22 <memmove+0xa>
 8012e36:	1881      	adds	r1, r0, r2
 8012e38:	1ad2      	subs	r2, r2, r3
 8012e3a:	42d3      	cmn	r3, r2
 8012e3c:	d100      	bne.n	8012e40 <memmove+0x28>
 8012e3e:	bd10      	pop	{r4, pc}
 8012e40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012e44:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012e48:	e7f7      	b.n	8012e3a <memmove+0x22>

08012e4a <_realloc_r>:
 8012e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e4c:	4607      	mov	r7, r0
 8012e4e:	4614      	mov	r4, r2
 8012e50:	460e      	mov	r6, r1
 8012e52:	b921      	cbnz	r1, 8012e5e <_realloc_r+0x14>
 8012e54:	4611      	mov	r1, r2
 8012e56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012e5a:	f7fb bedd 	b.w	800ec18 <_malloc_r>
 8012e5e:	b922      	cbnz	r2, 8012e6a <_realloc_r+0x20>
 8012e60:	f7fb fe8c 	bl	800eb7c <_free_r>
 8012e64:	4625      	mov	r5, r4
 8012e66:	4628      	mov	r0, r5
 8012e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e6a:	f000 f849 	bl	8012f00 <_malloc_usable_size_r>
 8012e6e:	42a0      	cmp	r0, r4
 8012e70:	d20f      	bcs.n	8012e92 <_realloc_r+0x48>
 8012e72:	4621      	mov	r1, r4
 8012e74:	4638      	mov	r0, r7
 8012e76:	f7fb fecf 	bl	800ec18 <_malloc_r>
 8012e7a:	4605      	mov	r5, r0
 8012e7c:	2800      	cmp	r0, #0
 8012e7e:	d0f2      	beq.n	8012e66 <_realloc_r+0x1c>
 8012e80:	4631      	mov	r1, r6
 8012e82:	4622      	mov	r2, r4
 8012e84:	f7fb fe66 	bl	800eb54 <memcpy>
 8012e88:	4631      	mov	r1, r6
 8012e8a:	4638      	mov	r0, r7
 8012e8c:	f7fb fe76 	bl	800eb7c <_free_r>
 8012e90:	e7e9      	b.n	8012e66 <_realloc_r+0x1c>
 8012e92:	4635      	mov	r5, r6
 8012e94:	e7e7      	b.n	8012e66 <_realloc_r+0x1c>
	...

08012e98 <_read_r>:
 8012e98:	b538      	push	{r3, r4, r5, lr}
 8012e9a:	4c07      	ldr	r4, [pc, #28]	; (8012eb8 <_read_r+0x20>)
 8012e9c:	4605      	mov	r5, r0
 8012e9e:	4608      	mov	r0, r1
 8012ea0:	4611      	mov	r1, r2
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	6022      	str	r2, [r4, #0]
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	f7f9 f9a4 	bl	800c1f4 <_read>
 8012eac:	1c43      	adds	r3, r0, #1
 8012eae:	d102      	bne.n	8012eb6 <_read_r+0x1e>
 8012eb0:	6823      	ldr	r3, [r4, #0]
 8012eb2:	b103      	cbz	r3, 8012eb6 <_read_r+0x1e>
 8012eb4:	602b      	str	r3, [r5, #0]
 8012eb6:	bd38      	pop	{r3, r4, r5, pc}
 8012eb8:	20007714 	.word	0x20007714

08012ebc <_fstat_r>:
 8012ebc:	b538      	push	{r3, r4, r5, lr}
 8012ebe:	4c07      	ldr	r4, [pc, #28]	; (8012edc <_fstat_r+0x20>)
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	4605      	mov	r5, r0
 8012ec4:	4608      	mov	r0, r1
 8012ec6:	4611      	mov	r1, r2
 8012ec8:	6023      	str	r3, [r4, #0]
 8012eca:	f7f9 f9d8 	bl	800c27e <_fstat>
 8012ece:	1c43      	adds	r3, r0, #1
 8012ed0:	d102      	bne.n	8012ed8 <_fstat_r+0x1c>
 8012ed2:	6823      	ldr	r3, [r4, #0]
 8012ed4:	b103      	cbz	r3, 8012ed8 <_fstat_r+0x1c>
 8012ed6:	602b      	str	r3, [r5, #0]
 8012ed8:	bd38      	pop	{r3, r4, r5, pc}
 8012eda:	bf00      	nop
 8012edc:	20007714 	.word	0x20007714

08012ee0 <_isatty_r>:
 8012ee0:	b538      	push	{r3, r4, r5, lr}
 8012ee2:	4c06      	ldr	r4, [pc, #24]	; (8012efc <_isatty_r+0x1c>)
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	4605      	mov	r5, r0
 8012ee8:	4608      	mov	r0, r1
 8012eea:	6023      	str	r3, [r4, #0]
 8012eec:	f7f9 f9d7 	bl	800c29e <_isatty>
 8012ef0:	1c43      	adds	r3, r0, #1
 8012ef2:	d102      	bne.n	8012efa <_isatty_r+0x1a>
 8012ef4:	6823      	ldr	r3, [r4, #0]
 8012ef6:	b103      	cbz	r3, 8012efa <_isatty_r+0x1a>
 8012ef8:	602b      	str	r3, [r5, #0]
 8012efa:	bd38      	pop	{r3, r4, r5, pc}
 8012efc:	20007714 	.word	0x20007714

08012f00 <_malloc_usable_size_r>:
 8012f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f04:	1f18      	subs	r0, r3, #4
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	bfbc      	itt	lt
 8012f0a:	580b      	ldrlt	r3, [r1, r0]
 8012f0c:	18c0      	addlt	r0, r0, r3
 8012f0e:	4770      	bx	lr

08012f10 <roundf>:
 8012f10:	ee10 0a10 	vmov	r0, s0
 8012f14:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8012f18:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8012f1c:	2a16      	cmp	r2, #22
 8012f1e:	dc15      	bgt.n	8012f4c <roundf+0x3c>
 8012f20:	2a00      	cmp	r2, #0
 8012f22:	da08      	bge.n	8012f36 <roundf+0x26>
 8012f24:	3201      	adds	r2, #1
 8012f26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8012f2a:	d101      	bne.n	8012f30 <roundf+0x20>
 8012f2c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8012f30:	ee00 3a10 	vmov	s0, r3
 8012f34:	4770      	bx	lr
 8012f36:	4908      	ldr	r1, [pc, #32]	; (8012f58 <roundf+0x48>)
 8012f38:	4111      	asrs	r1, r2
 8012f3a:	4208      	tst	r0, r1
 8012f3c:	d0fa      	beq.n	8012f34 <roundf+0x24>
 8012f3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012f42:	4113      	asrs	r3, r2
 8012f44:	4403      	add	r3, r0
 8012f46:	ea23 0301 	bic.w	r3, r3, r1
 8012f4a:	e7f1      	b.n	8012f30 <roundf+0x20>
 8012f4c:	2a80      	cmp	r2, #128	; 0x80
 8012f4e:	d1f1      	bne.n	8012f34 <roundf+0x24>
 8012f50:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012f54:	4770      	bx	lr
 8012f56:	bf00      	nop
 8012f58:	007fffff 	.word	0x007fffff

08012f5c <powf>:
 8012f5c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8012f60:	ed2d 8b04 	vpush	{d8-d9}
 8012f64:	4ca7      	ldr	r4, [pc, #668]	; (8013204 <powf+0x2a8>)
 8012f66:	b08a      	sub	sp, #40	; 0x28
 8012f68:	eef0 8a40 	vmov.f32	s17, s0
 8012f6c:	eeb0 8a60 	vmov.f32	s16, s1
 8012f70:	f000 f958 	bl	8013224 <__ieee754_powf>
 8012f74:	f994 5000 	ldrsb.w	r5, [r4]
 8012f78:	1c6b      	adds	r3, r5, #1
 8012f7a:	eeb0 9a40 	vmov.f32	s18, s0
 8012f7e:	4626      	mov	r6, r4
 8012f80:	d05f      	beq.n	8013042 <powf+0xe6>
 8012f82:	eeb4 8a48 	vcmp.f32	s16, s16
 8012f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f8a:	d65a      	bvs.n	8013042 <powf+0xe6>
 8012f8c:	eef4 8a68 	vcmp.f32	s17, s17
 8012f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f94:	d721      	bvc.n	8012fda <powf+0x7e>
 8012f96:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f9e:	d150      	bne.n	8013042 <powf+0xe6>
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	9300      	str	r3, [sp, #0]
 8012fa4:	4b98      	ldr	r3, [pc, #608]	; (8013208 <powf+0x2ac>)
 8012fa6:	9301      	str	r3, [sp, #4]
 8012fa8:	ee18 0a90 	vmov	r0, s17
 8012fac:	2300      	movs	r3, #0
 8012fae:	9308      	str	r3, [sp, #32]
 8012fb0:	f7ed faea 	bl	8000588 <__aeabi_f2d>
 8012fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fb8:	ee18 0a10 	vmov	r0, s16
 8012fbc:	f7ed fae4 	bl	8000588 <__aeabi_f2d>
 8012fc0:	4b92      	ldr	r3, [pc, #584]	; (801320c <powf+0x2b0>)
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	2d02      	cmp	r5, #2
 8012fc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012fca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012fce:	d032      	beq.n	8013036 <powf+0xda>
 8012fd0:	4668      	mov	r0, sp
 8012fd2:	f000 fbea 	bl	80137aa <matherr>
 8012fd6:	bb40      	cbnz	r0, 801302a <powf+0xce>
 8012fd8:	e065      	b.n	80130a6 <powf+0x14a>
 8012fda:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8013210 <powf+0x2b4>
 8012fde:	eef4 8a69 	vcmp.f32	s17, s19
 8012fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fe6:	d163      	bne.n	80130b0 <powf+0x154>
 8012fe8:	eeb4 8a69 	vcmp.f32	s16, s19
 8012fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff0:	d12e      	bne.n	8013050 <powf+0xf4>
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	9300      	str	r3, [sp, #0]
 8012ff6:	4b84      	ldr	r3, [pc, #528]	; (8013208 <powf+0x2ac>)
 8012ff8:	9301      	str	r3, [sp, #4]
 8012ffa:	ee18 0a90 	vmov	r0, s17
 8012ffe:	2300      	movs	r3, #0
 8013000:	9308      	str	r3, [sp, #32]
 8013002:	f7ed fac1 	bl	8000588 <__aeabi_f2d>
 8013006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801300a:	ee18 0a10 	vmov	r0, s16
 801300e:	f7ed fabb 	bl	8000588 <__aeabi_f2d>
 8013012:	2200      	movs	r2, #0
 8013014:	2300      	movs	r3, #0
 8013016:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801301a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801301e:	2d00      	cmp	r5, #0
 8013020:	d0d6      	beq.n	8012fd0 <powf+0x74>
 8013022:	4b7a      	ldr	r3, [pc, #488]	; (801320c <powf+0x2b0>)
 8013024:	2200      	movs	r2, #0
 8013026:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801302a:	9b08      	ldr	r3, [sp, #32]
 801302c:	b11b      	cbz	r3, 8013036 <powf+0xda>
 801302e:	f7fb fd57 	bl	800eae0 <__errno>
 8013032:	9b08      	ldr	r3, [sp, #32]
 8013034:	6003      	str	r3, [r0, #0]
 8013036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801303a:	f7ed fdf5 	bl	8000c28 <__aeabi_d2f>
 801303e:	ee09 0a10 	vmov	s18, r0
 8013042:	eeb0 0a49 	vmov.f32	s0, s18
 8013046:	b00a      	add	sp, #40	; 0x28
 8013048:	ecbd 8b04 	vpop	{d8-d9}
 801304c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8013050:	eeb0 0a48 	vmov.f32	s0, s16
 8013054:	f000 fbb2 	bl	80137bc <finitef>
 8013058:	2800      	cmp	r0, #0
 801305a:	d0f2      	beq.n	8013042 <powf+0xe6>
 801305c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013064:	d5ed      	bpl.n	8013042 <powf+0xe6>
 8013066:	2301      	movs	r3, #1
 8013068:	9300      	str	r3, [sp, #0]
 801306a:	4b67      	ldr	r3, [pc, #412]	; (8013208 <powf+0x2ac>)
 801306c:	9301      	str	r3, [sp, #4]
 801306e:	ee18 0a90 	vmov	r0, s17
 8013072:	2300      	movs	r3, #0
 8013074:	9308      	str	r3, [sp, #32]
 8013076:	f7ed fa87 	bl	8000588 <__aeabi_f2d>
 801307a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801307e:	ee18 0a10 	vmov	r0, s16
 8013082:	f7ed fa81 	bl	8000588 <__aeabi_f2d>
 8013086:	f994 3000 	ldrsb.w	r3, [r4]
 801308a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801308e:	b923      	cbnz	r3, 801309a <powf+0x13e>
 8013090:	2200      	movs	r2, #0
 8013092:	2300      	movs	r3, #0
 8013094:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013098:	e79a      	b.n	8012fd0 <powf+0x74>
 801309a:	495e      	ldr	r1, [pc, #376]	; (8013214 <powf+0x2b8>)
 801309c:	2000      	movs	r0, #0
 801309e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80130a2:	2b02      	cmp	r3, #2
 80130a4:	d194      	bne.n	8012fd0 <powf+0x74>
 80130a6:	f7fb fd1b 	bl	800eae0 <__errno>
 80130aa:	2321      	movs	r3, #33	; 0x21
 80130ac:	6003      	str	r3, [r0, #0]
 80130ae:	e7bc      	b.n	801302a <powf+0xce>
 80130b0:	f000 fb84 	bl	80137bc <finitef>
 80130b4:	4605      	mov	r5, r0
 80130b6:	2800      	cmp	r0, #0
 80130b8:	d173      	bne.n	80131a2 <powf+0x246>
 80130ba:	eeb0 0a68 	vmov.f32	s0, s17
 80130be:	f000 fb7d 	bl	80137bc <finitef>
 80130c2:	2800      	cmp	r0, #0
 80130c4:	d06d      	beq.n	80131a2 <powf+0x246>
 80130c6:	eeb0 0a48 	vmov.f32	s0, s16
 80130ca:	f000 fb77 	bl	80137bc <finitef>
 80130ce:	2800      	cmp	r0, #0
 80130d0:	d067      	beq.n	80131a2 <powf+0x246>
 80130d2:	ee18 0a90 	vmov	r0, s17
 80130d6:	f7ed fa57 	bl	8000588 <__aeabi_f2d>
 80130da:	4680      	mov	r8, r0
 80130dc:	ee18 0a10 	vmov	r0, s16
 80130e0:	4689      	mov	r9, r1
 80130e2:	f7ed fa51 	bl	8000588 <__aeabi_f2d>
 80130e6:	eeb4 9a49 	vcmp.f32	s18, s18
 80130ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ee:	f994 4000 	ldrsb.w	r4, [r4]
 80130f2:	4b45      	ldr	r3, [pc, #276]	; (8013208 <powf+0x2ac>)
 80130f4:	d713      	bvc.n	801311e <powf+0x1c2>
 80130f6:	2201      	movs	r2, #1
 80130f8:	e9cd 2300 	strd	r2, r3, [sp]
 80130fc:	9508      	str	r5, [sp, #32]
 80130fe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013102:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013106:	2c00      	cmp	r4, #0
 8013108:	d0c2      	beq.n	8013090 <powf+0x134>
 801310a:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801310e:	ee17 0a90 	vmov	r0, s15
 8013112:	f7ed fa39 	bl	8000588 <__aeabi_f2d>
 8013116:	2c02      	cmp	r4, #2
 8013118:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801311c:	e7c2      	b.n	80130a4 <powf+0x148>
 801311e:	2203      	movs	r2, #3
 8013120:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013124:	e9cd 2300 	strd	r2, r3, [sp]
 8013128:	9508      	str	r5, [sp, #32]
 801312a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801312e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013132:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013136:	b9fc      	cbnz	r4, 8013178 <powf+0x21c>
 8013138:	4b37      	ldr	r3, [pc, #220]	; (8013218 <powf+0x2bc>)
 801313a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801313e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013146:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801314a:	d553      	bpl.n	80131f4 <powf+0x298>
 801314c:	eeb0 0a48 	vmov.f32	s0, s16
 8013150:	f000 fb3e 	bl	80137d0 <rintf>
 8013154:	eeb4 0a48 	vcmp.f32	s0, s16
 8013158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801315c:	d004      	beq.n	8013168 <powf+0x20c>
 801315e:	4b2f      	ldr	r3, [pc, #188]	; (801321c <powf+0x2c0>)
 8013160:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013164:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013168:	f996 3000 	ldrsb.w	r3, [r6]
 801316c:	2b02      	cmp	r3, #2
 801316e:	d141      	bne.n	80131f4 <powf+0x298>
 8013170:	f7fb fcb6 	bl	800eae0 <__errno>
 8013174:	2322      	movs	r3, #34	; 0x22
 8013176:	e799      	b.n	80130ac <powf+0x150>
 8013178:	4b29      	ldr	r3, [pc, #164]	; (8013220 <powf+0x2c4>)
 801317a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801317e:	2200      	movs	r2, #0
 8013180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013184:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013188:	d5ee      	bpl.n	8013168 <powf+0x20c>
 801318a:	eeb0 0a48 	vmov.f32	s0, s16
 801318e:	f000 fb1f 	bl	80137d0 <rintf>
 8013192:	eeb4 0a48 	vcmp.f32	s0, s16
 8013196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801319a:	d0e5      	beq.n	8013168 <powf+0x20c>
 801319c:	2200      	movs	r2, #0
 801319e:	4b1d      	ldr	r3, [pc, #116]	; (8013214 <powf+0x2b8>)
 80131a0:	e7e0      	b.n	8013164 <powf+0x208>
 80131a2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80131a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131aa:	f47f af4a 	bne.w	8013042 <powf+0xe6>
 80131ae:	eeb0 0a68 	vmov.f32	s0, s17
 80131b2:	f000 fb03 	bl	80137bc <finitef>
 80131b6:	2800      	cmp	r0, #0
 80131b8:	f43f af43 	beq.w	8013042 <powf+0xe6>
 80131bc:	eeb0 0a48 	vmov.f32	s0, s16
 80131c0:	f000 fafc 	bl	80137bc <finitef>
 80131c4:	2800      	cmp	r0, #0
 80131c6:	f43f af3c 	beq.w	8013042 <powf+0xe6>
 80131ca:	2304      	movs	r3, #4
 80131cc:	9300      	str	r3, [sp, #0]
 80131ce:	4b0e      	ldr	r3, [pc, #56]	; (8013208 <powf+0x2ac>)
 80131d0:	9301      	str	r3, [sp, #4]
 80131d2:	ee18 0a90 	vmov	r0, s17
 80131d6:	2300      	movs	r3, #0
 80131d8:	9308      	str	r3, [sp, #32]
 80131da:	f7ed f9d5 	bl	8000588 <__aeabi_f2d>
 80131de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131e2:	ee18 0a10 	vmov	r0, s16
 80131e6:	f7ed f9cf 	bl	8000588 <__aeabi_f2d>
 80131ea:	2200      	movs	r2, #0
 80131ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80131f0:	2300      	movs	r3, #0
 80131f2:	e7b7      	b.n	8013164 <powf+0x208>
 80131f4:	4668      	mov	r0, sp
 80131f6:	f000 fad8 	bl	80137aa <matherr>
 80131fa:	2800      	cmp	r0, #0
 80131fc:	f47f af15 	bne.w	801302a <powf+0xce>
 8013200:	e7b6      	b.n	8013170 <powf+0x214>
 8013202:	bf00      	nop
 8013204:	2000081c 	.word	0x2000081c
 8013208:	08013e16 	.word	0x08013e16
 801320c:	3ff00000 	.word	0x3ff00000
 8013210:	00000000 	.word	0x00000000
 8013214:	fff00000 	.word	0xfff00000
 8013218:	47efffff 	.word	0x47efffff
 801321c:	c7efffff 	.word	0xc7efffff
 8013220:	7ff00000 	.word	0x7ff00000

08013224 <__ieee754_powf>:
 8013224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013228:	ee10 5a90 	vmov	r5, s1
 801322c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8013230:	ed2d 8b02 	vpush	{d8}
 8013234:	eeb0 8a40 	vmov.f32	s16, s0
 8013238:	eef0 8a60 	vmov.f32	s17, s1
 801323c:	f000 8293 	beq.w	8013766 <__ieee754_powf+0x542>
 8013240:	ee10 8a10 	vmov	r8, s0
 8013244:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8013248:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801324c:	dc06      	bgt.n	801325c <__ieee754_powf+0x38>
 801324e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8013252:	dd0a      	ble.n	801326a <__ieee754_powf+0x46>
 8013254:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013258:	f000 8285 	beq.w	8013766 <__ieee754_powf+0x542>
 801325c:	ecbd 8b02 	vpop	{d8}
 8013260:	48d9      	ldr	r0, [pc, #868]	; (80135c8 <__ieee754_powf+0x3a4>)
 8013262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013266:	f7fc bb97 	b.w	800f998 <nanf>
 801326a:	f1b8 0f00 	cmp.w	r8, #0
 801326e:	da1d      	bge.n	80132ac <__ieee754_powf+0x88>
 8013270:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8013274:	da2c      	bge.n	80132d0 <__ieee754_powf+0xac>
 8013276:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801327a:	db30      	blt.n	80132de <__ieee754_powf+0xba>
 801327c:	15fb      	asrs	r3, r7, #23
 801327e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8013282:	fa47 f603 	asr.w	r6, r7, r3
 8013286:	fa06 f303 	lsl.w	r3, r6, r3
 801328a:	42bb      	cmp	r3, r7
 801328c:	d127      	bne.n	80132de <__ieee754_powf+0xba>
 801328e:	f006 0601 	and.w	r6, r6, #1
 8013292:	f1c6 0602 	rsb	r6, r6, #2
 8013296:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801329a:	d122      	bne.n	80132e2 <__ieee754_powf+0xbe>
 801329c:	2d00      	cmp	r5, #0
 801329e:	f280 8268 	bge.w	8013772 <__ieee754_powf+0x54e>
 80132a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80132a6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80132aa:	e00d      	b.n	80132c8 <__ieee754_powf+0xa4>
 80132ac:	2600      	movs	r6, #0
 80132ae:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80132b2:	d1f0      	bne.n	8013296 <__ieee754_powf+0x72>
 80132b4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80132b8:	f000 8255 	beq.w	8013766 <__ieee754_powf+0x542>
 80132bc:	dd0a      	ble.n	80132d4 <__ieee754_powf+0xb0>
 80132be:	2d00      	cmp	r5, #0
 80132c0:	f280 8254 	bge.w	801376c <__ieee754_powf+0x548>
 80132c4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80135cc <__ieee754_powf+0x3a8>
 80132c8:	ecbd 8b02 	vpop	{d8}
 80132cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132d0:	2602      	movs	r6, #2
 80132d2:	e7ec      	b.n	80132ae <__ieee754_powf+0x8a>
 80132d4:	2d00      	cmp	r5, #0
 80132d6:	daf5      	bge.n	80132c4 <__ieee754_powf+0xa0>
 80132d8:	eeb1 0a68 	vneg.f32	s0, s17
 80132dc:	e7f4      	b.n	80132c8 <__ieee754_powf+0xa4>
 80132de:	2600      	movs	r6, #0
 80132e0:	e7d9      	b.n	8013296 <__ieee754_powf+0x72>
 80132e2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80132e6:	d102      	bne.n	80132ee <__ieee754_powf+0xca>
 80132e8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80132ec:	e7ec      	b.n	80132c8 <__ieee754_powf+0xa4>
 80132ee:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80132f2:	eeb0 0a48 	vmov.f32	s0, s16
 80132f6:	d108      	bne.n	801330a <__ieee754_powf+0xe6>
 80132f8:	f1b8 0f00 	cmp.w	r8, #0
 80132fc:	db05      	blt.n	801330a <__ieee754_powf+0xe6>
 80132fe:	ecbd 8b02 	vpop	{d8}
 8013302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013306:	f000 ba4d 	b.w	80137a4 <__ieee754_sqrtf>
 801330a:	f000 fa50 	bl	80137ae <fabsf>
 801330e:	b124      	cbz	r4, 801331a <__ieee754_powf+0xf6>
 8013310:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8013314:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013318:	d117      	bne.n	801334a <__ieee754_powf+0x126>
 801331a:	2d00      	cmp	r5, #0
 801331c:	bfbc      	itt	lt
 801331e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8013322:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8013326:	f1b8 0f00 	cmp.w	r8, #0
 801332a:	dacd      	bge.n	80132c8 <__ieee754_powf+0xa4>
 801332c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8013330:	ea54 0306 	orrs.w	r3, r4, r6
 8013334:	d104      	bne.n	8013340 <__ieee754_powf+0x11c>
 8013336:	ee70 7a40 	vsub.f32	s15, s0, s0
 801333a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801333e:	e7c3      	b.n	80132c8 <__ieee754_powf+0xa4>
 8013340:	2e01      	cmp	r6, #1
 8013342:	d1c1      	bne.n	80132c8 <__ieee754_powf+0xa4>
 8013344:	eeb1 0a40 	vneg.f32	s0, s0
 8013348:	e7be      	b.n	80132c8 <__ieee754_powf+0xa4>
 801334a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801334e:	3801      	subs	r0, #1
 8013350:	ea56 0300 	orrs.w	r3, r6, r0
 8013354:	d104      	bne.n	8013360 <__ieee754_powf+0x13c>
 8013356:	ee38 8a48 	vsub.f32	s16, s16, s16
 801335a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801335e:	e7b3      	b.n	80132c8 <__ieee754_powf+0xa4>
 8013360:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8013364:	dd6d      	ble.n	8013442 <__ieee754_powf+0x21e>
 8013366:	4b9a      	ldr	r3, [pc, #616]	; (80135d0 <__ieee754_powf+0x3ac>)
 8013368:	429c      	cmp	r4, r3
 801336a:	dc06      	bgt.n	801337a <__ieee754_powf+0x156>
 801336c:	2d00      	cmp	r5, #0
 801336e:	daa9      	bge.n	80132c4 <__ieee754_powf+0xa0>
 8013370:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80135d4 <__ieee754_powf+0x3b0>
 8013374:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013378:	e7a6      	b.n	80132c8 <__ieee754_powf+0xa4>
 801337a:	4b97      	ldr	r3, [pc, #604]	; (80135d8 <__ieee754_powf+0x3b4>)
 801337c:	429c      	cmp	r4, r3
 801337e:	dd02      	ble.n	8013386 <__ieee754_powf+0x162>
 8013380:	2d00      	cmp	r5, #0
 8013382:	dcf5      	bgt.n	8013370 <__ieee754_powf+0x14c>
 8013384:	e79e      	b.n	80132c4 <__ieee754_powf+0xa0>
 8013386:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801338a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801338e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80135dc <__ieee754_powf+0x3b8>
 8013392:	eef1 6a40 	vneg.f32	s13, s0
 8013396:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801339a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801339e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80133a2:	eee7 7a40 	vfms.f32	s15, s14, s0
 80133a6:	ee60 0a00 	vmul.f32	s1, s0, s0
 80133aa:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80135e0 <__ieee754_powf+0x3bc>
 80133ae:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80133b2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80135e4 <__ieee754_powf+0x3c0>
 80133b6:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 80133ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80133be:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80135e8 <__ieee754_powf+0x3c4>
 80133c2:	eeb0 6a67 	vmov.f32	s12, s15
 80133c6:	eea0 6a07 	vfma.f32	s12, s0, s14
 80133ca:	ee16 3a10 	vmov	r3, s12
 80133ce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80133d2:	f023 030f 	bic.w	r3, r3, #15
 80133d6:	ee00 3a90 	vmov	s1, r3
 80133da:	eee6 0a87 	vfma.f32	s1, s13, s14
 80133de:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80133e2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80133e6:	f025 050f 	bic.w	r5, r5, #15
 80133ea:	ee07 5a10 	vmov	s14, r5
 80133ee:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80133f2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80133f6:	ee07 3a90 	vmov	s15, r3
 80133fa:	eee7 0a27 	vfma.f32	s1, s14, s15
 80133fe:	3e01      	subs	r6, #1
 8013400:	ea56 0200 	orrs.w	r2, r6, r0
 8013404:	ee07 5a10 	vmov	s14, r5
 8013408:	ee67 7a87 	vmul.f32	s15, s15, s14
 801340c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013410:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8013414:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013418:	ee17 4a10 	vmov	r4, s14
 801341c:	bf08      	it	eq
 801341e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8013422:	2c00      	cmp	r4, #0
 8013424:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013428:	f340 8184 	ble.w	8013734 <__ieee754_powf+0x510>
 801342c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8013430:	f340 80fc 	ble.w	801362c <__ieee754_powf+0x408>
 8013434:	eddf 7a67 	vldr	s15, [pc, #412]	; 80135d4 <__ieee754_powf+0x3b0>
 8013438:	ee28 0a27 	vmul.f32	s0, s16, s15
 801343c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013440:	e742      	b.n	80132c8 <__ieee754_powf+0xa4>
 8013442:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8013446:	bfbf      	itttt	lt
 8013448:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 80135ec <__ieee754_powf+0x3c8>
 801344c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8013450:	f06f 0217 	mvnlt.w	r2, #23
 8013454:	ee17 4a90 	vmovlt	r4, s15
 8013458:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801345c:	bfa8      	it	ge
 801345e:	2200      	movge	r2, #0
 8013460:	3b7f      	subs	r3, #127	; 0x7f
 8013462:	4413      	add	r3, r2
 8013464:	4a62      	ldr	r2, [pc, #392]	; (80135f0 <__ieee754_powf+0x3cc>)
 8013466:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801346a:	4294      	cmp	r4, r2
 801346c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8013470:	dd06      	ble.n	8013480 <__ieee754_powf+0x25c>
 8013472:	4a60      	ldr	r2, [pc, #384]	; (80135f4 <__ieee754_powf+0x3d0>)
 8013474:	4294      	cmp	r4, r2
 8013476:	f340 80a5 	ble.w	80135c4 <__ieee754_powf+0x3a0>
 801347a:	3301      	adds	r3, #1
 801347c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013480:	2400      	movs	r4, #0
 8013482:	4a5d      	ldr	r2, [pc, #372]	; (80135f8 <__ieee754_powf+0x3d4>)
 8013484:	00a7      	lsls	r7, r4, #2
 8013486:	443a      	add	r2, r7
 8013488:	ee07 1a90 	vmov	s15, r1
 801348c:	ed92 7a00 	vldr	s14, [r2]
 8013490:	4a5a      	ldr	r2, [pc, #360]	; (80135fc <__ieee754_powf+0x3d8>)
 8013492:	ee37 6a27 	vadd.f32	s12, s14, s15
 8013496:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801349a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801349e:	1049      	asrs	r1, r1, #1
 80134a0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80134a4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80134a8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80134ac:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80134b0:	ee06 1a10 	vmov	s12, r1
 80134b4:	ee65 4aa6 	vmul.f32	s9, s11, s13
 80134b8:	ee14 ca90 	vmov	ip, s9
 80134bc:	ea02 0c0c 	and.w	ip, r2, ip
 80134c0:	ee05 ca10 	vmov	s10, ip
 80134c4:	eeb1 4a45 	vneg.f32	s8, s10
 80134c8:	eee4 5a06 	vfma.f32	s11, s8, s12
 80134cc:	ee36 6a47 	vsub.f32	s12, s12, s14
 80134d0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8013600 <__ieee754_powf+0x3dc>
 80134d4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80134d8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80134dc:	eee4 5a06 	vfma.f32	s11, s8, s12
 80134e0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80134e4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80134e8:	eddf 5a46 	vldr	s11, [pc, #280]	; 8013604 <__ieee754_powf+0x3e0>
 80134ec:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80134f0:	eddf 5a45 	vldr	s11, [pc, #276]	; 8013608 <__ieee754_powf+0x3e4>
 80134f4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80134f8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80135dc <__ieee754_powf+0x3b8>
 80134fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013500:	eddf 5a42 	vldr	s11, [pc, #264]	; 801360c <__ieee754_powf+0x3e8>
 8013504:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013508:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8013610 <__ieee754_powf+0x3ec>
 801350c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8013510:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013514:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013518:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801351c:	eef0 7a65 	vmov.f32	s15, s11
 8013520:	eee3 6a87 	vfma.f32	s13, s7, s14
 8013524:	eee5 7a05 	vfma.f32	s15, s10, s10
 8013528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801352c:	ee17 1a90 	vmov	r1, s15
 8013530:	4011      	ands	r1, r2
 8013532:	ee07 1a90 	vmov	s15, r1
 8013536:	ee37 7ae5 	vsub.f32	s14, s15, s11
 801353a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8013614 <__ieee754_powf+0x3f0>
 801353e:	eea4 7a05 	vfma.f32	s14, s8, s10
 8013542:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013546:	ee27 7a24 	vmul.f32	s14, s14, s9
 801354a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801354e:	eeb0 6a47 	vmov.f32	s12, s14
 8013552:	eea5 6a27 	vfma.f32	s12, s10, s15
 8013556:	ee16 1a10 	vmov	r1, s12
 801355a:	4011      	ands	r1, r2
 801355c:	ee06 1a90 	vmov	s13, r1
 8013560:	eee4 6a27 	vfma.f32	s13, s8, s15
 8013564:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8013618 <__ieee754_powf+0x3f4>
 8013568:	ee37 7a66 	vsub.f32	s14, s14, s13
 801356c:	ee06 1a10 	vmov	s12, r1
 8013570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013574:	eddf 7a29 	vldr	s15, [pc, #164]	; 801361c <__ieee754_powf+0x3f8>
 8013578:	4929      	ldr	r1, [pc, #164]	; (8013620 <__ieee754_powf+0x3fc>)
 801357a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801357e:	4439      	add	r1, r7
 8013580:	edd1 7a00 	vldr	s15, [r1]
 8013584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013588:	ee07 3a90 	vmov	s15, r3
 801358c:	eef0 0a47 	vmov.f32	s1, s14
 8013590:	4b24      	ldr	r3, [pc, #144]	; (8013624 <__ieee754_powf+0x400>)
 8013592:	eee6 0a25 	vfma.f32	s1, s12, s11
 8013596:	443b      	add	r3, r7
 8013598:	ed93 5a00 	vldr	s10, [r3]
 801359c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80135a0:	ee70 0a85 	vadd.f32	s1, s1, s10
 80135a4:	ee70 7aa6 	vadd.f32	s15, s1, s13
 80135a8:	ee17 3a90 	vmov	r3, s15
 80135ac:	4013      	ands	r3, r2
 80135ae:	ee07 3a90 	vmov	s15, r3
 80135b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80135b6:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80135ba:	eee6 7a65 	vfms.f32	s15, s12, s11
 80135be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80135c2:	e70e      	b.n	80133e2 <__ieee754_powf+0x1be>
 80135c4:	2401      	movs	r4, #1
 80135c6:	e75c      	b.n	8013482 <__ieee754_powf+0x25e>
 80135c8:	08013d09 	.word	0x08013d09
 80135cc:	00000000 	.word	0x00000000
 80135d0:	3f7ffff7 	.word	0x3f7ffff7
 80135d4:	7149f2ca 	.word	0x7149f2ca
 80135d8:	3f800007 	.word	0x3f800007
 80135dc:	3eaaaaab 	.word	0x3eaaaaab
 80135e0:	36eca570 	.word	0x36eca570
 80135e4:	3fb8aa3b 	.word	0x3fb8aa3b
 80135e8:	3fb8aa00 	.word	0x3fb8aa00
 80135ec:	4b800000 	.word	0x4b800000
 80135f0:	001cc471 	.word	0x001cc471
 80135f4:	005db3d6 	.word	0x005db3d6
 80135f8:	08013e1c 	.word	0x08013e1c
 80135fc:	fffff000 	.word	0xfffff000
 8013600:	3e6c3255 	.word	0x3e6c3255
 8013604:	3e53f142 	.word	0x3e53f142
 8013608:	3e8ba305 	.word	0x3e8ba305
 801360c:	3edb6db7 	.word	0x3edb6db7
 8013610:	3f19999a 	.word	0x3f19999a
 8013614:	3f763800 	.word	0x3f763800
 8013618:	3f76384f 	.word	0x3f76384f
 801361c:	369dc3a0 	.word	0x369dc3a0
 8013620:	08013e2c 	.word	0x08013e2c
 8013624:	08013e24 	.word	0x08013e24
 8013628:	3338aa3c 	.word	0x3338aa3c
 801362c:	f040 8092 	bne.w	8013754 <__ieee754_powf+0x530>
 8013630:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8013628 <__ieee754_powf+0x404>
 8013634:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013638:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801363c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013644:	f73f aef6 	bgt.w	8013434 <__ieee754_powf+0x210>
 8013648:	15db      	asrs	r3, r3, #23
 801364a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801364e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013652:	4103      	asrs	r3, r0
 8013654:	4423      	add	r3, r4
 8013656:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801365a:	4947      	ldr	r1, [pc, #284]	; (8013778 <__ieee754_powf+0x554>)
 801365c:	3a7f      	subs	r2, #127	; 0x7f
 801365e:	4111      	asrs	r1, r2
 8013660:	ea23 0101 	bic.w	r1, r3, r1
 8013664:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8013668:	ee07 1a10 	vmov	s14, r1
 801366c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8013670:	f1c2 0217 	rsb	r2, r2, #23
 8013674:	4110      	asrs	r0, r2
 8013676:	2c00      	cmp	r4, #0
 8013678:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801367c:	bfb8      	it	lt
 801367e:	4240      	neglt	r0, r0
 8013680:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8013684:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801377c <__ieee754_powf+0x558>
 8013688:	ee17 3a10 	vmov	r3, s14
 801368c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013690:	f023 030f 	bic.w	r3, r3, #15
 8013694:	ee07 3a10 	vmov	s14, r3
 8013698:	ee77 7a67 	vsub.f32	s15, s14, s15
 801369c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80136a0:	eddf 7a37 	vldr	s15, [pc, #220]	; 8013780 <__ieee754_powf+0x55c>
 80136a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136a8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80136ac:	eddf 6a35 	vldr	s13, [pc, #212]	; 8013784 <__ieee754_powf+0x560>
 80136b0:	eeb0 0a67 	vmov.f32	s0, s15
 80136b4:	eea7 0a26 	vfma.f32	s0, s14, s13
 80136b8:	eeb0 6a40 	vmov.f32	s12, s0
 80136bc:	eea7 6a66 	vfms.f32	s12, s14, s13
 80136c0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80136c4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80136c8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8013788 <__ieee754_powf+0x564>
 80136cc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801378c <__ieee754_powf+0x568>
 80136d0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80136d4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8013790 <__ieee754_powf+0x56c>
 80136d8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80136dc:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8013794 <__ieee754_powf+0x570>
 80136e0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80136e4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8013798 <__ieee754_powf+0x574>
 80136e8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80136ec:	eeb0 6a40 	vmov.f32	s12, s0
 80136f0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80136f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80136f8:	eeb0 7a46 	vmov.f32	s14, s12
 80136fc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8013700:	ee20 6a06 	vmul.f32	s12, s0, s12
 8013704:	eee0 7a27 	vfma.f32	s15, s0, s15
 8013708:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801370c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013710:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013714:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013718:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801371c:	ee10 3a10 	vmov	r3, s0
 8013720:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8013724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013728:	da1a      	bge.n	8013760 <__ieee754_powf+0x53c>
 801372a:	f000 f8ab 	bl	8013884 <scalbnf>
 801372e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013732:	e5c9      	b.n	80132c8 <__ieee754_powf+0xa4>
 8013734:	4a19      	ldr	r2, [pc, #100]	; (801379c <__ieee754_powf+0x578>)
 8013736:	4293      	cmp	r3, r2
 8013738:	dd02      	ble.n	8013740 <__ieee754_powf+0x51c>
 801373a:	eddf 7a19 	vldr	s15, [pc, #100]	; 80137a0 <__ieee754_powf+0x57c>
 801373e:	e67b      	b.n	8013438 <__ieee754_powf+0x214>
 8013740:	d108      	bne.n	8013754 <__ieee754_powf+0x530>
 8013742:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013746:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801374a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801374e:	f6ff af7b 	blt.w	8013648 <__ieee754_powf+0x424>
 8013752:	e7f2      	b.n	801373a <__ieee754_powf+0x516>
 8013754:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8013758:	f73f af76 	bgt.w	8013648 <__ieee754_powf+0x424>
 801375c:	2000      	movs	r0, #0
 801375e:	e78f      	b.n	8013680 <__ieee754_powf+0x45c>
 8013760:	ee00 3a10 	vmov	s0, r3
 8013764:	e7e3      	b.n	801372e <__ieee754_powf+0x50a>
 8013766:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801376a:	e5ad      	b.n	80132c8 <__ieee754_powf+0xa4>
 801376c:	eeb0 0a68 	vmov.f32	s0, s17
 8013770:	e5aa      	b.n	80132c8 <__ieee754_powf+0xa4>
 8013772:	eeb0 0a48 	vmov.f32	s0, s16
 8013776:	e5a7      	b.n	80132c8 <__ieee754_powf+0xa4>
 8013778:	007fffff 	.word	0x007fffff
 801377c:	3f317218 	.word	0x3f317218
 8013780:	35bfbe8c 	.word	0x35bfbe8c
 8013784:	3f317200 	.word	0x3f317200
 8013788:	3331bb4c 	.word	0x3331bb4c
 801378c:	b5ddea0e 	.word	0xb5ddea0e
 8013790:	388ab355 	.word	0x388ab355
 8013794:	bb360b61 	.word	0xbb360b61
 8013798:	3e2aaaab 	.word	0x3e2aaaab
 801379c:	43160000 	.word	0x43160000
 80137a0:	0da24260 	.word	0x0da24260

080137a4 <__ieee754_sqrtf>:
 80137a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80137a8:	4770      	bx	lr

080137aa <matherr>:
 80137aa:	2000      	movs	r0, #0
 80137ac:	4770      	bx	lr

080137ae <fabsf>:
 80137ae:	ee10 3a10 	vmov	r3, s0
 80137b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80137b6:	ee00 3a10 	vmov	s0, r3
 80137ba:	4770      	bx	lr

080137bc <finitef>:
 80137bc:	ee10 3a10 	vmov	r3, s0
 80137c0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80137c4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80137c8:	bfac      	ite	ge
 80137ca:	2000      	movge	r0, #0
 80137cc:	2001      	movlt	r0, #1
 80137ce:	4770      	bx	lr

080137d0 <rintf>:
 80137d0:	b513      	push	{r0, r1, r4, lr}
 80137d2:	ee10 1a10 	vmov	r1, s0
 80137d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80137da:	0ddc      	lsrs	r4, r3, #23
 80137dc:	3c7f      	subs	r4, #127	; 0x7f
 80137de:	2c16      	cmp	r4, #22
 80137e0:	dc46      	bgt.n	8013870 <rintf+0xa0>
 80137e2:	b32b      	cbz	r3, 8013830 <rintf+0x60>
 80137e4:	2c00      	cmp	r4, #0
 80137e6:	ee10 2a10 	vmov	r2, s0
 80137ea:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 80137ee:	da21      	bge.n	8013834 <rintf+0x64>
 80137f0:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80137f4:	425b      	negs	r3, r3
 80137f6:	4a21      	ldr	r2, [pc, #132]	; (801387c <rintf+0xac>)
 80137f8:	0a5b      	lsrs	r3, r3, #9
 80137fa:	0d09      	lsrs	r1, r1, #20
 80137fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013800:	0509      	lsls	r1, r1, #20
 8013802:	430b      	orrs	r3, r1
 8013804:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8013808:	ee07 3a90 	vmov	s15, r3
 801380c:	edd2 6a00 	vldr	s13, [r2]
 8013810:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8013814:	ed8d 7a01 	vstr	s14, [sp, #4]
 8013818:	eddd 7a01 	vldr	s15, [sp, #4]
 801381c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013820:	ee17 3a90 	vmov	r3, s15
 8013824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013828:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801382c:	ee00 3a10 	vmov	s0, r3
 8013830:	b002      	add	sp, #8
 8013832:	bd10      	pop	{r4, pc}
 8013834:	4b12      	ldr	r3, [pc, #72]	; (8013880 <rintf+0xb0>)
 8013836:	4123      	asrs	r3, r4
 8013838:	4219      	tst	r1, r3
 801383a:	d0f9      	beq.n	8013830 <rintf+0x60>
 801383c:	085b      	lsrs	r3, r3, #1
 801383e:	4219      	tst	r1, r3
 8013840:	d006      	beq.n	8013850 <rintf+0x80>
 8013842:	ea21 0203 	bic.w	r2, r1, r3
 8013846:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801384a:	fa43 f404 	asr.w	r4, r3, r4
 801384e:	4322      	orrs	r2, r4
 8013850:	4b0a      	ldr	r3, [pc, #40]	; (801387c <rintf+0xac>)
 8013852:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013856:	ed90 7a00 	vldr	s14, [r0]
 801385a:	ee07 2a90 	vmov	s15, r2
 801385e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013862:	edcd 7a01 	vstr	s15, [sp, #4]
 8013866:	ed9d 0a01 	vldr	s0, [sp, #4]
 801386a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801386e:	e7df      	b.n	8013830 <rintf+0x60>
 8013870:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013874:	d3dc      	bcc.n	8013830 <rintf+0x60>
 8013876:	ee30 0a00 	vadd.f32	s0, s0, s0
 801387a:	e7d9      	b.n	8013830 <rintf+0x60>
 801387c:	08013e34 	.word	0x08013e34
 8013880:	007fffff 	.word	0x007fffff

08013884 <scalbnf>:
 8013884:	b508      	push	{r3, lr}
 8013886:	ee10 2a10 	vmov	r2, s0
 801388a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801388e:	ed2d 8b02 	vpush	{d8}
 8013892:	eef0 0a40 	vmov.f32	s1, s0
 8013896:	d004      	beq.n	80138a2 <scalbnf+0x1e>
 8013898:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801389c:	d306      	bcc.n	80138ac <scalbnf+0x28>
 801389e:	ee70 0a00 	vadd.f32	s1, s0, s0
 80138a2:	ecbd 8b02 	vpop	{d8}
 80138a6:	eeb0 0a60 	vmov.f32	s0, s1
 80138aa:	bd08      	pop	{r3, pc}
 80138ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80138b0:	d21c      	bcs.n	80138ec <scalbnf+0x68>
 80138b2:	4b1f      	ldr	r3, [pc, #124]	; (8013930 <scalbnf+0xac>)
 80138b4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013934 <scalbnf+0xb0>
 80138b8:	4298      	cmp	r0, r3
 80138ba:	ee60 0a27 	vmul.f32	s1, s0, s15
 80138be:	db10      	blt.n	80138e2 <scalbnf+0x5e>
 80138c0:	ee10 2a90 	vmov	r2, s1
 80138c4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80138c8:	3b19      	subs	r3, #25
 80138ca:	4403      	add	r3, r0
 80138cc:	2bfe      	cmp	r3, #254	; 0xfe
 80138ce:	dd0f      	ble.n	80138f0 <scalbnf+0x6c>
 80138d0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8013938 <scalbnf+0xb4>
 80138d4:	eeb0 0a48 	vmov.f32	s0, s16
 80138d8:	f000 f834 	bl	8013944 <copysignf>
 80138dc:	ee60 0a08 	vmul.f32	s1, s0, s16
 80138e0:	e7df      	b.n	80138a2 <scalbnf+0x1e>
 80138e2:	eddf 7a16 	vldr	s15, [pc, #88]	; 801393c <scalbnf+0xb8>
 80138e6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80138ea:	e7da      	b.n	80138a2 <scalbnf+0x1e>
 80138ec:	0ddb      	lsrs	r3, r3, #23
 80138ee:	e7ec      	b.n	80138ca <scalbnf+0x46>
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	dd06      	ble.n	8013902 <scalbnf+0x7e>
 80138f4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80138f8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80138fc:	ee00 3a90 	vmov	s1, r3
 8013900:	e7cf      	b.n	80138a2 <scalbnf+0x1e>
 8013902:	f113 0f16 	cmn.w	r3, #22
 8013906:	da06      	bge.n	8013916 <scalbnf+0x92>
 8013908:	f24c 3350 	movw	r3, #50000	; 0xc350
 801390c:	4298      	cmp	r0, r3
 801390e:	dcdf      	bgt.n	80138d0 <scalbnf+0x4c>
 8013910:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801393c <scalbnf+0xb8>
 8013914:	e7de      	b.n	80138d4 <scalbnf+0x50>
 8013916:	3319      	adds	r3, #25
 8013918:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801391c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8013920:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013940 <scalbnf+0xbc>
 8013924:	ee07 3a10 	vmov	s14, r3
 8013928:	ee67 0a27 	vmul.f32	s1, s14, s15
 801392c:	e7b9      	b.n	80138a2 <scalbnf+0x1e>
 801392e:	bf00      	nop
 8013930:	ffff3cb0 	.word	0xffff3cb0
 8013934:	4c000000 	.word	0x4c000000
 8013938:	7149f2ca 	.word	0x7149f2ca
 801393c:	0da24260 	.word	0x0da24260
 8013940:	33000000 	.word	0x33000000

08013944 <copysignf>:
 8013944:	ee10 3a10 	vmov	r3, s0
 8013948:	ee10 2a90 	vmov	r2, s1
 801394c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013950:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8013954:	4313      	orrs	r3, r2
 8013956:	ee00 3a10 	vmov	s0, r3
 801395a:	4770      	bx	lr

0801395c <_init>:
 801395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801395e:	bf00      	nop
 8013960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013962:	bc08      	pop	{r3}
 8013964:	469e      	mov	lr, r3
 8013966:	4770      	bx	lr

08013968 <_fini>:
 8013968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801396a:	bf00      	nop
 801396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801396e:	bc08      	pop	{r3}
 8013970:	469e      	mov	lr, r3
 8013972:	4770      	bx	lr
